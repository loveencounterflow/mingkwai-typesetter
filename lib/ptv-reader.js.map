{
  "version": 3,
  "file": "ptv-reader.js",
  "sourceRoot": "..",
  "sources": [
    "src/ptv-reader.coffee"
  ],
  "names": [],
  "mappings": ";AACA;EAAA;AAAA,MAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,SAAA,EAAA,GAAA;;;EAGA,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,GAAA,GAA4B,CAAE,OAAA,CAAQ,MAAR,CAAF,CAAkB,CAAC;;EAC/C,SAAA,GAA4B,OAAA,CAAQ,WAAR,EAN5B;;;EAUA,IAAC,CAAA,UAAD,GAAc,QAAA,CAAE,IAAF,CAAA;AAEZ,QAAA,CAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA;;IAAA,IAAG,8DAAH;MACE,CAAE,CAAF,EAAK,IAAL,EAAW,IAAX,CAAA,GAAqB;MACrB,KAAA,GAAQ,GAFV;KAAA,MAGK,IAAG,CAAE,KAAA,GAAQ,IAAI,CAAC,IAAL,CAAA,CAAW,CAAC,KAAZ,CAAkB,6BAAlB,CAAV,CAAH;MACH,CAAE,CAAF,EAAK,IAAL,EAAW,IAAX,EAAiB,KAAjB,CAAA,GAA4B,MADzB;KAAA,MAAA;MAGH,MAAM,IAAI,KAAJ,CAAU,CAAA,sBAAA,CAAA,CAAyB,GAAA,CAAI,IAAJ,CAAzB,CAAA,CAAV,EAHH;;AAIL,WAAO,CAAE,IAAF,EAAQ,IAAR,EAAc,KAAd;EATK,EAVd;;;EAsBA,IAAC,CAAA,OAAD,GAAW,QAAA,CAAE,IAAF,EAAQ,MAAR,CAAA;AACT,WAAO,IAAI,CAAC,OAAL,CAAa,cAAb,EAA6B,QAAA,CAAE,EAAF,EAAM,EAAN,EAAU,QAAV,EAAoB,KAApB,CAAA;AAClC,UAAA;MAAA,IAAa,CAAE,QAAA,GAAW,CAAb,CAAA,IAAqB,CAAE,KAAO,CAAA,QAAA,GAAW,CAAX,CAAP,KAAyB,IAA3B,CAAlC;AAAA,eAAO,GAAP;;MACA,IAA2C,CAAE,CAAA,GAAI,MAAQ,CAAA,EAAA,CAAd,CAAA,KAAwB,MAAnE;QAAA,MAAM,IAAI,KAAJ,CAAU,CAAA,YAAA,CAAA,CAAe,GAAA,CAAI,EAAJ,CAAf,CAAA,CAAV,EAAN;;AACA,aAAO,CAAC,CAAC;IAHyB,CAA7B;EADE,EAtBX;;;EA6BA,IAAC,CAAA,eAAD,GAAmB,QAAA,CAAA,GAAE,KAAF,CAAA;AACjB,QAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA;IAAA,CAAA,GAAI,CAAA;IAC2B,KAAA,uCAAA;;MAA/B,IAAC,CAAA,qBAAD,CAAuB,IAAvB,EAA6B,CAA7B;IAA+B;AAC/B,WAAO;EAHU,EA7BnB;;;EAmCA,IAAC,CAAA,qBAAD,GAAyB,QAAA,CAAE,IAAF,EAAQ,CAAR,CAAA;AACvB,WAAO,IAAC,CAAA,qBAAD,CAAyB,EAAE,CAAC,YAAH,CAAgB,IAAhB,EAAsB;MAAA,QAAA,EAAU;IAAV,CAAtB,CAAzB,EAAoE,CAApE;EADgB,EAnCzB;;;EAuCA,IAAC,CAAA,qBAAD,GAAyB,QAAA,CAAE,IAAF,EAAQ,CAAR,CAAA;AACvB,QAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA;AAAA;IAAA,KAAA,qCAAA;;MACE,IAAY,6BAAZ;AAAA,iBAAA;;MACA,IAAY,6BAAZ;AAAA,iBAAA;;MACA,CAAA,CAAE,IAAF,EAAQ,IAAR,EAAc,KAAd,CAAA,GAA0B,IAAC,CAAA,UAAD,CAAY,IAAZ,CAA1B;MACA,KAAA,GAA0B,IAAC,CAAA,OAAD,CAAS,KAAT,EAAgB,CAAhB;MAC1B,CAAG,CAAA,IAAA,CAAH,GAA0B,CAAE,IAAF,EAAQ,KAAR;IAL5B;AAMA,WAAO;EAPgB,EAvCzB;;;EAiDA,IAAC,CAAA,WAAD,GAAe,QAAA,CAAE,CAAF,CAAA;AAEb,QAAA,GAAA,EAAA,IAAA,EAAA,KAAA;;IAAA,KAAA,QAAA;OAAS,CAAE,IAAF,EAAQ,KAAR;AACP,cAAO,IAAP;AAAA,aACO,MADP;UACyB,CAAG,CAAA,GAAA,CAAH,GAAW;AAA7B;AADP,aAEO,SAFP;UAEyB,CAAG,CAAA,GAAA,CAAH,GAAW,CAAO,KAAA,KAAS,MAAd,GAA4B,IAA5B,GAAsC,KAAxC;AAA7B;AAFP,aAGO,SAHP;UAGyB,CAAG,CAAA,GAAA,CAAH,GAAW,QAAA,CAAS,KAAT,EAAgB,EAAhB;AAA7B;AAHP,aAIO,OAJP;UAIyB,CAAG,CAAA,GAAA,CAAH,GAAW,UAAA,CAAW,KAAX;AAA7B;AAJP;UAKO,MAAM,IAAI,KAAJ,CAAU,CAAA,aAAA,CAAA,CAAgB,GAAA,CAAI,IAAJ,CAAhB,CAAA,CAAV;AALb;IADF;AAOA,WAAO;EATM,EAjDf;;;EA6DA,IAAC,CAAA,qBAAD,GAAyB,QAAA,CAAE,CAAF,CAAA;AACvB,WAAO,IAAI,CAAC,SAAL,CAAe,CAAf;EADgB,EA7DzB;;;EAiEA,IAAC,CAAA,uBAAD,GAA2B,QAAA,CAAE,CAAF,CAAA;AACzB,QAAA,CAAA,EAAA,KAAA,EAAA;IAAA,CAAA,GAAI,CAAA;IACmB,KAAA,QAAA;;MAAvB,CAAG,CAAA,GAAA,CAAH,GAAW,KAAK,CAAC;IAAM;AACvB,WAAO,IAAI,CAAC,SAAL,CAAe,CAAf;EAHkB,EAjE3B;;;EAuEA,IAAC,CAAA,KAAD,GAAS,QAAA,CAAE,MAAF,EAAU,OAAV,EAAmB,QAAnB,CAAA;AACP,QAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA;IAAA,CAAA,GAAU;IACV,OAAA,GAAU,IAAI,SAAS,CAAC,SAAd,CAAwB,OAAxB,EAAiC,QAAjC;AACV;;AAAyB;MAAA,KAAA,aAAA;;YAA8B,OAAO,CAAC,KAAR,CAAc,GAAd;uBAA9C,CAAE,GAAF,EAAO,KAAP;;MAAgB,CAAA;;;EAHlB,EAvET;;;EA8EA,IAAO,qBAAP;IACE,GAAA,GAAQ,OAAO,CAAC;IAChB,IAAA,GAAQ;IACR,GAAA,CAAI,OAAJ,EAAa,IAAI,CAAC,OAAL,CAAa,wBAAb,EAAuC,CAAA,CAAvC,CAAb;IACA,GAAA,CAAI,OAAJ,EAAa,IAAI,CAAC,OAAL,CAAa,sBAAb,EAAqC;MAAE,MAAA,EAAQ;QAAA,KAAA,EAAO;MAAP;IAAV,CAArC,CAAb;IACA,GAAA,CAAI,OAAJ,EAAa,IAAI,CAAC,eAAL,CAAqB,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,kBAArB,CAArB,CAAb,EALF;;AA9EA",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nFS                        = require 'fs'\nPATH                      = require 'path'\nrpr                       = ( require 'util' ).inspect\nminimatch                 = require 'minimatch'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@split_line = ( line ) ->\n  ### TAINT should check that type looks like `::...=` ###\n  if ( match = line.trim().match /^(\\S+)\\s+::([^=]+)=\\s*$/ )?\n    [ _, path, type, ] = match\n    value = ''\n  else if ( match = line.trim().match /^(\\S+)\\s+::([^=]+)=\\s+(.*)$/ )\n    [ _, path, type, value, ] = match\n  else\n    throw new Error \"not a legal PTV line: #{rpr line}\"\n  return { path, type, value, }\n\n#-----------------------------------------------------------------------------------------------------------\n@resolve = ( text, values ) ->\n  return text.replace /\\$\\{([^}]+)}/, ( $0, $1, position, input ) ->\n    return $0 if ( position > 0 ) and ( input[ position - 1 ] is '\\\\' )\n    throw new Error \"unknown key #{rpr $1}\" if ( R = values[ $1 ] ) is undefined\n    return R.value\n\n#-----------------------------------------------------------------------------------------------------------\n@hash_from_paths = ( paths... ) ->\n  R = {}\n  @update_hash_from_path path, R for path in paths\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@update_hash_from_path = ( path, R ) ->\n  return @update_hash_from_text ( FS.readFileSync path, encoding: 'utf-8' ), R\n\n#-----------------------------------------------------------------------------------------------------------\n@update_hash_from_text = ( text, R ) ->\n  for line in ( text.split '\\n' )\n    continue if ( line.match /^\\s*$/ )?\n    continue if ( line.match /^\\s*#/ )?\n    { path, type, value, }  = @split_line line\n    value                   = @resolve value, R\n    R[ path ]               = { type, value, }\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@cast_values = ( R ) ->\n  ### TAINT does not validate literals ###\n  for key, { type, value, } of R\n    switch type\n      when 'text'       then R[ key ] = value\n      when 'boolean'    then R[ key ] = ( if ( value is 'true' ) then true else false )\n      when 'integer'    then R[ key ] = parseInt value, 10\n      when 'float'      then R[ key ] = parseFloat value\n      else throw new Error \"unknown type #{rpr type}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@options_as_facet_json = ( x ) ->\n  return JSON.stringify x\n\n#-----------------------------------------------------------------------------------------------------------\n@options_as_untyped_json = ( x ) ->\n  R = {}\n  R[ key ] = facet.value for key, facet of x\n  return JSON.stringify R\n\n#-----------------------------------------------------------------------------------------------------------\n@match = ( facets, pattern, settings ) ->\n  R       = []\n  matcher = new minimatch.Minimatch pattern, settings\n  return ( [ key, value, ] for key, value of facets when matcher.match key )\n\n\n############################################################################################################\nunless module.parent?\n  log   = console.log\n  PTVR  = @\n  log '42992', PTVR.resolve 'before\\\\${middle}after', {}\n  log '42992', PTVR.resolve 'before${middle}after', { middle: value: '---something---' }\n  log '42992', PTVR.hash_from_paths PATH.join __dirname, '../intershop.ptv'\n\n\n\n\n\n"
  ]
}