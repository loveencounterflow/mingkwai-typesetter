{
  "version": 3,
  "file": "tex-writer-columns.js",
  "sourceRoot": "..",
  "sources": [
    "src/tex-writer-columns.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MK/TS/TEX-WRITER/COLUMNS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\n#...........................................................................................................\nD                         = require 'pipedreams'\n{ $, $async, }            = D\n#...........................................................................................................\nMKTS                      = require './main'\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nunstamp                   = MD_READER.unstamp.bind     MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\n# hide                      = MK.TS.MD_READER.hide.bind        MK.TS.MD_READER\n# copy                      = MK.TS.MD_READER.copy.bind        MK.TS.MD_READER\n# stamp                     = MK.TS.MD_READER.stamp.bind       MK.TS.MD_READER\n# unstamp                   = MK.TS.MD_READER.unstamp.bind     MK.TS.MD_READER\n# select                    = MK.TS.MD_READER.select.bind      MK.TS.MD_READER\n# is_hidden                 = MK.TS.MD_READER.is_hidden.bind   MK.TS.MD_READER\n# is_stamped                = MK.TS.MD_READER.is_stamped.bind  MK.TS.MD_READER\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$main = ( S ) ->\n  #.........................................................................................................\n  return D.TEE.from_pipeline [\n    # D.$observe ( event ) -> help '99871', ( CND.blue rpr event[ 0 ] + event[ 1 ] )\n    @$initialize_state          S\n    @$end_columns_with_document S\n    @$region_slash              S\n    @$command_slash             S\n    @$columns                   S\n    @$transform_to_pretex       S\n    # @$transform_pretex_to_tex   S\n    ]\n\n#===========================================================================================================\n# STREAM TRANSFORMS\n#-----------------------------------------------------------------------------------------------------------\n@$initialize_state = ( S ) ->\n  sandbox   = {}\n  is_first  = yes\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '~', 'change'\n      [ _, _, changeset, _, ] = event\n      sandbox                 = MK.TS.DIFFPATCH.patch changeset, sandbox\n      send event\n    #.......................................................................................................\n    else if is_first and select event, '~', 'flush'\n      is_first        = no\n      [ ..., meta, ]  = event\n      sandbox_backup  = MK.TS.DIFFPATCH.snapshot sandbox\n      throw new Error \"namespace collision: `S.sandbox.COLUMNS` already defined\" if sandbox.COLUMNS?\n      @_set_sandbox_COLUMNS sandbox\n      changeset = MKTS.DIFFPATCH.diff sandbox_backup, sandbox\n      send [ '~', 'change', changeset, ( copy meta ), ] if changeset.length > 0\n      send event\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_set_sandbox_COLUMNS = ( sandbox ) ->\n  sandbox.COLUMNS =\n    count: 2 # default number of columns in document **when using multiple columns**\n    stack: [ @_new_setting(), ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$end_columns_with_document = ( S ) ->\n  finished = false\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if ( select event, ')', 'document' ) or ( select event, '~', 'stop' )\n      unless finished\n        [ ..., meta, ]  = event\n        send [ '!', 'columns', [ 1, ], ( copy meta, 'multi-columns': 'omit-open', ), ]\n      send event\n      finished = true\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$region_slash = ( S ) ->\n  track         = MD_READER.TRACKER.new_tracker '(slash)'\n  event_buffer  = null\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_slash = track.within '(slash)'\n    track event\n    #.......................................................................................................\n    if select event, '(', 'slash'\n      send stamp event\n      event_buffer = []\n    #.......................................................................................................\n    else if select event, ')', 'slash'\n      [ ..., meta, ] = event\n      send stamp copy event\n      send [ '!', 'slash', event_buffer, ( copy meta ), ]\n      event_buffer = null\n    #.......................................................................................................\n    else if within_slash\n      event_buffer.push event\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$command_slash = ( S ) ->\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '!', 'slash'\n      [ type, name, parameters, meta, ] = event\n      send stamp hide copy event\n      #.....................................................................................................\n      # send [ '!', 'columns', [ 'push', ], ( copy meta ), ]\n      send [ '!', 'columns', [ 1, ], ( copy meta ), ]\n      #.....................................................................................................\n      if CND.isa_list parameters\n        for x in parameters\n          ### TAINT should formally check for `event`ness of value ###\n          if CND.isa_list x\n            send x\n          else\n            send [ '.', 'warning', \"ignoring argument to <<!slash>>: #{rpr x}\", ( copy meta ), ]\n      else if CND.isa_pod parameters\n        { above, mid, below, } = parameters\n        # send [ 'tex', \"%TEX-WRITER/COLUMNS/$command_slash\\n\", ]\n        # send [ 'tex', \"\\\\gdef\\\\mktsNextVspaceCount{#{above}}%TEX-WRITER/COLUMNS/$command_slash\\n\", ]\n        # send [ 'tex', \"\\\\mktsVspace{1}%TEX-WRITER/COLUMNS/$command_slash\\n\", ]\n        if mid?\n          send sub_event for sub_event in mid\n        # send [ 'tex', \"\\\\gdef\\\\mktsNextVspaceCount{#{below}}%TEX-WRITER/COLUMNS/$command_slash\\n\", ]\n        # send [ 'tex', \"\\\\mktsVspace{1}%TEX-WRITER/COLUMNS/$command_slash\\n\", ]\n      else if parameters?\n        send [ '.', 'warning', \"ignoring argument to <<!slash>>: #{rpr parameters}\", ( copy meta ), ]\n      #.....................................................................................................\n      send [ '!', 'columns', [  'pop', ], ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$columns = ( S ) ->\n  # remark  = MK.TS.MD_READER._get_remark()\n  sandbox = {}\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '~', 'change'\n      [ _, _, changeset, _, ] = event\n      sandbox                 = MK.TS.DIFFPATCH.patch changeset, sandbox\n      send event\n      return null\n    #.......................................................................................................\n    if select event, '(', 'columns'\n      [ type, name, parameters, meta, ] = event\n      event = [ '!', name, parameters, meta, ]\n    else if select event, ')', 'columns'\n      [ type, name, _, meta, ] = event\n      event = [ '!', name, [ 'pop', ], meta, ]\n    #.......................................................................................................\n    if select event, '!', 'columns'\n      [ type, name, parameters, meta, ] = event\n      parameters.push sandbox.COLUMNS.count if parameters.length is 0\n      [ parameter, ] = parameters\n      switch type = CND.type_of parameter\n        #...................................................................................................\n        when 'text'\n          switch parameter\n            when 'pop'\n              send stamp hide copy event\n              @_restore_column_count sandbox, event, send\n            else\n              send stamp hide copy event\n              message = \"unknown text argument #{rpr parameter}\"\n              send [ '.', 'warning', message, ( copy meta ), ]\n        #...................................................................................................\n        when 'number'\n          unless ( parameter > 0 ) and ( ( Math.floor parameter ) is parameter )\n            send stamp hide copy event\n            message = \"expected non-zero positive integer, got #{rpr parameter}\"\n            return send [ '.', 'warning', message, ( copy meta ), ]\n          send stamp hide copy event\n          @_change_column_count sandbox, event, send, parameter\n        #...................................................................................................\n        else\n          send stamp hide copy event\n          message = \"expected a text or a number, got a #{parameter_type}\"\n          send [ '.', 'warning', message, ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\n@_new_setting = ( P... ) ->\n  R =\n    count: 1 # number of columns at current point\n  return Object.assign R, P...\n\n#-----------------------------------------------------------------------------------------------------------\n@_push              = ( sandbox, setting ) -> sandbox.COLUMNS.stack.push setting\n@_pop               = ( sandbox )          -> sandbox.COLUMNS.stack.pop()\n@_get_column_count  = ( sandbox )          -> sandbox.COLUMNS.stack[ @_get_stack_idx sandbox ][ 'count' ]\n@_get_stack_idx     = ( sandbox )          -> sandbox.COLUMNS.stack.length - 1\n\n#-----------------------------------------------------------------------------------------------------------\n@_change_column_count = ( sandbox, event, send, column_count ) ->\n  ### TAINT hotfix ###\n  @_set_sandbox_COLUMNS sandbox unless sandbox.COLUMNS?\n  @_stop_column_region  sandbox, event, send\n  @_start_column_region sandbox, event, send, column_count\n\n#-----------------------------------------------------------------------------------------------------------\n@_restore_column_count = ( sandbox, event, send ) ->\n  ### TAINT hotfix ###\n  @_set_sandbox_COLUMNS sandbox unless sandbox.COLUMNS?\n  @_stop_column_region  sandbox, event, send\n  @_pop sandbox\n  column_count = @_get_column_count sandbox\n  @_start_column_region sandbox, event, send, column_count\n\n#-----------------------------------------------------------------------------------------------------------\n@_start_column_region = ( sandbox, event, send, column_count ) ->\n  # send stamp hide copy event\n  @_push sandbox, @_new_setting { count: column_count, }\n  # debug '©66343', event, column_count\n  # debug '©66343', S.sandbox.COLUMNS.stack\n  # if column_count isnt 1\n  [ ..., meta, ]  = event\n  ### TAINT this event should be namespaced and handled only right before output ###\n  unless meta[ 'multi-columns' ] is 'omit-open'\n    send [ '(', 'multi-columns', [ column_count, ], ( copy meta ), ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_stop_column_region = ( sandbox, event, send ) ->\n  ### No-op in case we're in base ('ambient', 'document') state ###\n  # urge '77262', sandbox.sandbox.COLUMNS.stack\n  # send stamp hide copy event\n  return if ( @_get_stack_idx sandbox ) is 0\n  column_count    = @_get_column_count sandbox\n  # last_state      = @_pop sandbox\n  ### No-op in case we're already in single-column state ###\n  # return if column_count is 1\n  [ ..., meta, ]  = event\n  ### TAINT this event should be namespaced and handled only right before output ###\n  # debug '928772', [ ')', 'multi-columns', [ column_count, ], ( copy meta ), ]\n  send [ ')', 'multi-columns', [ column_count, ], ( copy meta ), ]\n\n\n#===========================================================================================================\n# TRANSFORM TO TEX\n#-----------------------------------------------------------------------------------------------------------\n@$transform_to_pretex = ( S ) ->\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, name, parameters, meta, ] = event\n    #.......................................................................................................\n    if select event, '(', 'multi-columns'\n      send hide stamp event\n      [ column_count, ] = parameters\n      if column_count > 1\n        send stamp [ '(', 'COLUMNS/group', null, ( copy meta, tex: 'pass-through', ), ]\n        # send stamp [ '.', 'COLUMNS/tex', \"\\\\mktsVspace{1}%TEX-WRITER/COLUMNS/$transform-to-tex\\n\", ( copy meta, tex: 'pass-through', ), ]\n        ### TAINT Here the layout design decision to separate multicols from surrounding paragraphs by\n        one blank line gets hardwired into the produced TeX code: ###\n        # send stamp [ '.', 'COLUMNS/tex', \"\\\\mktsVspace{1}\\\\begin{multicols}{#{column_count}}\\\\raggedcolumns{}\", ( copy meta, tex: 'pass-through', ), ]\n        ### TAINT ... and some time later we decide to throw it out again: ###\n        send stamp [ '.', 'COLUMNS/tex', \"\\\\begin{multicols}{#{column_count}}\\\\raggedcolumns{}\", ( copy meta, tex: 'pass-through', ), ]\n    #.......................................................................................................\n    else if select event, ')', 'multi-columns'\n      # send stamp event\n      [ column_count, ] = parameters\n      if column_count > 1\n        send stamp [ '.', 'COLUMNS/tex', \"\\\\end{multicols}\\n\\n\", ( copy meta, tex: 'pass-through', ), ]\n        send stamp [ ')', 'COLUMNS/group', null, ( copy meta, tex: 'pass-through', ), ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$XXX_transform_pretex_to_tex = ( S ) ->\n  buffer          = []\n  within_group    = no\n  all_whitespace  = yes\n  ws_pattern      = /// ^ [ \\x20 \\t \\n ]* $ ///\n  # remark          = MK.TS.MD_READER._get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    # urge '99876', event\n    if CND.isa_text event\n      type  = null\n      name  = null\n      text  = event\n      meta  = null\n    else\n      [ type, name, text, meta, ] = event\n    #.......................................................................................................\n    if select event, '(', 'COLUMNS/group'\n      # help '975', ( JSON.stringify event )[ .. 50 ]\n      within_group = yes\n    #.......................................................................................................\n    else if select event, ')', 'COLUMNS/group'\n      # warn '975', ( JSON.stringify event )[ .. 50 ]\n      if all_whitespace\n        whisper \"ignoring multicols b/c group only contains whitespace\"\n        ### remark not possible at this stage ###\n        # send remark 'drop', \"multicols b/c group only contains whitespace\", ( copy meta )\n      else\n        send sub_text for sub_text in buffer\n      ### TAINT code duplication with the above ###\n      buffer.length   = 0\n      within_group    = no\n      all_whitespace  = yes\n    #.......................................................................................................\n    else if select event, '.', 'COLUMNS/tex'\n      # urge '975', ( JSON.stringify event )[ .. 50 ]\n      buffer.push text\n      # send text\n    #.......................................................................................................\n    else\n      if within_group\n        all_whitespace = all_whitespace and ws_pattern.test text\n        buffer.push text\n        # debug '975', event if text is undefined\n        # whisper '975', all_whitespace, rpr text\n      else\n        # info '975', ( JSON.stringify event )[ .. 50 ]\n        send event\n    #.......................................................................................................\n    return null\n\n\n\n\n\n"
  ]
}