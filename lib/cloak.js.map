{
  "version": 3,
  "file": "cloak.js",
  "sourceRoot": "..",
  "sources": [
    "src/cloak.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\"use strict\"\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'CLOAK'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\nrainbow                   = CND.rainbow.bind CND\n\n###\n\nCloaking characters by chained replacements:\n\nAssuming an alphabet `/[0-9]/`, cloaking characters starting from `0`.\n\nTo cloak only `0`, we have to free the string of all occurrences of that\ncharacter. In order to do so, we choose a primary escapement character, '1',\nand a secondary escapement character, conveniently also `1`. With those, we\ncan replace all occurrences of `0` as `11`. However, that alone would produce\nambiguous sequences. For example,  the string `011` results in `1111`, but so\ndoes the string `1111` itself (because it does not contain a `0`, it remains\nunchanged when replacing `0`). Therefore, we have to escape the  secondary\nescapement character itself, too; we choose the secondary replacement `1 ->\n12`  which has to come *first* when cloaking and *second* when uncloaking.\nThis results in the following cloaking chain:\n\nCLOAK.new '012'\n\n         0123456789\n1 -> 12: 01223456789\n0 -> 11: 111223456789\n\nThe resulting string is free of `0`s. Because all original `0`s and `1`s have\nbeen preserved in disguise, we are now free to insert additional data into the\nstring.\n\nLet's assume we have a text transformer `f`, say, `f ( x ) -> x.replace\n/456/g, '15'`, and a more comprehensive text transformer `g` which includes\ncalls to `f` and other elementary transforms. Now, we would like to apply `g`\nto our text `0123456789`, but specifically omit the transformation performed\nby `f` (which would turn `0123456789` into `012315789`). We can do so by\nchoosing a cloaking character—`0` in this example—and one or more signal\ncharacters that will pass unmodified through `g`. Assuming we cloak `456` as\n`01`, we first escape `0123456789` to `111223456789` so that all `0`s are\nremoved. Then, we symbolize all occurrances of `456` as `01`, leading to\n`11122301789`. This string may be fed to `g` and will pass through `f`\nuntouched. We can then reverse our steps: `11122301789` ... `111223456789` ...\n`01223456789` ... `0123456789`—which is indeed the string we're started with.\nOf course, this could not have worked if `g` had somehow transformed any of\nour cloaking devices; therefore, it is important to choose codepoints that are\ncertain to be transparent to the intended text transformation.\n\nIn case more primary escapement characters are needed, the chain may be\nexpanded to include more replacement steps. In particular, it is interesting\nto use exactly two primary escapements; that way, we can define cloaked\nsequences of arbitrary lengths, using the two escapements—`0` and `1` in this\nexample—as start and stop brackets:\n\nCLOAK.new '01234'\n\n         0123456789\n2 -> 24: 01243456789\n1 -> 23: 023243456789\n0 -> 22: 2223243456789\n\nUsing more than two primary escapements is possible:\n\nCLOAK.new '0123456'\n\n         0123456789\n3 -> 36: 01236456789\n2 -> 35: 013536456789\n1 -> 34: 0343536456789\n0 -> 33: 33343536456789\n\nCLOAK.new '012345678'\n\n         0123456789\n4 -> 48: 01234856789\n3 -> 47: 012474856789\n2 -> 46: 0146474856789\n1 -> 45: 04546474856789\n0 -> 44: 444546474856789\n\n\n###\n\n#-----------------------------------------------------------------------------------------------------------\n### from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions ###\nesc_re = ( text ) -> text.replace /[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"\n\n#-----------------------------------------------------------------------------------------------------------\n@new = ( chrs ) ->\n  #.........................................................................................................\n  unless chrs?\n    chrs = [ '\\x10', '\\x11', '\\x12', '\\x13', '\\x14', ]\n  #.........................................................................................................\n  else if CND.isa_text chrs\n    chrs = Array.from chrs\n  #.........................................................................................................\n  else unless CND.isa_list chrs\n    throw new Error \"expected a text or a list, got a #{CND.type_of chrs}\"\n  #.........................................................................................................\n  unless ( chr_count = chrs.length ) >= 3\n    throw new Error \"expected at least 3 characters, got #{chr_count}\"\n  #.........................................................................................................\n  if chr_count % 2 is 0\n    throw new Error \"expected an odd number of characters, got #{chr_count}\"\n  #.........................................................................................................\n  delta               = ( chr_count + 1 ) / 2 - 1\n  master              = chrs[ chr_count - delta - 1 ]\n  meta_chr_patterns   = ( /// #{esc_re chrs[ idx ]} ///g            for idx in [ 0 .. delta ] )\n  target_seq_chrs     = ( \"#{master}#{chrs[ idx + delta ]}\"         for idx in [ 0 .. delta ] )\n  target_seq_patterns = ( /// #{esc_re target_seq_chrs[ idx ]} ///g for idx in [ 0 .. delta ] )\n  cloaked             = chrs[ 0 ... delta ]\n  #---------------------------------------------------------------------------------------------------------\n  hide = ( text ) =>\n    R_ = text\n    R_ = R_.replace meta_chr_patterns[ idx ], target_seq_chrs[ idx ] for idx in [ delta .. 0 ] by -1\n    return R_\n  #.........................................................................................................\n  reveal = ( text ) =>\n    R_ = text\n    R_ = R_.replace target_seq_patterns[ idx ], chrs[ idx ] for idx in [ 0 .. delta ]\n    return R_\n  #---------------------------------------------------------------------------------------------------------\n  R = { '~isa': 'CLOAK/cloak', hide, reveal, cloaked, master, }\n  @_mixin_backslashed R\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_mixin_backslashed = ( cloak ) ->\n  { cloaked } = cloak\n  if cloaked.length < 2 then    start_chr = stop_chr    = cloaked[ 0 ]\n  else                        [ start_chr,  stop_chr, ] = cloaked\n  base = 10\n  ### `oc`: 'original character' ###\n  _oc_backslash      = '\\\\'\n  ### `op`: 'original pattern' ###\n  _oce_backslash     = esc_re _oc_backslash\n  _mcp_backslash     = ///\n    #{esc_re _oc_backslash}\n    ( (?: [  \\ud800-\\udbff ] [ \\udc00-\\udfff ] ) | . ) ///g\n  _tsp_backslash     = /// #{esc_re start_chr} ( [ 0-9 a-z ]+ ) #{esc_re stop_chr} ///g\n  ### `rm`: 'remove' ###\n  _rm_backslash      = /// #{esc_re _oc_backslash} ( . ) ///g\n  #---------------------------------------------------------------------------------------------------------\n  hide = ( text ) =>\n    R = text\n    R = R.replace _mcp_backslash, ( _, $1 ) ->\n      cid_hex = ( $1.codePointAt 0 ).toString base\n      return \"#{start_chr}#{cid_hex}#{stop_chr}\"\n    return R\n  #.........................................................................................................\n  reveal = ( text ) =>\n    R = text\n    R = R.replace _tsp_backslash, ( _, $1 ) ->\n      chr = String.fromCodePoint parseInt $1, base\n      return \"#{_oc_backslash}#{chr}\"\n    return R\n  #.........................................................................................................\n  remove = ( text ) =>\n    return text.replace _rm_backslash, '$1'\n  #---------------------------------------------------------------------------------------------------------\n  cloak[ 'backslashed' ] = { hide, reveal, remove, }\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  CLOAK           = @\n  DIFF            = require 'coffeenode-diff'\n  cloak           = CLOAK.new '()LTX'\n  cloak           = CLOAK.new '*+?^$'\n  help cloak\n\n  text = \"\"\"\n    % & ! ;\n    some <<unlicensed>> (stuff here). \\\\𠄨 *20128+? &%!%A&123;\n    some more \\\\\\\\<<unlicensed\\\\\\\\>> (stuff here).\n    some \\\\<<licensed\\\\>> stuff here, and <\\\\<\n    The <<<\\\\LaTeX{}>>> Logo: `<<<\\\\LaTeX{}>>>`\n    \"\"\"\n  # debug '©94643', @_mcp_backslash\n  # text = \"% ; 2 3 \\\\ \\\\\\\\ \\\\𠄨\"\n  # text = \"0 1 2 3 4 5 6 7 8\"\n  # text = \"<<\"\n  log '(1) -', CND.rainbow ( text )\n  cloaked_text = text\n  log '(2) -', CND.rainbow ( cloaked_text   = cloak.hide cloaked_text )\n  log '(3) -', CND.rainbow ( cloaked_text   = cloak.backslashed.hide    cloaked_text )\n  uncloaked_text = cloaked_text\n  log '(4) -', CND.rainbow ( uncloaked_text = cloak.backslashed.reveal  uncloaked_text )\n  log '(5) -', CND.rainbow ( uncloaked_text = cloak.reveal uncloaked_text )\n  log '(7) -', CND.rainbow '©79011', cloak.backslashed.remove           uncloaked_text\n  if uncloaked_text isnt text\n    log DIFF.colorize text, uncloaked_text\n\n  log CND.steel '########################################################################'\n"
  ]
}