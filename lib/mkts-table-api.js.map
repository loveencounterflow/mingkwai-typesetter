{
  "version": 3,
  "file": "mkts-table-api.js",
  "sourceRoot": "..",
  "sources": [
    "src/mkts-table-api.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/TABLE/API'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nMKTS                      = require './main'\nMKTS_TABLE                = require './mkts-table'\n#...........................................................................................................\njr                        = JSON.stringify\nIG                        = require 'intergrid'\n# UNITS                     = require './mkts-table-units'\n\n\n\n#===========================================================================================================\n# PUBLIC API\n#-----------------------------------------------------------------------------------------------------------\n@create_layout = ( S, meta, id ) ->\n  R       = MKTS_TABLE._new_description S\n  R.meta  = meta\n  R.name  = id\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@set_grid = ( me, size ) ->\n  if me.grid?\n    return _record_fail me, 'µ5689', \"unable to re-define grid\"\n  switch size.type\n    when 'cellkey'\n      me.grid = IG.GRID.new_grid_from_cellkey size.value\n    else\n      throw _stackerr me, 'µ4613', \"unknown type for grid size #{rpr size}\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@set_debug = ( me, toggle ) ->\n  switch toggle\n    when true   then me.debug = true\n    when false  then me.debug = false\n    else throw new Error \"(MKTS/TABLE µ1343) expected `true` or `false` for mkts-table/debug, got #{rpr toggle}\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@create_field = ( me, id, selector ) ->\n  switch selector.type\n    when 'cellkey'\n      rangekey    = \"#{selector.value}..#{selector.value}\"\n    when 'rangekey'\n      first       = selector.first\n      second      = selector.second\n      throw new Error \"(MKTS/TABLE µ1344) expected a cellkey, got a #{rpr first.type}\"  unless first.type is 'cellkey'\n      throw new Error \"(MKTS/TABLE µ1345) expected a cellkey, got a #{rpr second.type}\" unless second.type is 'cellkey'\n      rangekey    = \"#{first.value}..#{second.value}\"\n  #.........................................................................................................\n  ### TAINT should support using variables etc. ###\n  ### aliases     = @_parse_aliases me, aliases ###\n  rangeref    = IG.GRID.parse_rangekey me.grid, rangekey\n  fieldnr     = ( me._tmp.prv_fieldnr += +1 )\n  if me.fieldcells[ fieldnr ]? ### should never happen ###\n    throw new Error \"(MKTS/TABLE µ5375) unable to redefine field #{fieldnr}: #{rpr source}\"\n  #.........................................................................................................\n  me.fieldcells[ fieldnr ] = rangeref\n  for fieldcell from IG.GRID.walk_cells_from_rangeref me.grid, rangeref\n    ( me.cellfields[ fieldcell.cellkey ]?= [] ).push fieldnr\n  #.........................................................................................................\n  ### TAINT should support using variables etc.\n  for alias in aliases\n    ( me.fieldnrs_by_aliases[ alias ]?= [] ).push fieldnr ###\n  if id?\n    ( me.fieldnrs_by_aliases[ id ]?= [] ).push fieldnr\n  #.........................................................................................................\n  @_set_default_gaps me, fieldnr\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_set_default_gaps = ( me, fieldnr ) ->\n  for gap in [ 'fill', 'margins', 'paddings', ]\n    for edge in [ 'left', 'right', 'top', 'bottom', ]\n      ( me.gaps[ gap ][ fieldnr ]?= {} )[ edge ] = me.default.gaps[ gap ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@set_borders = ( me, selectors, edges, style ) ->\n  debug '44433', selectors, edges, style\n  for fieldnr from @walk_fieldnrs_from_selectors me, selectors\n    debug '44433', 'fieldnr', fieldnr\n    ### TAINT must resolve symbolic edges like `all` ###\n    for edge in edges\n      throw new Error \"µ29282 must resolve symbolic edges like `all`, got #{rpr edge}\" unless edge in [ 'left', 'right', 'top', 'bottom', ]\n      ( me.fieldborders[ fieldnr ]?= {} )[ edge ] = style\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_fieldnrs_from_selectors = ( me, selectors ) ->\n  seen_fieldnrs = new Set()\n  for selector in selectors\n    for cellref from @walk_cellrefs_from_selectors me, selectors\n      for fieldnr in me.cellfields[ cellref.cellkey ] ? []\n        continue if seen_fieldnrs.has fieldnr\n        seen_fieldnrs.add fieldnr\n        yield fieldnr\n  #.........................................................................................................\n  yield return\n      # unless ( fieldnrs = me.fieldnrs_by_aliases[ term ] )?\n      #   throw new Error \"(MKTS/TABLE µ5446) unknown alias #{rpr term}\"\n      # R.add fieldnr for fieldnr in fieldnrs\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_cellrefs_from_selectors = ( me, selectors ) ->\n  seen_cellkeys = new Set()\n  for selector in selectors\n    # debug '38393', rpr selector\n    switch selector.type\n      when 'cellkey'\n        for cellref from IG.GRID.walk_cells_from_key me.grid, selector.value\n          continue if seen_cellkeys.has cellref.cellkey\n          seen_cellkeys.add cellref.cellkey\n          yield cellref\n      else\n        warn '90901', \"ignoring selector type #{selector.type}\"\n  #.........................................................................................................\n  yield return\n\n\n### ***************************************************** ###\n### ***************************************************** ###\n### ***************************************************** ###\n### ***************************************************** ###\n### ***************************************************** ###\n\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_set_unitsize = ( me, direction, text ) ->\n  unless direction in [ 'width', 'height', ]\n    throw _stackerr me, 'µ4613', \"expected 'width' or 'height', got #{rpr direction}\"\n  p = \"unit#{direction}\"\n  #.........................................................................................................\n  ### Do nothing if dimension already defined: ###\n  if me[ p ]?\n    return _record_fail me, 'µ5661', \"unable to re-define #{p}\"\n  #.........................................................................................................\n  me[ p ] = UNITS.parse_nonnegative_quantity text\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_set_lanesizes = ( me, direction, text ) ->\n  unless direction in [ 'width', 'height', ]\n    throw _stackerr me, 'µ2352', \"expected 'width' or 'height', got #{rpr direction}\"\n  #.........................................................................................................\n  p   = if direction is 'width' then 'colwidth'   else 'rowheight'\n  ps  = if direction is 'width' then 'colwidths'  else 'rowheights'\n  #.........................................................................................................\n  @_ensure_grid me\n  lane_count = me.grid[ direction ]\n  #.........................................................................................................\n  unless ( match = text.match /^(?:(?<selector>[^:]+):)?(?<length>[+\\d.]+)$/ )?\n    _record_fail me, 'µ6377', \"need a text like '2.7', 'A*,C3:20' or similar for mkts-table/#{p}, got #{rpr text}\"\n    return null\n  #.........................................................................................................\n  { selector, length, } = match.groups\n  length                = parseFloat length\n  #.........................................................................................................\n  if selector?\n    me[ ps ][  0 ]  ?= me.default[ p ] ### set default ###\n    me[ ps ][ nr ]  ?= me.default[ p ] for nr in [ 1 .. lane_count ] ### set defaults where missing ###\n    for [ fail, lanenr, ] from @_walk_fails_and_lanenrs_from_direction_and_selector me, direction, selector\n      if fail? then _record me, fail\n      else          me[ ps ][ lanenr ] = length\n  else\n    me[ ps ][  0 ]  = length ### set default ###\n    me[ ps ][ nr ]  = length for nr in [ 1 .. lane_count ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@unitwidth    = ( me, text ) -> @_set_unitsize  me, 'width',    text\n@unitheight   = ( me, text ) -> @_set_unitsize  me, 'height',   text\n@columnwidth  = ( me, text ) -> @_set_lanesizes me, 'width',    text\n@rowheight    = ( me, text ) -> @_set_lanesizes me, 'height',   text\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_resolve_aliases = ( me, selector ) ->\n#   ### Given a comma-separated string or a list of cellkeys, cellrange literals, and / or aliases, return a\n#   list of cellkeys and / or cellrange literals. ###\n#   return @_resolve_aliases me, selector.split /\\s*,\\s*/ if CND.isa_text selector\n#   R = new Set()\n#   for term in selector\n#     if ( CND.isa_text term ) and ( term.startsWith '@' )\n#       unless ( fieldnrs = me.fieldnrs_by_aliases[ term ] )?\n#         ### TAINT error or failure? ###\n#         throw new Error \"(MKTS/TABLE µ5446) unknown alias #{rpr term}\"\n#       R.add fieldnr for fieldnr in fieldnrs\n#     else\n#       R.add term\n#   return [ R... ]\n\n#-----------------------------------------------------------------------------------------------------------\n@fieldalignvertical = ( me, text ) ->\n  unless ( match = text.match /^(.+?):([^:]+)$/ )?\n    throw new Error \"(MKTS/TABLE µ5229) expected something like 'C3:top' for mkts-table/fieldalignvertical, got #{rpr text}\"\n  [ _, selector, value, ] = match\n  #.........................................................................................................\n  unless value in [ 'top', 'bottom', 'center', 'spread', ]\n    throw new Error \"(MKTS/TABLE µ1876) expected one of 'top', 'bottom', 'center', 'spread' for mkts-table/fieldalignvertical, got #{rpr value}\"\n  #.........................................................................................................\n  for [ fail, field_designation, ] from @_walk_fails_and_fieldnrs_from_selector me, selector\n    ### TAINT ad-hoc fail message production, use method ###\n    if fail? then _record me, \"#{fail} (#{jr {field_designation}})\"\n    else          me.valigns[ field_designation ] = value\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@fieldalignhorizontal = ( me, text ) ->\n  unless ( match = text.match /^(.+?):([^:]+)$/ )?\n    throw new Error \"(MKTS/TABLE µ5229) expected something like 'C3:left' for mkts-table/fieldalignhorizontal, got #{rpr text}\"\n  [ _, selector, value, ] = match\n  #.........................................................................................................\n  unless value in [ 'left', 'right', 'center', 'justified', ]\n    throw new Error \"(MKTS/TABLE µ1876) expected one of 'left', 'right', 'center', 'justified' for mkts-table/fieldalignhorizontal, got #{rpr value}\"\n  #.........................................................................................................\n  for [ fail, field_designation, ] from @_walk_fails_and_fieldnrs_from_selector me, selector\n    ### TAINT ad-hoc fail message production, use method ###\n    if fail? then _record me, \"#{fail} (#{jr {field_designation}})\"\n    else          me.haligns[ field_designation ] = value\n  #.........................................................................................................\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @name = ( me, text ) ->\n#   if me.name?\n#     throw new Error \"(MKTS/TABLE µ1344) refused to rename table layout #{rpr me.name} to #{rpr text}\"\n#   #.........................................................................................................\n#   ### TAINT should check syntax (no whitespace etc) ###\n#   me.name = text\n#   return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@margin = ( me, text ) ->\n  ### TAINT code duplication ###\n  d = @_parse_fieldgap me, 'margin', text\n  for fieldname in d.fieldnames\n    for edge in d.edges\n      ( me.gaps.margins[ fieldname ]?= {} )[ edge ] = d.length\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@padding = ( me, text ) ->\n  ### TAINT code duplication ###\n  d = @_parse_fieldgap me, 'padding', text\n  for fieldname in d.fieldnames\n    for edge in d.edges\n      ( me.gaps.paddings[ fieldname ]?= {} )[ edge ] = d.length\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@fill_gap = ( me, text ) ->\n  ### TAINT code duplication ###\n  d = @_parse_fieldgap me, 'fill', text\n  for fieldname in d.fieldnames\n    for edge in d.edges\n      ( me.gaps.fill[ fieldname ]?= {} )[ edge ] = d.length\n  #.........................................................................................................\n  return null\n\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\n_stackerr = ( me, ref, message, error = null ) ->\n  ###\n  Prepends local error message to the original one so we get more informative traces. Usage:\n\n  ```\n  try\n    ...\n  catch error\n    throw _stackerr error, \"(MKTS/TABLE µ4781) ... new message ...\"\n  ```\n  ###\n  filename  = me.meta.filename ? '<NOFILENAME>'\n  line_nr   = me.meta.line_nr ? '(NOLINENR)'\n  message   = \"[#{badge}##{ref}: #{filename}##{line_nr}]: #{message}\"\n  if error?\n    error.message = \"#{message}\\n#{error.message}\"\n  else\n    ### TAINT elide current line from stack trace ###\n    error = new Error message\n  return error\n\n#-----------------------------------------------------------------------------------------------------------\n_fail = ( me, ref, message ) ->\n  ### TAINT using strings as error values is generally being frowned upon ###\n  filename    = me.meta.filename  ? '<NOFILENAME>'\n  line_nr     = me.meta.line_nr   ? '(NOLINENR)'\n  return \"[#{badge}##{ref}: #{filename}##{line_nr}]: #{message}\"\n\n#-----------------------------------------------------------------------------------------------------------\n_record = ( me, message ) ->\n  me.fails.push message\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n_record_fail = ( me, ref, message ) -> _record me, _fail me, ref, message\n\n\n"
  ]
}