{
  "version": 3,
  "file": "mkts-table-api.js",
  "sourceRoot": "..",
  "sources": [
    "src/mkts-table-api.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/TABLE/API'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nMKTS                      = require './main'\nMKTS_TABLE                = require './mkts-table'\n#...........................................................................................................\njr                        = JSON.stringify\nIG                        = require 'intergrid'\nUNITS                     = require './mkts-table-units'\n\n\n\n#===========================================================================================================\n# PUBLIC API\n#-----------------------------------------------------------------------------------------------------------\n@create_layout = ( S, meta, id ) ->\n  R       = MKTS_TABLE._new_description S\n  R.meta  = meta\n  R.name  = id\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@set_grid = ( me, size ) ->\n  if me.grid?\n    throw new Error \"µ1234 unable to re-define grid\"\n  switch size.type\n    when 'cellkey'\n      me.grid = IG.GRID.new_grid_from_cellkey size.value\n    else\n      throw new Error \"µ1235 unknown type for grid size #{rpr size}\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@set_debug = ( me, toggle ) ->\n  switch toggle\n    when true   then me.debug = true\n    when false  then me.debug = false\n    else throw new Error \"µ1236 expected `true` or `false` for mkts-table/debug, got #{rpr toggle}\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@create_field = ( me, id, selector ) ->\n  switch selector.type\n    when 'cellkey'\n      rangekey    = \"#{selector.value}..#{selector.value}\"\n    when 'rangekey'\n      first       = selector.first\n      second      = selector.second\n      throw new Error \"(MKTS/TABLE µ1237) expected a cellkey, got a #{rpr first.type}\"  unless first.type  is 'cellkey'\n      throw new Error \"(MKTS/TABLE µ1238) expected a cellkey, got a #{rpr second.type}\" unless second.type is 'cellkey'\n      rangekey    = \"#{first.value}..#{second.value}\"\n  #.........................................................................................................\n  ### TAINT should support using variables etc. ###\n  ### aliases     = @_parse_aliases me, aliases ###\n  rangeref    = IG.GRID.parse_rangekey me.grid, rangekey\n  fieldnr     = ( me._tmp.prv_fieldnr += +1 )\n  if me.fieldcells[ fieldnr ]? ### should never happen ###\n    throw new Error \"(MKTS/TABLE µ1239) unable to redefine field #{fieldnr}: #{rpr source}\"\n  #.........................................................................................................\n  me.fieldcells[ fieldnr ] = rangeref\n  for fieldcell from IG.GRID.walk_cells_from_rangeref me.grid, rangeref\n    ( me.cellfields[ fieldcell.cellkey ]?= [] ).push fieldnr\n  #.........................................................................................................\n  ### TAINT should support using variables etc.\n  for alias in aliases\n    ( me.fieldnrs_by_aliases[ alias ]?= [] ).push fieldnr ###\n  if id?\n    ( me.fieldnrs_by_aliases[ id ]?= [] ).push fieldnr\n  #.........................................................................................................\n  @_set_default_gaps me, fieldnr\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@set_borders = ( me, selectors, edges, style ) ->\n  for fieldnr from @walk_fieldnrs_from_selectors me, selectors\n    target = me.fieldborders[ fieldnr ]?= {}\n    for edge in @_expand_edges me, edges\n      if style is 'none' then delete  target[ edge ]\n      else                            target[ edge ] = style\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_expand_edges = ( me, edges ) ->\n  for edge in edges\n    unless edge in [ 'left', 'right', 'top', 'bottom', 'all', ]\n      throw new Error \"µ1240 unknown edge #{rpr edge}\"\n  return [ edges..., ] unless 'all' in edges\n  return [ 'left', 'right', 'top', 'bottom', ]\n\n#-----------------------------------------------------------------------------------------------------------\n@set_unit_lengths = ( me, value, unit ) ->\n  @_set_unit_length me, 'width',   value, unit\n  @_set_unit_length me, 'height',  value, unit\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_set_unit_length = ( me, direction, value, unit ) ->\n  unless direction in [ 'width', 'height', ]\n    throw new Error \"µ1247 expected 'width' or 'height', got #{rpr direction}\"\n  p = \"unit#{direction}\"\n  #.........................................................................................................\n  ### Do nothing if dimension already defined: ###\n  if me[ p ]?\n    throw new Error \"µ1247 unable to re-define unit for #{rpr direction}\"\n  #.........................................................................................................\n  me[ p ] = UNITS.new_quantity value, unit\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@set_alignment = ( me, selectors, direction, alignment ) ->\n  switch direction\n    #.......................................................................................................\n    when 'horizontal'\n      unless alignment in [ 'left', 'right', 'center', 'justified', ]\n        throw new Error \"(MKTS/TABLE µ1241) unknown horizontal alignment #{rpr alignment}\"\n      target = me.haligns\n    #.......................................................................................................\n    when 'vertical'\n      unless alignment in [ 'top', 'bottom', 'center', 'spread', ]\n        throw new Error \"(MKTS/TABLE µ1242) unknown vertical alignment #{rpr alignment}\"\n      target = me.valigns\n    else\n      throw new Error \"µ1243 unknown direction #{rpr direction}\"\n  #.........................................................................................................\n  for fieldnr from @walk_fieldnrs_from_selectors me, selectors\n    target[ fieldnr ] = alignment\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@set_lane_sizes = ( me, direction, value ) ->\n  unless direction in [ 'width', 'height', ]\n    throw new Error \"µ1249 expected 'width' or 'height', got #{rpr direction}\"\n  #.........................................................................................................\n  p   = if direction is 'width' then 'colwidth'   else 'rowheight'\n  ps  = if direction is 'width' then 'colwidths'  else 'rowheights'\n  #.........................................................................................................\n  @_ensure_grid me\n  lane_count = me.grid[ direction ]\n  # #.........................................................................................................\n  # if selector?\n  #   me[ ps ][  0 ]  ?= me.default[ p ] ### set default ###\n  #   me[ ps ][ nr ]  ?= me.default[ p ] for nr in [ 1 .. lane_count ] ### set defaults where missing ###\n  #   for [ fail, lanenr, ] from @_walk_fails_and_lanenrs_from_direction_and_selector me, direction, selector\n  #     if fail? then _record me, fail\n  #     else          me[ ps ][ lanenr ] = length\n  # else\n  me[ ps ][  0 ]  = value ### set default ###\n  me[ ps ][ nr ]  = value for nr in [ 1 .. lane_count ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_set_default_gaps = ( me, fieldnr ) ->\n  for gap in [ 'background', 'margins', 'paddings', ]\n    for edge in [ 'left', 'right', 'top', 'bottom', ]\n      ( me.gaps[ gap ][ fieldnr ]?= {} )[ edge ] = me.default.gaps[ gap ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@set_default_gaps = ( me, feature, value ) ->\n  unless feature in [ 'border', 'text', 'background', ]\n    throw new Error \"µ1290 expected one of 'border', 'text', 'background', got #{rpr feature}\"\n  switch feature\n    when 'border'     then me.default.gaps.margins    = value\n    when 'text'       then me.default.gaps.paddings   = value\n    when 'background' then me.default.gaps.background = value\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@set_field_gaps = ( me, selectors, edges, feature, value ) ->\n  switch feature\n    when 'border'     then target = me.gaps.margins\n    when 'text'       then target = me.gaps.paddings\n    when 'background' then target = me.gaps.background\n    else throw new Error \"µ1290 expected one of 'border', 'text', 'background', got #{rpr feature}\"\n  for fieldnr from @walk_fieldnrs_from_selectors me, selectors\n    sub_target = target[ fieldnr ]?= {}\n    for edge in @_expand_edges me, edges\n      sub_target[ edge ] = value\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@walk_fieldnrs_from_selectors = ( me, selectors ) ->\n  seen_fieldnrs = new Set()\n  #.........................................................................................................\n  for selector in selectors\n    switch selector.type\n      when 'rangekey'\n        rangekey = selector.first.value + '..' + selector.second.value\n        for cellref from IG.GRID.walk_cells_from_rangekey me.grid, rangekey\n          for fieldnr in me.cellfields[ cellref.cellkey ] ? []\n            continue if seen_fieldnrs.has fieldnr\n            seen_fieldnrs.add fieldnr\n            yield fieldnr\n      when 'cellkey'\n        for cellref from IG.GRID.walk_cells_from_key me.grid, selector.value\n          for fieldnr in me.cellfields[ cellref.cellkey ] ? []\n            continue if seen_fieldnrs.has fieldnr\n            seen_fieldnrs.add fieldnr\n            yield fieldnr\n      when 'id'\n        for fieldnr in me.fieldnrs_by_aliases[ selector.id ] ? []\n          continue if seen_fieldnrs.has fieldnr\n          seen_fieldnrs.add fieldnr\n          yield fieldnr\n      else\n        throw new Error \"µ1245 ignoring selector type #{selector.type}\"\n  #.........................................................................................................\n  if seen_fieldnrs.size is 0\n    throw new Error \"µ1244 selectors #{rpr selectors} do not match any field\"\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_cellrefs_from_selectors = ( me, selectors ) ->\n  count         = 0\n  seen_cellkeys = new Set()\n  #.........................................................................................................\n  for selector in selectors\n    switch selector.type\n      when 'cellkey'\n        for cellref from IG.GRID.walk_cells_from_key me.grid, selector.value\n          continue if seen_cellkeys.has cellref.cellkey\n          seen_cellkeys.add cellref.cellkey\n          count += +1\n          yield cellref\n      when 'id'\n        for fieldnr in me.fieldnrs_by_aliases[ selector.id ] ? []\n          for cellref from @walk_cellrefs_from_fieldnr me, fieldnr\n            continue if seen_cellkeys.has cellref.cellkey\n            seen_cellkeys.add cellref.cellkey\n            count += +1\n            yield cellref\n      else\n        warn 'µ1245', \"ignoring selector type #{selector.type}\"\n  #.........................................................................................................\n  if count is 0\n    throw new Error \"µ1246 selectors #{rpr selectors} do not match any cell\"\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_cellrefs_from_fieldnr = ( me, fieldnr ) ->\n  unless ( rangeref = me.fieldcells[ fieldnr ] )?\n    throw new Error \"µ1246 unknown fieldnr #{rpr fieldnr}\"\n  for cellref from IG.GRID.walk_cells_from_rangeref me.grid, rangeref\n    yield cellref\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_grid = ( me ) ->\n  return null if me.grid?\n  throw new Error \"(MKTS/TABLE µ5307) grid must be set\"\n\n\n\n\n\n\n\n"
  ]
}