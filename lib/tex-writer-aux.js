// Generated by CoffeeScript 2.3.1
(function() {
  //###########################################################################################################
  var $, $async, CND, PS, alert, badge, debug, echo, help, info, log, njs_fs, njs_path, rpr, urge, warn, whisper;

  njs_path = require('path');

  njs_fs = require('fs');

  //...........................................................................................................
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MK/TS/TEX-WRITER/COLUMNS';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  PS = require('pipestreams');

  ({$, $async} = PS);

  //-----------------------------------------------------------------------------------------------------------
  this.fetch_aux_data = function(S, handler) {
    var Z, on_stop, pipeline, source;
    Z = {};
    source = PS.new_file_source(S.layout_info['aux-locator']);
    on_stop = PS.new_event_collector('stop', function() {
      help(`read data from ${S.layout_info['aux-locator']}`);
      return handler(null, Z);
    });
    pipeline = [];
    pipeline.push(source);
    pipeline.push(PS.$split());
    // pipeline.push PS.$show()
    pipeline.push(this.$read_pagerefs(S, Z));
    pipeline.push(this.$read_linerefs(S, Z));
    pipeline.push(this.$read_xypositions(S, Z));
    pipeline.push(on_stop.add(PS.$drain()));
    PS.pull(...pipeline);
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$read_pagerefs = function(S, Z) {
    /* Reads references made by package `zref` provided reference labels start with `mkts-pagenr-` */
    /* \zref@newlabel{mkts-pagenr-guide-ð¤´“}{\default{}\page{4}} */
    var pattern, target;
    pattern = /^\\zref@newlabel\{mkts-pagenr-([^}]+)\}.*\page\{([\d]+)\}\}$/;
    target = Z.pagenrs = {};
    return $(function(line, send) {
      var _, match, name, pagenr;
      match = line.match(pattern);
      if (match == null) {
        return send(line);
      }
      [_, name, pagenr] = match;
      pagenr = parseInt(pagenr, 10);
      target[name] = {pagenr};
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$read_linerefs = function(S, Z) {
    /* Reads references made by package `lineno` provided reference labels start with `mkts-linenr-` */
    /* \newlabel{mkts-linenr-foobar}{{\getpagewiselinenumber {5}}{1}} */
    var pattern, target;
    pattern = /^\\newlabel\{mkts-linenr-([^}]+)\}\{\{\\getpagewiselinenumber \{([\d]+)\}\}\{([\d]+)\}\}$/;
    target = Z.linenrs = {};
    return $(function(line, send) {
      var _, linenr, match, name, pagenr;
      match = line.match(pattern);
      if (match == null) {
        return send(line);
      }
      [_, name, linenr, pagenr] = match;
      pagenr = parseInt(pagenr, 10);
      linenr = parseInt(linenr, 10);
      target[name] = {pagenr, linenr};
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$read_xypositions = function(S, Z) {
    /* Reads (x,y) position references made by package `zref-savepos` */
    /* \zref@newlabel{mkts-pos-foobar}{\posx{2797018}\posy{50159889}} */
    var pattern, target;
    pattern = /^\\zref@newlabel\{([^}]+)\}\{\\posx\{([\d]+)\}\\posy\{([\d]+)\}\}$/;
    target = Z.xypositions = {};
    return $(function(line, send) {
      var _, match, name, x, y;
      match = line.match(pattern);
      if (match == null) {
        return send(line);
      }
      [_, name, x, y] = match;
      x = parseInt(x, 10);
      y = parseInt(y, 10);
      target[name] = {x, y};
      return null;
    });
  };

  // unless module.parent?
//   pattern = /^\\zref@newlabel\{([^}]+)\}\{\\posx\{([\d]+)\}\\posy\{([\d]+)\}\}$/
//   debug ( '\\zref@newlabel{mkts-pos-foobar}{\\posx{2797018}\\posy{50159889}}' ).match pattern

}).call(this);

//# sourceMappingURL=tex-writer-aux.js.map
