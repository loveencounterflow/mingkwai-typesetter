{
  "version": 3,
  "file": "mkts-table.js",
  "sourceRoot": "..",
  "sources": [
    "src/mkts-table.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/TABLE'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nECS                       = require './eval-cs'\nMKTS                      = require './main'\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nunstamp                   = MD_READER.unstamp.bind     MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\n#...........................................................................................................\ncopy                      = ( x ) -> Object.assign {}, x\nEXCJSCC                   = require './exceljs-spreadsheet-address-codec'\n\n\n\n#===========================================================================================================\n# INITIALIZATION\n#-----------------------------------------------------------------------------------------------------------\n@_new_description = ( S ) ->\n  R =\n    '~isa':     'MKTS/TABLE/description'\n    cellquads:          {}\n    cellborders:        {}\n    quadwidths:         null\n    quadheights:        null\n    joint_coordinates:  null\n    quadgrid:           false\n    #.......................................................................................................\n    styles:\n      sThin:              'thin'\n      sThick:             'thick'\n      sDotted:            'dotted'\n      sDashed:            'dashed'\n      sRed:               'red'\n      sBlack:             'black'\n      sQuadgrid:          'sRed,sDotted,sThin'\n    #.......................................................................................................\n    default:\n      gridwidth:  4\n      gridheight: 4\n      unitwidth:  '1mm'\n      unitheight: '1mm'\n      quadwidth:  10\n      quadheight: 10\n  return R\n\n\n#===========================================================================================================\n# PUBLIC API\n#-----------------------------------------------------------------------------------------------------------\n@gridwidth = ( me, text ) ->\n  #.........................................................................................................\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 8082) need a text for mkts-table/gridwidth, got a #{type}\"\n  unless ( match = text.match /^\\s*(\\d+)\\s*$/ )?\n    throw new Error \"(MKTS/TABLE 9000) need a text like '3' or similar for mkts-table/gridwidth, got #{rpr text}\"\n  if me.gridwidth?\n    throw new Error \"(MKTS/TABLE 1282) unable to re-define gridwidth\"\n  #.........................................................................................................\n  me.gridwidth      = parseInt match[ 1 ], 10\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@gridheight = ( me, text ) ->\n  #.........................................................................................................\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 4532) need a text for mkts-table/gridheight, got a #{type}\"\n  unless ( match = text.match /^\\s*(\\d+)\\s*$/ )?\n    throw new Error \"(MKTS/TABLE 3691) need a text like '3' or similar for mkts-table/gridheight, got #{rpr text}\"\n  if me.gridheight?\n    throw new Error \"(MKTS/TABLE 5164) unable to re-define gridheight\"\n  #.........................................................................................................\n  me.gridheight     = parseInt match[ 1 ], 10\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@unitwidth = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 4959) need a text for mkts-table/unitwidth, got a #{type}\"\n  if me.unitwidth?\n    throw new Error \"(MKTS/TABLE 7732) unable to re-define unitheight\"\n  #.........................................................................................................\n  me.unitwidth = text\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@unitheight = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 3643) need a text for mkts-table/unitheight, got a #{type}\"\n  if me.unitheight?\n    throw new Error \"(MKTS/TABLE 3537) unable to re-define unitheight\"\n  #.........................................................................................................\n  me.unitheight = text\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@cellquads = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 9791) need a text for mkts-table/cellquads, got a #{type}\"\n  #.........................................................................................................\n  @_ensure_gridwidth  me\n  @_ensure_gridheight me\n  @_ensure_unitvector me\n  d           = @_parse_range_quadref me, text\n  designation = d.tl.toUpperCase()\n  if d.right > me.gridwidth\n    throw new Error \"(MKTS/TABLE 1274) cell exceeds grid width: #{rpr text}\"\n  if d.bottom > me.gridheight\n    throw new Error \"(MKTS/TABLE 6069) cell exceeds grid height: #{rpr text}\"\n  if me.cellquads[ designation ]?\n    throw new Error \"(MKTS/TABLE 6069) unable to redefine cell #{designation}: #{rpr text}\"\n  #.........................................................................................................\n  me.cellquads[ designation ] = d\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@cellborder = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 9791) need a text for mkts-table/cellborder, got a #{type}\"\n  #.........................................................................................................\n  d                 = @_parse_cellborder me, text\n  if d.side is '*'\n    for side in [ 'left', 'right', 'top', 'bottom', ]\n      target            = me.cellborders[ d.cellref ]?= {}\n      target[ side ]    = d.style\n  else\n    target            = me.cellborders[ d.cellref ]?= {}\n    target[ d.side ]  = d.style\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@quadgrid = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 9791) need a text for mkts-table/cell, got a #{type}\"\n  #.........................................................................................................\n  switch text\n    when 'true'   then me.quadgrid = true\n    when 'false'  then me.quadgrid = false\n    else throw new Error \"(MKTS/TABLE 9791) expected 'true' or 'false' for mkts-table/quadgrid, got a #{rpr text}\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@cellspacing = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 1539) need a text for mkts-table/cellspacing, got a #{type}\"\n  #.........................................................................................................\n  @_ensure_unitvector me\n  me.cellspacing = @_parse_coordinate_without_units me, text\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\n# PARSERS ETC\n#-----------------------------------------------------------------------------------------------------------\n@_idx_from_col_and_row = ( col, row ) ->\n  unless ( type = CND.type_of col ) is 'text'\n    throw new Error \"(MKTS/TABLE 1763) expected a text for col, got a #{rpr type}\"\n  unless ( type = CND.type_of row ) is 'text'\n    throw new Error \"(MKTS/TABLE 4752) expected a text for row, got a #{rpr type}\"\n  #.........................................................................................................\n  col_idx = ( col.codePointAt 0 ) - ( 'a'.codePointAt 0 )\n  row_idx = ( parseInt row, 10 ) - 1\n  return { col: col_idx, row: row_idx, }\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use proper parsing tool ###\n@_parse_range_quadref = ( me, quad_range ) ->\n  unless ( type = CND.type_of quad_range ) is 'text'\n    throw new Error \"(MKTS/TABLE 9879) expected a text for quad_range, got a #{rpr type}\"\n  unless ( match = quad_range.match /^([a-z]{1,3})([0-9]{1,4}):([a-z]{1,3})([0-9]{1,4})$/ )?\n    throw new Error \"(MKTS/TABLE 3807) expected a quad range like 'a1:d4', got #{rpr quad_range}\"\n  ### TAINT don't use EXCJSCC directly ###\n  R = EXCJSCC.decode quad_range.toUpperCase()\n  delete R.dimensions\n  R.tl = R.tl.toLowerCase()\n  R.br = R.br.toLowerCase()\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use proper parsing tool ###\n@_parse_coordinate_with_units = ( me, coordinate ) ->\n  unless ( type = CND.type_of coordinate ) is 'text'\n    throw new Error \"(MKTS/TABLE 8077) expected a text for coordinate, got a #{rpr type}\"\n  unless ( match = coordinate.match /^\\s*\\(\\s*([-0-9.]{1,8}[a-z]{0,3})\\s*,\\s*([-0-9.]{1,8}[a-z]{0,3})\\s*\\)\\s*$/ )?\n    throw new Error \"(MKTS/TABLE 3191) expected a coordinate with units like '( 1mm, 2.4cm )', got #{rpr coordinate}\"\n  [ _, x, y, ] = match\n  return { x, y, }\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use proper parsing tool ###\n@_parse_coordinate_without_units = ( me, coordinate ) ->\n  unless ( type = CND.type_of coordinate ) is 'text'\n    throw new Error \"(MKTS/TABLE 3975) expected a text for coordinate, got a #{rpr type}\"\n  unless ( match = coordinate.match /^\\s*\\(\\s*([-0-9.]{1,8})\\s*,\\s*([-0-9.]{1,8})\\s*\\)\\s*$/ )?\n    throw new Error \"(MKTS/TABLE 2658) expected a unitless coordinate like '( 1, 2.4 )', got #{rpr coordinate}\"\n  [ _, x, y, ] = match\n  return { x, y, }\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use proper parsing tool ###\n@_parse_cellborder = ( me, cellborder ) ->\n  unless ( type = CND.type_of cellborder ) is 'text'\n    throw new Error \"(MKTS/TABLE 3975) expected a text for cellborder, got a #{rpr type}\"\n  unless ( match = cellborder.match /^\\s*([A-Z]{1,3}[-0-9.]{1,4})-(left|right|top|bottom|\\*)\\s*:\\s*(.+)$/ )?\n    throw new Error \"(MKTS/TABLE 2658) expected a cellborder like 'a1-left:sDashed,sThick', got #{rpr cellborder}\"\n  [ _, cellref, side, style, ] = match\n  return { cellref, side, style, }\n\n\n#===========================================================================================================\n# EVENT GENERATORS\n#-----------------------------------------------------------------------------------------------------------\n@_walk_events = ( me ) ->\n  #.........................................................................................................\n  yield from @_walk_opening_events                      me\n  yield from @_walk_style_events                        me\n  yield from @_walk_cellspacing_events                  me\n  yield from @_walk_column_and_row_coordinates_events   me\n  yield from @_walk_joint_coordinates_events            me\n  yield from @_walk_quad_sides_events                   me\n  yield from @_walk_quad_coordinates_events             me\n  yield from @_walk_debugging_events                    me\n  yield from @_walk_quadgrid_events                     me\n  yield from @_walk_borders_events                      me\n  yield from @_walk_closing_events                      me\n  #.........................................................................................................\n  # ### dump description for debugging ###\n  # ### TAINT make dump configurable ###\n  # ### TAINT print in smaller type ###\n  # yield [ 'tex', '\\\\par{}', ]\n  # yield [ 'text', \"MKTS Table Description:\\n\\n\", ( copy me.meta ), ]\n  # yield [ '(', 'code', [],                       ( copy me.meta ), ]\n  # yield [ '.', 'text', ( rpr me ),               ( copy me.meta ), ]\n  # yield [ ')', 'code', [],                       ( copy me.meta ), ]\n  # yield [ 'tex', '\\\\par{}', ]\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_opening_events = ( me ) ->\n  @_ensure_unitvector me\n  yield [ 'tex', \"\\n\\n\", ]\n  yield [ 'tex', \"\\\\par% Beginning of MKTS Table ==============================================================================\\n\", ]\n  yield [ 'tex', \"{\\\\setlength{\\\\fboxsep}{0mm}%\\n\", ]\n  ### TAINT insert proper dimensions ###\n  yield [ 'tex', \"\\\\framebox{\\\\begin{minipage}[t][45mm][t]{100mm}%\\n\", ]\n  ### !!!!!!!!!!!!!!!!!!!!! ###\n  yield [ '.', 'text', \"table goes here\", ( copy me.meta ), ]\n  ### !!!!!!!!!!!!!!!!!!!!! ###\n  yield [ 'tex', \"\\\\begin{tikzpicture}[ overlay, yshift = 0mm, yscale = -1, line cap = round ]%\\n\", ]\n  yield [ 'tex', \"\\\\tikzset{ x = #{me.unitheight} };%\\n\", ]\n  yield [ 'tex', \"\\\\tikzset{ y = #{me.unitheight} };%\\n\", ]\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_closing_events = ( me ) ->\n  yield [ 'tex', \"\\\\end{tikzpicture}%\\n\", ]\n  yield [ 'tex', \"\\\\end{minipage}}}%\\n\", ]\n  yield [ 'tex', \"\\\\par% End of MKTS Table ====================================================================================\\n\\n\", ]\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_style_events = ( me ) ->\n  for key, value of me.styles\n    yield [ 'tex', \"\\\\tikzset{#{key}/.style={#{value}}}%\\n\", ]\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_cellspacing_events = ( me ) ->\n  ### TAINT should rather use default cellspacing ###\n  return null unless me.cellspacing?\n  yield [ 'tex', \"\\\\coordinate (horizontal spacing)  at ( #{me.cellspacing.x}, 0 );%\\n\", ]\n  yield [ 'tex', \"\\\\coordinate (vertical spacing)    at ( 0, #{me.cellspacing.y} );%\\n\", ]\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_column_and_row_coordinates_events = ( me ) ->\n  @_ensure_joint_coordinates  me\n  x_position  = 0\n  y_position  = 0\n  #.........................................................................................................\n  for [ col_letter, col_nr, ] from @_walk_column_letters_and_numbers me, 'long'\n    yield [ 'tex', \"\\\\coordinate (col_#{col_letter}) at ( #{x_position}, 0 );%\\n\", ]\n    x_position += me.quadwidths[ col_nr ]\n  #.........................................................................................................\n  for row_nr from @_walk_row_numbers me, 'long'\n    yield [ 'tex', \"\\\\coordinate (row_#{row_nr}) at ( 0, #{y_position} );%\\n\", ]\n    y_position += me.quadheights[ row_nr ]\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_joint_coordinates_events = ( me ) ->\n  @_ensure_joint_coordinates  me\n  x_position  = 0\n  y_position  = 0\n  #.........................................................................................................\n  ### TAINT code duplication; use iterator ###\n  for [ col_letter, col_nr, ] from @_walk_column_letters_and_numbers me, 'long'\n    for row_nr from @_walk_row_numbers me, 'long'\n      joint = \"#{col_letter}#{row_nr}\"\n      yield [ 'tex', \"\\\\coordinate (joint_#{joint}) at ($ (col_#{col_letter}) + (row_#{row_nr}) $);%\\n\", ]\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_quad_sides_events = ( me ) ->\n  @_ensure_joint_coordinates  me\n  #.........................................................................................................\n  for [ col_letter, col_nr, ] from @_walk_column_letters_and_numbers me, 'long'\n    yield [ 'tex', \"\\\\coordinate (col_#{col_letter} W) at ($ (col_#{col_letter}) - (horizontal spacing) $);%\\n\", ]\n    yield [ 'tex', \"\\\\coordinate (col_#{col_letter} E) at ($ (col_#{col_letter}) + (horizontal spacing) $);%\\n\", ]\n  #.........................................................................................................\n  for row_nr from @_walk_row_numbers me, 'long'\n    yield [ 'tex', \"\\\\coordinate (row_#{row_nr} N) at ($ (row_#{row_nr}) - (vertical spacing) $);%\\n\", ]\n    yield [ 'tex', \"\\\\coordinate (row_#{row_nr} S) at ($ (row_#{row_nr}) + (vertical spacing) $);%\\n\", ]\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_quad_coordinates_events = ( me ) ->\n  @_ensure_joint_coordinates  me\n  #.........................................................................................................\n  ### TAINT code duplication; use iterator ###\n  for [ col_letter_1, col_nr_1, ] from @_walk_column_letters_and_numbers me, 'short'\n    col_nr_2      = col_nr_1 + 1\n    ### TAINT don't use EXCJSCC directly ###\n    col_letter_2  = ( EXCJSCC.n2l col_nr_2 ).toLowerCase()\n    for row_nr_1 from @_walk_row_numbers me, 'short'\n      row_nr_2  = row_nr_1 + 1\n      quad = \"#{col_letter_1}#{row_nr_1}\"\n      yield [ 'tex', \"\\\\coordinate (quad_#{quad} top left)      at ($ (row_#{row_nr_1} S) + (col_#{col_letter_1} E) $);%\\n\", ]\n      yield [ 'tex', \"\\\\coordinate (quad_#{quad} top right)     at ($ (row_#{row_nr_1} S) + (col_#{col_letter_2} W) $);%\\n\", ]\n      yield [ 'tex', \"\\\\coordinate (quad_#{quad} bottom left)   at ($ (row_#{row_nr_2} N) + (col_#{col_letter_1} E) $);%\\n\", ]\n      yield [ 'tex', \"\\\\coordinate (quad_#{quad} bottom right)  at ($ (row_#{row_nr_2} N) + (col_#{col_letter_2} W) $);%\\n\", ]\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_quadgrid_events = ( me ) ->\n  return null unless me.quadgrid\n  #.........................................................................................................\n  ### TAINT code duplication; use iterator ###\n  for [ col_letter_1, col_nr_1, ] from @_walk_column_letters_and_numbers me, 'short'\n    col_nr_2      = col_nr_1 + 1\n    ### TAINT don't use EXCJSCC directly ###\n    col_letter_2  = ( EXCJSCC.n2l col_nr_2 ).toLowerCase()\n    for row_nr_1 from @_walk_row_numbers me, 'short'\n      row_nr_2  = row_nr_1 + 1\n      quad = \"#{col_letter_1}#{row_nr_1}\"\n      yield [ 'tex', \"\\\\draw[sQuadgrid] (quad_#{quad} top    left)  -- (quad_#{quad} top    right);%\\n\",  ]\n      yield [ 'tex', \"\\\\draw[sQuadgrid] (quad_#{quad} top    left)  -- (quad_#{quad} bottom left);%\\n\",   ]\n      yield [ 'tex', \"\\\\draw[sQuadgrid] (quad_#{quad} bottom left)  -- (quad_#{quad} bottom right);%\\n\",  ]\n      yield [ 'tex', \"\\\\draw[sQuadgrid] (quad_#{quad} top    right) -- (quad_#{quad} bottom right);%\\n\",  ]\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_borders_events = ( me ) ->\n  #.........................................................................................................\n  for designation, cellquads of me.cellquads\n    continue unless ( cellborders = me.cellborders[ designation ] )?\n    for d from @_walk_cellquads_sides me, cellquads, '*'\n      continue unless ( borderstyle = cellborders[ d.side ] )?\n      switch d.side\n        when 'top', 'bottom'\n          yield [ 'tex', \"\\\\draw[#{borderstyle}] (quad_#{d.quad} #{d.side} left) -- (quad_#{d.quad} #{d.side} right);\\n\", ]\n        when 'left', 'right'\n          yield [ 'tex', \"\\\\draw[#{borderstyle}] (quad_#{d.quad} top #{d.side}) -- (quad_#{d.quad} bottom #{d.side});\\n\", ]\n        else\n          throw new Error \"(MKTS/TABLE 2658) illegal value for side #{rpr d.side}\"\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_debugging_events = ( me ) ->\n  @_ensure_joint_coordinates  me\n  #.........................................................................................................\n  ### TAINT code duplication; use iterator ###\n  for [ col_letter, col_nr, ] from @_walk_column_letters_and_numbers me, 'long'\n    for row_nr from @_walk_row_numbers me, 'long'\n      joint = \"#{col_letter}#{row_nr}\"\n      yield [ 'tex', \"\\\\node[ color = gray ] at ($(joint_#{joint})+(2mm,2mm)$) {{\\\\mktsStyleCode{}#{joint}}}; \", ]\n      yield [ 'tex', \"\\\\node[ color = gray, shape = circle, draw ] at (joint_#{joint}) {};%\\n\", ]\n  #.........................................................................................................\n  yield return\n\n\n#===========================================================================================================\n# ENSURERS\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_unitvector = ( me ) ->\n  @unitwidth  me, me.default.unitwidth   unless me.unitwidth?\n  @unitheight me, me.default.unitheight  unless me.unitheight?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_joint_coordinates = ( me ) ->\n  return null if me.joint_coordinates?\n  @_ensure_quadwidths   me\n  @_ensure_quadheights  me\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_gridwidth = ( me ) ->\n  return null if me.gridwidth?\n  me.gridwidths = me.default.gridwidth\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_gridheight = ( me ) ->\n  return null if me.gridheight?\n  me.gridheights = me.default.gridheight\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_quadwidths = ( me ) ->\n  return null if me.quadwidths?\n  @_ensure_gridwidth  me\n  me.quadwidths = ( me.default.quadwidth for col_nr in [ 1 .. me.gridwidth + 1 ] )\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_quadheights = ( me ) ->\n  return null if me.quadheights?\n  @_ensure_gridheight me\n  me.quadheights = ( me.default.quadheight for col_nr in [ 1 .. me.gridheight + 1 ] )\n  return null\n\n\n#===========================================================================================================\n# ITERATORS\n#-----------------------------------------------------------------------------------------------------------\n@_walk_column_letters_and_numbers = ( me, mode ) ->\n  @_ensure_gridwidth me\n  delta = if mode is 'short' then 0 else 1\n  for col_nr in [ 1 .. me.gridwidth + delta ]\n    ### TAINT don't use EXCJSCC directly ###\n    col_letter  = ( EXCJSCC.n2l col_nr ).toLowerCase()\n    yield [ col_letter, col_nr, ]\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_row_numbers = ( me, mode ) ->\n  @_ensure_gridheight me\n  delta = if mode is 'short' then 0 else 1\n  yield row_nr for row_nr in [ 1 .. me.gridheight + delta ]\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_cellquads_sides = ( me, cellquads, side ) ->\n  switch side\n    when 'left'\n      row_nr_1    = cellquads.top\n      row_nr_2    = cellquads.bottom\n      col_nr_1    = cellquads.left\n      col_nr_2    = cellquads.left\n    when 'right'\n      row_nr_1    = cellquads.top\n      row_nr_2    = cellquads.bottom\n      col_nr_1    = cellquads.right\n      col_nr_2    = cellquads.right\n    when 'top'\n      row_nr_1    = cellquads.top\n      row_nr_2    = cellquads.top\n      col_nr_1    = cellquads.left\n      col_nr_2    = cellquads.right\n    when 'bottom'\n      row_nr_1    = cellquads.bottom\n      row_nr_2    = cellquads.bottom\n      col_nr_1    = cellquads.left\n      col_nr_2    = cellquads.right\n    when '*'\n      yield from @_walk_cellquads_sides me, cellquads, 'left'\n      yield from @_walk_cellquads_sides me, cellquads, 'right'\n      yield from @_walk_cellquads_sides me, cellquads, 'top'\n      yield from @_walk_cellquads_sides me, cellquads, 'bottom'\n      yield return\n    else\n      throw new Error \"(MKTS/TABLE 2658) illegal argument for side #{rpr side}\"\n  for row_nr in [ row_nr_1 .. row_nr_2 ]\n    for col_nr in [ col_nr_1 .. col_nr_2 ]\n      ### TAINT don't use EXCJSCC directly ###\n      col_letter  = ( EXCJSCC.n2l col_nr ).toLowerCase()\n      quad        = \"#{col_letter}#{row_nr}\"\n      yield { col_nr, row_nr, col_letter, quad, side, }\n  yield return\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\n_stackerr = ( ref, message, error = null ) ->\n  ###\n  Prepends local error message to the original one so we get more informative traces. Usage:\n\n  ```\n  try\n    ...\n  catch error\n    throw _stackerr error, \"(MKTS/TABLE 6358) ... new message ...\"\n  ```\n  ###\n  message = \"(MKTS/TABLE##{ref}) #{message}\"\n  if error?\n    error.message = \"#{message}\\n#{error.message}\"\n  else\n    ### TAINT elide current line from stack trace ###\n    error = new Error message\n  return error\n"
  ]
}