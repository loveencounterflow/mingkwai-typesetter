{
  "version": 3,
  "file": "mkts-table.js",
  "sourceRoot": "..",
  "sources": [
    "src/mkts-table.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/TABLE'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nECS                       = require './eval-cs'\nMKTS                      = require './main'\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nunstamp                   = MD_READER.unstamp.bind     MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\n#...........................................................................................................\ncopy                      = ( x ) -> Object.assign {}, x\nEXCJSCC                   = require './exceljs-spreadsheet-address-codec'\n\n\n\n#===========================================================================================================\n# INITIALIZATION\n#-----------------------------------------------------------------------------------------------------------\n@_new_description = ( S ) ->\n  R =\n    '~isa':     'MKTS/TABLE/description'\n    fieldcells:         {} ### field extents in terms of cells, by field designations ###\n    cellfields:         {} ### which cells belong to what fields, by cell designations ###\n    cell_dimensions:    {}\n    fieldborders:       {} ### field borders, as TikZ styles by sides ###\n    field_dimensions:   {} ### field extents in terms of (unitwidth,unitheight), by designations ###\n    border_dimensions:  {} ### border extents in terms of (unitwidth,unitheight), by designations ###\n    pod_dimensions:     {} ### pod extents in terms of (unitwidth,unitheight), by designations ###\n    cellwidths:         [ null, ] ### [ 0 ] is default, [ 1 .. gridwidth ] explicit or implicit widths ###\n    cellheights:        [ null, ] ### [ 0 ] is default, [ 1 .. gridheight ] explicit or implicit heights ###\n    joint_coordinates:  null\n    debug:              false\n    #.......................................................................................................\n    styles:\n      sThin:              'thin'\n      sThick:             'thick'\n      sDotted:            'dotted'\n      sDashed:            'dashed'\n      sRed:               'red'\n      sBlack:             'black'\n      sDebugQuadgrid:     'gray!30,sThin'\n      sDebugCellgrid:     'gray!30,sThin'\n      sDebugJoints:       'gray!30,sThick'\n    #.......................................................................................................\n    default:\n      # gridwidth:     4\n      # gridheight:    4\n      unitwidth:    '1mm'\n      unitheight:   '1mm'\n      # cellwidth:     10\n      # cellheight:    10\n      marginwidth:   0\n      marginheight:  0\n      paddingwidth:  0\n      paddingheight: 0\n  return R\n\n\n#===========================================================================================================\n# PUBLIC API\n#-----------------------------------------------------------------------------------------------------------\n@gridwidth = ( me, text ) ->\n  #.........................................................................................................\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 4517) need a text for mkts-table/gridwidth, got a #{type}\"\n  unless ( match = text.match /^\\s*(\\d+)\\s*$/ )?\n    throw new Error \"(MKTS/TABLE 4300) need a text like '3' or similar for mkts-table/gridwidth, got #{rpr text}\"\n  if me.gridwidth?\n    throw new Error \"(MKTS/TABLE 5827) unable to re-define gridwidth\"\n  #.........................................................................................................\n  me.gridwidth      = parseInt match[ 1 ], 10\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@gridheight = ( me, text ) ->\n  #.........................................................................................................\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 9150) need a text for mkts-table/gridheight, got a #{type}\"\n  unless ( match = text.match /^\\s*(\\d+)\\s*$/ )?\n    throw new Error \"(MKTS/TABLE 6572) need a text like '3' or similar for mkts-table/gridheight, got #{rpr text}\"\n  if me.gridheight?\n    throw new Error \"(MKTS/TABLE 6501) unable to re-define gridheight\"\n  #.........................................................................................................\n  me.gridheight     = parseInt match[ 1 ], 10\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@unitwidth = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 9131) need a text for mkts-table/unitwidth, got a #{type}\"\n  if me.unitwidth?\n    throw new Error \"(MKTS/TABLE 6477) unable to re-define unitheight\"\n  #.........................................................................................................\n  me.unitwidth = text\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@unitheight = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 7680) need a text for mkts-table/unitheight, got a #{type}\"\n  if me.unitheight?\n    throw new Error \"(MKTS/TABLE 2142) unable to re-define unitheight\"\n  #.........................................................................................................\n  me.unitheight = text\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@cellwidths = ( me, text ) ->\n  ### TAINT should validate ###\n  @_ensure_gridwidth me\n  value = parseFloat text\n  me.cellwidths[  0 ] = value ### set default ###\n  me.cellwidths[ nr ] = value for nr in [ 1 .. me.gridwidth ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@cellheights = ( me, text ) ->\n  ### TAINT should validate ###\n  @_ensure_gridheight me\n  value = parseFloat text\n  me.cellheights[  0 ] = value ### set default ###\n  me.cellheights[ nr ] = value for nr in [ 1 .. me.gridheight ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@fieldcells = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 8532) need a text for mkts-table/fieldcells, got a #{type}\"\n  #.........................................................................................................\n  @_ensure_gridwidth  me\n  @_ensure_gridheight me\n  @_ensure_unitvector me\n  d           = @_parse_range_cellref me, text\n  designation = d.tl\n  if d.right > me.gridwidth\n    throw new Error \"(MKTS/TABLE 2282) field exceeds grid width: #{rpr text}\"\n  if d.bottom > me.gridheight\n    throw new Error \"(MKTS/TABLE 2523) field exceeds grid height: #{rpr text}\"\n  if me.fieldcells[ designation ]?\n    throw new Error \"(MKTS/TABLE 1246) unable to redefine field #{designation}: #{rpr text}\"\n  #.........................................................................................................\n  me.fieldcells[ designation ] = d\n  for fieldcell from @_walk_fieldcells me, d\n    ( me.cellfields[ fieldcell.designation ]?= [] ).push designation\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@fieldborder = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 2034) need a text for mkts-table/fieldborder, got a #{type}\"\n  #.........................................................................................................\n  d = @_parse_fieldborder me, text\n  for field in d.fields\n    for side in d.sides\n      ( me.fieldborders[ field ]?= {} )[ side ] = d.style\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@debug = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 8055) need a text for mkts-table/field, got a #{type}\"\n  #.........................................................................................................\n  switch text\n    when 'true'   then me.debug = true\n    when 'false'  then me.debug = false\n    else throw new Error \"(MKTS/TABLE 9035) expected 'true' or 'false' for mkts-table/debug, got #{rpr text}\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@marginwidth = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 1811) need a text for mkts-table/marginwidth, got a #{type}\"\n  #.........................................................................................................\n  @_ensure_unitvector me\n  ### TAINT use parser, validate syntax ###\n  me.marginwidth = parseFloat text\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@marginheight = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 9480) need a text for mkts-table/marginheight, got a #{type}\"\n  #.........................................................................................................\n  @_ensure_unitvector me\n  ### TAINT use parser, validate syntax ###\n  me.marginheight = parseFloat text\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@paddingwidth = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 8254) need a text for mkts-table/paddingwidth, got a #{type}\"\n  #.........................................................................................................\n  @_ensure_unitvector me\n  ### TAINT use parser, validate syntax ###\n  me.paddingwidth = parseFloat text\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@paddingheight = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 7209) need a text for mkts-table/paddingheight, got a #{type}\"\n  #.........................................................................................................\n  @_ensure_unitvector me\n  ### TAINT use parser, validate syntax ###\n  me.paddingheight = parseFloat text\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\n# PARSERS ETC\n#-----------------------------------------------------------------------------------------------------------\n@_idx_from_col_and_row = ( col, row ) ->\n  unless ( type = CND.type_of col ) is 'text'\n    throw new Error \"(MKTS/TABLE 4182) expected a text for col, got a #{rpr type}\"\n  unless ( type = CND.type_of row ) is 'text'\n    throw new Error \"(MKTS/TABLE 5931) expected a text for row, got a #{rpr type}\"\n  #.........................................................................................................\n  col_idx = ( col.codePointAt 0 ) - ( 'a'.codePointAt 0 )\n  row_idx = ( parseInt row, 10 ) - 1\n  return { col: col_idx, row: row_idx, }\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use proper parsing tool ###\n@_parse_range_cellref = ( me, cell_range ) ->\n  unless ( type = CND.type_of cell_range ) is 'text'\n    throw new Error \"(MKTS/TABLE 6402) expected a text for cell_range, got a #{rpr type}\"\n  unless ( match = cell_range.match /^([a-z]{1,3})([0-9]{1,4}):([a-z]{1,3})([0-9]{1,4})$/ )?\n    throw new Error \"(MKTS/TABLE 2499) expected a cell range like 'a1:d4', got #{rpr cell_range}\"\n  ### TAINT don't use EXCJSCC directly ###\n  R = EXCJSCC.decode cell_range.toUpperCase()\n  delete R.dimensions\n  R.tl = R.tl.toLowerCase()\n  R.br = R.br.toLowerCase()\n  R.tr = \"#{( EXCJSCC.n2l R.right ).toLowerCase()}#{R.top}\"\n  R.bl = \"#{( EXCJSCC.n2l R.left ).toLowerCase()}#{R.bottom}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use proper parsing tool ###\n@_parse_coordinate_with_units = ( me, coordinate ) ->\n  unless ( type = CND.type_of coordinate ) is 'text'\n    throw new Error \"(MKTS/TABLE 1045) expected a text for coordinate, got a #{rpr type}\"\n  unless ( match = coordinate.match /^\\s*\\(\\s*([-0-9.]{1,8}[a-z]{0,3})\\s*,\\s*([-0-9.]{1,8}[a-z]{0,3})\\s*\\)\\s*$/ )?\n    throw new Error \"(MKTS/TABLE 2032) expected a coordinate with units like '( 1mm, 2.4cm )', got #{rpr coordinate}\"\n  [ _, x, y, ] = match\n  return { x, y, }\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use proper parsing tool ###\n@_parse_coordinate_without_units = ( me, coordinate ) ->\n  unless ( type = CND.type_of coordinate ) is 'text'\n    throw new Error \"(MKTS/TABLE 2262) expected a text for coordinate, got a #{rpr type}\"\n  unless ( match = coordinate.match /^\\s*\\(\\s*([-0-9.]{1,8})\\s*,\\s*([-0-9.]{1,8})\\s*\\)\\s*$/ )?\n    throw new Error \"(MKTS/TABLE 6904) expected a unitless coordinate like '( 1, 2.4 )', got #{rpr coordinate}\"\n  [ _, x, y, ] = match\n  return { x, y, }\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use proper parsing tool ###\n@_parse_fieldborder = ( me, fieldborder ) ->\n  unless ( type = CND.type_of fieldborder ) is 'text'\n    throw new Error \"(MKTS/TABLE 6043) expected a text for fieldborder, got a #{rpr type}\"\n  unless ( groups = fieldborder.match /^(.+):(.+):(.*)$/ )?\n    throw new Error \"(MKTS/TABLE 5822) expected a fieldborder like 'a1:left:sDashed,sThick', got #{rpr fieldborder}\"\n  [ _, fieldhints, sides, style, ] = groups\n  #.........................................................................................................\n  sides = ( _.trim() for _ in sides.split ',' )\n  sides = [ 'top', 'left', 'bottom', 'right', ] if '*' in sides\n  #.........................................................................................................\n  ### TAINT this will have to be changed to allow for named fields ###\n  fieldhints = new Set ( _.trim() for _ in fieldhints.split ',' )\n  if fieldhints.has '*'\n    fields = Object.keys me.fieldcells\n  else\n    ### TAINT as it stands, `fieldborder'table:bottom,right:red'` will style all bottom and right borders\n    of all fields that have real estate along the bottom and right borders of the table. An improved version\n    should probably only affect the bottom borders of table-bottom fields and the right borders of\n    table-right fields. Use two statements `fieldborder'table:bottom:red'`, `fieldborder'table:right:red'` to\n    express that meaning FTTB. ###\n    if fieldhints.has 'table'\n      fieldhints.delete 'table'\n      for side in sides\n        fieldhints.add d.cellkey for d from @_walk_table_edge_cells me, side\n    cellkeys  = ( fieldhint for fieldhint from fieldhints )\n    fields     = @_fieldnames_from_cellkeys me, cellkeys\n  #.........................................................................................................\n  style = style.trim()\n  style = null if style in [ 'none', '', ]\n  #.........................................................................................................\n  return { fields, sides, style, }\n\n\n#===========================================================================================================\n# EVENT GENERATORS\n#-----------------------------------------------------------------------------------------------------------\n@_walk_events = ( me ) ->\n  @_compute_cell_dimensions     me\n  @_compute_field_dimensions     me\n  @_compute_border_dimensions   me\n  @_compute_pod_dimensions      me\n  #.........................................................................................................\n  ### Preparatory ###\n  yield from @_walk_opening_events                      me\n  yield from @_walk_style_events                        me ### TAINT should write to document preamble ###\n  #.........................................................................................................\n  ### Debugging ### ### TAINT should make ordering configurable so we can under- or overprint debugging ###\n  yield from @_walk_debug_joints_events                 me\n  yield from @_walk_debug_cellgrid_events               me\n  yield from @_walk_debug_fieldgrid_events               me\n  #.........................................................................................................\n  ### Borders, content ###\n  yield from @_walk_field_borders_events                 me\n  yield from @_walk_pod_events                          me\n  #.........................................................................................................\n  ### Finishing ###\n  yield from @_walk_closing_events                      me\n  #.........................................................................................................\n  # ### dump description for debugging ###\n  # ### TAINT make dump configurable ###\n  # ### TAINT print in smaller type ###\n  # yield [ 'tex', '\\\\par{}', ]\n  # yield [ 'text', \"MKTS Table Description:\\n\\n\", ( copy me.meta ), ]\n  # yield [ '(', 'code', [],                       ( copy me.meta ), ]\n  # yield [ '.', 'text', ( rpr me ),               ( copy me.meta ), ]\n  # yield [ ')', 'code', [],                       ( copy me.meta ), ]\n  # yield [ 'tex', '\\\\par{}', ]\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_opening_events = ( me ) ->\n  @_ensure_unitvector me\n  yield [ 'tex', \"\\n\\n\", ]\n  yield [ 'tex', \"\\\\par% Beginning of MKTS Table ==============================================================================\\n\", ]\n  yield [ 'tex', \"{\\\\setlength{\\\\fboxsep}{0mm}%\\n\", ]\n  ### TAINT insert proper dimensions ###\n  # yield [ 'tex', \"\\\\framebox{%\\n\", ] ### framebox ###\n  yield [ 'tex', \"\\\\begin{minipage}[t][45mm][t]{100mm}%\\n\", ]\n  yield [ 'tex', \"\\\\newdimen\\\\mktsTableUnitwidth\\\\setlength{\\\\mktsTableUnitwidth}{#{me.unitwidth}}%\\n\", ]\n  yield [ 'tex', \"\\\\newdimen\\\\mktsTableUnitheight\\\\setlength{\\\\mktsTableUnitheight}{#{me.unitheight}}%\\n\", ]\n  yield [ 'tex', \"\\\\begin{tikzpicture}[ overlay, yshift = 0mm, yscale = -1, line cap = rect ]%\\n\", ]\n  yield [ 'tex', \"\\\\tikzset{x=#{me.unitwidth}};\\\\tikzset{y=#{me.unitheight}};%\\n\", ]\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_closing_events = ( me ) ->\n  yield [ 'tex', \"\\\\end{tikzpicture}%\\n\", ]\n  yield [ 'tex', \"\\\\end{minipage}}%\\n\", ]\n  # yield [ 'tex', \"}%\\n\", ] ### framebox ###\n  yield [ 'tex', \"\\\\par% End of MKTS Table ====================================================================================\\n\\n\", ]\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_style_events = ( me ) ->\n  for key, value of me.styles\n    yield [ 'tex', \"\\\\tikzset{#{key}/.style={#{value}}}%\\n\", ]\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_field_borders_events = ( me ) ->\n  #.........................................................................................................\n  for designation, d of me.border_dimensions\n    continue unless ( fieldborders = me.fieldborders[ designation ] )?\n    if ( borderstyle = fieldborders[ 'left' ] )?\n      yield [ 'tex', \"\\\\draw[#{borderstyle}] (#{d.left},#{d.top}) -- (#{d.left},#{d.bottom});\\n\", ]\n    if ( borderstyle = fieldborders[ 'right' ] )?\n      yield [ 'tex', \"\\\\draw[#{borderstyle}] (#{d.right},#{d.top}) -- (#{d.right},#{d.bottom});\\n\", ]\n    if ( borderstyle = fieldborders[ 'top' ] )?\n      yield [ 'tex', \"\\\\draw[#{borderstyle}] (#{d.left},#{d.top}) -- (#{d.right},#{d.top});\\n\", ]\n    if ( borderstyle = fieldborders[ 'bottom' ] )?\n      yield [ 'tex', \"\\\\draw[#{borderstyle}] (#{d.left},#{d.bottom}) -- (#{d.right},#{d.bottom});\\n\", ]\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_pod_events = ( me ) ->\n  for designation, fieldcells of me.fieldcells\n    d = me.pod_dimensions[ designation ]\n    yield [ 'tex', \"\\\\node[anchor=north west,inner sep=0mm] at (#{d.left},#{d.top})%\\n\", ]\n    yield [ 'tex', \"{\\\\begin{minipage}[t][#{d.height}\\\\mktsTableUnitheight][t]{#{d.width}\\\\mktsTableUnitwidth}%\\n\", ]\n    yield [ 'tex', \"A\\\\hfill{}B\\\\hfill{}C\\\\end{minipage}};%\\n\", ]\n    # yield [ 'tex', \"{\\\\framebox{\\\\begin{minipage}[t][#{d.height}\\\\mktsTableUnitheight][t]{#{d.width}\\\\mktsTableUnitwidth}%\\n\", ]\n    # yield [ 'tex', \"A\\\\hfill{}B\\\\hfill{}C\\\\end{minipage}}};%\\n\", ]\n  #.........................................................................................................\n  yield return\n\n\n#===========================================================================================================\n# EVENT GENERATORS: DEBUGGING EVENTS\n#-----------------------------------------------------------------------------------------------------------\n@_walk_debug_cellgrid_events = ( me ) ->\n  unless me.debug\n    yield return\n  #.........................................................................................................\n  ### TAINT use fixed size like 1mm ###\n  top       = ( @_top_from_row_nr     me, 1             ) - 3\n  bottom    = ( @_bottom_from_row_nr  me, me.gridheight ) + 3\n  for col_nr in [ 1 .. me.gridwidth + 1 ]\n    x = @_left_from_col_nr me, col_nr\n    yield [ 'tex', \"\\\\draw[sDebugQuadgrid] (#{x},#{top}) -- (#{x},#{bottom});\\n\", ]\n  #.........................................................................................................\n  ### TAINT use fixed size like 1mm ###\n  left      = ( @_left_from_col_nr    me, 1             ) - 3\n  right     = ( @_right_from_col_nr   me, me.gridwidth  ) + 3\n  for row_nr in [ 1 .. me.gridheight + 1 ]\n    y = @_top_from_row_nr me, row_nr\n    yield [ 'tex', \"\\\\draw[sDebugQuadgrid] (#{left},#{y}) -- (#{right},#{y});\\n\", ]\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_debug_fieldgrid_events = ( me ) ->\n  unless me.debug\n    yield return\n  #.........................................................................................................\n  for designation, d of me.field_dimensions\n    ### TAINT use fixed size like 1mm ###\n    left   = d.left   + 0.5\n    right  = d.right  - 0.5\n    top    = d.top    + 0.5\n    bottom = d.bottom - 0.5\n    yield [ 'tex', \"\\\\draw[sDebugCellgrid] (#{left},#{bottom})\" \\\n                 + \" -- (#{left},#{top})\"                       \\\n                 + \" -- (#{right},#{top});\", ]\n    yield [ 'tex', \" \\\\draw[sDebugCellgrid] (#{right},#{top}) \" \\\n                 + \" -- (#{right},#{bottom});\", ]\n    yield [ 'tex', \" \\\\draw[sDebugCellgrid] (#{left},#{bottom}) \" \\\n                 + \" -- (#{right},#{bottom});\", ]\n    yield [ 'tex', \"\\n\", ]\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_debug_joints_events = ( me ) ->\n  unless me.debug\n    yield return\n  @_ensure_joint_coordinates  me\n  #.........................................................................................................\n  ### TAINT use fixed size like 1mm ###\n  for [ col_letter, col_nr, ] from @_walk_column_letters_and_numbers me, 'short'\n    for row_nr from @_walk_row_numbers me, 'short'\n      x = ( @_left_from_col_nr  me, col_nr ) + 2\n      y = ( @_top_from_row_nr   me, row_nr ) + 2\n      cellkey = \"#{col_letter}#{row_nr}\"\n      yield [ 'tex', \"\\\\node[sDebugJoints] at (#{x},#{y}) {{\\\\mktsStyleCode{}#{cellkey}}}; \", ]\n  #.........................................................................................................\n  yield return\n\n\n#===========================================================================================================\n# ENSURERS\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_unitvector = ( me ) ->\n  @unitwidth  me, me.default.unitwidth   unless me.unitwidth?\n  @unitheight me, me.default.unitheight  unless me.unitheight?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_joint_coordinates = ( me ) ->\n  return null if me.joint_coordinates?\n  @_ensure_cellwidths   me\n  @_ensure_cellheights  me\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_gridwidth = ( me ) ->\n  return null if me.gridwidth?\n  throw new Error \"(MKTS/TABLE 5822) gridwidth must be set\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_gridheight = ( me ) ->\n  return null if me.gridheight?\n  throw new Error \"(MKTS/TABLE 5822) gridheight must be set\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_cellwidths = ( me ) ->\n  return null if ( me.cellwidths.length is me.gridwidth + 1 ) and ( null not in me.cellwidths[ 1 .. ] )\n  throw new Error \"(MKTS/TABLE 5822) cellwidths must be all set; got #{rpr me.cellwidths}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_cellheights = ( me ) ->\n  return null if ( me.cellheights.length is me.gridheight + 1 ) and ( null not in me.cellheights[ 1 .. ] )\n  throw new Error \"(MKTS/TABLE 5822) cellheights must be all set; got #{rpr me.cellheights}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_margin = ( me ) ->\n  @marginwidth   me, me.default.marginwidth   unless me.marginwidth?\n  @marginheight  me, me.default.marginheight  unless me.marginheight?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_padding = ( me ) ->\n  @paddingwidth   me, me.default.paddingwidth   unless me.paddingwidth?\n  @paddingheight  me, me.default.paddingheight  unless me.paddingheight?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_compute_cell_dimensions = ( me ) ->\n  for [ col_letter, col_nr, ] from @_walk_column_letters_and_numbers me, 'short'\n    for row_nr from @_walk_row_numbers me, 'short'\n      designation   = \"#{col_letter}#{row_nr}\"\n      left   = @_left_from_col_nr   me, col_nr\n      right  = @_right_from_col_nr  me, col_nr\n      top    = @_top_from_row_nr    me, row_nr\n      bottom = @_bottom_from_row_nr me, row_nr\n      # ### TAINT must not become negative ###\n      # cellwidth_u   = right  - left # - 2 * me.marginwidth\n      # cellheight_u  = bottom - top  # - 2 * me.marginheight\n      me.cell_dimensions[ designation ] = {\n        col_nr,         row_nr,\n        left,    right,\n        top,     bottom, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_compute_field_dimensions = ( me ) ->\n  ### TAINT use me.field_dimensions ###\n  for designation, fieldcells of me.fieldcells\n    left   = ( @_left_from_col_nr   me, fieldcells.left    )\n    right  = ( @_right_from_col_nr  me, fieldcells.right   )\n    top    = ( @_top_from_row_nr    me, fieldcells.top     )\n    bottom = ( @_bottom_from_row_nr me, fieldcells.bottom  )\n    width       = right  - left\n    height      = bottom - top\n    me.field_dimensions[ designation ] = {\n      left,  right,   width,\n      top,   bottom,  height, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_compute_border_dimensions = ( me ) ->\n  for designation, d of me.field_dimensions\n    left   = d.left   + me.marginwidth\n    right  = d.right  - me.marginwidth\n    top    = d.top    + me.marginheight\n    bottom = d.bottom - me.marginheight\n    ### TAINT must not become negative ###\n    width       = right  - left\n    height      = bottom - top\n    me.border_dimensions[ designation ] = {\n      left,  right,   width,\n      top,   bottom,  height, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_compute_pod_dimensions = ( me ) ->\n  for designation, d of me.field_dimensions\n    left   = d.left   + me.paddingwidth\n    right  = d.right  - me.paddingwidth\n    top    = d.top    + me.paddingheight\n    bottom = d.bottom - me.paddingheight\n    ### TAINT must not become negative ###\n    width       = right  - left\n    height      = bottom - top\n    me.pod_dimensions[ designation ] = {\n      left,  right,   width,\n      top,   bottom,  height, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_left_from_col_nr = ( me, col_nr ) ->\n  ### TAINT should precompute ###\n  @_ensure_cellwidths me\n  R = 0\n  R += me.cellwidths[ nr ] for nr in [ 1 ... col_nr ]\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_right_from_col_nr = ( me, col_nr ) ->\n  return ( @_left_from_col_nr me, col_nr ) + me.cellwidths[ col_nr ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_top_from_row_nr = ( me, row_nr ) ->\n  ### TAINT should precompute ###\n  @_ensure_cellheights me\n  R = 0\n  R += me.cellheights[ nr ] for nr in [ 1 ... row_nr ]\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_bottom_from_row_nr = ( me, row_nr ) ->\n  return ( @_top_from_row_nr me, row_nr ) + me.cellheights[ row_nr ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_fieldnames_from_cellkeys = ( me, cellkeys ) ->\n  R = new Set()\n  for cellkey in cellkeys\n    continue unless ( cellfields = me.cellfields[ cellkey ] )?\n    R.add fieldname for fieldname in cellfields\n  return ( fieldname for fieldname from R )\n\n\n#===========================================================================================================\n# ITERATORS\n#-----------------------------------------------------------------------------------------------------------\n@_walk_column_letters_and_numbers = ( me, mode ) ->\n  @_ensure_gridwidth me\n  delta = if mode is 'short' then 0 else 1\n  for col_nr in [ 1 .. me.gridwidth + delta ]\n    ### TAINT don't use EXCJSCC directly ###\n    col_letter  = ( EXCJSCC.n2l col_nr ).toLowerCase()\n    yield [ col_letter, col_nr, ]\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_row_numbers = ( me, mode ) ->\n  @_ensure_gridheight me\n  delta = if mode is 'short' then 0 else 1\n  yield row_nr for row_nr in [ 1 .. me.gridheight + delta ]\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_fieldcells = ( me, fieldcells ) ->\n  for row_nr in [ fieldcells.top .. fieldcells.bottom ]\n    for col_nr in [ fieldcells.left .. fieldcells.right ]\n      ### TAINT don't use EXCJSCC directly ###\n      col_letter  = ( EXCJSCC.n2l col_nr ).toLowerCase()\n      designation = \"#{col_letter}#{row_nr}\"\n      yield { col_nr, row_nr, col_letter, designation, }\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_table_edge_fieldnames = ( me, edge ) ->\n  seen_fieldnames = new Set()\n  for d from @_walk_table_edge_cells me, edge\n    continue unless ( fieldnames = me.cellfields[ d.cellkey ] )?\n    for fieldname in fieldnames\n      continue if seen_fieldnames.has fieldname\n      seen_fieldnames.add fieldname\n      yield fieldname\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_table_edge_cells = ( me, edge ) ->\n  switch edge\n    when 'left'\n      col_nr_1    = 1\n      col_nr_2    = 1\n      row_nr_1    = 1\n      row_nr_2    = me.gridheight\n    when 'right'\n      col_nr_1    = me.gridwidth\n      col_nr_2    = me.gridwidth\n      row_nr_1    = 1\n      row_nr_2    = me.gridheight\n    when 'top'\n      col_nr_1    = 1\n      col_nr_2    = me.gridwidth\n      row_nr_1    = 1\n      row_nr_2    = 1\n    when 'bottom'\n      col_nr_1    = 1\n      col_nr_2    = me.gridwidth\n      row_nr_1    = me.gridheight\n      row_nr_2    = me.gridheight\n    when '*'\n      yield from @_walk_table_edge_cells me, 'left'\n      yield from @_walk_table_edge_cells me, 'right'\n      yield from @_walk_table_edge_cells me, 'top'\n      yield from @_walk_table_edge_cells me, 'bottom'\n      yield return\n    else\n      throw new Error \"(MKTS/TABLE 4550) illegal argument for edge #{rpr edge}\"\n  for row_nr in [ row_nr_1 .. row_nr_2 ]\n    for col_nr in [ col_nr_1 .. col_nr_2 ]\n      ### TAINT don't use EXCJSCC directly ###\n      col_letter  = ( EXCJSCC.n2l col_nr ).toLowerCase()\n      cellkey     = \"#{col_letter}#{row_nr}\"\n      yield { col_nr, row_nr, col_letter, cellkey, edge, }\n  yield return\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\n_stackerr = ( ref, message, error = null ) ->\n  ###\n  Prepends local error message to the original one so we get more informative traces. Usage:\n\n  ```\n  try\n    ...\n  catch error\n    throw _stackerr error, \"(MKTS/TABLE 2406) ... new message ...\"\n  ```\n  ###\n  message = \"(MKTS/TABLE##{ref}) #{message}\"\n  if error?\n    error.message = \"#{message}\\n#{error.message}\"\n  else\n    ### TAINT elide current line from stack trace ###\n    error = new Error message\n  return error\n\n\n"
  ]
}