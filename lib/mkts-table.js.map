{
  "version": 3,
  "file": "mkts-table.js",
  "sourceRoot": "..",
  "sources": [
    "src/mkts-table.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/TABLE'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nECS                       = require './eval-cs'\nMKTS                      = require './main'\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nunstamp                   = MD_READER.unstamp.bind     MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\n#...........................................................................................................\ncopy                      = ( x ) -> Object.assign {}, x\nEXCJSCC                   = require './exceljs-spreadsheet-address-codec'\n\n\n\n#===========================================================================================================\n# INITIALIZATION\n#-----------------------------------------------------------------------------------------------------------\n@_new_description = ( S ) ->\n  R =\n    '~isa':     'MKTS/TABLE/description'\n    cellquads:          {} ### cell extents in terms of quads, by designations ###\n    cellborders:        {} ### cell borders, as TikZ styles by sides ###\n    celldimensions:     {} ### cell extents in terms of (unitwidth,unitheight), by designations ###\n    quadwidths:         [ null, ] ### [ 0 ] is default, [ 1 .. gridwidth ] explicit or implicit widths ###\n    quadheights:        [ null, ] ### [ 0 ] is default, [ 1 .. gridheight ] explicit or implicit heights ###\n    joint_coordinates:  null\n    debug:              false\n    #.......................................................................................................\n    styles:\n      sThin:              'thin'\n      sThick:             'thick'\n      sDotted:            'dotted'\n      sDashed:            'dashed'\n      sRed:               'red'\n      sBlack:             'black'\n      sDebugQuadgrid:     'gray!40,sDotted,sThin'\n      sDebugJoints:       'gray!30,sThick'\n    #.......................................................................................................\n    default:\n      # gridwidth:     4\n      # gridheight:    4\n      unitwidth:    '1mm'\n      unitheight:   '1mm'\n      # quadwidth:     10\n      # quadheight:    10\n      marginwidth:   0\n      marginheight:  0\n      paddingwidth:  0\n      paddingheight: 0\n  return R\n\n\n#===========================================================================================================\n# PUBLIC API\n#-----------------------------------------------------------------------------------------------------------\n@gridwidth = ( me, text ) ->\n  #.........................................................................................................\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 4517) need a text for mkts-table/gridwidth, got a #{type}\"\n  unless ( match = text.match /^\\s*(\\d+)\\s*$/ )?\n    throw new Error \"(MKTS/TABLE 4300) need a text like '3' or similar for mkts-table/gridwidth, got #{rpr text}\"\n  if me.gridwidth?\n    throw new Error \"(MKTS/TABLE 5827) unable to re-define gridwidth\"\n  #.........................................................................................................\n  me.gridwidth      = parseInt match[ 1 ], 10\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@gridheight = ( me, text ) ->\n  #.........................................................................................................\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 9150) need a text for mkts-table/gridheight, got a #{type}\"\n  unless ( match = text.match /^\\s*(\\d+)\\s*$/ )?\n    throw new Error \"(MKTS/TABLE 6572) need a text like '3' or similar for mkts-table/gridheight, got #{rpr text}\"\n  if me.gridheight?\n    throw new Error \"(MKTS/TABLE 6501) unable to re-define gridheight\"\n  #.........................................................................................................\n  me.gridheight     = parseInt match[ 1 ], 10\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@unitwidth = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 9131) need a text for mkts-table/unitwidth, got a #{type}\"\n  if me.unitwidth?\n    throw new Error \"(MKTS/TABLE 6477) unable to re-define unitheight\"\n  #.........................................................................................................\n  me.unitwidth = text\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@unitheight = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 7680) need a text for mkts-table/unitheight, got a #{type}\"\n  if me.unitheight?\n    throw new Error \"(MKTS/TABLE 2142) unable to re-define unitheight\"\n  #.........................................................................................................\n  me.unitheight = text\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@quadwidths = ( me, text ) ->\n  ### TAINT should validate ###\n  @_ensure_gridwidth me\n  value = parseFloat text\n  me.quadwidths[  0 ] = value ### set default ###\n  me.quadwidths[ nr ] = value for nr in [ 1 .. me.gridwidth ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@quadheights = ( me, text ) ->\n  ### TAINT should validate ###\n  @_ensure_gridheight me\n  value = parseFloat text\n  me.quadheights[  0 ] = value ### set default ###\n  me.quadheights[ nr ] = value for nr in [ 1 .. me.gridheight ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@cellquads = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 8532) need a text for mkts-table/cellquads, got a #{type}\"\n  #.........................................................................................................\n  @_ensure_gridwidth  me\n  @_ensure_gridheight me\n  @_ensure_unitvector me\n  d           = @_parse_range_quadref me, text\n  designation = d.tl.toUpperCase()\n  if d.right > me.gridwidth\n    throw new Error \"(MKTS/TABLE 2282) cell exceeds grid width: #{rpr text}\"\n  if d.bottom > me.gridheight\n    throw new Error \"(MKTS/TABLE 2523) cell exceeds grid height: #{rpr text}\"\n  if me.cellquads[ designation ]?\n    throw new Error \"(MKTS/TABLE 1246) unable to redefine cell #{designation}: #{rpr text}\"\n  #.........................................................................................................\n  me.cellquads[ designation ] = d\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@cellborder = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 2034) need a text for mkts-table/cellborder, got a #{type}\"\n  #.........................................................................................................\n  d                 = @_parse_cellborder me, text\n  if d.side is '*'\n    for side in [ 'left', 'right', 'top', 'bottom', ]\n      target            = me.cellborders[ d.cellref ]?= {}\n      target[ side ]    = if d.style is 'none' then null else d.style\n  else\n    target            = me.cellborders[ d.cellref ]?= {}\n    target[ d.side ]  = if d.style is 'none' then null else d.style\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@debug = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 8055) need a text for mkts-table/cell, got a #{type}\"\n  #.........................................................................................................\n  switch text\n    when 'true'   then me.debug = true\n    when 'false'  then me.debug = false\n    else throw new Error \"(MKTS/TABLE 9035) expected 'true' or 'false' for mkts-table/debug, got #{rpr text}\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@marginwidth = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 1811) need a text for mkts-table/marginwidth, got a #{type}\"\n  #.........................................................................................................\n  @_ensure_unitvector me\n  ### TAINT use parser, validate syntax ###\n  me.marginwidth = parseFloat text\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@marginheight = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 9480) need a text for mkts-table/marginheight, got a #{type}\"\n  #.........................................................................................................\n  @_ensure_unitvector me\n  ### TAINT use parser, validate syntax ###\n  me.marginheight = parseFloat text\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@paddingwidth = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 8254) need a text for mkts-table/paddingwidth, got a #{type}\"\n  #.........................................................................................................\n  @_ensure_unitvector me\n  ### TAINT use parser, validate syntax ###\n  me.paddingwidth = parseFloat text\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@paddingheight = ( me, text ) ->\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 7209) need a text for mkts-table/paddingheight, got a #{type}\"\n  #.........................................................................................................\n  @_ensure_unitvector me\n  ### TAINT use parser, validate syntax ###\n  me.paddingheight = parseFloat text\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\n# PARSERS ETC\n#-----------------------------------------------------------------------------------------------------------\n@_idx_from_col_and_row = ( col, row ) ->\n  unless ( type = CND.type_of col ) is 'text'\n    throw new Error \"(MKTS/TABLE 4182) expected a text for col, got a #{rpr type}\"\n  unless ( type = CND.type_of row ) is 'text'\n    throw new Error \"(MKTS/TABLE 5931) expected a text for row, got a #{rpr type}\"\n  #.........................................................................................................\n  col_idx = ( col.codePointAt 0 ) - ( 'a'.codePointAt 0 )\n  row_idx = ( parseInt row, 10 ) - 1\n  return { col: col_idx, row: row_idx, }\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use proper parsing tool ###\n@_parse_range_quadref = ( me, quad_range ) ->\n  unless ( type = CND.type_of quad_range ) is 'text'\n    throw new Error \"(MKTS/TABLE 6402) expected a text for quad_range, got a #{rpr type}\"\n  unless ( match = quad_range.match /^([a-z]{1,3})([0-9]{1,4}):([a-z]{1,3})([0-9]{1,4})$/ )?\n    throw new Error \"(MKTS/TABLE 2499) expected a quad range like 'a1:d4', got #{rpr quad_range}\"\n  ### TAINT don't use EXCJSCC directly ###\n  R = EXCJSCC.decode quad_range.toUpperCase()\n  delete R.dimensions\n  R.tl = R.tl.toLowerCase()\n  R.br = R.br.toLowerCase()\n  R.tr = \"#{( EXCJSCC.n2l R.right ).toLowerCase()}#{R.top}\"\n  R.bl = \"#{( EXCJSCC.n2l R.left ).toLowerCase()}#{R.bottom}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use proper parsing tool ###\n@_parse_coordinate_with_units = ( me, coordinate ) ->\n  unless ( type = CND.type_of coordinate ) is 'text'\n    throw new Error \"(MKTS/TABLE 1045) expected a text for coordinate, got a #{rpr type}\"\n  unless ( match = coordinate.match /^\\s*\\(\\s*([-0-9.]{1,8}[a-z]{0,3})\\s*,\\s*([-0-9.]{1,8}[a-z]{0,3})\\s*\\)\\s*$/ )?\n    throw new Error \"(MKTS/TABLE 2032) expected a coordinate with units like '( 1mm, 2.4cm )', got #{rpr coordinate}\"\n  [ _, x, y, ] = match\n  return { x, y, }\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use proper parsing tool ###\n@_parse_coordinate_without_units = ( me, coordinate ) ->\n  unless ( type = CND.type_of coordinate ) is 'text'\n    throw new Error \"(MKTS/TABLE 2262) expected a text for coordinate, got a #{rpr type}\"\n  unless ( match = coordinate.match /^\\s*\\(\\s*([-0-9.]{1,8})\\s*,\\s*([-0-9.]{1,8})\\s*\\)\\s*$/ )?\n    throw new Error \"(MKTS/TABLE 6904) expected a unitless coordinate like '( 1, 2.4 )', got #{rpr coordinate}\"\n  [ _, x, y, ] = match\n  return { x, y, }\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use proper parsing tool ###\n@_parse_cellborder = ( me, cellborder ) ->\n  unless ( type = CND.type_of cellborder ) is 'text'\n    throw new Error \"(MKTS/TABLE 6043) expected a text for cellborder, got a #{rpr type}\"\n  unless ( match = cellborder.match /^\\s*([A-Z]{1,3}[-0-9.]{1,4})-(left|right|top|bottom|\\*)\\s*:\\s*(.+)$/ )?\n    throw new Error \"(MKTS/TABLE 5822) expected a cellborder like 'a1-left:sDashed,sThick', got #{rpr cellborder}\"\n  [ _, cellref, side, style, ] = match\n  return { cellref, side, style, }\n\n\n#===========================================================================================================\n# EVENT GENERATORS\n#-----------------------------------------------------------------------------------------------------------\n@_walk_events = ( me ) ->\n  #.........................................................................................................\n  ### Preparatory ###\n  yield from @_walk_opening_events                      me\n  yield from @_walk_style_events                        me\n  yield from @_walk_margin_events                       me\n  yield from @_walk_column_and_row_coordinates_events   me\n  yield from @_walk_joint_coordinates_events            me\n  yield from @_walk_quad_sides_events                   me\n  yield from @_walk_quad_coordinates_events             me\n  yield from @_walk_pod_events                          me\n  #.........................................................................................................\n  ### Debugging ###\n  ### TAINT should make ordering configurable so we can under- or overprint debugging ###\n  yield from @_walk_debug_joints_events                 me\n  yield from @_walk_debug_quadgrid_events               me\n  #.........................................................................................................\n  ### Borders, content ###\n  # yield from @_walk_quad_borders_events                 me ### TAINT do we need quad borders? ###\n  yield from @_walk_cell_borders_events                 me\n  #.........................................................................................................\n  ### Finishing ###\n  yield from @_walk_closing_events                      me\n  #.........................................................................................................\n  # ### dump description for debugging ###\n  # ### TAINT make dump configurable ###\n  # ### TAINT print in smaller type ###\n  # yield [ 'tex', '\\\\par{}', ]\n  # yield [ 'text', \"MKTS Table Description:\\n\\n\", ( copy me.meta ), ]\n  # yield [ '(', 'code', [],                       ( copy me.meta ), ]\n  # yield [ '.', 'text', ( rpr me ),               ( copy me.meta ), ]\n  # yield [ ')', 'code', [],                       ( copy me.meta ), ]\n  # yield [ 'tex', '\\\\par{}', ]\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_opening_events = ( me ) ->\n  @_ensure_unitvector me\n  yield [ 'tex', \"\\n\\n\", ]\n  yield [ 'tex', \"\\\\par% Beginning of MKTS Table ==============================================================================\\n\", ]\n  yield [ 'tex', \"{\\\\setlength{\\\\fboxsep}{0mm}%\\n\", ]\n  ### TAINT insert proper dimensions ###\n  yield [ 'tex', \"\\\\framebox{\\\\begin{minipage}[t][45mm][t]{100mm}%\\n\", ]\n  yield [ 'tex', \"\\\\newdimen\\\\mktsTableUnitwidth\\\\setlength{\\\\mktsTableUnitwidth}{#{me.unitwidth}}%\\n\", ]\n  yield [ 'tex', \"\\\\newdimen\\\\mktsTableUnitheight\\\\setlength{\\\\mktsTableUnitheight}{#{me.unitheight}}%\\n\", ]\n  yield [ 'tex', \"\\\\begin{tikzpicture}[ overlay, yshift = 0mm, yscale = -1, line cap = round ]%\\n\", ]\n  yield [ 'tex', \"\\\\tikzset{ x = #{me.unitwidth} };%\\n\", ]\n  yield [ 'tex', \"\\\\tikzset{ y = #{me.unitheight} };%\\n\", ]\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_closing_events = ( me ) ->\n  yield [ 'tex', \"\\\\end{tikzpicture}%\\n\", ]\n  yield [ 'tex', \"\\\\end{minipage}}}%\\n\", ]\n  yield [ 'tex', \"\\\\par% End of MKTS Table ====================================================================================\\n\\n\", ]\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_style_events = ( me ) ->\n  for key, value of me.styles\n    yield [ 'tex', \"\\\\tikzset{#{key}/.style={#{value}}}%\\n\", ]\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_margin_events = ( me ) ->\n  @_ensure_margin me\n  yield [ 'tex', \"\\\\coordinate (marginwidth)   at ( #{me.marginwidth}, 0 );%\\n\", ]\n  yield [ 'tex', \"\\\\coordinate (marginheight)  at ( 0, #{me.marginheight} );%\\n\", ]\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_padding_events = ( me ) ->\n  @_ensure_padding me\n  yield [ 'tex', \"\\\\coordinate (paddingwidth)   at ( #{me.paddingwidth}, 0 );%\\n\", ]\n  yield [ 'tex', \"\\\\coordinate (paddingheight)  at ( 0, #{me.paddingheight} );%\\n\", ]\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_column_and_row_coordinates_events = ( me ) ->\n  @_ensure_joint_coordinates  me\n  x_position  = 0\n  y_position  = 0\n  #.........................................................................................................\n  for [ col_letter, col_nr, ] from @_walk_column_letters_and_numbers me, 'long'\n    yield [ 'tex', \"\\\\coordinate (col_#{col_letter}) at ( #{x_position}, 0 );%\\n\", ]\n    x_position += me.quadwidths[ col_nr ]\n  #.........................................................................................................\n  for row_nr from @_walk_row_numbers me, 'long'\n    yield [ 'tex', \"\\\\coordinate (row_#{row_nr}) at ( 0, #{y_position} );%\\n\", ]\n    y_position += me.quadheights[ row_nr ]\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_joint_coordinates_events = ( me ) ->\n  @_ensure_joint_coordinates  me\n  x_position  = 0\n  y_position  = 0\n  #.........................................................................................................\n  ### TAINT code duplication; use iterator ###\n  for [ col_letter, col_nr, ] from @_walk_column_letters_and_numbers me, 'long'\n    for row_nr from @_walk_row_numbers me, 'long'\n      joint = \"#{col_letter}#{row_nr}\"\n      yield [ 'tex', \"\\\\coordinate (joint_#{joint}) at ($ (col_#{col_letter}) + (row_#{row_nr}) $);%\\n\", ]\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_quad_sides_events = ( me ) ->\n  @_ensure_joint_coordinates  me\n  #.........................................................................................................\n  for [ col_letter, col_nr, ] from @_walk_column_letters_and_numbers me, 'long'\n    yield [ 'tex', \"\\\\coordinate (col_#{col_letter} W border) at ($ (col_#{col_letter}) - (marginwidth) $);%\\n\", ]\n    yield [ 'tex', \"\\\\coordinate (col_#{col_letter} E border) at ($ (col_#{col_letter}) + (marginwidth) $);%\\n\", ]\n  #.........................................................................................................\n  for row_nr from @_walk_row_numbers me, 'long'\n    yield [ 'tex', \"\\\\coordinate (row_#{row_nr} N border) at ($ (row_#{row_nr}) - (marginheight) $);%\\n\", ]\n    yield [ 'tex', \"\\\\coordinate (row_#{row_nr} S border) at ($ (row_#{row_nr}) + (marginheight) $);%\\n\", ]\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_quad_coordinates_events = ( me ) ->\n  @_ensure_joint_coordinates  me\n  #.........................................................................................................\n  ### TAINT code duplication; use iterator ###\n  for [ col_letter_1, col_nr_1, ] from @_walk_column_letters_and_numbers me, 'short'\n    col_nr_2      = col_nr_1 + 1\n    ### TAINT don't use EXCJSCC directly ###\n    col_letter_2  = ( EXCJSCC.n2l col_nr_2 ).toLowerCase()\n    for row_nr_1 from @_walk_row_numbers me, 'short'\n      row_nr_2  = row_nr_1 + 1\n      quad = \"#{col_letter_1}#{row_nr_1}\"\n      yield [ 'tex', \"\\\\coordinate (quad_#{quad} top left)      at ($ (row_#{row_nr_1} S border) + (col_#{col_letter_1} E border) $);%\\n\", ]\n      yield [ 'tex', \"\\\\coordinate (quad_#{quad} top right)     at ($ (row_#{row_nr_1} S border) + (col_#{col_letter_2} W border) $);%\\n\", ]\n      yield [ 'tex', \"\\\\coordinate (quad_#{quad} bottom left)   at ($ (row_#{row_nr_2} N border) + (col_#{col_letter_1} E border) $);%\\n\", ]\n      yield [ 'tex', \"\\\\coordinate (quad_#{quad} bottom right)  at ($ (row_#{row_nr_2} N border) + (col_#{col_letter_2} W border) $);%\\n\", ]\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_quad_borders_events = ( me ) ->\n  #.........................................................................................................\n  for designation, cellquads of me.cellquads\n    continue unless ( cellborders = me.cellborders[ designation ] )?\n    for d from @_walk_cellquads_sides me, cellquads, '*'\n      continue unless ( borderstyle = cellborders[ d.side ] )?\n      switch d.side\n        when 'top', 'bottom'\n          yield [ 'tex', \"\\\\draw[#{borderstyle}] (quad_#{d.quad} #{d.side} left) -- (quad_#{d.quad} #{d.side} right);\\n\", ]\n        when 'left', 'right'\n          yield [ 'tex', \"\\\\draw[#{borderstyle}] (quad_#{d.quad} top #{d.side}) -- (quad_#{d.quad} bottom #{d.side});\\n\", ]\n        else\n          throw new Error \"(MKTS/TABLE 1634) illegal value for side #{rpr d.side}\"\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_cell_borders_events = ( me ) ->\n  #.........................................................................................................\n  for designation, cellquads of me.cellquads\n    continue unless ( cellborders = me.cellborders[ designation ] )?\n    if ( borderstyle = cellborders[ 'left' ] )?\n      yield [ 'tex', \"\\\\draw[#{borderstyle}] (quad_#{cellquads.tl} top left) -- (quad_#{cellquads.bl} bottom left);\\n\", ]\n    if ( borderstyle = cellborders[ 'right' ] )?\n      yield [ 'tex', \"\\\\draw[#{borderstyle}] (quad_#{cellquads.tr} top right) -- (quad_#{cellquads.br} bottom right);\\n\", ]\n    if ( borderstyle = cellborders[ 'top' ] )?\n      yield [ 'tex', \"\\\\draw[#{borderstyle}] (quad_#{cellquads.tl} top left) -- (quad_#{cellquads.tr} top right);\\n\", ]\n    if ( borderstyle = cellborders[ 'bottom' ] )?\n      yield [ 'tex', \"\\\\draw[#{borderstyle}] (quad_#{cellquads.bl} bottom left) -- (quad_#{cellquads.br} bottom right);\\n\", ]\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_pod_events = ( me ) ->\n  @_ensure_pod_dimensions me\n  #.........................................................................................................\n  for designation, cellquads of me.cellquads\n    d = me.celldimensions[ designation ]\n    yield [ 'tex', \"\\\\node[anchor=north west,inner sep=0mm] at ($ (quad_#{cellquads.tl} top left) + (#{me.paddingwidth},#{me.paddingheight}) $)%\\n\", ]\n    yield [ 'tex', \"{\\\\framebox{\\\\begin{minipage}[t][#{d.podheight_u}\\\\mktsTableUnitheight][t]{#{d.podwidth_u}\\\\mktsTableUnitwidth}%\\n\", ]\n    yield [ 'tex', \"A\\\\hfill{}B\\\\hfill{}C\\\\end{minipage}}};%\\n\", ]\n  #.........................................................................................................\n  yield return\n\n\n#===========================================================================================================\n# EVENT GENERATORS: DEBUGGING EVENTS\n#-----------------------------------------------------------------------------------------------------------\n@_walk_debug_quadgrid_events = ( me ) ->\n  unless me.debug\n    yield return\n  #.........................................................................................................\n  ### TAINT code duplication; use iterator ###\n  for [ col_letter_1, col_nr_1, ] from @_walk_column_letters_and_numbers me, 'short'\n    col_nr_2      = col_nr_1 + 1\n    ### TAINT don't use EXCJSCC directly ###\n    col_letter_2  = ( EXCJSCC.n2l col_nr_2 ).toLowerCase()\n    for row_nr_1 from @_walk_row_numbers me, 'short'\n      row_nr_2  = row_nr_1 + 1\n      quad = \"#{col_letter_1}#{row_nr_1}\"\n      yield [ 'tex', \"\\\\draw[sDebugQuadgrid] (quad_#{quad} top    left)  -- (quad_#{quad} top    right);%\\n\",  ]\n      yield [ 'tex', \"\\\\draw[sDebugQuadgrid] (quad_#{quad} top    left)  -- (quad_#{quad} bottom left);%\\n\",   ]\n      yield [ 'tex', \"\\\\draw[sDebugQuadgrid] (quad_#{quad} bottom left)  -- (quad_#{quad} bottom right);%\\n\",  ]\n      yield [ 'tex', \"\\\\draw[sDebugQuadgrid] (quad_#{quad} top    right) -- (quad_#{quad} bottom right);%\\n\",  ]\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_debug_joints_events = ( me ) ->\n  unless me.debug\n    yield return\n  @_ensure_joint_coordinates  me\n  #.........................................................................................................\n  ### TAINT code duplication; use iterator ###\n  for [ col_letter, col_nr, ] from @_walk_column_letters_and_numbers me, 'long'\n    for row_nr from @_walk_row_numbers me, 'long'\n      joint = \"#{col_letter}#{row_nr}\"\n      yield [ 'tex', \"\\\\node[sDebugJoints] at ($(joint_#{joint})+(2mm,2mm)$) {{\\\\mktsStyleCode{}#{joint}}}; \", ]\n      yield [ 'tex', \"\\\\node[sDebugJoints, shape = circle, draw ] at (joint_#{joint}) {};%\\n\", ]\n  #.........................................................................................................\n  yield return\n\n\n#===========================================================================================================\n# ENSURERS\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_unitvector = ( me ) ->\n  @unitwidth  me, me.default.unitwidth   unless me.unitwidth?\n  @unitheight me, me.default.unitheight  unless me.unitheight?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_joint_coordinates = ( me ) ->\n  return null if me.joint_coordinates?\n  @_ensure_quadwidths   me\n  @_ensure_quadheights  me\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_gridwidth = ( me ) ->\n  return null if me.gridwidth?\n  throw new Error \"(MKTS/TABLE 5822) gridwidth must be set\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_gridheight = ( me ) ->\n  return null if me.gridheight?\n  throw new Error \"(MKTS/TABLE 5822) gridheight must be set\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_quadwidths = ( me ) ->\n  return null if ( me.quadwidths.length is me.gridwidth + 1 ) and ( null not in me.quadwidths[ 1 .. ] )\n  throw new Error \"(MKTS/TABLE 5822) quadwidths must be all set; got #{rpr me.quadwidths}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_quadheights = ( me ) ->\n  return null if ( me.quadheights.length is me.gridheight + 1 ) and ( null not in me.quadheights[ 1 .. ] )\n  throw new Error \"(MKTS/TABLE 5822) quadheights must be all set; got #{rpr me.quadheights}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_margin = ( me ) ->\n  @marginwidth   me, me.default.marginwidth   unless me.marginwidth?\n  @marginheight  me, me.default.marginheight  unless me.marginheight?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_padding = ( me ) ->\n  @paddingwidth   me, me.default.paddingwidth   unless me.paddingwidth?\n  @paddingheight  me, me.default.paddingheight  unless me.paddingheight?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_pod_dimensions = ( me ) ->\n  for designation, cellquads of me.cellquads\n    continue if me.celldimensions[ designation ]?\n    left_edge_u   = @_left_edge_u_from_col_nr   me, cellquads.left\n    right_edge_u  = @_right_edge_u_from_col_nr  me, cellquads.right\n    top_edge_u    = @_top_edge_u_from_col_nr    me, cellquads.top\n    bottom_edge_u = @_bottom_edge_u_from_col_nr me, cellquads.bottom\n    ### TAINT must not become negative ###\n    podwidth_u    = right_edge_u  - left_edge_u - 2 * me.paddingwidth\n    podheight_u   = bottom_edge_u - top_edge_u  - 2 * me.paddingheight\n    me.celldimensions[ designation ] = {\n      left_edge_u,   right_edge_u,  podwidth_u,\n      top_edge_u,   bottom_edge_u, podheight_u, }\n  debug '66533', me.celldimensions\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_left_edge_u_from_col_nr = ( me, col_nr ) ->\n  ### TAINT should precompute ###\n  @_ensure_quadwidths me\n  R = 0\n  R += me.quadwidths[ nr ] for nr in [ 1 ... col_nr ]\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_right_edge_u_from_col_nr = ( me, col_nr ) ->\n  return ( @_left_edge_u_from_col_nr me, col_nr ) + me.quadwidths[ col_nr ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_top_edge_u_from_col_nr = ( me, col_nr ) ->\n  ### TAINT should precompute ###\n  @_ensure_quadheights me\n  R = 0\n  R += me.quadheights[ nr ] for nr in [ 1 ... col_nr ]\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_bottom_edge_u_from_col_nr = ( me, col_nr ) ->\n  return ( @_top_edge_u_from_col_nr me, col_nr ) + me.quadheights[ col_nr ]\n\n\n#===========================================================================================================\n# ITERATORS\n#-----------------------------------------------------------------------------------------------------------\n@_walk_column_letters_and_numbers = ( me, mode ) ->\n  @_ensure_gridwidth me\n  delta = if mode is 'short' then 0 else 1\n  for col_nr in [ 1 .. me.gridwidth + delta ]\n    ### TAINT don't use EXCJSCC directly ###\n    col_letter  = ( EXCJSCC.n2l col_nr ).toLowerCase()\n    yield [ col_letter, col_nr, ]\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_row_numbers = ( me, mode ) ->\n  @_ensure_gridheight me\n  delta = if mode is 'short' then 0 else 1\n  yield row_nr for row_nr in [ 1 .. me.gridheight + delta ]\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_cellquads_sides = ( me, cellquads, side ) ->\n  switch side\n    when 'left'\n      row_nr_1    = cellquads.top\n      row_nr_2    = cellquads.bottom\n      col_nr_1    = cellquads.left\n      col_nr_2    = cellquads.left\n    when 'right'\n      row_nr_1    = cellquads.top\n      row_nr_2    = cellquads.bottom\n      col_nr_1    = cellquads.right\n      col_nr_2    = cellquads.right\n    when 'top'\n      row_nr_1    = cellquads.top\n      row_nr_2    = cellquads.top\n      col_nr_1    = cellquads.left\n      col_nr_2    = cellquads.right\n    when 'bottom'\n      row_nr_1    = cellquads.bottom\n      row_nr_2    = cellquads.bottom\n      col_nr_1    = cellquads.left\n      col_nr_2    = cellquads.right\n    when '*'\n      yield from @_walk_cellquads_sides me, cellquads, 'left'\n      yield from @_walk_cellquads_sides me, cellquads, 'right'\n      yield from @_walk_cellquads_sides me, cellquads, 'top'\n      yield from @_walk_cellquads_sides me, cellquads, 'bottom'\n      yield return\n    else\n      throw new Error \"(MKTS/TABLE 4550) illegal argument for side #{rpr side}\"\n  for row_nr in [ row_nr_1 .. row_nr_2 ]\n    for col_nr in [ col_nr_1 .. col_nr_2 ]\n      ### TAINT don't use EXCJSCC directly ###\n      col_letter  = ( EXCJSCC.n2l col_nr ).toLowerCase()\n      quad        = \"#{col_letter}#{row_nr}\"\n      yield { col_nr, row_nr, col_letter, quad, side, }\n  yield return\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\n_stackerr = ( ref, message, error = null ) ->\n  ###\n  Prepends local error message to the original one so we get more informative traces. Usage:\n\n  ```\n  try\n    ...\n  catch error\n    throw _stackerr error, \"(MKTS/TABLE 2406) ... new message ...\"\n  ```\n  ###\n  message = \"(MKTS/TABLE##{ref}) #{message}\"\n  if error?\n    error.message = \"#{message}\\n#{error.message}\"\n  else\n    ### TAINT elide current line from stack trace ###\n    error = new Error message\n  return error\n"
  ]
}