{
  "version": 3,
  "file": "mkts-table.js",
  "sourceRoot": "..",
  "sources": [
    "src/mkts-table.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/TABLE'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nECS                       = require './eval-cs'\nMKTS                      = require './main'\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nunstamp                   = MD_READER.unstamp.bind     MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\n#...........................................................................................................\ncopy                      = ( x ) -> Object.assign {}, x\njr                        = JSON.stringify\nIG                        = require 'intergrid'\nUNITS                     = require './mkts-table-units'\n\n\n#-----------------------------------------------------------------------------------------------------------\ntex = ( source ) -> [ 'tex', source, ]\n\n#-----------------------------------------------------------------------------------------------------------\ntexr = ( ref, source ) ->\n  source = if ref? then \"#{source}% MKTSTBL #{ref}\\n\" else \"#{source}%\\n\"\n  return tex source\n\n#-----------------------------------------------------------------------------------------------------------\ncontains = ( text, pattern ) ->\n  switch CND.type_of pattern\n    when 'regex' then return ( text.match pattern )?\n    else throw new Error \"pattern not supported: #{rpr pattern}\"\n  return null\n\n\n#===========================================================================================================\n# INITIALIZATION\n#-----------------------------------------------------------------------------------------------------------\n@_new_description = ( S ) ->\n  R =\n    '~isa':               'MKTS/TABLE/description'\n    name:                 null\n    debug:                false\n    prv_fieldnr:          0\n    fails:                [] ### recoverable errors / fails warnings ###\n    fieldcells:           {} ### field extents in terms of cells, by fieldnrs ###\n    fieldnrs_by_aliases:  {} ### lists of fieldnrs indexed by field aliases ###\n    cellfields:           {} ### which cells belong to what fields, by cellkeys ###\n    table_dimensions:     {} ### width and height of enclosing `\\minipage`, in terms of (unitwidth,unitheight) ###\n    cell_dimensions:      {}\n    fieldborders:         {} ### field borders, as TikZ styles by edges ###\n    margins:              {} ### field margins, by field designations ###\n    paddings:             {} ### field paddings, by field designations ###\n    field_dimensions:     {} ### field extents in terms of (unitwidth,unitheight), by field designations ###\n    border_dimensions:    {} ### border extents in terms of (unitwidth,unitheight), by field designations ###\n    pod_dimensions:       {} ### pod extents in terms of (unitwidth,unitheight), by field designations ###\n    valigns:              {} ### vertical pod alignments, by field designations ###\n    haligns:              {} ### horizontal pod alignments, by field designations ###\n    colwidths:            [ null, ] ### [ 0 ] is default, [ 1 .. grid.width ] explicit or implicit widths ###\n    rowheights:           [ null, ] ### [ 0 ] is default, [ 1 .. grid.height ] explicit or implicit heights ###\n    joint_coordinates:    null\n    #.......................................................................................................\n    styles:\n      sThin:              'thin'\n      sThick:             'thick'\n      sDotted:            'dotted'\n      sDashed:            'dashed'\n      sRed:               'red'\n      sBlack:             'black'\n      sDebugCellgrid:     'gray!30,sThin'\n      sDebugFieldgrid:    'gray!30,sThin'\n      sDebugJoints:       'gray!30,sThick'\n    #.......................................................................................................\n    default:\n      unitwidth:            '1mm'\n      unitheight:           '1mm'\n      colwidth:             10\n      rowheight:            10\n      margin:               0\n      padding:              1\n  return R\n\n\n#===========================================================================================================\n# PUBLIC API\n#-----------------------------------------------------------------------------------------------------------\n@_set_unitsize = ( me, direction, text ) ->\n  unless direction in [ 'width', 'height', ]\n    throw _stackerr me, 'µ4613', \"expected 'width' or 'height', got #{rpr direction}\"\n  p = \"unit#{direction}\"\n  #.........................................................................................................\n  ### Do nothing if dimension already defined: ###\n  if me[ p ]?\n    return _record_fail me, 'µ5661', \"unable to re-define #{p}\"\n  #.........................................................................................................\n  me[ p ] = UNITS.parse_nonnegative_quantity text\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_set_lanesizes = ( me, direction, text ) ->\n  unless direction in [ 'width', 'height', ]\n    throw _stackerr me, 'µ2352', \"expected 'width' or 'height', got #{rpr direction}\"\n  #.........................................................................................................\n  p   = if direction is 'width' then 'colwidth'   else 'rowheight'\n  ps  = if direction is 'width' then 'colwidths'  else 'rowheights'\n  #.........................................................................................................\n  @_ensure_grid me\n  lane_count = me.grid[ direction ]\n  #.........................................................................................................\n  unless ( match = text.match /^(?:(?<selector>[^:]+):)?(?<length>[+\\d.]+)$/ )?\n    _record_fail me, 'µ6377', \"need a text like '2.7', 'A*,C3:20' or similar for mkts-table/#{p}, got #{rpr text}\"\n    return null\n  #.........................................................................................................\n  { selector, length, } = match.groups\n  length                = parseFloat length\n  #.........................................................................................................\n  if selector?\n    me[ ps ][  0 ]  ?= me.default[ p ] ### set default ###\n    me[ ps ][ nr ]  ?= me.default[ p ] for nr in [ 1 .. lane_count ] ### set defaults where missing ###\n    for [ fail, lanenr, ] from @_walk_fails_and_lanenrs_from_direction_and_selector me, direction, selector\n      if fail? then _record me, fail\n      else          me[ ps ][ lanenr ] = length\n  else\n    me[ ps ][  0 ]  = length ### set default ###\n    me[ ps ][ nr ]  = length for nr in [ 1 .. lane_count ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@grid = ( me, text ) ->\n  if me.grid?\n    return _record_fail me, 'µ5689', \"unable to re-define grid\"\n  me.grid = IG.GRID.new_grid_from_cellkey text\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@unitwidth    = ( me, text ) -> @_set_unitsize  me, 'width',    text\n@unitheight   = ( me, text ) -> @_set_unitsize  me, 'height',   text\n@columnwidth  = ( me, text ) -> @_set_lanesizes me, 'width',    text\n@rowheight    = ( me, text ) -> @_set_lanesizes me, 'height',   text\n\n#-----------------------------------------------------------------------------------------------------------\n@fieldcells = ( me, source ) ->\n  @_ensure_grid       me\n  #.........................................................................................................\n  unless ( match = source.match @fieldcells.source_pattern )?\n    _record_fail me, 'µ6379', \"\"\"need a text like 'A1:B2:\"alias\"' or similar for mkts-table/#{fieldcell}, got #{rpr source}\"\"\"\n    return null\n  #.........................................................................................................\n  { selector, aliases, }  = match.groups\n  selector    = selector + '..' + selector unless contains selector, /\\.\\./\n  aliases     = @_parse_aliases me, aliases\n  fieldnr     = me.prv_fieldnr += +1\n  d           = IG.GRID.parse_rangekey me.grid, selector\n  if me.fieldcells[ fieldnr ]? ### should never happen ###\n    throw new Error \"(MKTS/TABLE µ5375) unable to redefine field #{fieldnr}: #{rpr source}\"\n  #.........................................................................................................\n  me.fieldcells[ fieldnr ] = d\n  for fieldcell from IG.GRID.walk_cells_from_rangeref me.grid, d\n    ( me.cellfields[ fieldcell.cellkey ]?= [] ).push fieldnr\n  #.........................................................................................................\n  for alias in aliases\n    ( me.fieldnrs_by_aliases[ alias ]?= [] ).push fieldnr\n  #.........................................................................................................\n  @_set_default_gaps me, fieldnr\n  return null\n@fieldcells.source_pattern = /^\\s*(?<selector>[^:\\s]+)\\s*(?::\\s*(?<aliases>\\S.+))?\\s*$/\n\n#-----------------------------------------------------------------------------------------------------------\n@_parse_aliases = ( me, source ) ->\n  return [] if ( not source? ) or ( source.length is 0 )\n  R = ( part.trim() for part in source.split ',' )\n  R.pop() if R[ R.length - 1 ] is ''\n  for alias in R\n    unless alias[ 0 ] is '@'\n      throw new Error \"(MKTS/TABLE µ5376) aliases must be prefixed with '@', got #{rpr alias}\"\n  return [ ( new Set R )... ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_resolve_aliases = ( me, selector ) ->\n  ### Given a comma-separated string or a list of cellkeys, cellrange literals, and / or aliases, return a\n  list of cellkeys and / or cellrange literals. ###\n  return @_resolve_aliases me, selector.split /\\s*,\\s*/ if CND.isa_text selector\n  R = new Set()\n  for term in selector\n    if ( CND.isa_text term ) and ( term.startsWith '@' )\n      unless ( fieldnrs = me.fieldnrs_by_aliases[ term ] )?\n        ### TAINT error or failure? ###\n        throw new Error \"(MKTS/TABLE µ5446) unknown alias #{rpr term}\"\n      R.add fieldnr for fieldnr in fieldnrs\n    else\n      R.add term\n  return [ R... ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_set_default_gaps = ( me, designation ) ->\n  for gap in [ 'margin', 'padding', ]\n    p = gap + 's'\n    for edge in [ 'left', 'right', 'top', 'bottom', ]\n      ( me[ p ][ designation ]?= {} )[ edge ] = me.default[ gap ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@fieldalignvertical = ( me, text ) ->\n  unless ( match = text.match /^(.+?):([^:]+)$/ )?\n    throw new Error \"(MKTS/TABLE µ5229) expected something like 'C3:top' for mkts-table/fieldalignvertical, got #{rpr text}\"\n  [ _, selector, value, ] = match\n  #.........................................................................................................\n  unless value in [ 'top', 'bottom', 'center', 'spread', ]\n    throw new Error \"(MKTS/TABLE µ1876) expected one of 'top', 'bottom', 'center', 'spread' for mkts-table/fieldalignvertical, got #{rpr value}\"\n  #.........................................................................................................\n  for [ fail, field_designation, ] from @_walk_fails_and_fieldnrs_from_selector me, selector\n    ### TAINT ad-hoc fail message production, use method ###\n    if fail? then _record me, \"#{fail} (#{jr {field_designation}})\"\n    else          me.valigns[ field_designation ] = value\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@fieldalignhorizontal = ( me, text ) ->\n  unless ( match = text.match /^(.+?):([^:]+)$/ )?\n    throw new Error \"(MKTS/TABLE µ5229) expected something like 'C3:left' for mkts-table/fieldalignhorizontal, got #{rpr text}\"\n  [ _, selector, value, ] = match\n  #.........................................................................................................\n  unless value in [ 'left', 'right', 'center', 'justified', ]\n    throw new Error \"(MKTS/TABLE µ1876) expected one of 'left', 'right', 'center', 'justified' for mkts-table/fieldalignhorizontal, got #{rpr value}\"\n  #.........................................................................................................\n  for [ fail, field_designation, ] from @_walk_fails_and_fieldnrs_from_selector me, selector\n    ### TAINT ad-hoc fail message production, use method ###\n    if fail? then _record me, \"#{fail} (#{jr {field_designation}})\"\n    else          me.haligns[ field_designation ] = value\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@name = ( me, text ) ->\n  if me.name?\n    throw new Error \"(MKTS/TABLE µ1344) refused to rename table layout #{rpr me.name} to #{rpr text}\"\n  #.........................................................................................................\n  ### TAINT should check syntax (no whitespace etc) ###\n  me.name = text\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@debug = ( me, text ) ->\n  switch text\n    when 'true'   then me.debug = true\n    when 'false'  then me.debug = false\n    else throw new Error \"(MKTS/TABLE µ1343) expected 'true' or 'false' for mkts-table/debug, got #{rpr text}\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@fieldborder = ( me, text ) ->\n  ### TAINT code duplication ###\n  d = @_parse_fieldborder me, text\n  for fieldname in d.fieldnames\n    for edge in d.edges\n      ( me.fieldborders[ fieldname ]?= {} )[ edge ] = d.style\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@margin = ( me, text ) ->\n  ### TAINT code duplication ###\n  d = @_parse_fieldgap me, 'margin', text\n  for fieldname in d.fieldnames\n    for edge in d.edges\n      ( me.margins[ fieldname ]?= {} )[ edge ] = d.length\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@padding = ( me, text ) ->\n  ### TAINT code duplication ###\n  d = @_parse_fieldgap me, 'padding', text\n  for fieldname in d.fieldnames\n    for edge in d.edges\n      ( me.paddings[ fieldname ]?= {} )[ edge ] = d.length\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\n# PARSERS ETC\n#-----------------------------------------------------------------------------------------------------------\n@_idx_from_col_and_row = ( col, row ) ->\n  unless ( type = CND.type_of col ) is 'text'\n    throw new Error \"(MKTS/TABLE µ6848) expected a text for col, got a #{rpr type}\"\n  unless ( type = CND.type_of row ) is 'text'\n    throw new Error \"(MKTS/TABLE µ1080) expected a text for row, got a #{rpr type}\"\n  #.........................................................................................................\n  col_idx = ( col.codePointAt 0 ) - ( 'a'.codePointAt 0 )\n  row_idx = ( parseInt row, 10 ) - 1\n  return { col: col_idx, row: row_idx, }\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use proper parsing tool ###\n@_parse_fieldborder = ( me, fieldborder ) ->\n  unless ( type = CND.type_of fieldborder ) is 'text'\n    throw new Error \"(MKTS/TABLE µ1225) expected a text for fieldborder, got a #{rpr type}\"\n  unless ( groups = fieldborder.match /^(.+):(.+):(.*)$/ )?\n    throw new Error \"(MKTS/TABLE µ2582) expected a fieldborder like 'a1:left:sDashed,sThick', got #{rpr fieldborder}\"\n  [ _, selector, edges, style, ] = groups\n  #.........................................................................................................\n  edges       = ( _.trim() for _ in edges.split ',' )\n  edges       = [ 'top', 'left', 'bottom', 'right', ] if '*' in edges\n  fieldnames  = []\n  #.........................................................................................................\n  for [ fail, field_designation, ] from @_walk_fails_and_fieldnrs_from_selector me, selector\n    ### TAINT ad-hoc fail message production, use method ###\n    if fail? then _record me, \"#{fail} (#{jr {field_designation}})\"\n    else          fieldnames.push field_designation\n  #.........................................................................................................\n  style = style.trim()\n  style = null if style in [ 'none', '', ]\n  #.........................................................................................................\n  return { fieldnames, edges, style, }\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use proper parsing tool ###\n### TAINT unify parsing routines ###\n@_parse_fieldgap = ( me, gaptype, source ) ->\n  unless ( type = CND.type_of source ) is 'text'\n    throw new Error \"(MKTS/TABLE µ1225) expected a text for source, got a #{rpr type}\"\n  #.........................................................................................................\n  unless ( match = source.match /^(?<selector>[^:]+):(?<edges>[^:]+):(?<length>-?[+\\d.]+)$/ )?\n    _record_fail me, 'µ6377', \"need a text like 'A*,C3:top:2' or similar for mkts-table/#{gaptype}, got #{rpr source}\"\n    return null\n  #.........................................................................................................\n  { selector, edges, length, }  = match.groups\n  length                        = parseFloat length\n  #.........................................................................................................\n  edges       = ( _.trim() for _ in edges.split ',' )\n  edges       = [ 'top', 'left', 'bottom', 'right', ] if '*' in edges\n  fieldnames  = []\n  #.........................................................................................................\n  for [ fail, fieldname, ] from @_walk_fails_and_fieldnrs_from_selector me, selector\n    ### TAINT ad-hoc fail message production, use method ###\n    if fail? then _record me, \"#{fail} (#{jr {fieldname}})\"\n    else          fieldnames.push fieldname\n  #.........................................................................................................\n  return { fieldnames, edges, length, }\n\n\n#===========================================================================================================\n# EVENT GENERATORS\n#-----------------------------------------------------------------------------------------------------------\n@_walk_events = ( me, selectors_and_content_events, layout_name_stack ) ->\n  @_compute_cell_dimensions     me\n  @_compute_field_dimensions    me\n  @_compute_border_dimensions   me\n  @_compute_pod_dimensions      me\n  @_compute_table_height        me\n  #.........................................................................................................\n  me._tmp_is_outermost  = layout_name_stack.length < 2\n  me._tmp_name          = layout_name_stack.join '/'\n  ### Preparatory ###\n  yield from @_walk_opening_events                      me\n  yield from @_walk_style_events                        me ### TAINT should write to document preamble ###\n  #.........................................................................................................\n  ### Borders, content ###\n  yield from @_walk_field_borders_events                me\n  yield from @_walk_pod_events                          me, selectors_and_content_events\n  #.........................................................................................................\n  ### Debugging ### ### TAINT should make ordering configurable so we can under- or overprint debugging ###\n  yield from @_walk_debug_joints_events                 me\n  yield from @_walk_debug_cellgrid_events               me\n  yield from @_walk_debug_fieldgrid_events              me\n  #.........................................................................................................\n  ### Finishing ###\n  yield from @_walk_closing_events                      me\n  yield from @_convert_fails_to_warnings                me\n  #.........................................................................................................\n  # ### dump description for debugging ###\n  # ### TAINT make dump configurable ###\n  # ### TAINT print in smaller type ###\n  # yield [ 'tex', '\\\\par{}', ]\n  # yield [ 'text', \"MKTS Table Description:\\n\\n\", ( copy me.meta ), ]\n  # yield [ '(', 'code', [],                       ( copy me.meta ), ]\n  # yield [ '.', 'text', ( rpr me ),               ( copy me.meta ), ]\n  # yield [ ')', 'code', [],                       ( copy me.meta ), ]\n  # yield [ 'tex', '\\\\par{}', ]\n  #.........................................................................................................\n  delete me._tmp_name\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_opening_events = ( me ) ->\n  @_ensure_unitvector me\n  layout_name       = me.name\n  unitwidth_txt     = UNITS.as_text me.unitwidth\n  unitheight_txt    = UNITS.as_text me.unitheight\n  table_height_txt  = UNITS.as_text me.unitheight, '*', me.table_dimensions.height\n  yield tex \"\\n\\n\"\n  yield tex \"% ==========================================================================================================\\n\"\n  yield tex \"\\\\par% Beginning of MKTS Table (layout: #{rpr layout_name})\\n\"\n  yield texr 'ð1', \"{\\\\setlength{\\\\fboxsep}{0mm}\"\n  yield texr 'ð2', \"\\\\mktsColorframebox{green}{% debugging framebox\" if me.debug\n  ### NOTE only height of minipage is important; TikZ will happily draw outside of minipage when told ###\n  ### TAINT calculate proper height so text will keep register ###\n  yield texr 'ð5', \"\\\\begin{minipage}[t][#{table_height_txt}][t]{\\\\linewidth}\"\n  yield texr 'ð6', \"\\\\begin{tikzpicture}[ overlay, yshift = 0mm, yscale = -1, line cap = rect ]\"\n  yield texr 'ð7', \"\\\\tikzset{x=#{unitwidth_txt}};\\\\tikzset{y=#{unitheight_txt}};\"\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_closing_events = ( me ) ->\n  layout_name = me.name\n  yield texr 'ð8', \"\\\\end{tikzpicture}\"\n  yield texr 'ð9', \"\\\\end{minipage}}\"\n  yield texr 'ð10', \"}% debugging framebox\" if me.debug\n  yield texr 'ð11', \"\\\\mktsVspace{1}\"\n  yield tex \"\\\\par% End of MKTS Table (layout: #{rpr layout_name})\\n\"\n  yield tex \"% ==========================================================================================================\\n\"\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_style_events = ( me ) ->\n  for key, value of me.styles\n    yield texr 'ð12', \"\\\\tikzset{#{key}/.style={#{value}}}\"\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_field_borders_events = ( me ) ->\n  #.........................................................................................................\n  for designation, d of me.border_dimensions\n    continue unless ( fieldborders = me.fieldborders[ designation ] )?\n    if ( borderstyle = fieldborders[ 'left' ] )?\n      yield texr 'ð13', \"\\\\draw[#{borderstyle}] (#{d.left},#{d.top}) -- (#{d.left},#{d.bottom});% #{designation} left \"\n    if ( borderstyle = fieldborders[ 'right' ] )?\n      yield texr 'ð14', \"\\\\draw[#{borderstyle}] (#{d.right},#{d.top}) -- (#{d.right},#{d.bottom});% #{designation} right \"\n    if ( borderstyle = fieldborders[ 'top' ] )?\n      yield texr 'ð15', \"\\\\draw[#{borderstyle}] (#{d.left},#{d.top}) -- (#{d.right},#{d.top});% #{designation} top \"\n    if ( borderstyle = fieldborders[ 'bottom' ] )?\n      yield texr 'ð16', \"\\\\draw[#{borderstyle}] (#{d.left},#{d.bottom}) -- (#{d.right},#{d.bottom});% #{designation} bottom \"\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_halign_tex = ( me, halign ) ->\n  return switch halign\n    when 'left'       then '\\\\mktsLeft{}'\n    when 'right'      then '\\\\mktsRight{}'\n    when 'center'     then '\\\\mktsCenter{}'\n    when 'justified'  then ''\n    else throw new Error \"(MKTS/TABLE µ4799) illegal value for halign #{rpr halign}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_valign_tex = ( me, valign ) ->\n  return switch valign\n    when 'top'    then 't'\n    when 'bottom' then 'b'\n    when 'center' then 'c'\n    when 'spread' then 's'\n    else throw new Error \"(MKTS/TABLE µ4799) illegal value for valign #{rpr valign}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_pod_events = ( me, selectors_and_content_events ) ->\n  for [ selector, content..., ] from @_walk_most_recent_field_designations me, selectors_and_content_events\n    # debug '88733', selector, content if me.name is 'small-table'\n    continue if content.length is 0\n    d                 = me.pod_dimensions[ selector ]\n    pod_height_txt    = UNITS.as_text me.unitheight,  '*', d.height\n    pod_width_txt     = UNITS.as_text me.unitwidth,   '*', d.width\n    # ### TAINT faulty, should look at whether sub-table is only content, then set valign to top ###\n    # if me._tmp_is_outermost then  valign_tex  = @_get_valign_tex me, me.valigns[ selector ] ? me.valigns[ '*' ] ? 'center'\n    # else                          valign_tex  = @_get_valign_tex me, 'top'\n    valign_tex  = @_get_valign_tex me, me.valigns[ selector ] ? me.valigns[ '*' ] ? 'center'\n    halign_tex  = @_get_halign_tex me, me.haligns[ selector ] ? me.haligns[ '*' ] ? 'left'\n    _ref = \" field #{me._tmp_name}:#{selector} \"\n    yield texr 'ð17', \"\\\\node[anchor=north west,inner sep=0mm] at (#{d.left},#{d.top}) {%#{_ref}\"\n    yield texr 'ð18', \"\\\\mktsColorframebox{orange}{%#{_ref} debugging sub-framebox \" if me.debug\n    yield texr 'ð19', \"\\\\begin{minipage}[t][#{pod_height_txt}][#{valign_tex}]{#{pod_width_txt}}#{halign_tex}%#{_ref}\"\n    yield [ '.', 'noindent', null, {}, ]\n    yield sub_event for sub_event in content\n    if me.debug\n      yield texr 'ð20', \"\\\\end{minipage}}};%#{_ref} debugging sub-framebox\"\n    else\n      yield texr 'ð21', \"\\\\end{minipage}};%#{_ref}\"\n  #.........................................................................................................\n  yield return\n\n\n#===========================================================================================================\n# EVENT GENERATORS: DEBUGGING EVENTS\n#-----------------------------------------------------------------------------------------------------------\n@_should_debug = ( me ) -> me.debug or ( me.fails.length != 0 )\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_debug_cellgrid_events = ( me ) ->\n  unless @_should_debug me\n    yield return\n  #.........................................................................................................\n  yield texr 'ð22', \"\\\\begin{scope}[on background layer]\"\n  #.........................................................................................................\n  ### TAINT use fixed size like 1mm ###\n  top       = ( @_top_from_rownr     me, 1             ) - 3\n  bottom    = ( @_bottom_from_rownr  me, me.grid.height ) + 3\n  for colnr in [ 1 .. me.grid.width + 1 ]\n    x = @_left_from_colnr me, colnr\n    yield texr 'ð23', \"\\\\draw[sDebugCellgrid] (#{x},#{top}) -- (#{x},#{bottom});\"\n  #.........................................................................................................\n  ### TAINT use fixed size like 1mm ###\n  left      = ( @_left_from_colnr    me, 1             ) - 3\n  right     = ( @_right_from_colnr   me, me.grid.width  ) + 3\n  for rownr in [ 1 .. me.grid.height + 1 ]\n    y = @_top_from_rownr me, rownr\n    yield texr 'ð24', \"\\\\draw[sDebugCellgrid] (#{left},#{y}) -- (#{right},#{y});\"\n  #.........................................................................................................\n  yield texr 'ð25', \"\\\\end{scope}\"\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_debug_fieldgrid_events = ( me ) ->\n  unless @_should_debug me\n    yield return\n  #.........................................................................................................\n  yield texr 'ð26', \"\\\\begin{scope}[on background layer]\"\n  #.........................................................................................................\n  for designation, d of me.field_dimensions\n    ### TAINT use fixed size like 1mm ###\n    left   = d.left   + 0.5\n    right  = d.right  - 0.5\n    top    = d.top    + 0.5\n    bottom = d.bottom - 0.5\n    yield [ 'tex', \"\\\\draw[sDebugFieldgrid] (#{left},#{bottom})\" \\\n                 + \" -- (#{left},#{top})\"                       \\\n                 + \" -- (#{right},#{top});\", ]\n    yield [ 'tex', \" \\\\draw[sDebugFieldgrid] (#{right},#{top}) \" \\\n                 + \" -- (#{right},#{bottom});\", ]\n    yield [ 'tex', \" \\\\draw[sDebugFieldgrid] (#{left},#{bottom}) \" \\\n                 + \" -- (#{right},#{bottom});\", ]\n    yield [ 'tex', \"% MKTSTBL@26\\n\", ]\n  #.........................................................................................................\n  yield texr 'ð27', \"\\\\end{scope}\"\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_debug_joints_events = ( me ) ->\n  unless @_should_debug me\n    yield return\n  @_ensure_grid me\n  @_ensure_joint_coordinates  me\n  #.........................................................................................................\n  yield texr 'ð28', \"\\\\begin{scope}[on background layer]\"\n  #.........................................................................................................\n  ### TAINT use fixed size like 1mm ###\n  for [ colletters, colnr, ] from IG.GRID.walk_colletters_and_colnrs me.grid\n    for rownr from IG.GRID.walk_rownrs me.grid\n      x = ( @_left_from_colnr  me, colnr ) + 2\n      y = ( @_top_from_rownr   me, rownr ) + 2\n      cellkey = \"#{colletters}#{rownr}\"\n      yield tex \"\\\\node[sDebugJoints] at (#{x},#{y}) {{\\\\mktsStyleCode{}#{cellkey}}}; \"\n  #.........................................................................................................\n  yield texr 'ð29', \"\\\\end{scope}\"\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_convert_fails_to_warnings = ( me ) ->\n  for fail in me.fails\n    yield [ '.', 'warning', fail, ( copy me.meta ), ]\n    yield [ 'tex', '\\\\par\\n', ]\n  yield return\n\n\n#===========================================================================================================\n# ENSURERS\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_unitvector = ( me ) ->\n  @unitwidth  me, me.default.unitwidth   unless me.unitwidth?\n  @unitheight me, me.default.unitheight  unless me.unitheight?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_joint_coordinates = ( me ) ->\n  return null if me.joint_coordinates?\n  @_ensure_cellwidths   me\n  @_ensure_cellheights  me\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_grid = ( me ) ->\n  return null if me.grid?\n  throw new Error \"(MKTS/TABLE µ5307) grid must be set\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_cellwidths = ( me ) ->\n  return null if ( me.colwidths.length is me.grid.width + 1 ) and ( null not in me.colwidths[ 1 .. ] )\n  throw new Error \"(MKTS/TABLE µ4039) colwidths must be all set; got #{rpr me.colwidths}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_ensure_cellheights = ( me ) ->\n  return null if ( me.rowheights.length is me.grid.height + 1 ) and ( null not in me.rowheights[ 1 .. ] )\n  throw new Error \"(MKTS/TABLE µ8054) rowheights must be all set; got #{rpr me.rowheights}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_compute_cell_dimensions = ( me ) ->\n  @_ensure_grid me\n  for [ colletters, colnr, ] from IG.GRID.walk_colletters_and_colnrs me.grid\n    for rownr from IG.GRID.walk_rownrs me.grid\n      designation   = \"#{colletters}#{rownr}\"\n      left   = @_left_from_colnr   me, colnr\n      right  = @_right_from_colnr  me, colnr\n      top    = @_top_from_rownr    me, rownr\n      bottom = @_bottom_from_rownr me, rownr\n      me.cell_dimensions[ designation ] = {\n        colnr,         rownr,\n        left,    right,\n        top,     bottom, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_compute_field_dimensions = ( me ) ->\n  ### TAINT use me.field_dimensions ###\n  for designation, fieldcells of me.fieldcells\n    left   = ( @_left_from_colnr   me, fieldcells.left_colnr    )\n    right  = ( @_right_from_colnr  me, fieldcells.right_colnr   )\n    top    = ( @_top_from_rownr    me, fieldcells.top_rownr     )\n    bottom = ( @_bottom_from_rownr me, fieldcells.bottom_rownr  )\n    width       = right  - left\n    height      = bottom - top\n    me.field_dimensions[ designation ] = {\n      left,  right,   width,\n      top,   bottom,  height, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_compute_border_dimensions = ( me ) ->\n  ### TAINT code duplication ###\n  for designation, d of me.field_dimensions\n    unless ( target = me.margins[ designation ] )?\n      throw new Error \"(MKTS/TABLE µ8054) unknown field designation #{rpr designation}\"\n    left   = d.left   + target.left\n    right  = d.right  - target.right\n    top    = d.top    + target.top\n    bottom = d.bottom - target.bottom\n    ### TAINT must not become negative ###\n    width       = right  - left\n    height      = bottom - top\n    me.border_dimensions[ designation ] = {\n      left,  right,   width,\n      top,   bottom,  height, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_compute_pod_dimensions = ( me ) ->\n  ### TAINT code duplication ###\n  for designation, d of me.field_dimensions\n    unless ( target = me.paddings[ designation ] )?\n      throw new Error \"(MKTS/TABLE µ8054) unknown field designation #{rpr designation}\"\n    left   = d.left   + target.left\n    right  = d.right  - target.right\n    top    = d.top    + target.top\n    bottom = d.bottom - target.bottom\n    ### TAINT must not become negative ###\n    width       = right  - left\n    height      = bottom - top\n    me.pod_dimensions[ designation ] = {\n      left,  right,   width,\n      top,   bottom,  height, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_compute_table_height = ( me ) ->\n  me.table_dimensions.height  = @_bottom_from_rownr me, me.grid.height\n  me.table_dimensions.width   = null ### not used ATM, all tables are nominally as wide as column ###\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_left_from_colnr = ( me, colnr ) ->\n  ### TAINT should precompute ###\n  @_ensure_cellwidths me\n  R = 0\n  R += me.colwidths[ nr ] for nr in [ 1 ... colnr ]\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_right_from_colnr = ( me, colnr ) ->\n  return ( @_left_from_colnr me, colnr ) + me.colwidths[ colnr ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_top_from_rownr = ( me, rownr ) ->\n  ### TAINT should precompute ###\n  @_ensure_cellheights me\n  R = 0\n  R += me.rowheights[ nr ] for nr in [ 1 ... rownr ]\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_bottom_from_rownr = ( me, rownr ) ->\n  return ( @_top_from_rownr me, rownr ) + me.rowheights[ rownr ]\n\n\n#===========================================================================================================\n# ITERATORS\n#-----------------------------------------------------------------------------------------------------------\n@_walk_fails_and_fieldnrs_from_selector = ( me, selector ) ->\n  ### TAINT this will have to be changed to allow for named fields ###\n  count                   = 0\n  seen_fieldnrs           = new Set()\n  selector                = @_resolve_aliases me, selector\n  #.........................................................................................................\n  for term in selector\n    if CND.isa_text term\n      for cell from IG.GRID.walk_cells_from_selector me.grid, selector\n        continue unless ( fieldnrs = me.cellfields[ cell.cellkey ] )?\n        for fieldnr in fieldnrs\n          ### TAINT code duplication ###\n          continue if seen_fieldnrs.has fieldnr\n          seen_fieldnrs.add fieldnr\n          count += +1\n          yield [ null, fieldnr, ]\n    else\n      fieldnr = term\n      ### TAINT code duplication ###\n      continue if seen_fieldnrs.has fieldnr\n      seen_fieldnrs.add fieldnr\n      count += +1\n      yield [ null, fieldnr, ]\n  #.........................................................................................................\n  if count is 0\n    yield [ ( _fail me, 'µ5131', \"selector #{rpr selector} does not match any field\" ), null ]\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_fails_and_lanenrs_from_direction_and_selector = ( me, direction, selector ) ->\n  unless direction in [ 'width', 'height', ]\n    throw _stackerr me, 'µ4656', \"expected 'width' or 'height', got #{rpr direction}\"\n  #.........................................................................................................\n  count         = 0\n  seen_lanenrs  = new Set()\n  p             = if direction is 'width' then 'colnr' else 'rownr'\n  #.........................................................................................................\n  ### TAINT should implement this in intergrid ###\n  for cell from IG.GRID.walk_cells_from_selector me.grid, selector\n    lanenr = cell[ p ]\n    continue if seen_lanenrs.has lanenr\n    seen_lanenrs.add lanenr\n    count += +1\n    yield [ null, lanenr, ]\n  #.........................................................................................................\n  if count is 0\n    ### should never happen ###\n    yield [ ( _fail me, 'µ5131', \"selector #{rpr selector} doesn't match any lane\" ), null ]\n  #.........................................................................................................\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_most_recent_field_designations = ( me, fieldhints_and_stuff ) ->\n  ### Given a list of `[ fieldhints, x... ]` lists, return a list of `[ designation, x... ]` lists such\n  that each `designation` that resulted from each of the `fieldhints` is only kept from the instance\n  that appeared last in the list. Each `fieldhints` can produce an arbitrary number of matching field\n  designations, and later occurrences of a given field will replace earlier appearances. ###\n  R = {}\n  for [ fieldhints, stuff..., ] in fieldhints_and_stuff\n    for [ fail, field_designation, ] from @_walk_fails_and_fieldnrs_from_selector me, fieldhints\n      if fail? then _record me, fail\n      else          R[ field_designation ]  = stuff\n  yield [ field_designation, stuff..., ] for field_designation, stuff of R\n  yield return\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_walk_table_edge_field_designations = ( me, edge ) ->\n#   seen_field_designations = new Set()\n#   for d from IG.GRID.walk_edge_cellrefs me.grid, edge\n#     continue unless ( field_designations = me.cellfields[ d.cellkey ] )?\n#     for field_designation in field_designations\n#       continue if seen_field_designations.has field_designation\n#       seen_field_designations.add field_designation\n#       yield field_designation\n#   yield return\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\n_stackerr = ( me, ref, message, error = null ) ->\n  ###\n  Prepends local error message to the original one so we get more informative traces. Usage:\n\n  ```\n  try\n    ...\n  catch error\n    throw _stackerr error, \"(MKTS/TABLE µ4781) ... new message ...\"\n  ```\n  ###\n  filename  = me.meta.filename ? '<NOFILENAME>'\n  line_nr   = me.meta.line_nr ? '(NOLINENR)'\n  message   = \"[#{badge}##{ref}: #{filename}##{line_nr}]: #{message}\"\n  if error?\n    error.message = \"#{message}\\n#{error.message}\"\n  else\n    ### TAINT elide current line from stack trace ###\n    error = new Error message\n  return error\n\n#-----------------------------------------------------------------------------------------------------------\n_fail = ( me, ref, message ) ->\n  ### TAINT using strings as error values is generally being frowned upon ###\n  filename    = me.meta.filename  ? '<NOFILENAME>'\n  line_nr     = me.meta.line_nr   ? '(NOLINENR)'\n  return \"[#{badge}##{ref}: #{filename}##{line_nr}]: #{message}\"\n\n#-----------------------------------------------------------------------------------------------------------\n_record = ( me, message ) ->\n  me.fails.push message\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n_record_fail = ( me, ref, message ) -> _record me, _fail me, ref, message\n\n\n"
  ]
}