{
  "version": 3,
  "file": "mkts-table.js",
  "sourceRoot": "..",
  "sources": [
    "src/mkts-table.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/TABLE'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nECS                       = require './eval-cs'\nMKTS                      = require './main'\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nunstamp                   = MD_READER.unstamp.bind     MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\n#...........................................................................................................\ncopy                      = ( x ) -> Object.assign {}, x\n\n#-----------------------------------------------------------------------------------------------------------\n@new_description = ( S ) ->\n  R =\n    '~isa':     'MKTS/TABLE/description'\n    grid:       { width: 4, height: 4, }\n    ### default unit for width, height: ###\n    u:\n      width:    '10mm'\n      height:   '10mm'\n    cells:      []\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@grid = ( me, t ) ->\n  #.........................................................................................................\n  unless ( type = CND.type_of t ) is 'text'\n    throw new Error \"(MKTS/TABLE 5183) need a text for mkts-table/grid, got a #{type}\"\n  unless ( match = t.match /^(\\d+)\\s*x(\\d+)$/ )?\n    throw new Error \"(MKTS/TABLE 7414) need a text like '3 x 4' or similar for mkts-table/grid, got #{rpr t}\"\n  #.........................................................................................................\n  [ _, col_count_txt, row_count_txt, ] = match\n  me.grid.width   = parseInt col_count_txt, 10\n  me.grid.height  = parseInt row_count_txt, 10\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@merge = ( me, text ) ->\n  #.........................................................................................................\n  unless ( type = CND.type_of text ) is 'text'\n    throw new Error \"(MKTS/TABLE 3075) need a text for mkts-table/merge, got a #{type}\"\n  #.........................................................................................................\n  me.cells.push @parse_merge_quadref text\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_idx_from_col_and_row = ( col, row ) ->\n  unless ( type = CND.type_of col ) is 'text'\n    throw new Error \"(MKTS/TABLE 4726) expected a text for col, got a #{rpr type}\"\n  unless ( type = CND.type_of row ) is 'text'\n    throw new Error \"(MKTS/TABLE 8186) expected a text for row, got a #{rpr type}\"\n  col_idx = ( col.codePointAt 0 ) - ( 'a'.codePointAt 0 )\n  row_idx = ( parseInt row, 10 ) - 1\n  return { col: col_idx, row: row_idx, }\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use proper parsing tool ###\n@parse_merge_quadref = ( merge_quadref ) ->\n  unless ( type = CND.type_of merge_quadref ) is 'text'\n    throw new Error \"(MKTS/TABLE 2120) expected a text for merge_quadref, got a #{rpr type}\"\n  ### TAINT only supports quadrefs `[a1]` thru `[z99]` ###\n  unless ( match = merge_quadref.match /^\\[([a-z])([0-9]{1,2})\\]\\.\\.\\[([a-z])([0-9]{1,2})\\]$/ )?\n    throw new Error \"(MKTS/TABLE 6098) expected a merge-quadref like '[a1]..[d4]', got #{rpr merge_quadref}\"\n  [ _, q1col, q1row, q2col, q2row, ] = match\n  q1idx = @_idx_from_col_and_row q1col, q1row\n  q2idx = @_idx_from_col_and_row q2col, q2row\n  ### TAINT validate that q2 is not to the left / top of q1 ###\n  return [ q1idx, q2idx, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@mkts_events_from_table_description = ( me ) ->\n  R = []\n  R.push [ 'tex', '\\n\\n', ]\n  R.push [ '(', 'code', [], ( copy me ), ]\n  R.push [ '.', 'text', ( rpr me ), ( copy me ), ]\n  R.push [ ')', 'code', [], ( copy me ), ]\n  R.push [ 'tex', '\\n\\n', ]\n  return R\n\n\n"
  ]
}