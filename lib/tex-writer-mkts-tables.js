// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var $, $async, CND, D, ECS, MD_READER, MKTS, MKTSTF, alert, badge, copy, debug, echo, help, hide, info, is_hidden, is_stamped, log, require_mkts_table_formatter, rpr, select, stamp, unstamp, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MK/TS/TEX-WRITER/MKTSTABLES';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  D = require('pipedreams');

  $ = D.remit.bind(D);

  $async = D.remit_async.bind(D);

  //...........................................................................................................
  ECS = require('./eval-cs');

  MKTS = require('./main');

  MD_READER = require('./md-reader');

  hide = MD_READER.hide.bind(MD_READER);

  copy = MD_READER.copy.bind(MD_READER);

  stamp = MD_READER.stamp.bind(MD_READER);

  unstamp = MD_READER.unstamp.bind(MD_READER);

  select = MD_READER.select.bind(MD_READER);

  is_hidden = MD_READER.is_hidden.bind(MD_READER);

  is_stamped = MD_READER.is_stamped.bind(MD_READER);

  //...........................................................................................................
  MKTS.MACRO_ESCAPER.register_raw_tag('mkts-table');

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.$main = function(S) {
    //.........................................................................................................
    return D.TEE.from_pipeline([this.$parse_description(S), this.$show_metrics(S)]);
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.$show_metrics = function(S) {
    return D.$observe(function(event) {
      if (!select(event, '.', 'mkts-table-description')) {
        return;
      }
      return help('99871', CND.blue(rpr(event[2])));
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$parse_description = function(S) {
    return $((event, send) => {
      var description, error, meta, name, sandbox, text, type;
      //.......................................................................................................
      if (select(event, '.', 'mkts-table')) {
        [type, name, text, meta] = event;
        description = {};
        sandbox = this.get_mkts_table_definition_language_sandbox(S, event, description);
        debug('37733', sandbox);
        try {
          ECS.evaluate(text, {
            language: 'coffee',
            sandbox
          });
        } catch (error1) {
          error = error1;
          warn(`when trying to evaluate CS source text for <mkts-table> (source line #${meta.line_nr}),`);
          warn("an error occurred");
          throw error;
        }
        send(stamp(event));
        send(['.', 'mkts-table-description', description, copy(meta)]);
      } else {
        //.......................................................................................................
        send(event);
      }
      //.......................................................................................................
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.get_mkts_table_definition_language_sandbox = function(S, event, description) {
    /* This method makes the format-defining names of the MKTS Table Formatter available at the top level,
    curried so that the current context (`me`) that contains the processed details as defined so far as well
    as data on the general typesetting context. All names are templating functions, such that each may be
    called as `grid'4x4'`, `merge'[a1]..[a4]'` and so on from the source within the MKTS document where the
    table is being defined. */
    var f, me;
    me = description;
    me.meta = event[3];
    /* ... more typesetting detail attached here ... */
    //.........................................................................................................
    f = function() {
      this.grid = function(template) {
        return MKTSTF.grid(me, template);
      };
      this.merge = function(template) {
        return MKTSTF.merge(me, template);
      };
      return this;
    };
    //.........................................................................................................
    return f.apply({});
  };

  //===========================================================================================================
  // MKTS TABLE FORMATTER
  //-----------------------------------------------------------------------------------------------------------
  require_mkts_table_formatter = function() {
    //-----------------------------------------------------------------------------------------------------------
    this.grid = function(me, t) {
      var _, col_count_txt, match, row_count_txt, type;
      //.........................................................................................................
      if (me.grid != null) {
        throw new Error("(MKTSTABLES 3124) illegal to redefine grid");
      }
      if ((type = CND.type_of(t)) !== 'text') {
        throw new Error(`(MKTSTABLES 5183) need a text for mkts-table/grid, got a ${type}`);
      }
      if ((match = t.match(/^(\d+)\s*x(\d+)$/)) == null) {
        throw new Error(`(MKTSTABLES 7414) need a text like '3 x 4' or similar for mkts-table/grid, got ${rpr(t)}`);
      }
      //.........................................................................................................
      [_, col_count_txt, row_count_txt] = match;
      me.grid = {
        width: parseInt(col_count_txt, 10),
        height: parseInt(row_count_txt, 10)
      };
      //.........................................................................................................
      return null;
    };
    //-----------------------------------------------------------------------------------------------------------
    this.merge = function(me, text) {
      var i, idx, len, merge_quadref, ref, type;
      if (me.cells == null) {
        me.cells = [];
      }
      //.........................................................................................................
      if ((type = CND.type_of(text)) !== 'text') {
        throw new Error(`(MKTSTABLES 3075) need a text for mkts-table/merge, got a ${type}`);
      }
      ref = d.merge;
      //.........................................................................................................
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        merge_quadref = ref[idx];
        me.cells.push(this.parse_merge_quadref(merge_quadref));
      }
      //.........................................................................................................
      return null;
    };
    //-----------------------------------------------------------------------------------------------------------
    this._idx_from_col_and_row = function(col, row) {
      var col_idx, row_idx, type;
      if ((type = CND.type_of(col)) !== 'text') {
        throw new Error(`(MKTSTABLES 4726) expected a text for col, got a ${rpr(type)}`);
      }
      if ((type = CND.type_of(row)) !== 'text') {
        throw new Error(`(MKTSTABLES 8186) expected a text for row, got a ${rpr(type)}`);
      }
      col_idx = (col.codePointAt(0)) - ('a'.codePointAt(0));
      row_idx = (parseInt(row, 10)) - 1;
      return {
        col: col_idx,
        row: row_idx
      };
    };
    //-----------------------------------------------------------------------------------------------------------
    /* TAINT use proper parsing tool */
    this.parse_merge_quadref = function(merge_quadref) {
      var _, match, q1col, q1idx, q1row, q2col, q2idx, q2row, type;
      if ((type = CND.type_of(merge_quadref)) !== 'text') {
        throw new Error(`(MKTSTABLES 2120) expected a text for merge_quadref, got a ${rpr(type)}`);
      }
      /* TAINT only supports quadrefs `[a1]` thru `[z99]` */
      if ((match = merge_quadref.match(/^\[([a-z])([0-9]{1,2})\]\.\.\[([a-z])([0-9]{1,2})\]$/)) == null) {
        throw new Error(`(MKTSTABLES 6098) expected a merge-quadref like '[a1]..[d4]', got ${rpr(merge_quadref)}`);
      }
      debug('37373', match);
      [_, q1col, q1row, q2col, q2row] = match;
      q1idx = this._idx_from_col_and_row(q1col, q1row);
      q2idx = this._idx_from_col_and_row(q2col, q2row);
      /* TAINT validate that q2 is not to the left / top of q1 */
      return {q1idx, q2idx};
    };
    //-----------------------------------------------------------------------------------------------------------
    return null;
  };

  //###########################################################################################################
  MKTSTF = {};

  require_mkts_table_formatter.apply(MKTSTF);

}).call(this);

//# sourceMappingURL=tex-writer-mkts-tables.js.map
