{
  "version": 3,
  "file": "tex-writer.js",
  "sourceRoot": "..",
  "sources": [
    "src/tex-writer.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MK/TS/TEX-WRITER'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n# { $, $async, }            = D\nPIPEDREAMS3B7B            = require 'pipedreams-3b7b'\n#...........................................................................................................\nASYNC                     = require 'async'\n#...........................................................................................................\nƒ                         = CND.format_number.bind CND\nHELPERS                   = require './helpers'\nTEXLIVEPACKAGEINFO        = require './texlivepackageinfo'\noptions_route             = '../options.coffee'\n{ CACHE, OPTIONS, }       = require './options-and-cache'\nSEMVER                    = require 'semver'\n#...........................................................................................................\nXNCHR                     = require './xnchr'\nMKTS                      = require './main'\nMKTSCRIPT_WRITER          = require './mktscript-writer'\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nunstamp                   = MD_READER.unstamp.bind     MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\nMACRO_ESCAPER             = require './macro-escaper'\nMACRO_INTERPRETER         = require './macro-interpreter'\nLINEBREAKER               = require './linebreaker'\n@COLUMNS                  = require './tex-writer-columns'\n@MKTS_TABLE               = require './tex-writer-mkts-table'\nAUX                       = require './tex-writer-aux'\nYADDA                     = require './yadda'\nOVAL                      = require './object-validator'\nUNITS                     = require './mkts-table-units'\n#...........................................................................................................\nΣ_formatted_warning       = Symbol 'formatted-warning'\njr                        = JSON.stringify\npromisify                 = ( require 'util' ).promisify\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n### TAINT experimental, should become part of `PIPEDREAMS` to facilitate automated assembly of pipelines\nbased on registered precedences using `CND.TSORT` ###\nbefore = ( names..., method ) ->\n  return method\n\n#-----------------------------------------------------------------------------------------------------------\nafter = ( names..., method ) ->\n  return method\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@compile_options = ->\n  ### TAINT this method should go to OPTIONS ###\n  options_locator                   = require.resolve njs_path.resolve __dirname, options_route\n  # debug '©zNzKn', options_locator\n  options_home                      = njs_path.dirname options_locator\n  @options                          = OPTIONS.from_locator options_locator\n  @options[ 'home' ]                = options_home\n  @options[ 'locator' ]             = options_locator\n  cache_route                       = @options[ 'cache' ][ 'route' ]\n  @options[ 'cache' ][ 'locator' ]  = cache_locator = njs_path.resolve options_home, cache_route\n  @options[ 'xelatex-command' ]     = njs_path.resolve options_home, @options[ 'xelatex-command' ]\n  #.........................................................................................................\n  unless njs_fs.existsSync cache_locator\n    @options[ 'cache' ][ '%self' ] = {}\n    CACHE.save @options\n  #.........................................................................................................\n  @options[ 'cache' ][ '%self' ]    = require cache_locator\n  #.........................................................................................................\n  if ( texinputs_routes = @options[ 'texinputs' ]?[ 'routes' ] )?\n    locators = []\n    for route in texinputs_routes\n      has_single_slash  = ( /\\/$/   ).test route\n      has_double_slash  = ( /\\/\\/$/ ).test route\n      locator           = njs_path.resolve options_home, route\n      if      has_double_slash then locator += '//'\n      else if has_single_slash then locator += '/'\n      locators.push locator\n    ### TAINT duplication: tex_inputs_home, texinputs_value ###\n    ### TAINT path separator depends on OS ###\n    @options[ 'texinputs' ][ 'value' ] = locators.join ':'\n  # @options[ 'locators' ] = {}\n  # for key, route of @options[ 'routes' ]\n  #   @options[ 'locators' ][ key ] = njs_path.resolve options_home, route\n  #.........................................................................................................\n  @options.layout ?= {}\n  if @options.layout.lineheight?\n    @options.layout.lineheight = UNITS.new_quantity @options.layout.lineheight\n  #.........................................................................................................\n  CACHE.update @options\n#...........................................................................................................\n@compile_options()\n\n#-----------------------------------------------------------------------------------------------------------\n@write_mkts_master = ( S, handler ) ->\n  lines             = []\n  write             = lines.push.bind lines\n  help \"writing #{S.layout_info[ 'master-locator'  ]}\"\n  #-------------------------------------------------------------------------------------------------------\n  write \"\"\n  write \"% #{S.layout_info[ 'master-locator'  ]}\"\n  write \"% do not edit this file\"\n  write \"% generated from #{S.options.locator}\"\n  write \"% on #{new Date()}\"\n  write \"\"\n  write \"\\\\documentclass[a4paper,twoside]{book}\"\n  write \"\"\n  #-------------------------------------------------------------------------------------------------------\n  # DEFS\n  #.......................................................................................................\n  if S.options.defs?\n    write \"\"\n    write \"% DEFS\"\n    for name, value of S.options.defs\n      write \"\\\\def\\\\#{name}{#{value}}\"\n  #-------------------------------------------------------------------------------------------------------\n  # NEWCOMMANDS\n  #.......................................................................................................\n  if S.options.newcommands?\n    write \"\"\n    write \"% NEWCOMMANDS\"\n    for name, value of S.options.newcommands\n      warn \"implicitly converting newcommand value for #{name}\"\n      value = njs_path.resolve __dirname, '..', value\n      write \"\\\\newcommand{\\\\#{name}}{%\\n#{value}%\\n}\"\n  #-------------------------------------------------------------------------------------------------------\n  # IN-DOCUMENT CONFIGURATION\n  #.......................................................................................................\n  write \"\"\n  write \"% IN-DOCUMENT CONFIGURATION\"\n  ### TAINT use default configuration *.ptv file ###\n  ### TAINT make more general; ATM can only decide on boolean ###\n  S.configuration[ 'document/geometry/show/textgrid'    ]?= false\n  S.configuration[ 'document/geometry/show/papergrid'   ]?= false\n  S.configuration[ 'document/geometry/show/linebands'   ]?= false\n  S.configuration[ 'document/geometry/show/columns'     ]?= false\n  S.configuration[ 'document/geometry/show/baselines'   ]?= false\n  S.configuration[ 'document/geometry/show/ascenders'   ]?= false\n  S.configuration[ 'document/geometry/show/descenders'  ]?= false\n  S.configuration[ 'document/geometry/show/medians'     ]?= false\n  S.configuration[ 'document/geometry/show/debug'       ]?= false\n  S.configuration[ 'document/geometry/show/debugorigin' ]?= false\n  S.configuration[ 'document/geometry/show/gutter'      ]?= false\n  S.configuration[ 'document/geometry/show/linenumbers' ]?= false\n  for key, value of S.configuration\n    unless ( key.match /^document\\/geometry\\/show\\// )?\n      warn \"ignoring configuration key #{rpr key}\"\n      continue\n    continue unless value\n    gkey  = key.replace /^.*?([^\\/]+)$/g, '$1'\n    tex   = \"\\\\PassOptionsToPackage{#{gkey}}{mkts-page-geometry}%\"\n    info '55569', \"in-document configuration -> #{tex}\"\n    write tex\n  #-------------------------------------------------------------------------------------------------------\n  # PACKAGES\n  #.......................................................................................................\n  write \"\"\n  write \"% PACKAGES\"\n  # write \"\\\\usepackage{mkts2015-main}\"\n  # write \"\\\\usepackage{mkts2015-fonts}\"\n  # write \"\\\\usepackage{mkts2015-article}\"\n  write \"\\\\usepackage{mkts2015-consolidated}\"\n  #-------------------------------------------------------------------------------------------------------\n  # FONTS\n  #......................................................................................................\n  write \"\"\n  write \"% FONTS\"\n  write \"\\\\usepackage{fontspec}\"\n  #.......................................................................................................\n  for { texname, otf, home, subfolder, filename, } in S.options.fonts.files\n    font_settings = []\n    #.......................................................................................................\n    if home is ''\n      ### use standard settings ###\n      null\n    #.......................................................................................................\n    else\n      home              ?= S.options.fonts.home\n      home              = njs_path.join home, subfolder if subfolder?\n      home              = \"#{home}/\" unless home.endsWith '/'\n      font_settings.push [ \"Path=#{home}\", ]\n    #.......................................................................................................\n    font_settings.push otf if otf?\n    font_settings_txt = font_settings.join ','\n    # debug '66733', ( jr { texname, otf, home, subfolder, filename, } ), rpr font_settings_txt\n    ### TAINT should properly escape values ###\n    # write \"\\\\newfontface{\\\\#{texname}}{#{filename}}[#{font_settings_txt}]\"\n    ### TAINT this is an experiment to confine font loading to what is needed in the document\n    at hand. Strangely enough, calling the below commands will redefine them, although they do get\n    executed; still, redefining a *font* doesn't seem to bother XeLaTeX much and indeed, only\n    the needed fonts are loaded. Also, we could capture the output of the font commands and\n    compile a list of all used fonts. ###\n    ### TAINT Mystery: redefinition doesn't work, processing time skyrockets ###\n    write \"\\\\newfontface{\\\\#{texname}}{#{filename}}[#{font_settings_txt}]%\"\n    # write \"\\\\newcommand{\\\\#{texname}}{%\"\n    # write \"\\\\renewcommand{\\\\#{texname}}{\\\\#{texname}XXX}%\"\n    # write \"\\\\renewcommand{\\\\#{texname}}{\\\\typeout{\\\\trmGreen{using #{texname}}}}%\"\n    # write \"\\\\typeout{\\\\trmWhite{defining #{texname}}}%\"\n    # # write \"\\\\newfontface{\\\\#{texname}XXX}{#{filename}}[#{font_settings_txt}]%\"\n    # # write \"\\\\#{texname}XXX%\"\n    # write \"}\"\n  write \"\"\n  #-------------------------------------------------------------------------------------------------------\n  # STYLES\n  #......................................................................................................\n  write \"\"\n  write \"% STYLES\"\n  if ( styles = S.options[ 'styles' ] )?\n    write \"\\\\newcommand{\\\\#{name}}{%\\n#{value}%\\n}\" for name, value of styles\n  #-------------------------------------------------------------------------------------------------------\n  if ( mktsLineheight = S.options.layout?.lineheight ? null )?\n    mktsLineheight_txt = UNITS.as_text mktsLineheight\n    write \"\"\n    write \"% LENGTHS\"\n    write \"\\\\setlength{\\\\mktsLineheight}{#{mktsLineheight_txt}}%\"\n    write \"\\\\setlength{\\\\mktsCurrentLineheight}{\\\\mktsLineheight}%\"\n  #-------------------------------------------------------------------------------------------------------\n  write \"\"\n  write \"% CONTENT\"\n  #-------------------------------------------------------------------------------------------------------\n  # INCLUDES\n  #.......................................................................................................\n  write \"\"\n  write \"\\\\input{#{S.layout_info[ 'content-locator' ]}}\"\n  write \"\"\n  #-------------------------------------------------------------------------------------------------------\n  write \"\\\\end{document}\"\n  #-------------------------------------------------------------------------------------------------------\n  text = lines.join '\\n'\n  njs_fs.writeFile S.layout_info[ 'master-locator'  ], text, handler\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@MKTX =\n  TYPOFIX:      require './tex-writer-typofix'\n  SH:           require './tex-writer-sh'\n  CALL:         require './tex-writer-call'\n  PLUGINS:      require './plugins/tex-writer-plugins'\n  DOCUMENT:     {}\n  COMMAND:      {}\n  REGION:       {}\n  BLOCK:        {}\n  INLINE:       {}\n  MIXED:        {}\n  CLEANUP:      {}\n  API:          {}\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.COMMAND.$new_page = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    return send event unless select event, [ '!', '.', ], 'new-page'\n    send stamp event\n    [ type, name, text, meta, ] = event\n    ### TAINT make insertion of `\\null` (which causes invisible content to be placed onto the page to ensure\n    a page break will indeed happen) conditional, so we can insert page breaks that are suppressed when\n    the current page is still fresh ###\n    send [ 'tex', \"\\\\null\\\\newpage{}\", ]\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.COMMAND.$new_odd_even_page = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if      select event, [ '!', '.', ], 'new-odd-page'   then  send [ 'tex', \"\\\\newoddpage{}\",  ]\n    else if select event, [ '!', '.', ], 'new-even-page'  then  send [ 'tex', \"\\\\newevenpage{}\", ]\n    else                                                        send event\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.COMMAND.$blank_page = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    return send event unless select event, [ '!', '.', ], 'blank-page'\n    send stamp event\n    [ type, name, text, meta, ] = event\n    send [ 'tex', \"\\\\mktsBlankPage{}\", ]\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.COMMAND.$comment = ( S ) =>\n  remark = MD_READER._get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    return send event unless select event, '.', 'comment'\n    [ type, name, text, meta, ] = event\n    send remark 'drop', \"`.comment`: #{rpr text}\", copy meta\n\n#-----------------------------------------------------------------------------------------------------------\n@$document = ( S ) =>\n  is_first_document_tag   = true\n  bare                    = S.bare ? false\n  within_document         = false\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, [ '.', '(', ], 'document'\n      throw new Error \"encountered repeated `<document/>` tag (#{jr event})\" unless is_first_document_tag\n      within_document             = true\n      is_first_document_tag       = false\n      [ type, name, text, meta, ] = event\n      send stamp event\n      unless bare\n        send [ 'tex', \"\\n% begin of MD document\\n\", ]\n        send [ 'tex', \"\\\\begin{document}\\\\mktsStyleNormal{}\", ]\n        ### TAINT this should not be here, be part of style, be configurable ###\n        send [ 'tex', \"\\\\spaceskip 0.75ex plus 0.75ex minus 0.5ex \\\\relax%\\n\", ]\n    #.......................................................................................................\n    else if select event, ')', 'document'\n      within_document             = false\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$document = ( S ) =>\n#   buffer                  = []\n#   start_document_event    = null\n#   before_document_command = yes\n#   send_                   = null\n#   before_flush            = yes\n#   bare                    = S.bare ? no\n#   #.........................................................................................................\n#   flush_as = ( what ) =>\n#     send_ [ 'tex', \"\\n% begin of MD document\\n\", ] unless bare\n#     if what is 'preamble' and buffer.length > 0\n#       send_ [ 'tex', \"% (extra preamble inserted from MD document)\\n\", ]\n#       send_ event for event in buffer\n#     send_ stamp start_document_event\n#     send_ [ 'tex', \"\\\\begin{document}\\\\mktsStyleNormal{}\", ] unless bare\n#     if what is 'document'\n#       send_ event for event in buffer\n#     buffer.length           = 0\n#     before_document_command = no\n#   #.........................................................................................................\n#   return $ ( event, send ) =>\n#     send_ = send\n#     #.......................................................................................................\n#     if before_flush\n#       send event\n#       before_flush = no if select event, '~', 'flush'\n#     #.......................................................................................................\n#     else if select event, ')', 'document'\n#       flush_as 'document' if before_document_command\n#       send [ 'tex', \"\\n% end of MD document\\n\", ] unless bare\n#       send stamp event\n#     #.......................................................................................................\n#     else if select event, '!', 'document'\n#       send stamp event\n#       flush_as 'preamble'\n#     #.......................................................................................................\n#     else if before_document_command\n#       if select event, '(', 'document'\n#         start_document_event = event\n#       else\n#         buffer.push event\n#     #.......................................................................................................\n#     else\n#       send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION.$code = ( S ) =>\n  ### TAINT code duplication with `REGION.$keep_lines` possible ###\n  track = MD_READER.TRACKER.new_tracker '(code)'\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_code = track.within '(code)'\n    track event\n    #.......................................................................................................\n    if select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      if within_code\n        text = text.replace /\\u0020/g, '\\u00a0'\n      send [ type, name, text, meta, ]\n    #.......................................................................................................\n    else if select event, [ '(', ')', ], 'code'\n      [ type, name, parameters, meta, ] = event\n      [ language, settings, ]           = parameters\n      keeplines_parameters              = if settings? then [ settings, ] else []\n      #.....................................................................................................\n      if type is '('\n        send stamp event\n        send [ '(', 'keep-lines', keeplines_parameters, ( copy meta ), ]\n        send [ 'tex', \"\\n\\n{\\\\mktsStyleCode{}\", ] unless language is 'keep-lines'\n      else\n        send [ 'tex', \"}\\n\\n\", ] unless language is 'keep-lines'\n        send [ ')', 'keep-lines', keeplines_parameters, ( copy meta ), ]\n        send stamp event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION.$keep_lines = ( S ) =>\n  track           = MD_READER.TRACKER.new_tracker '(keep-lines)'\n  last_was_empty  = no\n  squish          = no\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_keep_lines = track.within '(keep-lines)'\n    track event\n    #.......................................................................................................\n    if within_keep_lines and select event, '.', 'text'\n      # send stamp event\n      [ type, name, text, meta, ] = event\n      ### TAINT other replacements possible; use API ###\n      ### TAINT U+00A0 (nbsp) might be too wide ###\n      # text = text.replace /\\n\\n/g, \"{\\\\mktsTightParagraphs\\\\null\\\\par\\n\"\n      text    = text.replace /\\u0020/g, '\\u00a0'\n      # text    = text.replace /^\\n/,     ''\n      chunks  = text.split /(\\n)/g\n      for chunk in chunks\n        if chunk is '\\n'\n          if last_was_empty then send [ 'tex', \"\\\\null\\\\par\\n\", ]\n          else                   send [ 'tex',       \"\\\\par\\n\", ]\n        else\n          unless last_was_empty = chunk.length is 0\n            # debug `0903`, rpr chunk\n            # chunk = @MKTX.TYPOFIX.fix_typography_for_tex chunk, S.options\n            send [ '.', 'text', chunk, ( copy meta ), ]\n            # send [ 'tex', chunk, ]\n    #.......................................................................................................\n    else if select event, '(', 'keep-lines'\n      send stamp event\n      [ type, name, parameters, meta, ] = event\n      unless squish = parameters?[ 0 ]?[ 'squish' ] ? yes\n        send [ 'tex', \"\\\\null\\\\par\", ]\n      send [ 'tex', \"{\\\\mktsTightParagraphs{}\", ]\n    #.......................................................................................................\n    else if select event, ')', 'keep-lines'\n      send stamp event\n      send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\nbefore '@MKTX.BLOCK.$heading', '@MKTX.COMMAND.$toc', \\\n@MKTX.REGION.$toc = ( S ) =>\n  track   = MD_READER.TRACKER.new_tracker '(toc)'\n  buffer  = null\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_toc = track.within '(toc)'\n    track event\n    #.......................................................................................................\n    if select event, '(', 'toc'\n      send stamp event\n      [ type, name, text, meta, ] = event\n      buffer = [ '!', name, text, meta, ]\n    #.......................................................................................................\n    else if select event, ')', 'toc'\n      send stamp event\n      if buffer?\n        send buffer\n        buffer = null\n    #.......................................................................................................\n    else if within_toc and select event, '.', 'comma'\n      if buffer?\n        send buffer\n        buffer = null\n    #.......................................................................................................\n    else if within_toc and select event, [ '(', ')', ], 'h'\n      [ type, name, text, meta, ] = event\n      meta[ 'toc' ] = 'omit'\n      send event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$heading = ( S ) =>\n  ### TAINT make numbering style configurable ###\n  ### TAINT generalize for more than 3 levels ###\n  h_nrs             = [ 1, 1, 1, 1, ]\n  h_idx             = -1\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '(', 'h'\n      [ type, name, level, meta, ] = event\n      h_idx                += +1\n      h_key                 = \"h-#{h_idx}\"\n      meta.h               ?= {}\n      meta.h.idx            = h_idx\n      meta.h.key            = h_key\n      #.....................................................................................................\n      send [ 'tex', \"\\n\", ]\n      send stamp event\n      #.....................................................................................................\n      switch level\n        when 1\n          send [ '!', 'columns', [ 1, ], ( copy meta, { toc: 'omit' }, ), ]\n          send [ 'tex', \"{\\\\mktsHOne{}\", ]\n          send [ 'tex', \"\\\\zlabel{#{h_key}}\", { toc: 'omit' }, ]\n        when 2\n          send [ '!', 'columns', [ 1, ], ( copy meta, { toc: 'omit' }, ), ]\n          send [ 'tex', \"{\\\\mktsHTwo{}\", ]\n          send [ 'tex', \"\\\\zlabel{#{h_key}}\", { toc: 'omit' }, ]\n        when 3\n          send [ '!', 'columns', [ 1, ], ( copy meta, { toc: 'omit' }, ), ]\n          send [ 'tex', \"{\\\\mktsHThree{}\", ]\n          send [ 'tex', \"\\\\zlabel{#{h_key}}\", { toc: 'omit' }, ]\n        when 4\n          send [ 'tex', \"{\\\\mktsHFour{}\", ]\n          send [ 'tex', \"\\\\zlabel{#{h_key}}\", { toc: 'omit' }, ]\n        else return send [ '.', 'warning', \"heading level #{level} not implemented\", ( copy meta ), ]\n    #.......................................................................................................\n    else if select event, ')', 'h'\n      [ type, name, level, meta, ] = event\n      #.....................................................................................................\n      switch level\n        when 1\n          send [ 'tex', \"\\\\mktsHOneBeg}%\\n\",          ]\n          send [ '!', 'columns', [ 'pop', ], ( copy meta, { toc: 'omit' }, ), ]\n        when 2\n          send [ 'tex', \"\\\\mktsHTwoBeg}%\\n\",          ]\n          send [ '!', 'columns', [ 'pop', ], ( copy meta, { toc: 'omit' } ), ]\n        when 3\n          send [ 'tex', \"\\\\mktsHThreeBeg}%\\n\\n\",        ]\n          send [ '!', 'columns', [ 'pop', ], ( copy meta, { toc: 'omit' } ), ]\n        when 4\n          send [ 'tex', \"\\\\mktsHFourBeg}%\\n\\n\",        ]\n        else return send [ '.', 'warning', \"heading level #{level} not implemented\", ( copy meta ), ]\n      #.....................................................................................................\n      send stamp event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.COMMAND.$crossrefs = ( S ) =>\n  crossrefs       = {}\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, name, text, meta, ] = event\n    #.......................................................................................................\n    if select event, '!', [ 'crossref-anchor', ]\n      # debug '33393', event\n      ### count   = crossrefs[ text ] = ( crossrefs[ text ] ? 0 ) + 1 ###\n      ### key     = \"#{text}-#{count}\" ###\n      key     = text\n      send [ 'tex', \"\\\\label{#{key}}\", ]\n      send stamp event\n    #.......................................................................................................\n    else if select event, '!', [ 'crossref-link', ]\n      # debug '33394', event\n      ### count   = crossrefs[ text ] = ( crossrefs[ text ] ? 0 ) + 1 ###\n      ### key     = \"#{text}-#{count}\" ###\n      key     = text\n      send [ 'tex', \"\\\\mktsPagerefArrow{#{key}}\", ]\n      send stamp event\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\nbefore '@MKTX.COMMAND.$toc', after '@MKTX.BLOCK.$heading', \\\n@MKTX.MIXED.$collect_headings_for_toc = ( S ) =>\n  within_heading  = no\n  this_heading    = null\n  headings        = []\n  buffer          = []\n  remark          = MD_READER._get_remark()\n  #.........................................................................................................\n  new_heading = ( level, meta ) ->\n    R =\n      level:    level\n      idx:      meta[ 'h' ][ 'idx' ]\n      key:      meta[ 'h' ][ 'key' ]\n      events:   []\n    return R\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    # debug '8624', event\n    [ type, name, text, meta, ] = event\n    #.......................................................................................................\n    if select event, '~', [ 'flush', 'stop', ]\n      send remark name, \"releasing #{buffer.length} events\", ( copy meta, )\n      send sub_event for sub_event in buffer\n      buffer.length = 0\n      send event\n    #.......................................................................................................\n    else if select event, '(', 'document'\n      send event\n    #.......................................................................................................\n    else if select event, ')', 'document'\n      # debug '2139', unstamp [ '.', 'toc-headings', headings, meta, ]\n      send unstamp [ '.', 'toc-headings', headings, meta, ]\n      send sub_event for sub_event in buffer\n      buffer.length = 0\n      send event\n    #.......................................................................................................\n    else if meta? and ( meta[ 'toc' ] isnt 'omit' ) and select event, '(', 'h'\n      ### TAINT use library method to test event category ###\n      level                           = text\n      within_heading                  = yes\n      this_heading                    = new_heading level, meta\n      headings.push this_heading\n      buffer.push event\n    #.......................................................................................................\n    else if select event, ')', 'h'\n      within_heading                  = no\n      this_heading                    = null\n      buffer.push event\n    #.......................................................................................................\n    else if within_heading\n      ### TAINT use library method to determine event category ###\n      unless event[ event.length - 1 ][ 'toc' ] is 'omit'\n        if event.length is 4\n          this_heading[ 'events' ].push [ type, name, text, ( copy meta ), ]\n        else\n          this_heading[ 'events' ].push event\n      unless event[ event.length - 1 ][ 'toc' ] is 'only'\n        buffer.push event\n    #.......................................................................................................\n    else\n      buffer.push event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\nafter '@MKTX.REGION.$toc', '@MKTX.MIXED.$collect_headings_for_toc', \\\n@MKTX.COMMAND.$toc = ( S ) =>\n  headings = null\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    ### TAINT use library method to test event category ###\n    if select event, '.', 'toc-headings'\n      [ _, _, headings, _, ] = event\n      send stamp event\n    #.......................................................................................................\n    else if select event, '!', 'toc'\n      [ type, name, text, meta, ] = event\n      send stamp event\n      #.....................................................................................................\n      unless headings?\n        return send [ '.', 'warning', \"expecting toc-headings event before this\", ( copy meta ), ]\n      #.....................................................................................................\n      send [ 'tex', '{\\\\mktsToc%\\n', ]\n      # send [ '!', 'mark', 'toc', ( copy meta ), ]\n      for heading in headings\n        { level, events, key, } = heading\n        last_idx                = events.length - 1\n        for h_event, idx in events\n          # debug '23432', h_event\n          ### TAINT use library method to determine event category ###\n          h_event = unstamp h_event if h_event.length is 4\n          send [ 'tex', \"{\\\\mktsStyleNormal \\\\dotfill \\\\zpageref{#{key}}}\", ] if idx is last_idx\n          # send [ 'tex', \" \\\\dotfill \\\\zpageref{#{key}}\", ] if idx is last_idx\n          send h_event\n      send [ 'tex', '\\\\mktsTocBeg}%\\n', ]\n      # headings.length = 0\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$yadda = ( S ) =>\n  ### TAINT in the case of Chinese (`<yadda lang=zh nr=1/>`), using the `nr` attribute will not reproduce\n  the same text across runs. ###\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '.', 'yadda'\n      send stamp event\n      [ type, name, Q, meta, ] = event\n      #.....................................................................................................\n      if Q.paragraphs?\n        p_count = parseInt Q.paragraphs, 10\n        for nr in [ 1 .. p_count ] by +1\n          send [ '.', 'text', ( YADDA.generate Q ) + '\\n\\n', ( copy meta ), ]\n      #.....................................................................................................\n      else\n        send [ '.', 'text', ( YADDA.generate Q ), ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n### experimental ###\n@MKTX.API.fncr = ( csg, srsg, cid ) -> [ [ 'tex', \"\\\\mktsFncr{#{csg}}{#{srsg}}{#{cid}}\" ], ]\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$fncr = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '.', 'fncr'\n      [ type, name, Q, meta, ] = event\n      send stamp event\n      send sub_event for sub_event in @MKTX.API.fncr Q.csg, Q.srsg, Q.cid\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$box = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '(', 'box'\n      [ type, name, Q, meta, ] = event\n      send stamp event\n      command = if Q.border? then 'framebox' else 'makebox'\n      if Q.width? then  send [ 'tex', \"\\\\#{command}[#{Q.width}]{\", ]\n      else              send [ 'tex', \"\\\\#{command}{\", ]\n    #.......................................................................................................\n    else if select event, ')', 'box'\n      send stamp event\n      send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$tiny = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '(', 'tiny'\n      [ type, name, Q, meta, ] = event\n      send stamp event\n      send [ 'tex', \"{\\\\mktsTiny{}\", ]\n    #.......................................................................................................\n    else if select event, ')', 'tiny'\n      send stamp event\n      send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$scale = ( S ) =>\n  schema =\n    postprocess: ( Q ) ->\n      if Q.lines?\n        Q.lines = true if Q.lines is ''\n      else\n        Q.lines = false\n      return Q\n    #.......................................................................................................\n    properties:\n      abs:    { type: 'number', }\n      rel:    { type: 'number', }\n      lines:  { type: [ 'boolean', 'string', ], }\n    #.......................................................................................................\n    additionalProperties: false\n    oneOf: [ { required: [ 'abs', ], }, { required: [ 'rel', ], }, ]\n  #.........................................................................................................\n  validate_and_cast = OVAL.new_validator schema\n  block_stack       = []\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, [ '(', '.', ], 'scale'\n      [ type, name, Q, meta, ] = event\n      Q = validate_and_cast Q\n      send stamp event\n      #.....................................................................................................\n      if Q.abs?\n        factor      = Q.abs\n        command     = 'mktsScaleText'\n      else\n        factor      = Q.rel\n        command     = 'mktsScaleTextRelative'\n      #.....................................................................................................\n      block_stack.push Q.lines\n      brace     = if type is '(' then '{' else ''\n      send [ 'tex', \"#{brace}\\\\#{command}{#{factor}}\", ]\n    #.......................................................................................................\n    else if select event, ')', 'scale'\n      send stamp event\n      is_block  = block_stack.pop() ? false\n      par       = if is_block then '\\\\par' else ''\n      send [ 'tex', \"#{par}}\", ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$stretch = ( S ) =>\n  schema =\n    properties:\n      abs:    { type: 'number', }\n      rel:    { type: 'number', }\n    #.......................................................................................................\n    additionalProperties: false\n    oneOf: [ { required: [ 'abs', ], }, { required: [ 'rel', ], }, ]\n  #.........................................................................................................\n  validate_and_cast = OVAL.new_validator schema\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, [ '(', '.', ], 'stretch'\n      [ type, name, Q, meta, ] = event\n      Q = validate_and_cast Q\n      send stamp event\n      #.....................................................................................................\n      if Q.abs?\n        factor  = Q.abs\n        command = 'mktsStretchLinesAbsolute'\n      else\n        factor  = Q.rel\n        command = 'mktsStretchLinesRelative'\n      #.....................................................................................................\n      factor_txt  = ( factor.toFixed 6 ).replace /\\.?0+$/, ''\n      brace       = if type is '(' then '{' else ''\n      send [ 'tex', \"#{brace}\\\\#{command}{#{factor}}\", ]\n    #.......................................................................................................\n    else if select event, ')', 'stretch'\n      send stamp event\n      send [ 'tex', \"\\\\par}\", ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$vspace = ( S ) =>\n  schema =\n    properties:\n      abs:    { type: 'number', }\n      rel:    { type: 'number', }\n    #.......................................................................................................\n    additionalProperties: false\n    oneOf: [ { required: [ 'abs', ], }, { required: [ 'rel', ], }, ]\n  #.........................................................................................................\n  validate_and_cast = OVAL.new_validator schema\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '.', 'vspace'\n      [ type, name, Q, meta, ] = event\n      Q = validate_and_cast Q\n      send stamp event\n      #.....................................................................................................\n      if Q.abs?\n        factor  = Q.abs\n        command = 'mktsVspaceAbsolute'\n      else\n        factor  = Q.rel\n        command = 'mktsVspaceRelative'\n      #.....................................................................................................\n      send [ 'tex', \"\\\\par\\\\#{command}{#{factor}}\", ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$landscape = ( S ) =>\n  open_tag_count    = 0\n  schema            = { additionalProperties: false, }\n  validate_and_cast = OVAL.new_validator schema\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, [ '(', '.', ], 'landscape'\n      [ type, name, Q, meta, ] = event\n      Q = validate_and_cast Q\n      send stamp event\n      open_tag_count += +1\n      send [ 'tex', \"\\\\begin{landscape}\", ]\n    #.......................................................................................................\n    else if select event, ')', 'landscape'\n      send [ 'tex', \"\\\\end{landscape}\", ]\n    #.......................................................................................................\n    else if select event, ')', 'document'\n      while open_tag_count > 0\n        open_tag_count += -1\n        send [ 'tex', \"\\\\end{landscape}\", ]\n      send event\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$samepage = ( S ) =>\n  ### TAINT code duplication from `$landscape` ###\n  open_tag_count    = 0\n  schema            = { additionalProperties: false, }\n  validate_and_cast = OVAL.new_validator schema\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, [ '(', '.', ], 'samepage'\n      [ type, name, Q, meta, ] = event\n      Q = validate_and_cast Q\n      send stamp event\n      open_tag_count += +1\n      send [ 'tex', \"\\\\begin{mktsSamepage}\", ]\n    #.......................................................................................................\n    else if select event, ')', 'samepage'\n      send [ 'tex', \"\\\\end{mktsSamepage}\", ]\n    #.......................................................................................................\n    else if select event, ')', 'document'\n      while open_tag_count > 0\n        open_tag_count += -1\n        send [ 'tex', \"\\\\end{mktsSamepage}\", ]\n      send event\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$clearpage = ( S ) =>\n  ### TAINT code duplication from `$landscape` ###\n  schema            = { additionalProperties: false, }\n  validate_and_cast = OVAL.new_validator schema\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '.', 'clearpage'\n      [ type, name, Q, meta, ] = event\n      Q = validate_and_cast Q\n      send stamp event\n      send [ 'tex', \"\\\\clearpage{}\", ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @MKTX.BLOCK.$pre = ( S ) =>\n#   MACRO_ESCAPER.register_raw_tag 'pre'\n#   schema            =\n#     properties:           {}\n#     additionalProperties: false\n#   validate_and_cast = OVAL.new_validator schema\n#   within_pre        = false\n#   #.........................................................................................................\n#   return $ ( event, send ) =>\n#     if select event, [ '(', '.', ], 'pre'\n#       send stamp event\n#       if within_pre\n#         return send [ '.', 'warning', \"can't nest <pre> within <pre>: #{rpr event}\", ( copy meta ), ]\n#       [ type, name, Q, meta, ]  = event\n#       { text, attributes, }     = Q\n#       attributes                = validate_and_cast attributes\n#       within_pre                = true\n#     #.......................................................................................................\n#     else if select event, ')', 'pre'\n#       within_pre = false\n#     #.......................................................................................................\n#     else\n#       if within_pre\n#         debug '44932', 'pre', event\n#       else\n#         send event\n#     #.......................................................................................................\n#     return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$nudge = ( S ) =>\n  schema =\n    properties:\n      push:    { type: 'number', }\n      raise:   { type: 'number', }\n    #.......................................................................................................\n    additionalProperties: false\n    # oneOf: [ { required: [ 'push', ], }, { required: [ 'raise', ], }, ]\n  validate_and_cast = OVAL.new_validator schema\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '(', 'nudge'\n      [ type, name, Q, meta, ] = event\n      Q = validate_and_cast Q\n      push  = Q.push ? 0\n      throw new Error \"expected a number for push, got #{rpr event}\" unless CND.isa_number push\n      raise = Q.raise ? 0\n      throw new Error \"expected a number for raise, got #{rpr event}\" unless CND.isa_number raise\n      send stamp event\n      send [ 'tex', \"{\\\\mktstfPushRaise{#{push}}{#{raise}}\", ]\n    #.......................................................................................................\n    else if select event, ')', 'nudge'\n      send stamp event\n      send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$turn = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '(', 'turn'\n      [ type, name, Q, meta, ] = event\n      angle = Q.angle ? '90'\n      angle = parseFloat angle\n      throw new Error \"expected a number for angle, got #{rpr event}\" unless CND.isa_number angle\n      send stamp event\n      send [ 'tex', \"\\\\mktsTurn{#{angle}}{\", ]\n    #.......................................................................................................\n    else if select event, ')', 'turn'\n      send stamp event\n      send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$xfsc = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '.', 'xfsc'\n      [ type, name, Q, meta, ] = event\n      send stamp event\n      send [ 'tex', \"\\\\mktsXfsc{#{Q.sc}}{#{Q.symbol}}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$text_alignment = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, [ '(', '.', ], [ 'left', 'right', 'center', 'justify', ]\n      [ type, name, Q, meta, ]  = event\n      p                         = name[ 0 ].toUpperCase() + name[ 1 .. ]\n      if type is '.' then  send [ 'tex',  \"\\\\mkts#{p}{}\", ]\n      else                 send [ 'tex', \"{\\\\mkts#{p}{}\", ]\n      send stamp event\n    #.......................................................................................................\n    else if select event, ')', [ 'left', 'right', 'center', 'justify', ]\n      [ type, name, Q, meta, ]  = event\n      send [ 'tex', \"\\\\par}\\n\", ]\n      send stamp event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$hfill = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '.', [ 'hfil', 'hfill', ]\n      [ type, name, Q, meta, ] = event\n      send stamp event\n      send [ 'tex', \"\\\\#{name}{}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$here_x = ( S ) =>\n  prv_nr = 0\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '.', 'here-x'\n      send stamp event\n      [ type, name, Q, meta, ]  = event\n      prefix                    = name[ ... name.length - 2 ]\n      prv_nr                   += +1\n      Q.key                    ?= \"h#{prv_nr}\"\n      send [ 'tex', \"\\\\#{prefix}x{#{Q.key}}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.$insert = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '.', 'insert'\n      send stamp event\n      [ type, name, Q, meta, ]  = event\n      path    = HELPERS.resolve_document_relative_path S, Q.src\n      content = njs_fs.readFileSync path, { encoding: 'utf-8', }\n      switch Q.mode ? 'literal'\n        when 'literal'\n          send [ '.', 'text', content, ( copy meta ), ]\n        when 'mktscript'\n          send [ '.', 'mktscript', '<document/>' + content, ( copy meta ), ]\n        when 'raw'\n          send [ 'tex', content, ]\n        else\n          send [ '.', 'warning', \"unknown mode #{rpr Q.mode} in #{rpr event}\", ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$custom_entities = ( S ) =>\n  ### Define custom XML entities in `options.coffee` under key `entities` ###\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '.', 'entity'\n      [ _, _, key, meta, ]  = event\n      entry                 = S.options.entities[ key ]\n      #.....................................................................................................\n      return send event unless entry?\n      unless entry.type? and entry.value?\n        send [ '.', 'warning', \"entry for entity #{rpr key} needs both 'type' and 'value', got #{rpr entry}\", ( copy meta ), ]\n        return null\n      #.....................................................................................................\n      switch entry.type\n        when 'text'\n          send [ '.', 'text', entry.value, ( copy meta ), ]\n          send stamp event\n        when 'tex'\n          send [ 'tex', entry.value, ]\n          send stamp event\n        else\n          send event\n    #.......................................................................................................\n    else if select event, '.', 'spurious-ampersand'\n      [ _, _, key, meta, ]  = event\n      send [ '.', 'warning', \"spurious ampersand #{rpr key}\", ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$fontlist = ( S ) =>\n  within_fontlist = false\n  buffer          = []\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '(', 'fontlist'\n      send stamp event\n      within_fontlist = true\n    #.......................................................................................................\n    else if select event, ')', 'fontlist'\n      send stamp event\n      within_fontlist             = false\n      sample                      = buffer.join ''\n      buffer.length               = 0\n      #.....................................................................................................\n      send [ 'tex', \"\\\\begin{tabbing}\\n\" ]\n      send [ 'tex', \"\\\\phantom{XXXXXXXXXXXXXXXXXXXXXXXXX} \\\\= \\\\phantom{XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX} \\\\\\\\\\n\" ]\n      #.....................................................................................................\n      for { texname, } in S.options[ 'fonts' ][ 'files' ]\n        shortname = texname.replace /^mktsFontfile/, ''\n        tex       = \"#{shortname} \\\\> {\\\\#{texname}{}#{sample}} \\\\\\\\\\n\"\n        send [ 'tex', tex, ]\n      #.....................................................................................................\n      send [ 'tex', \"\\\\end{tabbing}\\n\" ]\n    #.......................................................................................................\n    else if within_fontlist and select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      # send stamp event\n      buffer.push text\n    #.......................................................................................................\n    else\n      if within_fontlist\n        [ type, name, text, meta, ] = event\n        send [ '.', 'warning', \"ignoring event #{type}\", ( copy meta ? {} ), ]\n      else\n        send event\n    #.......................................................................................................\n    return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$blockquote = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '(', 'blockquote'\n      # [ type, name, parameters, meta, ] = event\n      send stamp event\n      # send [ 'tex', \"{\\\\setlength{\\\\leftskip}{5mm}\\\\setlength{\\\\rightskip}{5mm}\", ]\n      send [ 'tex', \"\\\\begin{mktsEnvBlockquote}\", ]\n    #.......................................................................................................\n    else if select event, ')', 'blockquote'\n      # [ type, name, parameters, meta, ] = event\n      send stamp event\n      # send [ 'tex', \"}\\n\\n\", ]\n      send [ 'tex', \"\\\\end{mktsEnvBlockquote}\\n\\n\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$paragraph_1 = ( S ) =>\n  ### TAINT should unify the two observers ###\n  track = MD_READER.TRACKER.new_tracker '(code)', '(keep-lines)'\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_code       = track.within '(code)'\n    within_keep_lines = track.within '(keep-lines)'\n    track event\n    #.......................................................................................................\n    if select event, '.', 'p'\n      [ type, name, text, meta, ] = event\n      if within_code or within_keep_lines\n        send stamp event\n        # send [ 'tex', \"\\n%% PARAGRAPH ##{S.paragraph_nr})\\n\" ]\n        send [ 'tex', '\\n\\n' ]\n      else\n        # send [ 'tex', \"\\n%% PARAGRAPH ##{S.paragraph_nr})\\n\" ]\n        send stamp event\n        send @MKTX.BLOCK._end_paragraph()\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$paragraph_2 = ( S ) =>\n  within_paragraph    = false\n  seen_text_event     = false\n  collector           = []\n  close_paragraph     = false\n  within_noindent     = false\n  is_first_par        = true\n  has_noindent_tag    = false\n  # is_fresh            = true\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '(', [ 'h', 'multi-columns', 'blockquote', ],  true then is_first_par        = true\n    if select event, ')', [ 'blockquote', 'ul', 'code',         ],  true then is_first_par        = true\n    if select event, '.', [ 'hr', 'hr2',                        ],  true then is_first_par        = true\n    if select event, '(', [ 'ul', 'keep-lines',                 ],  true then within_noindent     = true\n    if select event, ')', [ 'ul', 'keep-lines',                 ],  true then within_noindent     = false\n    # if select event, '(', [ 'h',                                ],  true then is_fresh            = false\n    #.......................................................................................................\n    if select event, '.', 'noindent'\n      send stamp event\n      has_noindent_tag  = yes\n    #.......................................................................................................\n    else if select event, '~', 'start-paragraph', true\n      within_paragraph  = yes\n      seen_text_event   = no\n      S.paragraph_nr   += +1\n      # send [ 'tex', \"\\n%% (PARAGRAPH ##{S.paragraph_nr}\\n\" ]\n    #.......................................................................................................\n    else if select event, '.', 'p'\n      has_noindent_tag  = no\n      within_paragraph  = no\n      seen_text_event   = no\n      # send [ 'tex', \"\\n}\\n\" ]\n      send cached_event for cached_event in collector\n      collector.length = 0\n      if close_paragraph\n        close_paragraph = no\n        # send [ 'tex', \"\\n}% )p\\n\" ]\n    #.......................................................................................................\n    else if within_paragraph\n      if seen_text_event\n        ### If we're within a paragraph, but some material has aleady gone down the line, then there's\n        nothing to do here: ###\n        send event\n      else\n        ### Otherwise, we either have to cache the current event, or else—if the current event is a text\n        event—we have to send all cached events, then the prefix to a new paragraph, and then the text event\n        itself. ###\n        unless select event, '.', 'text'\n          collector.push event\n        else\n          ### TAINT can omit either of these two ###\n          seen_text_event = yes\n          close_paragraph = yes\n          #.................................................................................................\n          ### Send all the events encountered so far; typically, these will include commands to set up\n          columns etc.: ###\n          send cached_event for cached_event in collector\n          collector.length = 0\n          #.................................................................................................\n          ### Check whether we're typesetting the first text portion after a headline, the start of a\n          blockquote or similar and send additional material as needed: ###\n          has_indent        = not is_first_par\n          is_first_par    = false\n          #.................................................................................................\n          if within_noindent or has_noindent_tag or ( not has_indent ) # or is_fresh\n            # is_fresh = false\n            null\n          else\n            send [ 'tex', \"\\\\mktsIndent{}\" ]\n            # send [ 'tex', \"¶ \" ]\n          #.................................................................................................\n          ### Finally, send the first text portion of the paragraph itself: ###\n          send event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK._end_paragraph = =>\n  ### TAINT use command from sty ###\n  ### TAINT make configurable ###\n  # return [ 'tex', '\\\\mktsShowpar\\\\par\\n' ]\n  return [ 'tex', '\\n\\n' ]\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$unordered_list = ( S ) =>\n  tex_by_md_markup =\n    '*':          '$\\\\star$'\n    'fallback':   '—'\n  item_markup_tex = null\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '(', 'ul'\n      [ type, name, text, meta, ] = event\n      { markup } = meta\n      ### TAINT won't work in nested lists ###\n      ### TAINT make configurable ###\n      item_markup_tex = tex_by_md_markup[ markup ] ? tex_by_md_markup[ 'fallback' ]\n      send stamp event\n      # send [ 'tex', '\\\\begin{itemize}' ]\n    #.......................................................................................................\n    else if select event, '(', 'li'\n      send stamp event\n      # send [ 'tex', \"\\\\item[#{item_markup_tex}] \" ]\n      # send [ 'tex', \"{\\\\mktsFontfileHanamina{}.⚫.▪.⏹.◼.⬛.}\\\\hspace{3mm}y\" ]\n      ### TAINT Horizontal space should depend on other metrics ###\n      # send [ 'tex', \"{\\\\mktsFontfileHanamina{}\\\\mktstfPushRaise{-0.4}{-0.1}{⚫}\\\\hspace{-0.75mm}}\" ]\n      # send [ 'tex', \"{\\\\mktsFontfileCwtexqheibold{}\\\\mktstfPushRaise{-0.4}{-0.1}{▷}\\\\hspace{-1.75mm}}\" ]\n      # send [ 'tex', \"{\\\\mktsFontfileHanamina{}◼}\\\\hspace{3mm}L\" ]\n      # send [ 'tex', \"{\\\\mktsFontfileCwtexqheibold{}\\\\mktstfPushRaise{-0.4}{-0.1}{▷}}\" ]\n      send [ 'tex', S.options.entities[ 'ulsymbol' ][ 'value' ] ]\n    #.......................................................................................................\n    else if select event, ')', 'li'\n      send stamp event\n      send [ 'tex', '\\n' ]\n    #.......................................................................................................\n    else if select event, ')', 'ul'\n      send stamp event\n      # send [ 'tex', '\\\\end{itemize}' ]\n    #.......................................................................................................\n    else\n      send event\n\n# #-----------------------------------------------------------------------------------------------------------\n# # before '@MKTX.REGION.$single_column', '@MKTX.REGION.$multi_column', \\\n# @MKTX.BLOCK.$hr = ( S ) =>\n#   plain_rule  = [ 'tex', \"\\\\mktsRulePlain{}\", ]\n#   swell_rule  = [ 'tex', \"\\\\mktsRuleSwell{}\", ]\n#   #.........................................................................................................\n#   return $ ( event, send ) =>\n#     #.......................................................................................................\n#     if select event, '.', 'hr'\n#       [ type, name, text, meta, ] = event\n#       switch chr = text[ 0 ]\n#         when '.'\n#           send stamp copy event\n#           send plain_rule\n#         when '-'\n#           send stamp copy event\n#           send swell_rule\n#         when '°'\n#           send stamp hide copy event\n#           send [ '!', 'slash', [], ( copy meta ), ]\n#         when ':'\n#           send stamp hide copy event\n#           send [ '!', 'slash', [ plain_rule, ], ( copy meta ), ]\n#         when '='\n#           send stamp hide copy event\n#           send [ '!', 'slash', [ swell_rule, ], ( copy meta ), ]\n#         when '^'\n#           send stamp hide copy event\n#           send [ '(', 'slash', [], ( copy meta ), ]\n#         when 'v'\n#           send stamp hide copy event\n#           send [ ')', 'slash', [], ( copy meta ), ]\n#         else\n#           send stamp hide copy event\n#           send [ '.', 'warning', \"horizontal rule with unknown markup #{rpr text}\", ( copy meta ), ]\n#     #.......................................................................................................\n#     else\n#       send event\n\n#-----------------------------------------------------------------------------------------------------------\n# before '@MKTX.REGION.$single_column', '@MKTX.REGION.$multi_column', \\\n@MKTX.BLOCK.$hr2 = ( S ) =>\n  # plain_rule  = [ 'tex', \"\\\\mktsRulePlain{}\", ]\n  # swell_rule  = [ 'tex', \"\\\\mktsRuleSwell{}\", ]\n  # tight_rule  = [ 'tex', \"\\\\mktsRulePlainTight{}\", ]\n  ###\n\n  / slash\n  - plain (line)\n  = bold (line)\n  -= plain with bold (2 stacked lines)\n  =- bold with plain (2 stacked lines)\n  -=- plain, bold, plain (3 stacked lines)\n  . dotted (line)\n  * asterisks (line)\n  + swole (line)\n  0 compress (above & below; default)\n  1 normal (spacing, one line above & below)\n  2,1 custom (2 above, 1 below)\n  2 splendid (2 above & below)\n\n  // <!-- just a slash -->\n  /0-------/\n  0-------\n  /2+++++2/\n  /0--------============1/\n  ###\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    # #.......................................................................................................\n    # ### re-interpret `<hr>`: ###\n    # if select event, '(', 'hr'\n    #   is_synthetic_event                        = true\n    #   [ type, name, parameters, meta, ]         = event\n    #   event[ 0 ]                                = '.'\n    #   event[ 1 ]                                = 'hr2'\n    #   event[ 2 ]                                = { slash: false, above: 0, one: '-', two: null, three: null, below: 0 }\n    # #.......................................................................................................\n    # if select event, ')', 'hr'\n    #   return send stamp event\n    #.......................................................................................................\n    if select event, '.', 'hr2'\n      send stamp event\n      [ type, name, parameters, meta, ]         = event\n      { slash, above, one, two, three, below, } = parameters\n      switch one\n        when '-' then rule_command = 'mktsRulePlainTight'\n        when '=' then rule_command = 'mktsRuleBoldTight'\n        when '#' then rule_command = 'mktsRuleBlackTight'\n        when '+' then rule_command = 'mktsRuleEnglish'\n        when '°' then rule_command = 'mktsRuleZero'\n        else return send [ '.', 'warning', \"unknown hrule markup #{rpr one}\", ( copy meta ), ]\n      below      += -1\n      sub_events  = []\n      sub_events.push [ 'tex', \"\\\\mktsVspace{#{above}}\", ] unless above is 0\n      sub_events.push [ 'tex', \"\\\\#{rule_command}{}\", ]\n      sub_events.push [ 'tex', \"\\\\mktsVspace{#{below}}\", ] unless below is 0\n      sub_events.push [ 'tex', \"\\n\\n\", ]\n      if slash\n        # send [ 'tex', \"\\\\gdef\\\\mktsNextVspaceCount{#{above}}%TEX-WRITER/$hr2\\n\", ]\n        # send [ '!', 'slash', null, ( copy meta ), ]\n        mid = sub_events\n        send [ '!', 'slash', { above, mid, below, }, ( copy meta ), ]\n      else\n        # send [ 'tex', \"\\\\gdef\\\\mktsNextVspaceCount{#{above}}\\\\mktsVspace{}\" ] if above > 0\n        # send [ 'tex', \"\\\\mktsRulePlainTight{}\", ]\n        # send [ 'tex', \"\\\\gdef\\\\mktsNextVspaceCount{#{below}}\\\\mktsVspace{}\" ] if below > 0\n        # send [ 'tex', \"\\n\\n\" ]\n        send sub_event for sub_event in sub_events\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.COMMAND.$echo = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '!', 'echo'\n      [ _, _, parameters, meta, ] = event\n      send stamp event\n      send [ '.', 'text', ( rpr parameters ), ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$nl = ( S ) =>\n  ### TAINT consider to zero-width non-breaking space ###\n  nl = [ 'tex', \"~\\\\\\\\\\n\", ]\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '!', 'nl'\n      [ type, name, [ count, ], meta, ] = event\n      send nl for _ in [ 0 ... ( count ? 1 ) ] by +1\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$code_span = ( S ) =>\n  within_smallcaps  = false\n  within_em         = false\n  within_code_span  = false\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '(', [ 'smallcaps-lower', ], true\n      send event\n      within_smallcaps = true\n    #.......................................................................................................\n    else if select event, ')', [ 'smallcaps-lower', ], true\n      send event\n      within_smallcaps = false\n    #.......................................................................................................\n    if select event, '(', [ 'em', ], true\n      send event\n      within_em = true\n    #.......................................................................................................\n    else if select event, ')', [ 'em', ], true\n      send event\n      within_em = false\n    #.......................................................................................................\n    else if select event, '(', [ 'code-span', 'tt', ]\n      send stamp event\n      if within_em\n        send [ 'tex', '{\\\\mktsStyleCodeItalic{}', ]\n      else if within_smallcaps\n        send [ 'tex', '{\\\\mktsStyleCode{}\\\\mktsUnderline{', ]\n      else\n        send [ 'tex', '{\\\\mktsStyleCode{}', ]\n      within_code_span = true\n    #.......................................................................................................\n    else if select event, ')', [ 'code-span', 'tt', ]\n      send stamp event\n      if within_smallcaps then  send [ 'tex', \"}}\", ]\n      else                      send [ 'tex', \"}\", ]\n      within_code_span = false\n    #.......................................................................................................\n    else if select event, '(', [ 'code-box', 'tt', ]\n      send stamp event\n      ### NOTE can dispend with `\\makebox` as underline inhibits linebreaks as well ###\n      if within_smallcaps then  send [ 'tex', '{\\\\mktsStyleCode{}\\\\mktsUnderline{', ]\n      else                      send [ 'tex', '\\\\makebox{{\\\\mktsStyleCode{}', ]\n      within_code_span = true\n    #.......................................................................................................\n    else if select event, ')', [ 'code-box', 'tt', ]\n      send stamp event\n      send [ 'tex', \"}}\", ]\n      within_code_span = false\n    #.......................................................................................................\n    else if within_code_span and select event, '.', 'text'\n      [ _, _, text, meta, ] = event\n      #.....................................................................................................\n      ### TAINT sort-of code duplication with command url ###\n      fragments     = LINEBREAKER.fragmentize text\n      last_idx      = fragments.length - 1\n      #.....................................................................................................\n      for fragment, idx in fragments\n        send [ '.', 'text', fragment, ( copy meta ), ]\n        send [ 'tex', \"\\\\allowbreak{}\", ] unless idx is last_idx\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$image = ( S ) =>\n  track       = MD_READER.TRACKER.new_tracker '(image)'\n  event_cache = []\n  alt_cache   = []\n  src         = null\n  alt         = null\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_image = track.within '(image)'\n    track event\n    [ type, name, text, meta, ] = event\n    #.......................................................................................................\n    if select event, '(', 'image'\n      send stamp event\n      src = HELPERS.resolve_document_relative_path S, meta[ 'src' ]\n      # src = njs_path.resolve S.layout_info[ 'source-home' ], meta[ 'src' ]\n    #.......................................................................................................\n    else if select event, ')', 'image'\n      alt = alt_cache.join ''\n      send [ 'tex', '\\\\begin{figure}%\\n', ]\n      ### TAINT escape `src`? ###\n      # send [ 'tex', \"\\\\includegraphics[width=\\\\textwidth]{#{src}}%\\n\", ]\n      send [ 'tex', \"\\\\includegraphics[width=0.8\\\\linewidth]{#{src}}%\\n\", ]\n      # send [ 'tex', \"\\\\includegraphics[width=0.5\\\\textwidth]{#{src}}%\\n\", ]\n      send [ 'tex', \"\\\\caption[#{alt}]{%\\n\", ]\n      send cached_event for cached_event in event_cache\n      send [ 'tex', '}%\\n', ]\n      send [ 'tex', '\\\\end{figure}%\\n', ]\n      src               = null\n      alt_cache.length  = 0\n      send stamp event\n    #.......................................................................................................\n    else if within_image\n      event_cache.push event\n      alt_cache.push text if select event, '.', 'text'\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.MIXED.$raw = ( S ) =>\n  remark = MD_READER._get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '.', 'raw'\n      [ type, name, Q, meta, ] = event\n      send stamp hide copy event\n      send remark 'convert', \"raw to TeX\", copy meta\n      { text, attributes, } = Q\n      text                  = MACRO_ESCAPER.escape.unescape_escape_chrs S, text\n      # debug '9382', [ 'tex', text, ]\n      send [ 'tex', text, ]\n      # send stamp event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.MIXED.$table = ( S ) =>\n  track                     = MD_READER.TRACKER.new_tracker '(table)', '(th)'\n  remark                    = MD_READER._get_remark()\n  buffered_field_separator  = null\n  description               = null\n  row_count                 = null\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, name, text, meta, ] = event\n    within_table                = track.within '(table)'\n    within_th                   = track.within '(th)'\n    track event\n    #.......................................................................................................\n    return send event unless within_table or select event, '(', 'table'\n    #.......................................................................................................\n    if within_th and select event, '.', 'text'\n      send [ '(', 'strong', null, ( copy meta ), ]\n      send stamp event\n      send [ ')', 'strong', null, ( copy meta ), ]\n    #.......................................................................................................\n    else if select event, ')', 'tr'\n      row_count                += +1\n      buffered_field_separator  = null\n      send stamp hide copy event\n      ### thx to http://tex.stackexchange.com/a/159260 ###\n      if row_count is description[ 'row_count' ]\n        send [ 'tex', \"\\\\\\\\\\n\", ]\n        # send [ 'tex', \"\\\\\\\\[\\\\mktsTabularLineheightDeltaLast]\\n\", ]\n      else\n        send [ 'tex', \"\\\\\\\\\\n\", ]\n        # send [ 'tex', \"\\\\\\\\[\\\\mktsTabularLineheightDelta]\\n\", ]\n      # last_zerohline_idx = send [ 'tex', \"\\\\mktsZerohline\\n\", ]\n    #.......................................................................................................\n    else\n      send buffered_field_separator if buffered_field_separator\n      buffered_field_separator = null\n      #.....................................................................................................\n      if select event, '(', 'table'\n        send stamp hide copy event\n        col_styles  = []\n        row_count   = 0\n        description = meta[ 'table' ]\n        for alignment in description[ 'alignments' ]\n          switch alignment\n            when 'left'   then col_styles.push 'l'\n            when 'center' then col_styles.push 'c'\n            when 'right'  then col_styles.push 'r'\n            else               col_styles.push 'l'\n        col_styles  = '| ' + ( col_styles.join ' | ' ) + ' |'\n        send [ 'tex', \"{\", ]\n        send [ 'tex', \"\\\\mktsVspace{1}\", ] ### TAINT arbitrary length ###\n        send [ 'tex', \"\\\\begin{tabular}[pos]{ #{col_styles} }\\n\", ]\n      #.....................................................................................................\n      else if select event, ')', 'table'\n        send stamp hide copy event\n        send [ 'tex', \"\\\\hline\\n\", ]\n        send [ 'tex', \"\\\\end{tabular}\\n\", ]\n        send [ 'tex', \"\\\\mktsVspace{1}\", ] ### TAINT arbitrary length ###\n        send [ 'tex', \"}\", ]\n        send [ 'tex', \"\\n\\n\", ]\n        description = null\n        row_count   = null\n      #.....................................................................................................\n      else if select event, '(', 'tbody'\n        send stamp hide copy event\n      #.....................................................................................................\n      else if select event, ')', 'tbody'\n        send stamp hide copy event\n      #.....................................................................................................\n      else if select event, '(', 'td'\n        send stamp hide copy event\n      #.....................................................................................................\n      else if select event, ')', 'td'\n        send stamp hide copy event\n        buffered_field_separator = [ 'tex', \" & \", ]\n      #.....................................................................................................\n      else if select event, '(', 'th'\n        send stamp hide copy event\n      #.....................................................................................................\n      else if select event, ')', 'th'\n        send stamp hide copy event\n        buffered_field_separator = [ 'tex', \" & \", ]\n      #.....................................................................................................\n      else if select event, '(', 'thead'\n        send [ 'tex', \"\\\\hline\\n\", ]\n        send stamp hide copy event\n      #.....................................................................................................\n      else if select event, ')', 'thead'\n        send stamp hide copy event\n        send [ 'tex', \"\\n\\\\hline\\n\", ]\n      #.....................................................................................................\n      else if select event, '(', 'tr'\n        send stamp hide copy event\n      #.....................................................................................................\n      else\n        send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.MIXED.$footnote = ( S ) =>\n  ### TAINT should move this to initialization ###\n  throw new Error \"`S.footnotes` already defined\" if S.footnotes?\n  S.footnotes =\n    # 'style':      'classic'\n    'style':      'on-demand'\n    'by-idx':     []\n  #.........................................................................................................\n  return switch style = S.footnotes[ 'style' ]\n    when 'classic'    then @MKTX.MIXED._$footnote_classic    S\n    when 'on-demand'  then @MKTX.MIXED._$footnote_on_demand  S\n    else throw new Error \"unknown footnote style #{rpr style}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.MIXED._$footnote_classic = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '(', 'footnote'\n      send stamp event\n      send [ 'tex', \"\\\\footnote{\", ]\n    #.......................................................................................................\n    else if select event, ')', 'footnote'\n      send stamp event\n      send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.MIXED._$footnote_on_demand = ( S ) =>\n  ### TAINT TeX codes used here should be made configurable ###\n  cache             = S.footnotes[ 'by-idx' ]\n  current_fn_idx    = -1\n  current_fn_cache  = -1\n  first_fn_idx      = 0\n  last_fn_idx       = -1\n  track             = MD_READER.TRACKER.new_tracker '(footnote)'\n  remark            = MD_READER._get_remark()\n  last_was_footnote = no\n  #.........................................................................................................\n  insert_footnotes = ( send, meta ) =>\n    if last_fn_idx >= first_fn_idx\n      # send [ '!', 'mark', '42', ( copy meta ), ]\n      # send [ '.', 'p', null, ( copy meta ), ]\n      send [ 'tex', \"\\n\\n\", ]\n      send [ 'tex', \"\\\\begin{mktsEnNotes}\", ]\n      for fn_idx in [ first_fn_idx .. last_fn_idx ]\n        fn_nr           = fn_idx + 1\n        fn_cache        = cache[ fn_idx ]\n        cache[ fn_idx ] = null\n        # send [ 'tex', \"(#{fn_nr})\\\\,\", ]\n        send stamp [ '(', 'footnote', null, {}, ]\n        send [ 'tex', \"{\\\\mktsEnStyleMarkNotes\\\\mktsEnMarkBefore#{fn_nr}\\\\mktsEnMarkAfter{}}\", ]\n        send fn_event for fn_event in fn_cache\n        send stamp [ ')', 'footnote', null, {}, ]\n      send [ 'tex', \"\\\\end{mktsEnNotes}\\n\\n\", ]\n      first_fn_idx  = last_fn_idx  + 1\n      last_fn_idx   = first_fn_idx - 1\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, name, text, meta, ] = event\n    within_footnote             = track.within '(footnote)'\n    track event\n    #.......................................................................................................\n    if select event, '(', 'footnote'\n      # send stamp event\n      current_fn_cache        = []\n      current_fn_idx         += +1\n      last_fn_idx             = current_fn_idx\n      fn_nr                   = current_fn_idx + 1\n      cache[ current_fn_idx ] = current_fn_cache\n      fn_separator            = if last_was_footnote then ',' else ''\n      # send [ 'tex', \"\\\\mktsEnStyleMark{#{fn_separator}#{fn_nr}}\" ]\n      send [ 'tex', \"{\\\\mktsEnStyleMarkMain{}#{fn_separator}#{fn_nr}}\" ]\n    #.......................................................................................................\n    else if select event, ')', 'footnote'\n      # send stamp event\n      current_fn_cache  = null\n      last_was_footnote = yes\n    #.......................................................................................................\n    else if within_footnote\n      current_fn_cache.push event\n      send remark 'caching', \"event within footnote\", event\n    #.......................................................................................................\n    else if select event, '!', 'footnotes'\n      send stamp event\n      insert_footnotes send, meta\n    #.......................................................................................................\n    else if select event, ')', 'document'\n      insert_footnotes send, meta\n      send event\n    #.......................................................................................................\n    else\n      last_was_footnote = no\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.MIXED.$footnote.$remove_extra_paragraphs = ( S ) =>\n  last_event  = null\n  #.........................................................................................................\n  return $ ( event, send, end ) =>\n    if event?\n      #.....................................................................................................\n      if select event, ')', 'footnote'\n        send last_event if last_event? and not select last_event, '.', 'p'\n        last_event = event\n      #.....................................................................................................\n      else\n        send last_event if last_event?\n        last_event = event\n    #.......................................................................................................\n    if end?\n      send last_event if last_event?\n      end()\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$translate_i_and_b = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, [ '(', ')', ], [ 'i', 'b', ]\n      [ type, name, text, meta, ] = event\n      new_name = if name is 'i' then 'em' else 'strong'\n      send [ type, new_name, text, meta, ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$super_and_subscript = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '(', [ 'sup', 'sub', ]\n      [ type, name, text, meta, ] = event\n      send stamp event\n      tex_style_name = if name is 'sup' then  'mktsStyleFontSuperscript'\n      else                                    'mktsStyleFontSubscript'\n      send [ 'tex', \"{\\\\#{tex_style_name}{}\", ]\n    #.......................................................................................................\n    else if select event, ')', [ 'sup', 'sub', ]\n      [ type, name, text, meta, ] = event\n      send stamp event\n      send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$mark = ( S ) =>\n  mark_idx = 0\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '!', 'mark'\n      [ type, name, text, meta, ] = event\n      send stamp event\n      unless text?\n        mark_idx += +1\n        text      = \"a-#{mark_idx}\"\n      # text = @MKTX.TYPOFIX.fix_typography_for_tex text, S.options\n      send [ 'tex', \"\\\\mktsMark{#{text}}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$em_strong_and_smallcaps = ( S ) =>\n  em_count        = 0\n  strong_count    = 0\n  sc_upper_count  = 0\n  sc_lower_count  = 0\n  code_count      = 0\n  #.........................................................................................................\n  tex_events_by_keys =\n    # ____: { start: [], stop: [], }\n    ___l: { start: [ \"{\\\\mktsStyleSmallcapslower{}\", ],           stop: [        \"}\", ], }\n    __u_: { start: [ \"{\\\\mktsStyleSmallcapsupper{}\", ],           stop: [        \"}\", ], }\n    __ul: { start: [ \"{\\\\mktsStyleSmallcapsall{}\", ],             stop: [        \"}\", ], }\n    _s__: { start: [ \"{\\\\mktsStyleBold{}\", ],                     stop: [        \"}\", ], }\n    _s_l: { start: [ \"{\\\\mktsStyleBold{}\", ],                     stop: [        \"}\", ], }\n    _su_: { start: [ \"{\\\\mktsStyleBold{}\", ],                     stop: [        \"}\", ], }\n    _sul: { start: [ \"{\\\\mktsStyleBold{}\", ],                     stop: [        \"}\", ], }\n    e___: { start: [ \"{\\\\mktsStyleItalic{}\", ],                   stop: [ \"\\\\/\", \"}\", ], }\n    e__l: { start: [ \"{\\\\mktsStyleItalicsmallcapslower{}\", ],     stop: [ \"\\\\/\", \"}\", ], }\n    e_u_: { start: [ \"{\\\\mktsStyleItalicsmallcapsupper{}\", ],     stop: [ \"\\\\/\", \"}\", ], }\n    e_ul: { start: [ \"{\\\\mktsStyleItalicsmallcapsall{}\", ],       stop: [ \"\\\\/\", \"}\", ], }\n    es__: { start: [ \"{\\\\mktsStyleBolditalic{}\", ],               stop: [ \"\\\\/\", \"}\", ], }\n    es_l: { start: [ \"{\\\\mktsStyleBolditalic{}\", ],               stop: [ \"\\\\/\", \"}\", ], }\n    esu_: { start: [ \"{\\\\mktsStyleBolditalic{}\", ],               stop: [ \"\\\\/\", \"}\", ], }\n    esul: { start: [ \"{\\\\mktsStyleBolditalic{}\", ],               stop: [ \"\\\\/\", \"}\", ], }\n# \"{\\\\mktsStyleBold{}\"\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, name, text, meta, ] = event\n    delta = if ( type is '(' ) then +1 else -1\n    #.......................................................................................................\n    if select event, [ '(', ')', ], [ 'code', 'code-span', ]\n      code_count += delta\n      send event\n    #.......................................................................................................\n    else if select event, [ '(', ')', ], 'smallcaps-upper'\n      sc_upper_count += delta\n      send stamp event\n    #.......................................................................................................\n    else if select event, [ '(', ')', ], 'smallcaps-lower'\n      sc_lower_count += delta\n      send stamp event\n    #.......................................................................................................\n    else if select event, [ '(', ')', ], 'em'\n      em_count += delta\n      send stamp event\n    #.......................................................................................................\n    else if select event, [ '(', ')', ], 'strong'\n      strong_count += delta\n      send stamp event\n    #.......................................................................................................\n    else if code_count < 1 and select event, '.', 'text'\n      ### skip markup when text is blank: ###\n      return send event if /^\\s*$/.test event[ 2 ]\n      key = [\n        if (       em_count > 0 ) then 'e' else '_'\n        if (   strong_count > 0 ) then 's' else '_'\n        if ( sc_upper_count > 0 ) then 'u' else '_'\n        if ( sc_lower_count > 0 ) then 'l' else '_'\n        ].join ''\n      return send event if key is '____'\n      { start, stop, } = tex_events_by_keys[ key ]\n      send [ 'tex', sub_event, ] for sub_event in start\n      send event\n      send [ 'tex', sub_event, ] for sub_event in stop\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$link = ( S ) =>\n  cache     = []\n  last_href = null\n  track     = MD_READER.TRACKER.new_tracker '(link)'\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_link = track.within '(link)'\n    track event\n    [ type, name, text, meta, ] = event\n    #.......................................................................................................\n    if select event, '(', 'link'\n      send stamp event\n      last_href = text\n    #.......................................................................................................\n    else if select event, ')', 'link'\n      # debug '©97721', event\n      # debug '©97721', cache\n      send [ 'tex', '{\\\\mktsStyleLinklabel{}', ]\n      for cached_event in cache\n        send cached_event\n      send [ 'tex', '}', ]\n      # send [ '(', 'footnote', null,       ( copy meta ), ]\n      # send [ '(', 'url',      null,       ( copy meta ), ]\n      # send [ '.', 'text',     last_href,  ( copy meta ), ]\n      # send [ '.', 'p',        null,       ( copy meta ), ]\n      # send [ ')', 'url',      null,       ( copy meta ), ]\n      # send [ ')', 'footnote', null,       ( copy meta ), ]\n      send [ '(', 'footnote', null,           ( copy meta ), ]\n      send [ '!', 'url',      [ last_href, ], ( copy meta ), ]\n      send [ '.', 'p',        null,           ( copy meta ), ]\n      send [ ')', 'footnote', null,           ( copy meta ), ]\n      cache.length  = 0\n      last_href     = null\n      send stamp event\n    #.......................................................................................................\n    else if cache.length > 0 and select event, ')', 'document'\n      send [ '.', 'warning', \"missing closing region 'link'\", ( copy meta ), ]\n      send cached_event for cached_event in cache\n      send event\n    #.......................................................................................................\n    else if within_link\n      cache.push event\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$url = ( S ) =>\n  track   = MD_READER.TRACKER.new_tracker '(url)'\n  buffer  = []\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_url = track.within '(url)'\n    track event\n    [ type, name, text, meta, ] = event\n    #.......................................................................................................\n    if select event, '(', 'url'\n      send stamp hide copy event\n    #.......................................................................................................\n    else if select event, ')', 'url'\n      send [ '!', 'url', [ buffer.join '' ], ( copy meta ), ]\n      buffer.length = 0\n      send stamp hide copy event\n    #.......................................................................................................\n    else if within_url and select event, '.', 'text'\n      buffer.push text\n    #.......................................................................................................\n    else if within_url\n      send [ '.', 'warning', \"ignoring non-text event inside `(url)`: #{rpr event}\"]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.COMMAND.$url = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '!', 'url'\n      [ type, name, parameters, meta, ] = event\n      send stamp event\n      [ url, ] = parameters\n      unless url?\n        return send [ '.', 'warning', \"missing required argument for `<<!url>>`\", ( copy meta ), ]\n      #.....................................................................................................\n      ### TAINT sort-of code duplication with inline code ###\n      fragments     = LINEBREAKER.fragmentize url\n      last_idx      = fragments.length - 1\n      #.....................................................................................................\n      send [ 'tex', \"{\\\\mktsStyleUrl{}\", ]\n      #.....................................................................................................\n      for fragment, idx in fragments\n        [ segment, slashes, ] = fragment.split /(\\/+)$/\n        send [ '.', 'text', segment, ( copy meta ), ]\n        if slashes?\n          slashes = '\\\\g' + ( Array.from slashes ).join '\\\\g'\n          send [ 'tex', slashes, ]\n        send [ 'tex', \"\\\\allowbreak{}\", ]\n      #.....................................................................................................\n      send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @MKTX.COMMAND.$url = ( S ) =>\n#   #.........................................................................................................\n#   return $ ( event, send ) =>\n#     #.......................................................................................................\n#     if select event, '!', 'url'\n#       [ type, name, parameters, meta, ] = event\n#       send stamp event\n#       [ url, ] = parameters\n#       unless url?\n#         return send [ '.', 'warning', \"missing required argument for `<<!url>>`\", ( copy meta ), ]\n#       #.....................................................................................................\n#       fragments = LINEBREAKER.fragmentize url\n#       last_idx  = fragments.length - 1\n#       for fragment, idx in fragments\n#         unless idx is last_idx\n#           if      fragment.endsWith '//' then fragment = fragment[ .. fragment.length - 3 ] + \"\\\\g/\\\\g/\"\n#           else if fragment.endsWith '/'  then fragment = fragment[ .. fragment.length - 2 ] + \"\\\\g/\"\n#         fragments[ idx ] = fragment\n#       url_tex = fragments.join \"\\\\g\\\\allowbreak{}\"\n#       send [ 'tex', \"{\\\\mktsStyleUrl{}\", ]\n#       send [ 'tex', url_tex, ]\n#       send [ 'tex', \"}\", ]\n#     #.......................................................................................................\n#     else\n#       send event\n\n\n#===========================================================================================================\n# CLEANUP\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.CLEANUP.$remove_empty_texts = ( S ) ->\n  remark = MD_READER._get_remark()\n  return $ ( event, send ) =>\n    if select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      if text is ''\n        ### remain silent to make output an easier read ###\n        null\n        send remark 'drop', \"empty text\", copy meta\n      else\n        send event\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.CLEANUP.$consolidate_texts = ( S ) ->\n  # remark      = MD_READER._get_remark()\n  collector   = []\n  first_meta  = null\n  return $ ( event, send ) =>\n    if select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      first_meta                 ?= meta\n      collector.push text\n    else\n      # debug '83726', collector\n      if collector.length > 0\n        send [ '.', 'text', ( collector.join '' ), ( copy first_meta ), ]\n        first_meta        = null\n        collector.length  = 0\n      send event\n\n# #-----------------------------------------------------------------------------------------------------------\n# @MKTX.CLEANUP.$drop_empty_p_tags = ( S ) =>\n#   ### TAINT emptyness of  `p` tags ist tested for by counting intermittend `text` events; however, a\n#   paragraph could conceivably also consist of e.g. a single image. ###\n#   text_count  = 0\n#   remark      = MD_READER._get_remark()\n#   #.........................................................................................................\n#   warn \"not using `$drop_empty_p_tags` at the moment\"\n#   return $ ( event, send ) =>\n#     send event\n  # #.........................................................................................................\n  # return $ ( event, send ) =>\n  #   #.......................................................................................................\n  #   ### TAINT bogus selector ###\n  #   if select event, [ ')', ]\n  #     text_count = 0\n  #     send event\n  #   #.......................................................................................................\n  #   else if select event, '.', 'text'\n  #     text_count += +1\n  #     send event\n  #   #.......................................................................................................\n  #   else if select event, '.', 'p'\n  #     if text_count > 0\n  #       send event\n  #     else\n  #       [ _, _, _, meta, ] = event\n  #       send remark 'drop', \"empty `.p`\", copy meta\n  #     text_count = 0\n  #   #.......................................................................................................\n  #   else\n  #     send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION.$correct_p_tags_before_regions = ( S ) =>\n  last_was_p              = no\n  last_was_begin_document = no\n  remark                  = MD_READER._get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    # debug '©MwBAv', event\n    #.......................................................................................................\n    if select event, 'tex'\n      send event\n    #.......................................................................................................\n    else if select event, '(', 'document'\n      # debug '©---1', last_was_begin_document\n      # debug '©---2', last_was_p\n      last_was_p              = no\n      last_was_begin_document = yes\n      send event\n    #.......................................................................................................\n    else if select event, '.', 'p'\n      # debug '©---3', last_was_begin_document\n      # debug '©---4', last_was_p\n      last_was_p              = yes\n      last_was_begin_document = no\n      send event\n    #.......................................................................................................\n    else if select event, [ '(', ]\n      # debug '©---5', last_was_begin_document\n      # debug '©---6', last_was_p\n      if ( not last_was_begin_document ) and ( not last_was_p )\n        [ ..., meta, ] = event\n        # send stamp [ '#', 'insert', my_badge, \"inserting `.p` tag\", ( copy meta ), ]\n        send remark 'insert', \"`.p` because region or block opens\", copy meta\n        send [ '.', 'p', null, ( copy meta ), ]\n      send event\n      last_was_p              = no\n      last_was_begin_document = no\n    #.......................................................................................................\n    else\n      last_was_p              = no\n      last_was_begin_document = no\n      send event\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.$show_unhandled_tags = ( S ) =>\n  return $ ( event, send ) =>\n    ### TAINT selection could be simpler, less repetitive ###\n    [ type, name, text, meta, ] = event\n    if ( type is 'tex' ) or select event, '.', [ 'text', 'raw', ]\n      send event\n    else if ( not is_stamped event ) and ( type isnt '~' ) and ( not select event, '.', 'warning' )\n      # debug '©04210', JSON.stringify event\n      # if text?\n      #   if ( CND.isa_pod text )\n      #     if ( Object.keys text ).length is 0\n      #       text = ''\n      #     else\n      #       text = rpr text\n      # else\n      #   text = ''\n      # if type in [ '.', '!', ] or type in MKTS.MD_READER.FENCES.left\n      #   first             = type\n      #   last              = name\n      # else\n      #   first             = name\n      #   last              = type\n      # event_txt         = first + last + ' ' + text\n      event_txt = \"unhandled event: #{jr event}\"\n      send [ '.', 'warning', event_txt, ( copy meta ), ]\n      # send stamp hide copy event\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.$show_warnings = ( S ) =>\n  warnings = []\n  return $ ( event, send, end ) =>\n    #.......................................................................................................\n    if event?\n      if select event, '.', 'warning'\n        [ type, name, text, meta, ] = event\n        line_nr                     = meta.line_nr  ? '?'\n        col_nr                      = meta.col_nr   ? '?'\n        ### TAINT fix location, use proper file name even for generated mktscript events ###\n        source_locator              = S.layout_info[ 'source-locator' ]\n        source_locator              = '<STRING>' if ( source_locator.match /<STRING>/ )?\n        text                        = \"#{text} (#{source_locator}#{line_nr}:#{col_nr})\"\n        warn '39833-1', text\n        warnings.push event\n        send event\n      else\n        send event\n    #.......................................................................................................\n    if end?\n      if warnings.length > 0\n        send [ 'tex', '\\\\newpage{}' ]\n        send [ 'tex', \"{\\\\mktsHTwo{}\\\\zlabel{mktsGeneratedWarnings}Generated Warnings}\\n\\n\", ]\n        for event in warnings\n          [ type, name, text, meta, ] = event\n          warn '39833-2', text\n          send [ '.', 'warning', text, ( copy meta ), ]\n          send [ 'tex', '\\\\par\\n' ]\n      end()\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.$format_warnings = ( S ) =>\n  self = @\n  return $async ( event, done ) =>\n    ### TAINT this makes clear why we should not use '.' as type here; `warning` is a meta-event, not\n    primarily a formatting instruction ###\n    #.......................................................................................................\n    if select event, '.', 'warning'\n      [ type, name, text, meta, ] = event\n      step ( resume ) ->\n        message       = yield self.MKTX.TYPOFIX.fix_typography_for_tex S, text, resume\n        message_tex   = \"\\\\begin{mktsEnvWarning}#{message}\\\\end{mktsEnvWarning}\"\n        message_event = [ '.', Σ_formatted_warning, message_tex, ( copy meta ), ]\n        done message_event\n    #.......................................................................................................\n    else\n      done event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.$warnings_as_tex = ( S ) =>\n  warnings = []\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '.', Σ_formatted_warning\n      [ _, _, message_tex, meta, ]  = event\n      tex_event                     = [ 'tex', message_tex, ]\n      warnings.push tex_event\n      send tex_event\n    #.......................................................................................................\n    else if select event, ')', 'document'\n      if warnings.length > 0\n        for tex_event in warnings\n          send tex_event\n          send [ 'tex', \"\\n\\n\", ]\n        send event\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.$consolidate_mktscript_events = ( S ) ->\n  # remark      = MD_READER._get_remark()\n  collector   = []\n  first_meta  = null\n  return $ ( event, send ) =>\n    if select event, '.', 'mktscript'\n      [ type, name, text, meta, ] = event\n      first_meta                 ?= meta\n      collector.push text\n    else\n      # debug '83726', collector\n      if collector.length > 0\n        send [ '.', 'mktscript', ( collector.join '\\n' ), ( copy first_meta ), ]\n        first_meta        = null\n        collector.length  = 0\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n# xxx_mktscript_nr = 0\n@MKTX.$mktscript = ( S ) =>\n  tex_from_md           = promisify @tex_from_md.bind @\n  collector             = []\n  processing_mktscript  = false\n  end                   = null\n  return PIPEDREAMS3B7B.$async ( event, send, end_ ) =>\n    end = end_ if end_?\n    return end() if end?\n    #.......................................................................................................\n    ### Buffer all events: ###\n    collector.unshift event\n    #.......................................................................................................\n    ### Postpone all further processing if we're busy:: ###\n    return null if processing_mktscript\n    #.......................................................................................................\n    while collector.length > 0\n      event = collector.pop()\n      #.....................................................................................................\n      if not event?\n        send.done()\n        end() if end?\n        return null\n      #.....................................................................................................\n      if select event, '.', 'mktscript'\n        processing_mktscript = true\n        [ type, name, mktscript, meta, ]   = event\n        tex_source  = await tex_from_md mktscript, { bare: yes, }\n        send [ 'tex', tex_source, ]\n        send stamp event\n        send.done()\n        processing_mktscript = false\n      #.....................................................................................................\n      else\n        send event\n        send.done()\n    #.......................................................................................................\n    return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$filter_tex = ( S ) ->\n  ### TAINT reduce number of event types, shapes to simplify this ###\n  return $ ( event, send ) =>\n    [ type, name, text, meta, ] = event\n    if type is 'tex'\n      send event[ 1 ]\n    else if select event, '.', [ 'text', 'raw', ]\n      send event[ 2 ]\n    else if meta?[ 'tex' ] is 'pass-through'\n      # debug '82341', event\n      send event\n    else unless ( type is '~' ) or ( is_stamped event )\n      warn \"unhandled event: #{jr event}\"\n      send.error new Error \"unhandled events not allowed at this point; got #{jr event}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_events = ( S ) ->\n  return D.$observe ( event ) =>\n    whisper JSON.stringify event\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_text_locators = ( S ) ->\n  stack         = []\n  event         = null\n  column_stack  = [ 1, ]\n  matches       = ( type, name ) -> MD_READER.select event, type, name, yes\n  return D.$observe ( _event ) =>\n    event = _event\n    [ type, name, text, meta, ] = event\n    return if matches [ '~', 'tex', ]\n    #.......................................................................................................\n    if matches [ '(', '!', ], [ 'multi-columns', 'columns', ]\n      if ( parameter = event[ 2 ][ 0 ] ) is 'pop'\n        column_stack.pop()\n      else\n        column_stack.push parameter\n    #.......................................................................................................\n    else if matches [ '(', '!', ], [ 'multi-columns', 'columns', ]\n      column_stack.pop()\n    #.......................................................................................................\n    else if matches '('\n      unless name in [ 'document', 'COLUMNS/group', ]\n        stack.push name\n    #.......................................................................................................\n    else if matches ')'\n      stack.pop() unless name is 'document'\n    #.......................................................................................................\n    else if matches '.', 'text'\n      column_count  = column_stack[ column_stack.length - 1 ]\n      meta.locator  = [ 'c' + ( rpr column_count ), stack..., ].join '/'\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_start_and_end_2 = ( S ) ->\n  ### TAINT will buffer all texts ###\n  is_first    = true\n  buffer      = []\n  event_count = 0\n  t0          = null\n  t1          = null\n  return $ ( event, send, end ) =>\n    #.......................................................................................................\n    if event?\n      event_count += +1\n      #.....................................................................................................\n      if is_first\n        is_first  = false\n        t0        = Date.now()\n      #.....................................................................................................\n      if select event, '.', 'text'\n        [ type, name, text, meta, ] = event\n        buffer.push text\n      #.....................................................................................................\n      send event\n    #.......................................................................................................\n    if end?\n      t1            = Date.now()\n      dts           = ( t1 - t0 ) / 1000\n      max_chr_count = 200\n      raw_text      = buffer.join ' '\n      chr_count     = raw_text.length ### NOTE approximate count ###\n      text_count    = buffer.length\n      cpe_txt       = ( chr_count / text_count ).toFixed 1 ### characters per text event ###\n      eps_txt       = ( event_count / dts ).toFixed 1 ### events per second ###\n      if chr_count > max_chr_count\n        info '33442', rpr ( raw_text[ ... max_chr_count ] + ' ... ' + raw_text[ chr_count - max_chr_count ... ] )\n      else\n        info '33442', rpr raw_text\n      ### TAINT compare text size with buffer length; characters per text event ###\n      urge '\\n' + \"\"\"\n        needed #{dts}s for #{event_count} events (#{eps_txt} events / s)\n        (#{buffer.length} text events, #{cpe_txt} chrs / text event)\"\"\"\n      buffer.length = 0\n      end()\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_text_locators = ( S ) ->\n  return D.$observe ( event ) =>\n    if select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      help ( CND.grey '22311' ), ( CND.lime ( meta.locator ? '????????????' ) ) + ' ' + ( CND.white rpr text )\n    #.......................................................................................................\n    return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@create_tex_write_tee = ( S ) ->\n  ### TAINT get state via return value of MKTS.create_mdreadstream ###\n  ### TAINT make execution of `$produce_mktscript` a matter of settings ###\n  #.......................................................................................................\n  readstream    = D.create_throughstream()\n  writestream   = D.create_throughstream()\n  # mktscript_in  = D.create_throughstream()\n  # mktscript_out = D.create_throughstream()\n  #.......................................................................................................\n  ### TAINT need a file to write MKTScript text events to; must still send on incoming events ###\n  # mktscript_in\n  #   .pipe MKTSCRIPT_WRITER.$produce_mktscript             S\n  #   .pipe mktscript_out\n  # mktscript_tee = D.TEE.from_readwritestreams mktscript_in, mktscript_out\n  #.......................................................................................................\n  ### old plugins: ###\n  pipeline    = ( ( plugin.$main S ) for plugin in MK.TS.plugins )\n  # plugins_tee = D.TEE.from_pipeline pipeline\n  plugins_tee = D.combine pipeline\n  #.......................................................................................................\n  readstream\n    ### new plugins: ###\n    # .pipe D.$observe ( event ) -> info '23994-1', ( CND.grey '--> ' + ( jr event )[ .. 100 ] )\n    .pipe @MKTX.PLUGINS.$plugins                            S\n    .pipe @MKTX.$insert                                     S\n    .pipe @MKTX.SH.$spawn                                   S\n    .pipe @MKTX.CALL.$call_await                            S\n    .pipe @MKTX.CALL.$call_stream                           S\n    .pipe @MKTX.$consolidate_mktscript_events               S\n    .pipe @MKTX.$mktscript                                  S\n    .pipe @MKTX.INLINE.$custom_entities                     S\n    .pipe plugins_tee\n    # .pipe D.$observe ( event ) -> info ( CND.grey '--------->' ), ( CND.blue event[ 0 ] + event[ 1 ] )\n    .pipe MACRO_ESCAPER.$expand.$remove_backslashes         S\n    # .pipe MKTSCRIPT_WRITER.$show_mktsmd_events              S\n    .pipe MKTSCRIPT_WRITER.$produce_mktscript               S\n    .pipe @$document                                        S\n    # .pipe D.$observe ( event ) -> info '23994-2', ( CND.grey '--> ' + ( jr event )[ .. 100 ] )\n    #.......................................................................................................\n    ### tags that produce tags ###\n    #.......................................................................................................\n    ### stuff using new HTML-ish syntax ###\n    .pipe @MKTS_TABLE.$main                                 S\n    .pipe @MKTX.INLINE.$here_x                              S\n    .pipe @MKTX.INLINE.$box                                 S\n    .pipe @MKTX.INLINE.$hfill                               S\n    .pipe @MKTX.INLINE.$tiny                                S\n    .pipe @MKTX.INLINE.$scale                               S\n    .pipe @MKTX.BLOCK.$stretch                              S\n    .pipe @MKTX.BLOCK.$vspace                               S\n    .pipe @MKTX.BLOCK.$landscape                            S\n    .pipe @MKTX.BLOCK.$samepage                             S\n    .pipe @MKTX.BLOCK.$clearpage                            S\n    # .pipe @MKTX.BLOCK.$pre                                  S\n    .pipe @MKTX.INLINE.$nudge                               S\n    .pipe @MKTX.INLINE.$turn                                S\n    .pipe @MKTX.INLINE.$fncr                                S\n    .pipe @MKTX.INLINE.$xfsc                                S\n    .pipe @MKTX.BLOCK.$text_alignment                       S\n    .pipe @MKTX.BLOCK.$fontlist                             S\n    #.......................................................................................................\n    .pipe @MKTX.BLOCK.$blockquote                           S\n    .pipe @MKTX.INLINE.$link                                S\n    .pipe @MKTX.MIXED.$footnote                             S\n    .pipe @MKTX.MIXED.$footnote.$remove_extra_paragraphs    S\n    .pipe @MKTX.COMMAND.$new_page                           S\n    .pipe @MKTX.COMMAND.$new_odd_even_page                  S\n    .pipe @MKTX.COMMAND.$blank_page                         S\n    .pipe @MKTX.COMMAND.$comment                            S\n    .pipe @MKTX.MIXED.$table                                S\n    .pipe @MKTX.COMMAND.$echo                               S\n    # .pipe @MKTX.BLOCK.$hr                                   S\n    .pipe @MKTX.BLOCK.$hr2                                  S\n    .pipe @MKTX.BLOCK.$nl                                   S\n    .pipe @MKTX.REGION.$code                                S\n    .pipe @MKTX.REGION.$keep_lines                          S\n    .pipe @MKTX.REGION.$toc                                 S\n    .pipe @MKTX.BLOCK.$heading                              S\n    .pipe @MKTX.MIXED.$collect_headings_for_toc             S\n    .pipe @MKTX.COMMAND.$toc                                S\n    .pipe @MKTX.BLOCK.$unordered_list                       S\n    .pipe @MKTX.INLINE.$code_span                           S\n    .pipe @MKTX.INLINE.$url                                 S\n    .pipe @MKTX.COMMAND.$url                                S\n    .pipe @MKTX.INLINE.$super_and_subscript                 S\n    .pipe @MKTX.INLINE.$translate_i_and_b                   S\n    # .pipe @MKTX.INLINE.$smallcaps                           S\n    # .pipe @MKTX.INLINE.$em_and_strong                       S\n    .pipe @MKTX.INLINE.$em_strong_and_smallcaps             S\n    .pipe @MKTX.INLINE.$image                               S\n    .pipe @MKTX.BLOCK.$yadda                                S\n    .pipe @MKTX.BLOCK.$paragraph_1                          S\n    .pipe @MKTX.MIXED.$raw                                  S\n    .pipe @COLUMNS.$main                                    S\n    #.......................................................................................................\n    .pipe @$add_text_locators                               S\n    .pipe MACRO_INTERPRETER.$capture_change_events          S\n    .pipe @MKTX.CLEANUP.$remove_empty_texts                 S\n    .pipe @MKTX.CLEANUP.$consolidate_texts                  S\n    # .pipe @$show_events                                     S\n    # .pipe @$show_text_locators                              S\n    # .pipe @$show_start_and_end_2                            S\n    .pipe @MKTX.BLOCK.$paragraph_2                          S\n    .pipe @MKTX.COMMAND.$crossrefs                          S\n    # .pipe D.$observe ( event ) -> info '23993', ( CND.grey '--------->' ), CND.grey jr event\n    .pipe @MKTX.TYPOFIX.$fix_typography_for_tex             S\n    # .pipe D.$observe ( event ) -> ( info '23993', ( CND.grey '--------->' ), jr event ) unless event[ 3 ]?.stamped\n    #.......................................................................................................\n    .pipe do =>\n      S.event_count = 0\n      return D.$observe ( event ) =>\n        S.event_count += +1\n    .pipe @MKTX.INLINE.$mark                                S\n    .pipe @MKTX.$show_unhandled_tags                        S\n    .pipe @MKTX.$show_warnings                              S\n    .pipe @MKTX.$format_warnings                            S\n    .pipe @MKTX.$warnings_as_tex                            S\n    .pipe @$filter_tex                                      S\n    # ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?\n    .pipe @COLUMNS.$XXX_transform_pretex_to_tex             S\n    # ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?\n    .pipe MD_READER.$show_illegal_chrs                      S\n    .pipe writestream\n  #.......................................................................................................\n  settings =\n    # inputs:\n    #   mktscript:        mktscript_in\n    # outputs:\n    #   mktscript:        mktscript_out\n    S:                S\n  #.......................................................................................................\n  R                           = D.TEE.from_readwritestreams readstream, writestream, settings\n  S[ 'tees' ]                ?= {}\n  S[ 'tees' ][ 'tex-writer' ] = R\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_handle_error = ( error ) =>\n  alert error[ 'message' ]\n  stack = error[ 'stack' ] ? \"(no stacktrace available)\"\n  whisper '\\n' + ( stack.split '\\n' )[ .. 10 ].join '\\n'\n  whisper '...'\n  process.exit 1\n\n\n#===========================================================================================================\n# PDF FROM MD\n#-----------------------------------------------------------------------------------------------------------\n@_get_on_content_output_close = ( S ) ->\n  return =>\n    #.......................................................................................................\n    await ( promisify @write_mkts_master.bind @ ) S\n    await ( promisify HELPERS.write_pdf.bind HELPERS ) S.layout_info\n    #.......................................................................................................\n    S.t1              = +new Date()\n    dt_s              = ( S.t1 - S.t0 ) / 1000\n    dt_s_txt          = dt_s.toFixed 3\n    chrs_per_s_txt    = (   S.chr_count / dt_s ).toFixed 3\n    events_per_s_txt  = ( S.event_count / dt_s ).toFixed 3\n    chr_count_txt     = ƒ S.chr_count\n    event_count_txt   = ƒ S.event_count\n    help \"#{   chr_count_txt.padStart 10, ' '}       chrs (approx.)\"\n    help \"#{ event_count_txt.padStart 10, ' '}     events (approx.)\"\n    help \"#{        dt_s_txt.padStart 14, ' '}          s\"\n    help \"#{  chrs_per_s_txt.padStart 14, ' '}   chrs / s\"\n    help \"#{events_per_s_txt.padStart 14, ' '} events / s\"\n    process.exit 0\n\n#-----------------------------------------------------------------------------------------------------------\n@_new_state = ( source_route, settings ) ->\n  validate    = ( settings ? {} ).validate ? true\n  R           =\n    options:              @options\n    layout_info:          HELPERS.new_layout_info @options, source_route, validate\n    paragraph_nr:         0\n    configuration:        {}\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@pdf_from_md = ( source_route, handler ) ->\n  RPC_SERVER              = require './rpc-server'\n  server                  = await ( promisify RPC_SERVER.listen.bind RPC_SERVER )()\n  process.on 'exit', ->\n    help '44092', \"RPC server closing\"\n    server.close()\n  #.......................................................................................................\n  S                       = @_new_state source_route\n  content_output          = njs_fs.createWriteStream S.layout_info[ 'content-locator' ]\n  content_output.on 'close', @_get_on_content_output_close S\n  #.......................................................................................................\n  ### TAINT should read MD source stream ###\n  md_source               = njs_fs.readFileSync S.layout_info[ 'source-locator'  ], encoding: 'utf-8'\n  md_readstream           = MD_READER.create_md_read_tee S, md_source\n  tex_writestream         = @create_tex_write_tee S\n  md_input                = md_readstream.tee[    'input'  ]\n  md_output               = md_readstream.tee[    'output' ]\n  tex_input               = tex_writestream.tee[  'input'  ]\n  tex_output              = tex_writestream.tee[  'output' ]\n  #.......................................................................................................\n  # S.aux                   = yield AUX.fetch_aux_data S, resume\n  S.resend                = md_readstream.tee[ 'S' ].resend\n  #.......................................................................................................\n  md_output.pipe          tex_input\n  tex_output.pipe         content_output\n  #.......................................................................................................\n  md_input.resume()\n  return null\n\n\n#===========================================================================================================\n# TEX FROM MD\n#-----------------------------------------------------------------------------------------------------------\nXXX_tex_from_md_nr = 0\n@tex_from_md = ( md_source, settings, handler ) ->\n  # info 'µ09090', 'tex_from_md', rpr md_source\n  ### TAINT code duplication ###\n  switch arity = arguments.length\n    when 2\n      handler   = settings\n      settings  = {}\n    when 3 then null\n    else throw new Error \"expected 2 or 3 arguments, got #{arity}\"\n  #.........................................................................................................\n  $collect_and_call = ( handler ) =>\n    Z = []\n    return $ ( event, send, end ) =>\n      Z.push event if event?\n      if end?\n        ### TAINT kludge to remove extraneous newlines ###\n        Z = ( Z.join '' ).replace /\\n\\n$/, ''\n        handler null, Z\n        end()\n  #.........................................................................................................\n  source_route        = settings[ 'source-route' ] ? '<STRING>'\n  layout_info         = HELPERS.new_layout_info @options, source_route, false\n  #.........................................................................................................\n  ### TAINT use method to produce new state ###\n  S                       = @_new_state source_route, { validate: false, }\n  S.bare                  = settings[ 'bare' ] ? no\n  #.........................................................................................................\n  XXX_tex_from_md_nr += +1\n  md_readstream       = MD_READER.create_md_read_tee S, md_source\n  tex_writestream     = @create_tex_write_tee S\n  md_input            =   md_readstream.tee[ 'input'  ]\n  md_output           =   md_readstream.tee[ 'output' ]\n  tex_input           = tex_writestream.tee[ 'input'  ]\n  tex_output          = tex_writestream.tee[ 'output' ]\n  #.........................................................................................................\n    # S.aux                   = yield AUX.fetch_aux_data S, resume\n  S.resend            = md_readstream.tee[ 'S' ].resend\n  #.........................................................................................................\n  md_output\n    .pipe tex_input\n  tex_output\n    # .pipe D.$show '>>>>>>>>>>>>>>>>>>'\n    .pipe $collect_and_call handler\n  #.........................................................................................................\n  D.run ( => md_input.resume() ), @_handle_error\n  return null\n\n\n\n############################################################################################################\n# unless module.parent?\n#   # @pdf_from_md 'texts/A-Permuted-Index-of-Chinese-Characters/index.md'\n#   # @pdf_from_md 'texts/demo'\n#   TW = @\n#   require '../../mingkwai'\n#   do ->\n#     mktscript = \"\"\"\n#     # Headline\n\n#     Some *important* text. <box>boxed</box>\n\n#     \"\"\"\n#     # mktscript = \"\"\"<box>boxed</box>\"\"\"\n#     promisify = ( require 'util' ).promisify\n#     tex_source  = await ( promisify TW.tex_from_md.bind TW ) mktscript, { bare: yes, }\n#     debug '45532', rpr tex_source.trim()\n#     debug '45532', '###'\n\n#   # debug '©nL12s', MKTS.as_tex_text '亻龵helo さしすサシス 臺灣國語Ⓒ, Ⓙ, Ⓣ𠀤𠁥&jzr#e202;'\n#   # debug '©nL12s', MKTS.as_tex_text 'helo さし'\n#   # event = [ '(', 'single-column', ]\n#   # event = [ ')', 'single-column', ]\n#   # event = [ '(', 'new-page', ]\n#   # debug '©Gpn1J', select event, [ '(', ')'], [ 'single-column', 'new-page', ]\n\n"
  ]
}