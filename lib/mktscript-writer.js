// Generated by CoffeeScript 2.3.2
(function() {
  //###########################################################################################################
  var $, CND, D, MD_READER, MKTS, Markdown_parser, alert, badge, copy, debug, echo, help, hide, info, is_hidden, is_stamped, log, misfit, new_md_inline_plugin, njs_fs, njs_path, rpr, select, stamp, urge, warn, whisper;

  njs_path = require('path');

  njs_fs = require('fs');

  //...........................................................................................................
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MKTS/mktscript-writer';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //-----------------------------------------------------------------------------------------------------------
  D = require('pipedreams');

  $ = D.remit.bind(D);

  // $async                    = D.remit_async.bind D
  //...........................................................................................................
  Markdown_parser = require('markdown-it');

  // Html_parser               = ( require 'htmlparser2' ).Parser
  new_md_inline_plugin = require('markdown-it-regexp');

  //...........................................................................................................
  // HELPERS                   = require './helpers'
  // @MACROS                   = require './macros'
  //...........................................................................................................
  misfit = Symbol('misfit');

  MKTS = require('./main');

  MD_READER = require('./md-reader');

  hide = MD_READER.hide.bind(MD_READER);

  copy = MD_READER.copy.bind(MD_READER);

  stamp = MD_READER.stamp.bind(MD_READER);

  select = MD_READER.select.bind(MD_READER);

  is_hidden = MD_READER.is_hidden.bind(MD_READER);

  is_stamped = MD_READER.is_stamped.bind(MD_READER);

  // #-----------------------------------------------------------------------------------------------------------
  // @$show_mktsmd_events = ( S ) ->
  //   unknown_events    = []
  //   indentation       = ''
  //   tag_stack         = []
  //   return D.$observe ( event, has_ended ) =>
  //     if event?
  //       [ type, name, text, meta, ] = event
  //       if type is '?'
  //         unknown_events.push name unless name in unknown_events
  //         warn JSON.stringify event
  //       else
  //         color = CND.blue
  //         #...................................................................................................
  //         if is_hidden event
  //           color = CND.brown
  //         else
  //           switch type
  //             # when '('  then color = CND.yellow
  //             when '('  then color = CND.lime
  //             when ')'  then color = CND.olive
  //             when '!'  then color = CND.indigo
  //             when '#'  then color = CND.plum
  //             when '.'
  //               switch name
  //                 when 'text' then color = CND.BLUE
  //                 # when 'code' then color = CND.orange
  //         #...................................................................................................
  //         text = if text? then ( color rpr text ) else ''
  //         switch type
  //           #.................................................................................................
  //           when 'text'
  //             log indentation + ( color type ) + ' ' + rpr name
  //           #.................................................................................................
  //           when 'tex'
  //             if S.show_tex_events ? no
  //               log indentation + ( color type ) + ( color name ) + ' ' + text
  //           #.................................................................................................
  //           when '#'
  //             [ _, kind, message, _, ]  = event
  //             my_badge                  = "(#{meta[ 'badge' ]})"
  //             color = switch kind
  //               when 'insert' then  'lime'
  //               when 'drop'   then  'orange'
  //               when 'warn'   then  'RED'
  //               when 'info'   then  'BLUE'
  //               else                'grey'
  //             log ( CND[ color ] '#' + kind ), ( CND.white message ), ( CND.grey my_badge )
  //           #.................................................................................................
  //           else
  //             log indentation + ( color type ) + ( color name ) + ' ' + text
  //         #...................................................................................................
  //         unless is_hidden event
  //           switch type
  //             #.................................................................................................
  //             when '(', ')'
  //               switch type
  //                 when '('
  //                   tag_stack.push [ type, name, ]
  //                 when ')'
  //                   if tag_stack.length > 0
  //                     [ topmost_type, topmost_name, ] = tag_stack.pop()
  //                     unless topmost_name is name
  //                       warn "encountered <<#{name}#{type}>> when <<#{topmost_name})>> was expected"
  //                   else
  //                     warn "level below zero"
  //               indentation = ( new Array tag_stack.length ).join '  '
  //     #.......................................................................................................
  //     if has_ended
  //       if tag_stack.length > 0
  //         warn "unclosed tags: #{tag_stack.join ', '}"
  //       if unknown_events.length > 0
  //         warn "unknown events: #{unknown_events.sort().join ', '}"
  //     return null

  //-----------------------------------------------------------------------------------------------------------
  this.$show_mktsmd_events = function(S) {
    return D.$observe((event, has_ended) => {
      var line_color, markup, meta, name, ref, text, type;
      if (event != null) {
        // debug '33733', rpr event
        [type, name, text, meta] = event;
        if (select(event, 'tex', null, true)) {
          null;
        } else if (select(event, '#')) {
          switch (name) {
            case 'warn':
              line_color = CND.red;
              break;
            default:
              line_color = CND.brown;
          }
          log(line_color(type, name, text));
        } else {
          if (is_hidden(event)) {
            line_color = CND.grey;
          } else if (select(event, '.', 'warning')) {
            line_color = CND.red;
          } else if (select(event, '.', 'text')) {
            line_color = CND.blue;
          } else {
            line_color = CND.white;
          }
          //...................................................................................................
          markup = (ref = meta['markup']) != null ? ref : '';
          markup = markup.length > 0 ? rpr(markup) : '';
          log(line_color(type, name, (text != null ? rpr(text) : ''), CND.grey(markup)));
        }
      }
      //.......................................................................................................
      if (has_ended) {
        null;
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$produce_mktscript = function(S) {
    var clr_anchor, clr_reset, indentation, level, mktscript_locator, mktscript_output, tag_stack, write;
    if (S.layout_info['job-name'] === '<STRING>') {
      return D.$observe(function(event) {});
    }
    //.........................................................................................................
    level = 0;
    indentation = '';
    tag_stack = [];
    mktscript_locator = S.layout_info['mktscript-locator'];
    mktscript_output = njs_fs.createWriteStream(mktscript_locator);
    write = function(x) {
      return mktscript_output.write(x, {
        encoding: 'utf-8'
      });
    };
    clr_anchor = '\x1b[1;32m';
    clr_reset = '\x1b[0m';
    //.........................................................................................................
    return D.$observe((event, has_ended) => {
      /* TAINT doesn't recognize escaped backslash */
      var anchor, line_nr_txt, meta, name, text, text_rpr, type;
      if ((event == null) || has_ended) {
        write(`${clr_anchor}     █  ${clr_reset}# EOF`);
        return null;
      }
      //.......................................................................................................
      [type, name, text, meta] = event;
      if ((meta != null ? meta.line_nr : void 0) != null) {
        line_nr_txt = meta.line_nr.toString().padStart(4, '0');
        anchor = `${clr_anchor}${line_nr_txt} █ ${clr_reset}`;
      } else {
        // anchor      = CND.grey "#{line_nr_txt} █ "
        anchor = `${clr_anchor}     █  ${clr_reset}`;
      }
      //.....................................................................................................
      // send JSON.stringify event
      text_rpr = '';
      if (text != null) {
        /* TAINT we have to adopt a new event format; for now, the `text` attribute is misnamed,
        as it is really a `data` attribute */
        if (CND.isa_text(text)) {
          text_rpr = ' ' + (rpr(text)).replace(/\\n/g, '\n');
        } else if ((Object.keys(text)).length > 0) {
          text_rpr = ' ' + JSON.stringify(text);
        }
      }
      switch (type) {
        case '(':
          // write '33347 indent plus'
          level += +1;
          indentation = '  '.repeat(level);
          break;
        case ')':
          // write '33347 indent minus'
          level += -1;
          indentation = '  '.repeat(level);
      }
      //   when '?'
      //     write "\n#{anchor}#{type}#{name}\n"
      //   when '('
      //     write "#{anchor}#{type}#{name}"
      //   when ')', '!'
      //     write "#{type}\n"
      //   when '('
      //     write "#{type}#{name}"
      //   when ')'
      //     write "#{type}"
      //   when '.'
      //     switch name
      //       when 'hr'
      //         write "\n#{anchor}#{type}#{name}\n"
      //       when 'p'
      //         write "¶\n"
      //       when 'text'
      //         ### TAINT doesn't recognize escaped backslash ###
      //         text_rpr = ( rpr text ).replace /\\n/g, '\n'
      //         write text_rpr
      //       else
      //         write "\n#{anchor}IGNORED: #{rpr event}"
      //   else
      //     write "\n#{anchor}IGNORED: #{rpr event}"
      write(`${anchor}${indentation}${type}${name}${text_rpr}`);
      write('\n');
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.mkts_events_from_md = function(source, settings, handler) {
    var Z, arity, bare, input, md_readstream, output, ref;
    switch (arity = arguments.length) {
      case 2:
        handler = settings;
        settings = {};
        break;
      case 3:
        null;
        break;
      default:
        throw new Error(`expected 2 or 3 arguments, got ${arity}`);
    }
    bare = (ref = settings['bare']) != null ? ref : false;
    md_readstream = MKTS.MD_READER.create_md_read_tee(source);
    ({input, output} = md_readstream.tee);
    Z = [];
    output.pipe($((event, send) => {
      if (!(bare && select(event, ['(', ')'], 'document'))) {
        // debug '©G3QXt', event
        return Z.push(event);
      }
    }));
    output.on('end', function() {
      return handler(null, Z);
    });
    input.resume();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.mktscript_from_md = function(md_source, settings, handler) {
    /* TAINT code duplication */
    var arity, f, input, md_readstream, output, ref, source_route;
    switch (arity = arguments.length) {
      case 2:
        handler = settings;
        settings = {};
        break;
      case 3:
        null;
        break;
      default:
        throw new Error(`expected 2 or 3 arguments, got ${arity}`);
    }
    //.........................................................................................................
    source_route = (ref = settings['source-route']) != null ? ref : '<STRING>';
    md_readstream = MKTS.MD_READER.create_md_read_tee(md_source);
    ({input, output} = md_readstream.tee);
    f = () => {
      return input.resume();
    };
    //.........................................................................................................
    // .pipe D.$show '>>>>>>>>>>>>>>'
    output.pipe(this.$produce_mktscript(md_readstream.tee['S'])).pipe((() => {
      var Z;
      Z = [];
      return $((event, send, end) => {
        if (event != null) {
          Z.push(event);
        }
        if (end != null) {
          handler(null, Z.join(''));
          return end();
        }
      });
    })());
    //.........................................................................................................
    D.run(f, this._handle_error);
    return null;
  };

}).call(this);

//# sourceMappingURL=mktscript-writer.js.map
