{
  "version": 3,
  "file": "macro-escaper.js",
  "sourceRoot": "..",
  "sources": [
    "src/macro-escaper.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MK/TS/MACRO-ESCAPER'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#-----------------------------------------------------------------------------------------------------------\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n# $async                    = D.remit_async.bind D\n#...........................................................................................................\n# Markdown_parser           = require 'markdown-it'\n# # Html_parser               = ( require 'htmlparser2' ).Parser\n# new_md_inline_plugin      = require 'markdown-it-regexp'\n#...........................................................................................................\n# HELPERS                   = require './HELPERS'\n#...........................................................................................................\n# misfit                    = Symbol 'misfit'\nMKTS                      = require './main'\n@cloak                    = ( require './cloak' ).new()\n# hide                      = MKTS.hide.bind        MKTS\n# copy                      = MKTS.MD_READER.copy.bind        MKTS\n# stamp                     = MKTS.stamp.bind       MKTS\n# select                    = MKTS.MD_READER.select.bind      MKTS\n# is_hidden                 = MKTS.is_hidden.bind   MKTS\n# is_stamped                = MKTS.is_stamped.bind  MKTS\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\n@initialize_state = ( state ) =>\n  state[ 'MACRO_ESCAPER' ] =\n    registry:   []\n  return state\n\n#-----------------------------------------------------------------------------------------------------------\n@_match_first = ( patterns, text ) =>\n  for pattern in patterns\n    return R if ( R = text.match pattern )?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_register_content = ( S, kind, markup, raw, parsed = null ) =>\n  registry  = S[ 'MACRO_ESCAPER' ][ 'registry' ]\n  idx     = registry.length\n  key     = \"#{kind}#{idx}\"\n  registry.push { key, markup, raw, parsed, }\n  return key\n\n#-----------------------------------------------------------------------------------------------------------\n@_retrieve_entry = ( S, id ) =>\n  throw new Error \"unknown ID #{rpr id}\" unless ( R = S[ 'MACRO_ESCAPER' ][ 'registry' ][ id ] )?\n  return R\n\n#===========================================================================================================\n# PATTERNS\n#-----------------------------------------------------------------------------------------------------------\n@PATTERNS = {}\n\n#-----------------------------------------------------------------------------------------------------------\n@html_comment_patterns = [\n  ///                           # HTML comments...\n    <!--                        # start with less-than, exclamation mark, double hyphen;\n    ( [ \\s\\S ]*? )              # then: anything, not-greedy, until we hit upon\n    -->                         # a double-slash, then greater-than.\n    ///g                        # (NB: end-of-comment cannot be escaped, because HTML).\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@action_patterns = [\n  ///                           # A silent or vocal action macro...\n                                #\n                                # Start Tag\n                                # =========\n  <<\\(                          # starts with two left pointy brackets, then: left round bracket,\n    ( [ . : ] )                 # then: a dot or a colon;\n    (\n      (?:                       # then:\n        [^ > ]             |    #   or: anything but a RPB\n        > (?! > )               #   or: a RPB not followed by yet another RPB\n      )*                        # repeated any number of times\n    )\n    >>                          # then: two RPBs...\n                                #\n                                # Content\n                                # =========\n                                # Empty content.\n                                #\n                                # Stop Tag\n                                # =========\n  () <<                         # (then: an empty group; see below), then: two left pointy brackets,\n    ( (?: \\1 \\2 )? )            # then: optionally, whatever appeared in the start tag,\n    \\)>>                        # then: right round bracket, then: two RPBs.\n  ///g\n  ,                             #...........................................................................\n  ///                           # Alternatively (non-empty content):\n                                #\n                                # Start Tag\n                                # =========\n  <<\\(                          # starts with two left pointy brackets, then: left round bracket,\n    ( [ . : ] )                 # then: a dot or a colon;\n    (\n      (?:                       # then:\n        [^ > ]             |    #   or: anything but a RPB\n        > (?! > )               #   or: a RPB not followed by yet another RPB\n      )*                        # repeated any number of times\n    )\n    >>                          # then: two RPBs...\n                                #\n                                # Content\n                                # =========\n    (\n      (?:                       # ...followed by content, which is:\n        [^ < ]             |    #   or: anything but a LPB\n        < (?! < )               #   or: a LPB not followed by yet another LPB\n        )*                      # repeated any number of times\n      )\n                                #\n                                # Stop Tag\n                                # =========\n  <<                            # then: two left pointy brackets,\n    ( (?: \\1 \\2 )? )            # then: optionally, whatever appeared in the start tag,\n    \\)>>                        # then: right round bracket, then: two RPBs.\n  ///g\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@region_patterns = [\n  ///                           # A region macro tag...\n                                #\n                                # Start Tag\n                                # =========\n  <<                            # starts with two left pointy brackets\n  ( \\( )                        # then: left round bracket,\n    (                           #\n      (?:                       # then:\n        [^ > ]             |    #   or: anything but a RPB\n        > (?! > )               #   or: a RPB not followed by yet another RPB\n      )*                        # repeated any number of times\n    )\n    ()                          # then: empty group for no markup here\n    >>                          # then: two RPBs.\n  ///g\n  ,\n  ///                           # Stop Tag\n                                # ========\n                                #\n  <<                            # starts with two left pointy brackets\n    ()                          # then: empty group for no markup here\n    ( |                         #\n      [^ . : ]\n      (?:                       # then:\n        [^ > ]             |    #   or: anything but a RPB\n        > (?! > )               #   or: a RPB not followed by yet another RPB\n      )*                        # repeated any number of times\n    )\n    ( \\) )                      # a right round bracket;\n    >>                          # then: two RPBs.\n  ///g\n  ]\n\n# debug '234652', @action_patterns\n# debug \"abc<<(:js>>4 + 3<<:js)>>def\".match @action_patterns[ 0 ]\n# process.exit()\n\n#-----------------------------------------------------------------------------------------------------------\n@bracketed_raw_patterns = [\n  ///                           # A bracketed raw macro\n  <<(<)                         # starts with three left pointy brackets,\n    (\n      (?:                       # then:\n        [^ > ]             |    #   or: anything but a RPB\n        >{1,2} (?! > )          #   or: one or two RPBs not followed by yet another RPB\n      )*                        # repeated any number of times\n    )\n    >>>                         # then: three RPBs.\n  ///g\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@comma_patterns = [\n  ///                           # Comma macro to separate arguments within macro regions\n  <<,>>\n  ///g\n  ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @raw_heredoc_pattern  = ///\n#   ( ^ | [^\\\\] ) <<! raw: ( [^\\s>]* )>> ( .*? ) \\2\n#   ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@command_and_value_patterns = [\n  ///                           # A command macro\n  <<                            # starts with two left pointy brackets,\n    ( [ ! @ ] )                 # then: an exclamation mark or a commerical-at sign,\n    (\n      (?:                       # then:\n        [^ > ]             |    #   or: anything but a RPB\n        > (?! > )               #   or: a RPB not followed by yet another RPB\n      )*                        # repeated any number of times\n    )\n    >>                          # then: two RPBs.\n  ///g\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@insert_command_patterns = [\n  ///                           # An insert command macro\n  <<                            # starts with two left pointy brackets,\n    ( ! )                       # then: an exclamation mark\n    insert (?= [\\s>] )          # then: an 'insert' literal (followed by WS or RPB)\n    (\n      (?:                       # then:\n        [^ > ]             |    #   or: anything but a RPB\n        > (?! > )               #   or: a RPB not followed by yet another RPB\n      )*                        # repeated any number of times\n    )\n    >>                          # then: two RPBs.\n  ///g\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n### NB The end command macro looks like any other command except we can detect it with a much simpler\nRegEx; we want to do that so we can, as a first processing step, remove it and any material that appears\nafter it, thereby inhibiting any processing of those portions. ###\n@end_command_patterns = [\n  ///                           # Then end command macro\n  ( ^ |                         # starts either at the first chr\n    ^ [ \\s\\S ]*? [^ \\\\ ] )      # or a minimal number of chrs whose last one is not a backslash\n  <<!end>>                      # then: the `<<!end>>` literal.\n  ///                           # NB that this pattern is not global.\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@illegal_patterns = [\n  ///                           # After applying all other macro patterns, treat as error\n  ( << | >> )                   # any occurrances of two left or two right pointy brackets.\n  ///g\n  ]\n\n#===========================================================================================================\n# ESCAPING\n#-----------------------------------------------------------------------------------------------------------\n@escape = ( S, text ) =>\n  # debug '©II6XI', rpr text\n  [ R, discard_count, ] = @escape.truncate_text_at_end_command_macro S, text\n  whisper \"detected <<!end>> macro; discarding approx. #{discard_count} characters\" if discard_count > 0\n  R = @escape.insert_macros             S, R\n  R = @escape.escape_chrs               S, R\n  R = @escape.html_comments             S, R\n  # R = @escape.sensitive_ws              S, R\n  R = @escape.bracketed_raw_macros      S, R\n  R = @escape.action_macros             S, R\n  R = @escape.region_macros             S, R\n  R = @escape.comma_macros              S, R\n  R = @escape.command_and_value_macros  S, R\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.truncate_text_at_end_command_macro = ( S, text ) =>\n  return [ text, 0, ] unless ( match = @_match_first @end_command_patterns, text )?\n  R = match[ 1 ]\n  # urge '©ΣΩΗΔΨ', rpr R\n  return [ R, text.length - R.length, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.escape_chrs                 = ( S, text ) => @cloak.backslashed.hide  @cloak.hide               text\n@escape.unescape_escape_chrs        = ( S, text ) => @cloak.reveal            @cloak.backslashed.reveal text\n@escape.remove_escaping_backslashes = ( S, text ) => @cloak.backslashed.remove text\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.sensitive_ws = ( S, text ) =>\n  ### Fixes an annoying parsing problem with Markdown-it where the leading whitespace in\n  ```\n  <<(keep-lines>>\n  　　　　　　　|𠦝韦　　　　　　韩\n  ```\n  is kept but deleted when the first line is blank, as in\n  ```\n  <<(keep-lines>>\n\n  　　　　　　　|𠦝韦　　　　　　韩\n  ```\n  ###\n  # pattern = /// (>>) (\\s*) ///g\n  pattern = /// (<<\\(keep-lines>>) (\\s*) ///g\n  R = text\n  #.........................................................................................................\n  # for pattern in @region_patterns\n  R = R.replace pattern, ( _, anchor, sws ) =>\n    id      = @_register_content S, 'sws', sws, sws\n    return \"#{anchor}\\x15#{id}\\x13\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.html_comments = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  for pattern in @html_comment_patterns\n    R = R.replace pattern, ( _, content ) =>\n      key = @_register_content S, 'comment', null, content, content.trim()\n      return \"\\x15#{key}\\x13\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.bracketed_raw_macros = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  for pattern in @bracketed_raw_patterns\n    R = R.replace pattern, ( _, markup, content ) =>\n      id = @_register_content S, 'raw', markup, content\n      return \"\\x15#{id}\\x13\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.action_macros = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  for pattern in @action_patterns\n    R = R.replace pattern, ( _, markup, identifier, content, stopper ) =>\n      mode      = if markup is '.' then 'silent' else 'vocal'\n      language  = identifier\n      language  = 'coffee' if language is ''\n      ### TAINT not using arguments peoperly ###\n      id        = @_register_content S, 'action', [ mode, language, ], content\n      return \"\\x15#{id}\\x13\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.insert_macros = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  for pattern in @insert_command_patterns\n    R = R.replace pattern, ( _, markup, parameter_txt ) =>\n      [ error_message, result, ] = MKTS.MACRO_INTERPRETER._parameters_from_text S, 0, parameter_txt\n      ### TAINT need current context to resolve file route ###\n      ### TAINT how to return proper error message? ###\n      ### TAINT what kind of error handling is this? ###\n      if result?\n        [ route, ] = result\n        locator = njs_path.resolve S.layout_info[ 'source-home' ], route\n        if route?\n          whisper \"resolved route: #{route} -> #{locator}\"\n          try\n            content = njs_fs.readFileSync locator, encoding: 'utf-8'\n          catch error\n            error_message = ( error_message ? '' ) + \"\\n\" + error[ 'message' ]\n        else\n          error_message = ( error_message ? '' ) + \"\\nneed file route for insert macro\"\n      if error_message?\n        ### TAINT provide proper location ###\n        # return [ '.', 'warning', error_message, {}, ]\n        return \" ███ #{error_message} ███ \"\n      return content\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.region_macros = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  for pattern in @region_patterns\n    R = R.replace pattern, ( _, start_markup, identifier, stop_markup ) =>\n      markup  = if start_markup.length is 0 then stop_markup else start_markup\n      id      = @_register_content S, 'region', markup, identifier\n      # if identifier is 'keep-lines'\n      #   if start_markup is '('\n      #     return \"\"\"\n      #       \\x15#{id}\\x13\n      #       ```keep-lines\"\"\"\n      #   else\n      #     return \"\"\"\n      #       ```\n      #       \\x15#{id}\\x13\"\"\"\n      return \"\\x15#{id}\\x13\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.comma_macros = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  for pattern in @comma_patterns\n    R = R.replace pattern, ( _ ) =>\n      # debug '©ΛΨ regions', ( rpr text ), [ previous_chr, markup, identifier, content, stopper, ]\n      id      = @_register_content S, 'comma', null, null\n      return \"\\x15#{id}\\x13\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.command_and_value_macros = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  for pattern in @command_and_value_patterns\n    R = R.replace pattern, ( _, markup, content ) =>\n      kind            = if markup is '!' then 'command' else 'value'\n      key             = @_register_content S, kind, markup, content, null\n      return \"\\x15#{key}\\x13\"\n  #.........................................................................................................\n  return R\n\n\n#===========================================================================================================\n# EXPANDING\n#-----------------------------------------------------------------------------------------------------------\n@raw_id_pattern = ///\n  \\x15 raw ( [ 0-9 ]+ ) \\x13\n  ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@html_comment_id_pattern = ///\n  \\x15 comment ( [ 0-9 ]+ ) \\x13\n  ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@action_id_pattern = ///\n  \\x15 action ( [ 0-9 ]+ ) \\x13\n  ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@region_id_pattern = ///\n  \\x15 region ( [ 0-9 ]+ ) \\x13\n  ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@comma_id_pattern = ///\n  \\x15 comma ( [ 0-9 ]+ ) \\x13\n  ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@sws_id_pattern = ///\n  \\x15 sws ( [ 0-9 ]+ ) \\x13\n  ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@command_and_value_id_pattern = ///\n  \\x15 (?: command | value ) ( [ 0-9 ]+ ) \\x13\n  ///g\n\n\n#===========================================================================================================\n# EXPANDERS\n#-----------------------------------------------------------------------------------------------------------\n@$expand = ( S ) ->\n  pipeline = [\n    @$expand.$command_and_value_macros  S\n    @$expand.$comma_macros              S\n    @$expand.$region_macros             S\n    @$expand.$action_macros             S\n    @$expand.$raw_macros                S\n    @$expand.$sensitive_ws              S\n    @$expand.$html_comments             S\n    @$expand.$escape_chrs               S\n    # @$expand.$escape_illegals           S\n    ]\n  #.......................................................................................................\n  settings =\n    # inputs:\n    #   mktscript:        mktscript_in\n    # outputs:\n    #   mktscript:        mktscript_out\n    S:                S\n  #.......................................................................................................\n  return D.TEE.from_pipeline pipeline, settings\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand.$html_comments = ( S ) =>\n  return @_get_expander S, @html_comment_id_pattern, ( meta, entry ) =>\n    content       = entry[ 'raw' ]\n    return [ '.', 'comment', content, ( MKTS.MD_READER.copy meta ), ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand.$raw_macros  = ( S ) =>\n  return @_get_expander S, @raw_id_pattern, ( meta, entry ) =>\n    content       = entry[ 'raw' ]\n    return [ '.', 'raw', content, ( MKTS.MD_READER.copy meta ), ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand.$action_macros  = ( S ) =>\n  return @_get_expander S, @action_id_pattern, ( meta, entry ) =>\n    [ mode\n      language ]  = entry[ 'markup' ]\n    content       = entry[ 'raw' ]\n    # debug '©19694', rpr content\n    return [ '.', 'action', content, ( MKTS.MD_READER.copy meta, { mode, language, } ), ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand.$comma_macros  = ( S ) =>\n  return @_get_expander S, @comma_id_pattern, ( meta, entry ) =>\n    return [ '.', 'comma', null, ( MKTS.MD_READER.copy meta, ), ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand.$sensitive_ws  = ( S ) =>\n  return @_get_expander S, @sws_id_pattern, ( meta, entry ) =>\n    return [ '.', 'text', entry[ 'raw' ], ( MKTS.MD_READER.copy meta, ), ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand.$region_macros = ( S ) =>\n  return @_get_expander S, @region_id_pattern, ( meta, entry ) =>\n    { raw\n      markup }    = entry\n    return [ markup, raw, null, ( MKTS.MD_READER.copy meta ), ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand.$command_and_value_macros = ( S ) =>\n  return @_get_expander S, @command_and_value_id_pattern, ( meta, entry ) =>\n    { raw\n      markup }    = entry\n    # macro_type    = if markup is '!' then 'command' else 'value'\n    return [ markup, raw, null, ( MKTS.MD_READER.copy meta ), ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand.$escape_chrs = ( S ) =>\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if MKTS.MD_READER.select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      # debug '9573485', rpr text\n      # debug '9573485', rpr @escape.unescape_escape_chrs S, text\n      send [ type, name, ( @escape.unescape_escape_chrs S, text ), meta, ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand.$remove_backslashes = ( S ) =>\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if MKTS.MD_READER.select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      # debug '83457', rpr text\n      # debug '83457', rpr @escape.remove_escaping_backslashes S, text\n      send [ type, name, ( @escape.remove_escaping_backslashes S, text ), meta, ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand.$escape_illegals = ( S ) =>\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if MKTS.MD_READER.select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      # debug '©38889', rpr text\n      #.....................................................................................................\n      for pattern in @illegal_patterns\n        stretches = []\n        #...................................................................................................\n        for raw_stretch, idx in text.split pattern\n          if ( idx % 3 ) is 1 then  stretches[ stretches.length - 1 ] += raw_stretch\n          else                      stretches.push raw_stretch\n        #...................................................................................................\n        is_plain  = yes\n        for stretch in stretches\n          is_plain = not is_plain\n          debug '©10012', ( if is_plain then CND.green else CND.red ) rpr stretch\n          unless is_plain\n            { line_nr }   = meta\n            error_message = \"illegal macro pattern on line #{line_nr}: #{rpr stretch}\"\n            send [ '.', 'warning', error_message, ( MKTS.MD_READER.copy meta ), ]\n          else\n            send [ type, name, stretch, ( MKTS.MD_READER.copy meta ), ] unless stretch.length is 0\n    #.......................................................................................................\n    else\n      send event\n\n\n#===========================================================================================================\n# GENERIC EXPANDER\n#-----------------------------------------------------------------------------------------------------------\n@_get_expander = ( S, pattern, method ) =>\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if MKTS.MD_READER.select event, '.', 'text'\n      is_plain                    = no\n      [ type, name, text, meta, ] = event\n      for stretch in text.split pattern\n        is_plain = not is_plain\n        unless is_plain\n          id    = parseInt stretch, 10\n          entry = @_retrieve_entry S, id\n          send method meta, entry\n        else\n          send [ type, name, stretch, ( MKTS.MD_READER.copy meta ), ] unless stretch.length is 0\n    #.......................................................................................................\n    else\n      send event\n\n\n\n\n\n"
  ]
}