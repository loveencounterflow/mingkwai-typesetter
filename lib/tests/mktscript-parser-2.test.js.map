{
  "version": 3,
  "file": "mktscript-parser-2.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/mktscript-parser-2.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTSCRIPT-PARSER-2/TESTS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\neq                        = CND.equals\njr                        = JSON.stringify\n#...........................................................................................................\njoin                      = ( x, joiner = '' ) -> x.join joiner\n# XREGEXP                   = require 'xregexp'\nMKTSP2                    = require '../experiments/mktscript-parser-2'\nRCY                       = require '../experiments/recycle'\nselect                    = RCY.select\nPS                        = require 'pipestreams'\n{ $, $async, }            = PS\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_prune = ->\n  for name, value of @\n    continue if name.startsWith '_'\n    delete @[ name ] unless name in include\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_main = ->\n  test @, 'timeout': 30000\n\n#-----------------------------------------------------------------------------------------------------------\n@_parse = ( text, handler ) ->\n  S         = {}\n  collector = null\n  source    = RCY.new_push_source()\n  pipeline  = []\n  pipeline.push source\n  # pipeline.push PS.$watch ( d ) => whisper '33301', jr d unless select d, '~', 'flush'\n  pipeline.push MKTSP2.$parse_special_forms S\n  # pipeline.push PS.$watch ( d ) => urge jr d\n  # pipeline.push MKTSP2.$show_events         S\n  pipeline.push PS.$watch ( d ) ->\n    collector ?= []\n    if RCY.select d, '~', 'flush'\n      handler null, collector\n      collector = null\n    else\n      collector.push d\n    return null\n  pipeline.push PS.$drain()\n  PS.pull pipeline...\n  source.push text\n  source.push RCY.new_system_event 'flush'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n_reduce = ( d ) ->\n  R = {}\n  R[ key ] = value for key, value of d when key not in [ 'sigil', 'key', 'value', '$', ]\n  return if ( Object.keys R ).length > 0 then jr R else ''\n\n#-----------------------------------------------------------------------------------------------------------\n@_as_mktscript = ( events ) ->\n  R = []\n  #.........................................................................................................\n  for d in events\n    #.......................................................................................................\n    if ( select d, '.', 'text' )\n      R.push d.value\n    #.......................................................................................................\n    else if ( select d, '~', 'warning' )\n      R.push \"<warning ref=#{rpr d.ref}>#{d.message}</warning>\"\n    #.......................................................................................................\n    else if ( select d, '~', null )\n      R.push \"<~#{d.key}/>\"\n    #.......................................................................................................\n    else if ( select d, '.', null )\n      R.push \"<#{d.key}/>\"\n    # #.......................................................................................................\n    # else if ( select d, '(', 'sf' )\n    #   R.push \"<#{d.key} value=#{d.value}>\"\n    # #.......................................................................................................\n    # else if ( select d, ')', 'sf' )\n    #   R.push \"<#{d.key} value=#{d.value}>\"\n    #.......................................................................................................\n    else if ( select d, '(', null )\n      ### TAINT add attributes ###\n      R.push \"<#{d.key}>\"\n    #.......................................................................................................\n    else if ( select d, ')', null )\n      ### TAINT add attributes ###\n      R.push \"</#{d.key}>\"\n    #.......................................................................................................\n    else\n      throw new Error \"illegal event #{rpr d}\"\n  #.........................................................................................................\n  return R.join ''\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"htmlish-tag-parser\" ] = ( T, done ) ->\n  S = {}\n  probes_and_matchers = [\n    [\"a line of text.\",\"a line of text.\"]\n    [\"a line of *text*.\",\"a line of <em>text</em>.\"]\n    [\"a line of 𣥒text*.\",\"a line of <warning ref='µ99823'>unhandled active characters '𣥒' on line 1 in 'a line of 𣥒text*.'</warning>\"]\n    [\"a **strong** and a *less strong* emphasis.\",\"a <strong>strong</strong> and a <em>less strong</em> emphasis.\"]\n    [\"a *normal and a **strong** emphasis*.\",\"a <em>normal and a <strong>strong</strong> emphasis</em>.\"]\n    [\"another *such and **such*** emphasis.\",\"another <em>such and <strong>such</strong></em> emphasis.\"]\n    [\"lone *star\",\"lone <em>star\"]\n    [\"**lone *star*\",\"<strong>lone <em>star</em>\"]\n    [\"**lone *star**\",\"<strong>lone <em>star</strong>\"]\n    [\"*\",\"<em>\"]\n    [\"**\",\"<strong>\"]\n    [\"***\",\"<em><strong>\"]\n    [\"**double *star\",\"<strong>double <em>star\"]\n    [\"***em* strong**.\",\"<strong><em>em</em> strong</strong>.\"]\n    [\"***strong** em*.\",\"<em><strong>strong</strong> em</em>.\"]\n    [\"***em-strong***.\",\"<em><strong>em-strong</strong></em>.\"]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, ], idx in probes_and_matchers\n    @_parse probe, ( error, result ) =>\n      throw error if error?\n      result = @_as_mktscript result\n      echo ( if ( CND.equals result, matcher ) then CND.gold else CND.red ) jr [ probe, result, ]\n      # T.eq result, matcher\n    # urge '36633', ( jr { name, attributes, } )\n  #.........................................................................................................\n  done()\n\n  # for [ probe, matcher, ] in probes_and_matchers\n  #   result = probe.match start_tag_pattern\n  #   try\n  #   catch error\n  #     # throw error\n\n\n############################################################################################################\nunless module.parent?\n  include = [\n    \"htmlish-tag-parser\"\n    ]\n  @_prune()\n  @_main()\n\n  # @_parse 'helo'\n\n\n\n\n"
  ]
}