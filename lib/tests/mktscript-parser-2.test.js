// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var $, $async, CND, MKTSP2, PS, RCY, _reduce, alert, badge, debug, echo, eq, help, include, info, join, jr, log, rpr, select, test, urge, warn, whisper,
    indexOf = [].indexOf;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MKTSCRIPT-PARSER-2/TESTS';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  test = require('guy-test');

  eq = CND.equals;

  jr = JSON.stringify;

  //...........................................................................................................
  join = function(x, joiner = '') {
    return x.join(joiner);
  };

  // XREGEXP                   = require 'xregexp'
  MKTSP2 = require('../experiments/mktscript-parser-2');

  RCY = require('../experiments/recycle');

  select = RCY.select;

  PS = require('pipestreams');

  ({$, $async} = PS);

  //-----------------------------------------------------------------------------------------------------------
  this._prune = function() {
    var name, ref, value;
    ref = this;
    for (name in ref) {
      value = ref[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._main = function() {
    return test(this, {
      'timeout': 30000
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this._parse = function(text, handler) {
    var S, collector, pipeline, source;
    S = {};
    collector = null;
    source = RCY.new_push_source();
    pipeline = [];
    pipeline.push(source);
    // pipeline.push PS.$watch ( d ) => whisper '33301', jr d unless select d, '~', 'flush'
    pipeline.push(MKTSP2.$parse_special_forms(S));
    // pipeline.push PS.$watch ( d ) => urge jr d
    // pipeline.push MKTSP2.$show_events         S
    pipeline.push(PS.$watch(function(d) {
      if (collector == null) {
        collector = [];
      }
      if (RCY.select(d, '~', 'flush')) {
        handler(null, collector);
        collector = null;
      } else {
        collector.push(d);
      }
      return null;
    }));
    pipeline.push(PS.$drain());
    PS.pull(...pipeline);
    source.push(text);
    source.push(RCY.new_system_event('flush'));
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  _reduce = function(d) {
    var R, key, value;
    R = {};
    for (key in d) {
      value = d[key];
      if (key !== 'sigil' && key !== 'key' && key !== 'value' && key !== '$') {
        R[key] = value;
      }
    }
    if ((Object.keys(R)).length > 0) {
      return jr(R);
    } else {
      return '';
    }
  };

  //-----------------------------------------------------------------------------------------------------------
  this._as_mktscript = function(events) {
    var R, d, i, len;
    R = [];
//.........................................................................................................
    for (i = 0, len = events.length; i < len; i++) {
      d = events[i];
      //.......................................................................................................
      if (select(d, '.', 'text')) {
        R.push(d.value);
      //.......................................................................................................
      } else if (select(d, '~', 'warning')) {
        R.push(`<warning ref=${rpr(d.ref)}>${d.message}</warning>`);
      //.......................................................................................................
      } else if (select(d, '~', null)) {
        R.push(`<~${d.key}/>`);
      //.......................................................................................................
      } else if (select(d, '.', null)) {
        R.push(`<${d.key}/>`);
      // #.......................................................................................................
      // else if ( select d, '(', 'sf' )
      //   R.push "<#{d.key} value=#{d.value}>"
      // #.......................................................................................................
      // else if ( select d, ')', 'sf' )
      //   R.push "<#{d.key} value=#{d.value}>"
      //.......................................................................................................
      } else if (select(d, '(', null)) {
        /* TAINT add attributes */
        R.push(`<${d.key}>`);
      //.......................................................................................................
      } else if (select(d, ')', null)) {
        /* TAINT add attributes */
        R.push(`</${d.key}>`);
      } else {
        //.......................................................................................................
        throw new Error(`illegal event ${rpr(d)}`);
      }
    }
    //.........................................................................................................
    return R.join('');
  };

  //-----------------------------------------------------------------------------------------------------------
  this["htmlish-tag-parser"] = function(T, done) {
    var S, i, idx, len, matcher, probe, probes_and_matchers;
    S = {};
    probes_and_matchers = [["a line of text.", "a line of text."], ["a line of *text*.", "a line of <em>text</em>."], ["a line of 𣥒text*.", "a line of <warning ref='µ99823'>unhandled active characters '𣥒' on line 1 in 'a line of 𣥒text*.'</warning>"], ["a **strong** and a *less strong* emphasis.", "a <strong>strong</strong> and a <em>less strong</em> emphasis."], ["a *normal and a **strong** emphasis*.", "a <em>normal and a <strong>strong</strong> emphasis</em>."], ["another *such and **such*** emphasis.", "another <em>such and <strong>such</strong></em> emphasis."], ["lone *star", "lone <em>star"], ["**lone *star*", "<strong>lone <em>star</em>"], ["**lone *star**", "<strong>lone <em>star</strong>"], ["*", "<em>"], ["**", "<strong>"], ["***", "<em><strong>"], ["**double *star", "<strong>double <em>star"], ["***em* strong**.", "<strong><em>em</em> strong</strong>."], ["***strong** em*.", "<em><strong>strong</strong> em</em>."], ["***em-strong***.", "<em><strong>em-strong</strong></em>."]];
//.........................................................................................................
    for (idx = i = 0, len = probes_and_matchers.length; i < len; idx = ++i) {
      [probe, matcher] = probes_and_matchers[idx];
      this._parse(probe, (error, result) => {
        if (error != null) {
          throw error;
        }
        result = this._as_mktscript(result);
        return echo(((CND.equals(result, matcher)) ? CND.gold : CND.red)(jr([probe, result])));
      });
    }
    // T.eq result, matcher
    // urge '36633', ( jr { name, attributes, } )
    //.........................................................................................................
    return done();
  };

  // for [ probe, matcher, ] in probes_and_matchers
  //   result = probe.match start_tag_pattern
  //   try
  //   catch error
  //     # throw error

  //###########################################################################################################
  if (module.parent == null) {
    include = ["htmlish-tag-parser"];
    this._prune();
    this._main();
  }

  // @_parse 'helo'

}).call(this);

//# sourceMappingURL=mktscript-parser-2.test.js.map
