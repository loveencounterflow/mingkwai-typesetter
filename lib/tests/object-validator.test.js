// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var CND, OVAL, alert, badge, debug, echo, eq, help, include, info, join, jr, log, rpr, test, test_probe, urge, warn, whisper,
    indexOf = [].indexOf;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MK/TS/VALIDATOR/TESTS';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  test = require('guy-test');

  eq = CND.equals;

  jr = JSON.stringify;

  //...........................................................................................................
  join = function(x, joiner = '') {
    return x.join(joiner);
  };

  OVAL = require('../object-validator');

  //-----------------------------------------------------------------------------------------------------------
  this._prune = function() {
    var name, ref, value;
    ref = this;
    for (name in ref) {
      value = ref[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._main = function() {
    return test(this, {
      'timeout': 30000
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  test_probe = function(T, validate, probe, matcher, do_compare = true) {
    var error, result;
    result = null;
    try {
      result = validate(probe);
    } catch (error1) {
      error = error1;
      if (matcher === null) {
        /* TAINT opportunity for silent failure */
        help('36633', jr([probe, matcher]), CND.grey('#!!! ' + error.message.slice(0, 51)));
        T.ok(true);
      } else {
        warn('36633', jr([probe, matcher]));
        T.fail(`unexpected error for probe ${rpr(probe)}: ${rpr(error.message)}`);
      }
      return null;
    }
    urge('36633', jr([probe, result]));
    if (do_compare) {
      if ((matcher === null) && (result !== null)) {
        T.fail(`expected error but got result ${jr(result)}`);
      } else {
        T.eq(result, matcher);
      }
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["basic"] = function(T, done) {
    var i, len, matcher, probe, probes_and_matchers, schema, validate;
    schema = {
      properties: {
        foo: {
          type: 'integer'
        },
        bar: {
          type: 'boolean'
        }
      },
      required: ['foo', 'bar'],
      additionalProperties: false
    };
    //.........................................................................................................
    probes_and_matchers = [
      [
        {
          "foo": "1",
          "bar": "true",
          "baz": "true"
        },
        null
      ],
      [
        {
          "foo": "1.1",
          "bar": "f",
          "baz": "true"
        },
        null
      ],
      [{},
      null],
      [
        {
          "foo": 1,
          "bar": true
        },
        {
          "foo": 1,
          "bar": true
        }
      ],
      [
        {
          "foo": "1",
          "bar": "true"
        },
        {
          "foo": 1,
          "bar": true
        }
      ]
    ];
    //.........................................................................................................
    validate = OVAL.new_validator(schema);
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher] = probes_and_matchers[i];
      test_probe(T, validate, probe, matcher);
    }
    //.........................................................................................................
    return done();
  };

  //-----------------------------------------------------------------------------------------------------------
  this["scale tag schema"] = function(T, done) {
    var i, len, matcher, probe, probes_and_matchers, schema, validate;
    schema = {
      postprocess: function(Q) {
        if (Q.lines === '') {
          Q.lines = true;
        }
        return Q;
      },
      properties: {
        abs: {
          type: 'number'
        },
        rel: {
          type: 'number'
        },
        lines: {
          type: ['boolean', 'string']
        }
      },
      additionalProperties: false,
      oneOf: [
        {
          required: ['abs']
        },
        {
          required: ['rel']
        }
      ]
    };
    //.........................................................................................................
    probes_and_matchers = [
      [
        {
          "abs": "0.8"
        },
        {
          "abs": 0.8
        }
      ],
      [
        {
          "abs": "0.8",
          "lines": ""
        },
        {
          "abs": 0.8,
          "lines": true
        }
      ],
      [
        {
          "rel": "0.8"
        },
        {
          "rel": 0.8
        }
      ],
      [
        {
          "rel": "0.8",
          "lines": ""
        },
        {
          "rel": 0.8,
          "lines": true
        }
      ],
      [
        {
          "lines": ""
        },
        null
      ],
      [
        {
          "rel": "1",
          "abs": "2"
        },
        null
      ]
    ];
    //.........................................................................................................
    validate = OVAL.new_validator(schema);
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher] = probes_and_matchers[i];
      test_probe(T, validate, probe, matcher, true);
    }
    //.........................................................................................................
    return done();
  };

  //###########################################################################################################
  if (module.parent == null) {
    include = ["basic", "scale tag schema"];
    this._prune();
    this._main();
  }

}).call(this);

//# sourceMappingURL=object-validator.test.js.map
