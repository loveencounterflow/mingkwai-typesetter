// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var CND, MKTS_TABLE, alert, badge, debug, echo, eq, help, include, info, jr, log, rpr, test, urge, warn, whisper,
    indexOf = [].indexOf;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MKTS/TABLE/INTERIM/PATTERN/TESTS';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  test = require('guy-test');

  eq = CND.equals;

  jr = JSON.stringify;

  //...........................................................................................................
  MKTS_TABLE = require('../mkts-table');

  //-----------------------------------------------------------------------------------------------------------
  this._prune = function() {
    var name, ref, value;
    ref = this;
    for (name in ref) {
      value = ref[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._main = function() {
    return test(this, {
      'timeout': 30000
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this["MKTS_TABLE.fieldcells.source_pattern"] = function(T, done) {
    var error, i, key, len, matcher, probe, probes_and_matchers, ref, result;
    probes_and_matchers = [
      [
        "A1..A4:\"japanese-text\"",
        {
          "selector": "A1..A4",
          "aliases": "\"japanese-text\""
        }
      ],
      [
        "  A1..A4  :  \"japanese-text\"  ",
        {
          "selector": "A1..A4",
          "aliases": "\"japanese-text\"  "
        }
      ],
      [
        "A1..A4",
        {
          "selector": "A1..A4"
        }
      ],
      [
        "A1..A4:\"japanese-text\",\"headings\",\"foo\"",
        {
          "selector": "A1..A4",
          "aliases": "\"japanese-text\",\"headings\",\"foo\""
        }
      ]
    ];
//.........................................................................................................
// debug '93033', rpr MKTS_TABLE.fieldcells.source_pattern
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher] = probes_and_matchers[i];
      try {
        result = probe.match(MKTS_TABLE.fieldcells.source_pattern);
        result = result.groups;
        for (key in result) {
          ((ref = result[key]) === '' || ref === (void 0) ? delete result[key] : void 0);
        }
      } catch (error1) {
        error = error1;
        if (false) { // ( matcher is null ) and ( error.message.match /unable to parse .* as nonnegative quantity/ )?
          // urge '36633', ( jr [ probe, matcher, ] )
          T.ok(true);
        } else {
          T.fail(`unexpected error for probe ${rpr(probe)}: ${rpr(error.message)}`);
        }
        continue;
      }
      urge('36633', jr([probe, result]));
      T.eq(result, matcher);
    }
    //.........................................................................................................
    return done();
  };

  //-----------------------------------------------------------------------------------------------------------
  this["MKTS_TABLE._parse_aliases"] = function(T, done) {
    var error, i, len, matcher, probe, probes_and_matchers, result;
    probes_and_matchers = [["\"japanese-text\"", null], ["@japanese-text,@headings,@foo", ["@japanese-text", "@headings", "@foo"]], [" @japanese-text,  @headings , @foo  ", ["@japanese-text", "@headings", "@foo"]], ["@some-name", ["@some-name"]], ["@some-name,", ["@some-name"]], ["@some-name,,@other-name", null], ["@some-name,,", null], ["@some-name,@other-name,", ["@some-name", "@other-name"]], ["", []], [null, []]];
//.........................................................................................................
// debug '93033', rpr MKTS_TABLE.fieldcells.source_pattern
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher] = probes_and_matchers[i];
      try {
        result = MKTS_TABLE._parse_aliases(null, probe);
      } catch (error1) {
        error = error1;
        if ((matcher === null) && ((error.message.match(/aliases must be prefixed with '@'/)) != null)) {
          urge('36633', jr([probe, matcher]));
          T.ok(true);
        } else {
          T.fail(`unexpected error for probe ${rpr(probe)}: ${rpr(error.message)}`);
        }
        continue;
      }
      urge('36633', jr([probe, result]));
      T.eq(result, matcher);
    }
    //.........................................................................................................
    return done();
  };

  //-----------------------------------------------------------------------------------------------------------
  this._get_sample_table_1 = function() {
    var R;
    R = MKTS_TABLE._new_description(null);
    MKTS_TABLE.name(R, 'moderately-freeform-table');
    MKTS_TABLE.debug(R, 'false');
    MKTS_TABLE.grid(R, 'D4');
    MKTS_TABLE.unitwidth(R, '1mm');
    MKTS_TABLE.unitheight(R, '1mm');
    MKTS_TABLE.columnwidth(R, '20');
    MKTS_TABLE.rowheight(R, '10');
    MKTS_TABLE.fieldcells(R, 'A1..A4:@japanese-text'); // fieldnr 1
    MKTS_TABLE.fieldcells(R, 'B1..D1'); // fieldnr 2
    MKTS_TABLE.fieldcells(R, 'B2..D2'); // fieldnr 3
    MKTS_TABLE.fieldcells(R, 'B3..B4'); // fieldnr 4
    MKTS_TABLE.fieldcells(R, 'C3..D4:@overlap-topright'); // fieldnr 5
    MKTS_TABLE.fieldcells(R, 'C3..D4:@overlap-bottomright'); // fieldnr 6
    MKTS_TABLE.fieldcells(R, 'C3..D4:@overlap-topleft'); // fieldnr 7
    MKTS_TABLE.fieldcells(R, 'C3..D4:@overlap-bottomleft'); // fieldnr 8
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["MKTS_TABLE._resolve_aliases"] = function(T, done) {
    var error, i, len, matcher, probe, probes_and_matchers, result, table;
    table = this._get_sample_table_1();
    //.........................................................................................................
    probes_and_matchers = [["@japanese-text", [1]], ["@overlap-bottomleft,C3", [8, "C3"]], ["@overlap-bottomleft,C3..D4", [8, 'C3..D4']], ["A1..C3", ["A1..C3"]], ["A1..C3,@japanese-text", ["A1..C3", 1]]];
//.........................................................................................................
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher] = probes_and_matchers[i];
      try {
        result = MKTS_TABLE._resolve_aliases(table, probe);
      } catch (error1) {
        error = error1;
        if ((matcher === null) && ((error.message.match(/aliases must be prefixed with '@'/)) != null)) {
          urge('36633', jr([probe, matcher]));
          T.ok(true);
        } else {
          T.fail(`unexpected error for probe ${rpr(probe)}: ${rpr(error.message)}`);
        }
        continue;
      }
      urge('36633', jr([probe, result]));
      T.eq(result, matcher);
    }
    //.........................................................................................................
    return done();
  };

  //###########################################################################################################
  if (module.parent == null) {
    include = ["MKTS_TABLE.fieldcells.source_pattern", "MKTS_TABLE._parse_aliases", "MKTS_TABLE._resolve_aliases"];
    this._prune();
    this._main();
  }

}).call(this);

//# sourceMappingURL=interim-mkts-table-patterns.js.map
