{
  "version": 3,
  "file": "mkts-table-units.js",
  "sourceRoot": "..",
  "sources": [
    "src/mkts-table-units.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/TABLE/UNITS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nassign                    = Object.assign\ncopy                      = ( x ) -> Object.assign {}, x\njr                        = JSON.stringify\n@pattern                  = /^\\s*(?<value>(?:\\+|-)?[0-9]*\\.?[0-9]*)\\s*(?<unit>[^\\s0-9]+)\\s*$/\n\n#-----------------------------------------------------------------------------------------------------------\n@factors =\n  mm:           1     ### mm ###\n  cm:           10    ### mm ###\n  m:            1000\n  pt:           1 / ( 7227 / 2540 )  ### ~0.35mm ###\n  lineheight:   5.26 ### preset, may change ###\n\n#-----------------------------------------------------------------------------------------------------------\n@set_factor = ( source_unit, target_value, target_unit ) ->\n  unless target_unit is 'mm'\n    throw new Error \"(MKTS/TABLE µ43272) expected 'mm' as target unit, got #{rpr target_unit}\"\n  ### TAINT validate numbers ###\n  #.........................................................................................................\n  @factors[ source_unit ] = target_value\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@new_quantity = ( value_or_literal, unit = null ) ->\n  return @parse value_or_literal unless unit?\n  value = value_or_literal\n  return { '~isa': 'MKTS/TABLE/quantity', value, unit, }\n\n#-----------------------------------------------------------------------------------------------------------\n@parse = ( text ) ->\n  # text = '1' + text unless ( text.match /^\\s*[0-9]/ )?\n  unless ( match = text.match @pattern )?\n    throw new Error \"(MKTS/TABLE µ88272) unable to parse #{rpr text}\"\n  #.........................................................................................................\n  { value, unit, } = match.groups\n  throw new Error \"(MKTS/TABLE µ88272) unable to parse #{rpr text}\" if value in [ '+', '-', ]\n  value = '1' if value is ''\n  #.........................................................................................................\n  return @new_quantity ( parseFloat value ), unit\n\n#-----------------------------------------------------------------------------------------------------------\n@as_text = ( me, operator, operand ) ->\n  return @as_text operand, operator, me if CND.isa_number me\n  #.........................................................................................................\n  unless ( type = CND.type_of me ) is 'MKTS/TABLE/quantity'\n    throw new Error \"(MKTS/TABLE µ88316) expected a 'MKTS/TABLE/quantity', got a #{rpr type}\"\n  #.........................................................................................................\n  return \"#{me.value}#{me.unit}\" unless operator?\n  #.........................................................................................................\n  switch operator\n    when '*' then return @as_text @multiply ( copy me ), operand\n    else throw new Error \"(MKTS/TABLE µ88360) unknown operand #{rpr operand}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@multiply = ( me, factor ) ->\n  switch ( type = CND.type_of me )\n    when 'text'                 then me = @new_quantity me\n    when 'MKTS/TABLE/quantity'  then me = Object.assign {}, me\n    else throw new Error \"(MKTS/TABLE µ88404) expected a text or a 'MKTS/TABLE/quantity', got a #{rpr type}\"\n  me.value *= factor\n  return me\n\n# #-----------------------------------------------------------------------------------------------------------\n# @add = ( me, length ) ->\n#   switch ( type = CND.type_of me )\n#     when 'text'                 then me = @new_quantity me\n#     when 'MKTS/TABLE/quantity'  then me = Object.assign {}, me\n#     else throw new Error \"(MKTS/TABLE µ88404) expected a text or a 'MKTS/TABLE/quantity', got a #{rpr type}\"\n#   switch ( type = CND.type_of length )\n#     when 'text'                 then length = @new_quantity length\n#     when 'MKTS/TABLE/quantity'  then length = Object.assign {}, length\n#     else throw new Error \"(MKTS/TABLE µ88404) expected a text or a 'MKTS/TABLE/quantity', got a #{rpr type}\"\n#   #.........................................................................................................\n#   unless me.unit is length.unit\n#     ### When both units are identical, we accept them trivially both without checking whether we know them.\n#     If units differ, we convert both lengths to millimeters before doing the conversion; this will cause\n#     unknown units to throw errors. ###\n#     unless ( me_factor = @factors[ me.unit ] )?\n#       throw new Error \"(MKTS/TABLE µ88309) unknown unit #{rpr me.unit}\"\n#     unless ( ref_factor = @factors[ length.unit ] )?\n#       throw new Error \"(MKTS/TABLE µ88309) unknown unit #{rpr length.unit}\"\n#     me_value   *= me_factor\n#     ref_value  *= ref_factor\n#   #.........................................................................................................\n#   ratio = Math.ceil me_value / ref_value\n#   return @multiply ref, ratio\n#   me.value *= length\n#   return me\n\n#-----------------------------------------------------------------------------------------------------------\n@integer_multiple = ( me, ref ) ->\n  ### TAINT should accept textual arguments ###\n  ### Given a comparison quantity and a reference quantity, return a quantity\n  whose unit is the unit of the reference quantity, and whose value is a whole\n  number such that the length expressed by the comparison quantity will fit into\n  resulting length by the smallest integer multiple of the reference length.\n\n  For example, `integer_multiple '15.5mm', '5mm'` will result in `20mm`, because\n  `20mm` is the smallest integer multiple of `5mm` that is longer than `15.5mm`. ###\n  #.........................................................................................................\n  switch ( type = CND.type_of me )\n    when 'text'                 then me = @new_quantity me\n    when 'MKTS/TABLE/quantity'  then me = Object.assign {}, me\n    else throw new Error \"(MKTS/TABLE µ88404) expected a text or a 'MKTS/TABLE/quantity', got a #{rpr type}\"\n  switch ( type = CND.type_of ref )\n    when 'text'                 then ref = @new_quantity ref\n    when 'MKTS/TABLE/quantity'  then ref = Object.assign {}, ref\n    else throw new Error \"(MKTS/TABLE µ88448) expected a text or a 'MKTS/TABLE/quantity', got a #{rpr type}\"\n  #.........................................................................................................\n  me_value  = me.value\n  ref_value = ref.value\n  #.........................................................................................................\n  unless me.unit is ref.unit\n    ### When both units are identical, we accept them trivially both without checking whether we know them.\n    If units differ, we convert both lengths to millimeters before doing the conversion; this will cause\n    unknown units to throw errors. ###\n    unless ( me_factor = @factors[ me.unit ] )?\n      throw new Error \"(MKTS/TABLE µ88309) unknown unit #{rpr me.unit}\"\n    unless ( ref_factor = @factors[ ref.unit ] )?\n      throw new Error \"(MKTS/TABLE µ88309) unknown unit #{rpr ref.unit}\"\n    me_value   *= me_factor\n    ref_value  *= ref_factor\n  #.........................................................................................................\n  ratio = Math.ceil me_value / ref_value\n  return @multiply ref, ratio\n\n\n\n\n\n\n"
  ]
}