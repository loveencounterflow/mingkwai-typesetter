{
  "version": 3,
  "file": "mkts-table-units.js",
  "sourceRoot": "..",
  "sources": [
    "src/mkts-table-units.coffee"
  ],
  "names": [],
  "mappings": ";AAGA;EAAA;AAAA,MAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,CAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAd5B;;;EAgBA,CAAA,GAA4B,OAAA,CAAQ,YAAR;;EAC5B,CAAA,GAA4B,CAAC,CAAC,KAAK,CAAC,IAAR,CAAa,CAAb;;EAC5B,MAAA,GAA4B,CAAC,CAAC,WAAW,CAAC,IAAd,CAAmB,CAAnB,EAlB5B;;;EAoBA,MAAA,GAA4B,MAAM,CAAC;;EACnC,IAAA,GAA4B,QAAA,CAAE,CAAF,CAAA;WAAS,MAAM,CAAC,MAAP,CAAc,CAAA,CAAd,EAAkB,CAAlB;EAAT;;EAC5B,EAAA,GAA4B,IAAI,CAAC;;EACjC,IAAC,CAAA,OAAD,GAA4B,yDAvB5B;;;EA4BA,IAAC,CAAA,0BAAD,GAA8B,QAAA,CAAE,IAAF,CAAA;AAC5B,QAAA,CAAA,EAAA;IAAA,IAAO,0CAAP;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,mCAAA,CAAA,CAAsC,GAAA,CAAI,IAAJ,CAAtC,CAA+C,wBAA/C,CAAV,EADR;KAAA;;IAGA,CAAA,GAAU,MAAA,CAAO,CAAA,CAAP,EAAW,KAAK,CAAC,MAAjB,EAAyB;MAAE,MAAA,EAAQ;IAAV,CAAzB;IACV,CAAC,CAAC,KAAF,GAAU,UAAA,CAAW,CAAC,CAAC,KAAb;AACV,WAAO;EANqB;AA5B9B",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/TABLE/UNITS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nassign                    = Object.assign\ncopy                      = ( x ) -> Object.assign {}, x\njr                        = JSON.stringify\n@pattern                  = /^\\s*(?<value>[0-9]+\\.?[0-9]*)\\s*(?<unit>[^\\s0-9]+)\\s*$/\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@parse_nonnegative_quantity = ( text ) ->\n  unless ( match = text.match @pattern )?\n    throw new Error \"(MKTS/TABLE Âµ5375) unable to parse #{rpr text} as nonnegative quantity\"\n  #.........................................................................................................\n  R       = assign {}, match.groups, { '~isa': 'MKTS/TABLE/quantity', }\n  R.value = parseFloat R.value\n  return R\n\n\n\n\n"
  ]
}