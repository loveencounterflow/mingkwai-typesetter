{
  "version": 3,
  "file": "mkts-table-units.js",
  "sourceRoot": "..",
  "sources": [
    "src/mkts-table-units.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/TABLE/UNITS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nassign                    = Object.assign\ncopy                      = ( x ) -> Object.assign {}, x\njr                        = JSON.stringify\n@pattern                  = /^\\s*(?<value>(?:\\+|-)?[0-9]*\\.?[0-9]*)\\s*(?<unit>[^\\s0-9]+)\\s*$/\n\n#-----------------------------------------------------------------------------------------------------------\n@factors =\n  mm:           1     ### mm ###\n  cm:           10    ### mm ###\n  m:            1000\n  pt:           1 / ( 7227 / 2540 )  ### ~0.35mm ###\n  lineheight:   5.26 ### preset, may change ###\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_factor = ( unit ) ->\n  throw new Error \"(MKTS/TABLE µ88309) unknown unit #{rpr unit}\" unless ( R = @factors[ unit ] )?\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@set_factor = ( source_unit, target_value, target_unit ) ->\n  ### TAINT validate numbers ###\n  unless target_unit is 'mm'\n    throw new Error \"(MKTS/TABLE µ43272) expected 'mm' as target unit, got #{rpr target_unit}\"\n  #.........................................................................................................\n  @factors[ source_unit ] = target_value\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@new_quantity = ( x, unit = null ) ->\n  unless unit?\n    switch ( type = CND.type_of x )\n      when 'text'                 then return @parse x\n      when 'MKTS/TABLE/quantity'  then return Object.assign {}, x\n      else throw new Error \"(MKTS/TABLE µ88404) expected a text or a 'MKTS/TABLE/quantity', got a #{rpr type}\"\n  return { '~isa': 'MKTS/TABLE/quantity', value: x, unit, }\n\n#-----------------------------------------------------------------------------------------------------------\n@parse = ( text ) ->\n  # text = '1' + text unless ( text.match /^\\s*[0-9]/ )?\n  unless ( match = text.match @pattern )?\n    throw new Error \"(MKTS/TABLE µ88272) unable to parse #{rpr text}\"\n  #.........................................................................................................\n  { value, unit, } = match.groups\n  throw new Error \"(MKTS/TABLE µ88272) unable to parse #{rpr text}\" if value in [ '+', '-', ]\n  value = '1' if value is ''\n  #.........................................................................................................\n  return @new_quantity ( parseFloat value ), unit\n\n#-----------------------------------------------------------------------------------------------------------\n@as_text = ( me, operator, operand ) ->\n  return @as_text operand, operator, me if CND.isa_number me\n  #.........................................................................................................\n  unless ( type = CND.type_of me ) is 'MKTS/TABLE/quantity'\n    throw new Error \"(MKTS/TABLE µ88316) expected a 'MKTS/TABLE/quantity', got a #{rpr type}\"\n  #.........................................................................................................\n  return \"#{me.value}#{me.unit}\" unless operator?\n  #.........................................................................................................\n  switch operator\n    when '*' then return @as_text @multiply ( copy me ), operand\n    else throw new Error \"(MKTS/TABLE µ88360) unknown operand #{rpr operand}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@multiply = ( me, factor ) ->\n  me        = @new_quantity me\n  me.value *= factor\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n@negate = ( me ) -> @multiply me, -1\n\n#-----------------------------------------------------------------------------------------------------------\n@conform = ( me, you ) ->\n  ### Express one quantity in terms of the other. ###\n  me        = @new_quantity me\n  you       = @new_quantity you\n  unless you.value is 1\n    throw new Error \"(MKTS/TABLE µ88309) unable to conform to a quantity with value other than 1, got #{rpr you}\"\n  me_value  = me.value  * @_get_factor me.unit\n  you_value = you.value * @_get_factor you.unit\n  you.value   = me_value / you_value\n  return you\n\n#-----------------------------------------------------------------------------------------------------------\n@add = ( me, you ) ->\n  me        = @new_quantity me\n  you       = @new_quantity you\n  me_value  = me.value  * @_get_factor me.unit\n  you_value = you.value * @_get_factor you.unit\n  return @conform ( @new_quantity me_value + you_value, 'mm' ), me.unit\n\n#-----------------------------------------------------------------------------------------------------------\n@integer_multiple = ( me, you ) ->\n  ### Given a comparison quantity and a reference quantity, return a quantity\n  whose unit is the unit of the reference quantity, and whose value is a whole\n  number such that the length expressed by the comparison quantity will fit into\n  resulting length by the smallest integer multiple of the reference length.\n  For example, `integer_multiple '15.5mm', '5mm'` will result in `20mm`, because\n  `20mm` is the smallest integer multiple of `5mm` that is longer than `15.5mm`. ###\n  #.........................................................................................................\n  me        = @new_quantity me\n  you       = @new_quantity you\n  me_value  = me.value  * @_get_factor me.unit\n  you_value = you.value * @_get_factor you.unit\n  ratio     = Math.ceil me_value / you_value\n  return @multiply you, ratio\n\n# #-----------------------------------------------------------------------------------------------------------\n# @integer_multiple_minus_one = ( me, you ) ->\n#   R =\n#   return ( @integer_multiple me, you )\n\n\n\n\n\n\n"
  ]
}