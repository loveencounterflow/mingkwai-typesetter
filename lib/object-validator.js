// Generated by CoffeeScript 2.3.2
(function() {
  //###########################################################################################################
  var Ajv, CND, OVAL, alert, badge, data, debug, echo, error, help, i, info, jr, len, log, probes, rpr, schema, urge, validate, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MK/TS/VALIDATOR';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  jr = JSON.stringify;

  Ajv = require('ajv');

  //-----------------------------------------------------------------------------------------------------------
  this._message_from_error = function(data, error) {
    var R;
    R = [];
    R.push(`OVAL Âµ33892 property ${error.dataPath}: ${error.message} (got ${rpr(error.data)})`);
    return R.join('\n');
  };

  //-----------------------------------------------------------------------------------------------------------
  this._message_from_errors = function(data, errors) {
    var R, error, i, len;
    R = [];
    for (i = 0, len = errors.length; i < len; i++) {
      error = errors[i];
      R.push(this._message_from_error(data, error));
    }
    R.push('');
    R.push(jr(data));
    R.push('');
    return R.join('\n');
  };

  //-----------------------------------------------------------------------------------------------------------
  this.new_validator = function(schema, settings = null) {
    var ajv, defaults, postprocess, validate_and_cast;
    if ((postprocess = schema.postprocess) != null) {
      delete schema.postprocess;
    }
    if (postprocess == null) {
      postprocess = function(data) {
        return data;
      };
    }
    defaults = {
      coerceTypes: true,
      allErrors: true,
      verbose: true
    };
    settings = Object.assign({}, settings, defaults);
    ajv = new Ajv(settings);
    validate_and_cast = ajv.compile(schema);
    return (data) => {
      var R;
      R = CND.deep_copy(data);
      if (!validate_and_cast(R)) {
        throw new Error(this._message_from_errors(R, validate_and_cast.errors));
      }
      return postprocess(R);
    };
  };

  //###########################################################################################################
  if (module.parent == null) {
    OVAL = this;
    schema = {
      // properties:
      //   foo:  { type: 'integer', }
      //   bar:  { type: 'boolean', }
      // required: [ 'foo', 'bar', ]
      // additionalProperties: false
      properties: {
        abs: {
          type: 'number'
        },
        rel: {
          type: 'number'
        },
        lines: {
          type: ['boolean', 'string']
        }
      },
      // required:             [ 'foo', 'bar', ]
      additionalProperties: false
    };
    validate = OVAL.new_validator(schema);
    probes = [
      {
        abs: '0.8'
      },
      {
        abs: '0.8',
        lines: ''
      },
      {
        rel: '0.8'
      },
      {
        rel: '0.8',
        lines: ''
      }
    ];
// { foo: '1', bar: 'true', baz: 'true' }
// { foo: '1.1', bar: 'f', baz: 'true' }
// {}
// { foo: '1', bar: 'true', }
    for (i = 0, len = probes.length; i < len; i++) {
      data = probes[i];
      echo();
      try {
        debug(validate(data));
      } catch (error1) {
        error = error1;
        warn(error.message);
        continue;
      }
      help(data);
    }
  }

}).call(this);

//# sourceMappingURL=object-validator.js.map
