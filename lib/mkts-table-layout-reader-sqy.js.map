{
  "version": 3,
  "file": "mkts-table-layout-reader-sqy.js",
  "sourceRoot": "..",
  "sources": [
    "src/mkts-table-layout-reader-sqy.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/TABLE/LAYOUT-READER/SQY'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\njr                        = JSON.stringify\n# ### TAINT cyclic dependency ###\n# MKTS_TABLE                = require './mkts-table'\nMKTS_TABLE_API            = require './mkts-table-api'\nSQY                       = require 'sqy'\nmisfit                    = Symbol 'misfit'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@read_layout = ( S, L, event, source ) ->\n  ### TAINT take advantage of Nearley's streaming API ###\n  ### TAINT simplify dispatcher code ###\n  # debug '77129', source\n  R = null\n  #.........................................................................................................\n  for t in SQY.parse source\n    whisper '88373', jr t\n    _ = misfit\n    #.......................................................................................................\n    switch t.type\n      when 'cheat'\n        alert '25521', \"cheating\"\n        MKTS_TABLE = require './mkts-table'\n        MKTS_TABLE.columnwidth  R, '20'\n        MKTS_TABLE.rowheight    R, '20'\n        continue\n      when 'create_layout'\n        R = MKTS_TABLE_API.create_layout S, event.meta, t.id\n        continue\n    #.......................................................................................................\n    unless R?\n      throw new Error \"µ9893 must create layout before #{t.type}\"\n    #.......................................................................................................\n    switch t.type\n      when 'set_grid'           then _ = MKTS_TABLE_API.set_grid          R, t.size\n      when 'set_debug'          then _ = MKTS_TABLE_API.set_debug         R, t.value\n      when 'set_unit_lengths'   then _ = MKTS_TABLE_API.set_unit_lengths  R, t.value, t.unit\n      when 'set_lane_sizes'     then _ = MKTS_TABLE_API.set_lane_sizes    R, t.direction, t.value\n      when 'set_default_gaps'   then _ = MKTS_TABLE_API.set_default_gaps  R, t.feature, t.value\n    #.......................................................................................................\n    continue unless _ is misfit\n    unless R.grid?\n      throw new Error \"µ9894 must set grid before #{t.type}\"\n    #.......................................................................................................\n    switch t. type\n      when 'create_field'       then _ = MKTS_TABLE_API.create_field      R, t.id, t.selector\n      when 'set_sel_border'     then _ = MKTS_TABLE_API.set_borders       R, t.selectors, t.edges, t.style\n      when 'set_sel_alignment'  then _ = MKTS_TABLE_API.set_alignment     R, t.selectors, t.direction, t.align\n      when 'set_field_gaps'     then _ = MKTS_TABLE_API.set_field_gaps    R, t.selectors, t.edges, t.feature, t.value\n    #.......................................................................................................\n    continue unless _ is misfit\n    warn \"unhandled token type #{rpr t.type}\"\n  #.........................................................................................................\n  ### TAINT will abandon this kind of fails handling ###\n  if R.fails.length > 0\n    alert '44093', fail for fail in R.fails\n    throw new Error \"µ9894 detected fails\"\n  #.........................................................................................................\n  return R\n\n# #-----------------------------------------------------------------------------------------------------------\n# @get_mkts_table_description_and_sandbox = ( S, L, event ) ->\n#   ### This method makes the format-defining names of the MKTS Table Formatter available at the top level,\n#   curried so that the current context (`me`) that contains the processed details as defined so far as well\n#   as data on the general typesetting context. All names are templating functions, such that each may be\n#   called as `grid'4x4'`, `merge'[a1]..[a4]'` and so on from the source within the MKTS document where the\n#   table is being defined. ###\n#   me      = MKTS_TABLE._new_description S\n#   me.meta = event[ 3 ]\n#   ### ... more typesetting detail attached here ... ###\n#   #.........................................................................................................\n#   f = =>\n#     @copy                 = ( raw_parts ) => @_API_copy S, L, me, raw_parts.join ''\n#     #.........................................................................................................\n#     @name                 = ( raw_parts ) -> MKTS_TABLE.name                  me, raw_parts.join ''\n#     @debug                = ( raw_parts ) -> MKTS_TABLE.debug                 me, raw_parts.join ''\n#     @grid                 = ( raw_parts ) -> MKTS_TABLE.grid                  me, raw_parts.join ''\n#     @fill_gap             = ( raw_parts ) -> MKTS_TABLE.fill_gap              me, raw_parts.join ''\n#     @padding              = ( raw_parts ) -> MKTS_TABLE.padding               me, raw_parts.join ''\n#     @margin               = ( raw_parts ) -> MKTS_TABLE.margin                me, raw_parts.join ''\n#     @unitwidth            = ( raw_parts ) -> MKTS_TABLE.unitwidth             me, raw_parts.join ''\n#     @unitheight           = ( raw_parts ) -> MKTS_TABLE.unitheight            me, raw_parts.join ''\n#     @columnwidth          = ( raw_parts ) -> MKTS_TABLE.columnwidth           me, raw_parts.join ''\n#     @rowheight            = ( raw_parts ) -> MKTS_TABLE.rowheight             me, raw_parts.join ''\n#     @fieldcells           = ( raw_parts ) -> MKTS_TABLE.fieldcells            me, raw_parts.join ''\n#     @fieldborder          = ( raw_parts ) -> MKTS_TABLE.fieldborder           me, raw_parts.join ''\n#     @fieldalignvertical   = ( raw_parts ) -> MKTS_TABLE.fieldalignvertical    me, raw_parts.join ''\n#     @fieldalignhorizontal = ( raw_parts ) -> MKTS_TABLE.fieldalignhorizontal  me, raw_parts.join ''\n#     return @\n#   #.........................................................................................................\n#   return [ me, ( f.apply {} ), ]\n\n\n\n\n\n\n\n"
  ]
}