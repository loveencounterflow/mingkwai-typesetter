// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  /* TAINT cyclic dependency */
  var CND, ECS, MKTS_TABLE, TW_MKTS_TABLE, alert, badge, debug, echo, help, info, log, rpr, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MKTS/TEX-WRITER/MKTSTABLE';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  ECS = require('./eval-cs');

  MKTS_TABLE = require('./mkts-table');

  TW_MKTS_TABLE = require('./tex-writer-mkts-table');

  //-----------------------------------------------------------------------------------------------------------
  this.read_layout = function(S, L, event, source) {
    var R, error, sandbox;
    [R, sandbox] = this.get_mkts_table_description_and_sandbox(S, L, event);
    try {
      ECS.evaluate(source, {
        language: 'coffee',
        sandbox
      });
    } catch (error1) {
      error = error1;
      warn("when trying to evaluate CS source text for <mkts-table> an error occurred");
      throw error;
    }
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.get_mkts_table_description_and_sandbox = function(S, L, event) {
    /* This method makes the format-defining names of the MKTS Table Formatter available at the top level,
    curried so that the current context (`me`) that contains the processed details as defined so far as well
    as data on the general typesetting context. All names are templating functions, such that each may be
    called as `grid'4x4'`, `merge'[a1]..[a4]'` and so on from the source within the MKTS document where the
    table is being defined. */
    var f, me;
    me = MKTS_TABLE._new_description(S);
    /* ... more typesetting detail attached here ... */
    //.........................................................................................................
    f = () => {
      this.copy = (raw_parts) => {
        return TW_MKTS_TABLE._API_copy(S, L, me, raw_parts.join(''));
      };
      //.........................................................................................................
      this.name = function(raw_parts) {
        return MKTS_TABLE.name(me, raw_parts.join(''));
      };
      this.debug = function(raw_parts) {
        return MKTS_TABLE.debug(me, raw_parts.join(''));
      };
      this.grid = function(raw_parts) {
        return MKTS_TABLE.grid(me, raw_parts.join(''));
      };
      this.background_gap = function(raw_parts) {
        return MKTS_TABLE.background_gap(me, raw_parts.join(''));
      };
      this.padding = function(raw_parts) {
        return MKTS_TABLE.padding(me, raw_parts.join(''));
      };
      this.margin = function(raw_parts) {
        return MKTS_TABLE.margin(me, raw_parts.join(''));
      };
      this.unitwidth = function(raw_parts) {
        return MKTS_TABLE.unitwidth(me, raw_parts.join(''));
      };
      this.unitheight = function(raw_parts) {
        return MKTS_TABLE.unitheight(me, raw_parts.join(''));
      };
      this.columnwidth = function(raw_parts) {
        return MKTS_TABLE.columnwidth(me, raw_parts.join(''));
      };
      this.rowheight = function(raw_parts) {
        return MKTS_TABLE.rowheight(me, raw_parts.join(''));
      };
      this.fieldcells = function(raw_parts) {
        return MKTS_TABLE.fieldcells(me, raw_parts.join(''));
      };
      this.fieldborder = function(raw_parts) {
        return MKTS_TABLE.fieldborder(me, raw_parts.join(''));
      };
      this.fieldalignvertical = function(raw_parts) {
        return MKTS_TABLE.fieldalignvertical(me, raw_parts.join(''));
      };
      this.fieldalignhorizontal = function(raw_parts) {
        return MKTS_TABLE.fieldalignhorizontal(me, raw_parts.join(''));
      };
      return this;
    };
    //.........................................................................................................
    return [me, f.apply({})];
  };

}).call(this);

//# sourceMappingURL=mkts-table-layout-reader-coffee.js.map
