{
  "version": 3,
  "file": "rpc-server.js",
  "sourceRoot": "..",
  "sources": [
    "src/rpc-server.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = '(INTERSHOP/RPC/SECONDARY)'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nNET                       = require 'net'\n#...........................................................................................................\nPS                        = require 'pipestreams'\n{ $\n  $async }                = PS\n#...........................................................................................................\n@RPC                      = require './cxltx-demo'\n#...........................................................................................................\nO                         = require './options'\n### TAINT temporary ###\nO.rpc                     = {}\nO.app                     = {}\nO.app.name                = 'MKTS'\nO.rpc.port                = 8910\nO.rpc.host                = '127.0.0.1'\ncounts                    = {}\n\n#-----------------------------------------------------------------------------------------------------------\n@_socket_listen_on_all = ( socket ) ->\n  socket.on 'close',      -> help 'socket', 'close'\n  socket.on 'connect',    -> help 'socket', 'connect'\n  socket.on 'data',       -> help 'socket', 'data'\n  socket.on 'drain',      -> help 'socket', 'drain'\n  socket.on 'end',        -> help 'socket', 'end'\n  socket.on 'error',      -> help 'socket', 'error'\n  socket.on 'lookup',     -> help 'socket', 'lookup'\n  socket.on 'timeout',    -> help 'socket', 'timeout'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_server_listen_on_all = ( server ) ->\n  server.on 'close',      -> help 'server', 'close'\n  server.on 'connection', -> help 'server', 'connection'\n  server.on 'error',      -> help 'server', 'error'\n  server.on 'listening',  -> help 'server', 'listening'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@listen = ( handler ) ->\n  #.........................................................................................................\n  server = NET.createServer ( socket ) =>\n    socket.on 'error', ( error ) => warn \"socket error: #{error.message}\"\n    #.......................................................................................................\n    source    = PS._nodejs_input_to_pull_source socket\n    counts    = {}\n    S         = { socket, counts, }\n    pipeline  = []\n    on_stop   = PS.new_event_collector 'stop', => socket.end()\n    #.......................................................................................................\n    pipeline.push source\n    pipeline.push PS.$split()\n    pipeline.push @$dispatch      S\n    pipeline.push $ ( result, send ) ->\n      S.socket.write result\n      send null\n    pipeline.push on_stop.add PS.$drain()\n    #.......................................................................................................\n    PS.pull pipeline...\n    return null\n  #.........................................................................................................\n  server.listen O.rpc.port, O.rpc.host, =>\n    { address: host, port, family, } = server.address()\n    help \"#{O.app.name} RPC server listening on #{family} #{host}:#{port}\"\n  #.........................................................................................................\n  return handler null, server if handler?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$dispatch = ( S ) ->\n  return $ ( line, send ) =>\n    try\n      event                             = JSON.parse \"[#{line}]\"\n      [ method_name, parameters..., ]   = event\n    catch error\n      throw error\n    #.......................................................................................................\n    count = counts[ method_name ] = ( counts[ method_name ] ?= 0 ) + 1\n    if ( count is 1 ) or ( count % 5 is 0 )\n      whisper '33673', \"RPC: #{method_name}() ##{count}\"\n    #.......................................................................................................\n    send @do_rpc S, method_name, parameters\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@do_rpc = ( S, method_name, parameters ) ->\n  S.counts.rpcs  += +1\n  method          = @RPC[ method_name ]\n  unless method?\n    throw new Error \"no such method: #{rpr method_name}\"\n  #.........................................................................................................\n  try\n    return method.apply @RPC, parameters\n  catch error\n    S.counts.errors += +1\n    throw error\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  RPC_SERVER = @\n  RPC_SERVER.listen()\n\n\n"
  ]
}