{
  "version": 3,
  "file": "rpc-server.js",
  "sourceRoot": "..",
  "sources": [
    "src/rpc-server.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = '(INTERSHOP/RPC/SECONDARY)'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nNET                       = require 'net'\n#...........................................................................................................\nPS                        = require 'pipestreams'\n{ $\n  $async }                = PS\n#...........................................................................................................\n@RPC                      = require './cxltx-demo'\n#...........................................................................................................\nO                         = require './options'\n### TAINT temporary ###\nO.rpc                     = {}\nO.app                     = {}\nO.app.name                = 'MKTS'\nO.rpc.port                = 8910\nO.rpc.host                = '127.0.0.1'\n\n#-----------------------------------------------------------------------------------------------------------\n@_socket_listen_on_all = ( socket ) ->\n  socket.on 'close',      -> help 'socket', 'close'\n  socket.on 'connect',    -> help 'socket', 'connect'\n  socket.on 'data',       -> help 'socket', 'data'\n  socket.on 'drain',      -> help 'socket', 'drain'\n  socket.on 'end',        -> help 'socket', 'end'\n  socket.on 'error',      -> help 'socket', 'error'\n  socket.on 'lookup',     -> help 'socket', 'lookup'\n  socket.on 'timeout',    -> help 'socket', 'timeout'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_server_listen_on_all = ( server ) ->\n  server.on 'close',      -> help 'server', 'close'\n  server.on 'connection', -> help 'server', 'connection'\n  server.on 'error',      -> help 'server', 'error'\n  server.on 'listening',  -> help 'server', 'listening'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@listen = ( handler = null ) ->\n  #.........................................................................................................\n  server = NET.createServer ( socket ) =>\n    XXX_t0 = Date.now()\n    socket.on 'error', ( error ) => warn \"socket error: #{error.message}\"\n    # info '33733', 'yo'\n    #.......................................................................................................\n    source    = PS._nodejs_input_to_pull_source socket\n    counts    = { requests: 0, rpcs: 0, hits: 0, fails: 0, errors: 0, }\n    S         = { socket, counts, }\n    pipeline  = []\n    on_stop   = PS.new_event_collector 'stop', =>\n      help \"socket.end() called\"\n      socket.end()\n      debug '33844', ( Date.now() / XXX_t0 ) / 1000\n    #.......................................................................................................\n    pipeline.push source\n    pipeline.push PS.$split()\n    # pipeline.push PS.$show()\n    # pipeline.push @$show_counts   S\n    pipeline.push @$dispatch      S\n    # pipeline.push PS.$show()\n    pipeline.push $ ( result, send ) ->\n      S.socket.write result\n      send null\n    pipeline.push on_stop.add PS.$drain()\n    #.......................................................................................................\n    PS.pull pipeline...\n    return null\n  #.........................................................................................................\n  handler ?= =>\n    { address: host, port, family, } = server.address()\n    help \"#{O.app.name} RPC server listening on #{family} #{host}:#{port}\"\n  #.........................................................................................................\n  # ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n  # try FS.unlinkSync O.rpc.path catch error then warn error\n  # server.listen O.rpc.path, handler\n  # ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n  server.listen O.rpc.port, O.rpc.host, handler\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_counts = ( S ) ->\n  return PS.$watch ( event ) ->\n    S.counts.requests += +1\n    if ( S.counts.requests % 1000 ) is 0\n      urge JSON.stringify S.counts\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$dispatch = ( S ) ->\n  return $ ( line, send ) =>\n    try\n      event                       = JSON.parse \"[#{line}]\"\n      [ method, parameters..., ]  = event\n    catch error\n      throw error\n    #.......................................................................................................\n    debug '33733', { method, parameters, }\n    send @do_rpc S, method, parameters\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@do_rpc = ( S, method_name, parameters ) ->\n  S.counts.rpcs  += +1\n  method          = @RPC[ method_name ]\n  unless method?\n    throw new Error \"no such method: #{rpr method_name}\"\n    # return @send_error S, \"no such method: #{rpr method_name}\"\n  #.........................................................................................................\n  try\n    return method.apply @RPC, parameters\n  catch error\n    S.counts.errors += +1\n    throw error\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  RPC_SERVER = @\n  RPC_SERVER.listen()\n\n\n"
  ]
}