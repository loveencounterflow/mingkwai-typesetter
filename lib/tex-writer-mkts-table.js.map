{
  "version": 3,
  "file": "tex-writer-mkts-table.js",
  "sourceRoot": "..",
  "sources": [
    "src/tex-writer-mkts-table.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/TEX-WRITER/MKTSTABLE'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nECS                       = require './eval-cs'\nMKTS                      = require './main'\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nunstamp                   = MD_READER.unstamp.bind     MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\njr                        = JSON.stringify\n#...........................................................................................................\nMKTS_TABLE                = require './mkts-table'\nMKTS.MACRO_ESCAPER.register_raw_tag 'mkts-table-description'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$main = ( S ) ->\n  #.........................................................................................................\n  return D.TEE.from_pipeline [\n    @$parse_description               S\n    @$collect_field_contents          S\n    # @$dump_table_description          S\n    ]\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$dump_table_description = ( S ) -> D.$observe ( event ) ->\n  return unless select event, '.', 'MKTS/TABLE/description', true\n  help '99871', ( CND.blue rpr event[ 2 ] )\n\n#-----------------------------------------------------------------------------------------------------------\n@$parse_description = ( S ) ->\n  within_mkts_table = false\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '.', 'mkts-table-description'\n      [ type, name, text, meta, ] = event\n      [ description, sandbox, ]   = @get_mkts_table_description_and_sandbox S, event\n      try\n        ECS.evaluate text, { language: 'coffee', sandbox, }\n      catch error\n        warn \"when trying to evaluate CS source text for <mkts-table> (source line ##{meta.line_nr}),\"\n        warn \"an error occurred\"\n        throw error\n      send stamp event\n      send [ '.', 'MKTS/TABLE/description', description, ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect_field_contents = ( S ) ->\n  ### TAINT should allow to name tables in description and content tags ###\n  prv_description_event         = null\n  within_table_content          = false\n  within_field                  = false\n  fieldhints_and_content_events = []\n  current_field                 = null\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    ### When a table description comes along, we save it for later and do not send anything: ###\n    if select event, '.', 'MKTS/TABLE/description'\n      prv_description_event = event\n      return null\n    #.......................................................................................................\n    ### When table contents start, we register that and do not send anything: ###\n    if select event, '(', 'mkts-table-content'\n      within_table_content = true\n      return send stamp event\n    #.......................................................................................................\n    ### When table contents end, we send all the sub-events needed to draw the table, and then the\n    description-end and description events: ###\n    if select event, ')', 'mkts-table-content'\n      within_table_content  = false\n      description           = prv_description_event[ 2 ]\n      #.....................................................................................................\n      for sub_event from MKTS_TABLE._walk_events description, fieldhints_and_content_events\n        send sub_event\n      #.....................................................................................................\n      send stamp prv_description_event\n      send stamp event\n      #.....................................................................................................\n      ### TAINT this will become obsolete when we get named table descriptions: ###\n      fieldhints_and_content_events.length  = 0\n      prv_description_event                 = null\n      #.....................................................................................................\n      return null\n    #.......................................................................................................\n    ### If we are within table contents, we collect all field events and their contents as table field\n    contents; outside that, whitespace events are ignored, and other material generates errors: ###\n    if within_table_content\n      #.....................................................................................................\n      if select event, '(', 'field'\n        within_field = true\n        [ type, name, Q, meta, ]  = event\n        if not Q? and Q.key?\n          throw new Error \"need key for field\"\n        current_field = []\n        fieldhints_and_content_events.push [ Q.key, current_field, ]\n        return send stamp event\n      #.....................................................................................................\n      if select event, ')', 'field'\n        within_field   = false\n        current_field  = null\n        return send stamp event\n      #.....................................................................................................\n      if within_field\n        current_field.push event\n        # urge '27762', jr event\n        return null\n      #.....................................................................................................\n      if ( select event, '.', 'text' ) and ( event[ 2 ].match /^\\s*$/ )?\n        # whisper '27762', jr event\n        return null\n      #.....................................................................................................\n      ### TAINT should be a fail, not an exception: ###\n      # throw new Error \"detected illegal content: #{rpr event}\"\n      # warn '27762', jr event\n      return null\n    #.......................................................................................................\n    send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$render_description = ( S ) ->\n\n#-----------------------------------------------------------------------------------------------------------\n@get_mkts_table_description_and_sandbox = ( S, event ) ->\n  ### This method makes the format-defining names of the MKTS Table Formatter available at the top level,\n  curried so that the current context (`me`) that contains the processed details as defined so far as well\n  as data on the general typesetting context. All names are templating functions, such that each may be\n  called as `grid'4x4'`, `merge'[a1]..[a4]'` and so on from the source within the MKTS document where the\n  table is being defined. ###\n  me      = MKTS_TABLE._new_description S\n  me.meta = event[ 3 ]\n  ### ... more typesetting detail attached here ... ###\n  #.........................................................................................................\n  f = ->\n    @debug                = ( raw_parts ) -> MKTS_TABLE.debug                 me, raw_parts.join ''\n    @grid                 = ( raw_parts ) -> MKTS_TABLE.grid                  me, raw_parts.join ''\n    @paddingwidth         = ( raw_parts ) -> MKTS_TABLE.paddingwidth          me, raw_parts.join ''\n    @paddingheight        = ( raw_parts ) -> MKTS_TABLE.paddingheight         me, raw_parts.join ''\n    @marginwidth          = ( raw_parts ) -> MKTS_TABLE.marginwidth           me, raw_parts.join ''\n    @marginheight         = ( raw_parts ) -> MKTS_TABLE.marginheight          me, raw_parts.join ''\n    @unitwidth            = ( raw_parts ) -> MKTS_TABLE.unitwidth             me, raw_parts.join ''\n    @unitheight           = ( raw_parts ) -> MKTS_TABLE.unitheight            me, raw_parts.join ''\n    @columnwidth          = ( raw_parts ) -> MKTS_TABLE.columnwidth           me, raw_parts.join ''\n    @rowheight            = ( raw_parts ) -> MKTS_TABLE.rowheight             me, raw_parts.join ''\n    @fieldcells           = ( raw_parts ) -> MKTS_TABLE.fieldcells            me, raw_parts.join ''\n    @fieldborder          = ( raw_parts ) -> MKTS_TABLE.fieldborder           me, raw_parts.join ''\n    @fieldalignvertical   = ( raw_parts ) -> MKTS_TABLE.fieldalignvertical    me, raw_parts.join ''\n    @fieldalignhorizontal = ( raw_parts ) -> MKTS_TABLE.fieldalignhorizontal  me, raw_parts.join ''\n    return @\n  #.........................................................................................................\n  return [ me, ( f.apply {} ), ]\n\n\n\n"
  ]
}