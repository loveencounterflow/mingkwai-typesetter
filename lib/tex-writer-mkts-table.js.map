{
  "version": 3,
  "file": "tex-writer-mkts-table.js",
  "sourceRoot": "..",
  "sources": [
    "src/tex-writer-mkts-table.coffee"
  ],
  "names": [],
  "mappings": ";AAGA;EAAA;AAAA,MAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,SAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,UAAA,EAAA,EAAA,EAAA,GAAA,EAAA,eAAA,EAAA,GAAA,EAAA,MAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAd5B;;;EAgBA,CAAA,GAA4B,OAAA,CAAQ,YAAR;;EAC5B,CAAA,GAA4B,CAAC,CAAC,KAAK,CAAC,IAAR,CAAa,CAAb;;EAC5B,MAAA,GAA4B,CAAC,CAAC,WAAW,CAAC,IAAd,CAAmB,CAAnB,EAlB5B;;;EAoBA,GAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,QAAR;;EAC5B,SAAA,GAA4B,OAAA,CAAQ,aAAR;;EAC5B,IAAA,GAA4B,SAAS,CAAC,IAAI,CAAC,IAAf,CAA2B,SAA3B;;EAC5B,IAAA,GAA4B,SAAS,CAAC,IAAI,CAAC,IAAf,CAA2B,SAA3B;;EAC5B,KAAA,GAA4B,SAAS,CAAC,KAAK,CAAC,IAAhB,CAA2B,SAA3B;;EAC5B,OAAA,GAA4B,SAAS,CAAC,OAAO,CAAC,IAAlB,CAA2B,SAA3B;;EAC5B,MAAA,GAA4B,SAAS,CAAC,MAAM,CAAC,IAAjB,CAA2B,SAA3B;;EAC5B,SAAA,GAA4B,SAAS,CAAC,SAAS,CAAC,IAApB,CAA2B,SAA3B;;EAC5B,UAAA,GAA4B,SAAS,CAAC,UAAU,CAAC,IAArB,CAA2B,SAA3B;;EAC5B,EAAA,GAA4B,IAAI,CAAC,UA9BjC;;;EAgCA,UAAA,GAA4B,OAAA,CAAQ,cAAR;;EAC5B,IAAI,CAAC,aAAa,CAAC,gBAAnB,CAAoC,wBAApC,EAjCA;;;;;EAuCA,IAAC,CAAA,KAAD,GAAS,QAAA,CAAE,CAAF,CAAA;AAIP,QAAA,CAAA;;;;IAAA,CAAA,GAAI,eAAA,CAAA;AACJ,WAAO,CAAC,CAAC,GAAG,CAAC,aAAN,CAAoB;MACzB,IAAC,CAAA,kBAAD,CAAkC,CAAlC;MAAqC,CAArC,CADyB;MAEzB,IAAC,CAAA,mBAAD,CAAkC,CAAlC;MAAqC,CAArC,CAFyB;MAGzB,IAAC,CAAA,sBAAD,CAAkC,CAAlC;MAAqC,CAArC,CAHyB;;MAKzB,IAAC,CAAA,cAAD,CAAkC,CAAlC;MAAqC,CAArC,CALyB;MAMzB,IAAC,CAAA,kBAAD,CAAkC,CAAlC;MAAqC,CAArC,CANyB;KAApB;EALA,EAvCT;;;;;EAyDA,eAAA,GAAkB,QAAA,CAAA,CAAA;AAChB,QAAA;IAAA,CAAA,GACE;MAAA,4BAAA,EAAgC,CAAA,CAAhC;MACA,aAAA,EAAgC,CAAA,CADhC;MAEA,cAAA,EAAgC,IAFhC;MAGA,YAAA,EAAgC,KAHhC;MAIA,iBAAA,EAAgC,EAJhC;;;;;;MAUA,oBAAA,EAAgC;IAVhC;AAWF,WAAO;EAbS,EAzDlB;;;EA0EA,IAAC,CAAA,eAAD,GAAmB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;WAAY,CAAC,CAAC,iBAAiB,CAAC,MAApB,GAA6B;EAAzC,EA1EnB;;;EA6EA,IAAC,CAAA,uBAAD,GAA2B,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;AACzB,QAAA;IAAA,IAAO,iEAAP;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,CAAA,CAAG,KAAH,CAAS,0BAAT,CAAV,EADR;;AAEA,WAAO;EAHkB,EA7E3B;;;EAmFA,IAAC,CAAA,0BAAD,GAA8B,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;AAC5B,QAAA;IAAA,IAAO,uEAAP;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,CAAA,CAAG,KAAH,CAAS,wCAAT,CAAV,EADR;;AAEA,WAAO,CAAG,CAAA,CAAA;EAHkB,EAnF9B;;;EAyFA,IAAC,CAAA,yBAAD,GAA6B,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA,EAAA;;;;AAI3B,QAAA,QAAA,EAAA;IAAA,MAAA,GAAY,CAAC,CAAC,iBAAiB,CAAC;IAChC,QAAA,GAAY,CAAC,CAAC,iBAAiB,CAAC,MAApB,GAA6B;IACzC,IAAe,MAAA,GAAS,CAAxB;AAAA,aAAO,KAAP;;AACA,WAAO,CAAC,CAAC,iBAAmB,CAAA,QAAA,GAAW,CAAX;EAPD,EAzF7B;;;EAmGA,IAAC,CAAA,eAAD,GAAmB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;AACjB,QAAA;IAAA,CAAA,GAAI,IAAC,CAAA,uBAAD,CAAyB,CAAzB,EAA4B,CAA5B;IACJ,CAAC,CAAC,iBAAiB,CAAC,GAApB,CAAA;AACA,WAAO;EAHU,EAnGnB;;;EAyGA,IAAC,CAAA,gBAAD,GAAoB,QAAA,CAAE,CAAF,EAAK,CAAL,EAAQ,WAAR,CAAA;AAClB,QAAA;IAAA,IAAO,0CAAP;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,CAAA,CAAG,KAAH,CAAS,uBAAT,CAAA,CAAkC,GAAA,CAAI,WAAJ,CAAlC,CAAA,CAAV,EADR;;AAEA,WAAO,CAAG,CAAA,CAAA;EAHQ,EAzGpB;;;EA+GA,IAAC,CAAA,gBAAD,GAAoB,QAAA,CAAE,CAAF,EAAK,CAAL,EAAQ,WAAR,CAAA;IAClB,IAAO,oCAAP;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,CAAA,CAAG,KAAH,CAAS,uBAAT,CAAA,CAAkC,GAAA,CAAI,WAAJ,CAAlC,CAAA,CAAV,EADR;;IAEA,CAAC,CAAC,iBAAiB,CAAC,IAApB,CAAyB,WAAzB;AACA,WAAO;EAJW,EA/GpB;;;EAsHA,IAAC,CAAA,kBAAD,GAAsB,QAAA,CAAE,CAAF,EAAK,CAAL,EAAQ,KAAR,CAAA;AACpB,QAAA,CAAA,EAAA;IAAA,CAAE,CAAF,EAAK,CAAL,EAAQ,MAAR,EAAgB,CAAhB,CAAA,GAAuB;IACvB,IAAG,oCAAH;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,CAAA,CAAG,KAAH,CAAS,qCAAT,CAAA,CAAgD,GAAA,CAAI,MAAM,CAAC,IAAX,CAAhD,CAAA,CAAV,EADR;;IAEA,CAAC,CAAC,aAAe,CAAA,MAAM,CAAC,IAAP,CAAjB,GAAiC;IACjC,IAAC,CAAA,kBAAD,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,MAAM,CAAC,IAAjC;AACA,WAAO;EANa,EAtHtB;;;EA+HA,IAAC,CAAA,kBAAD,GAAsB,QAAA,CAAE,CAAF,EAAK,CAAL,EAAQ,WAAR,CAAA;IACpB,CAAC,CAAC,4BAA8B,CAAA,WAAA,CAAhC,GAAgD;AAChD,WAAO;EAFa,EA/HtB;;;EAoIA,IAAC,CAAA,kBAAD,GAAsB,QAAA,CAAE,CAAF,EAAK,CAAL,EAAQ,WAAR,EAAqB,QAArB,CAAA;AACpB,QAAA,CAAA,EAAA;IAAA,IAAO,8DAAP;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,CAAA,CAAG,KAAH,CAAS,uBAAT,CAAA,CAAkC,GAAA,CAAI,WAAJ,CAAlC,CAAA,CAAV,EADR;;IAEA,CAAA,GAAI,CAAE,QAAF;IACJ,MAAM,CAAC,IAAP,CAAY,CAAZ;AACA,WAAO;EALa,EApItB;;;EA4IA,IAAC,CAAA,mBAAD,GAAuB,QAAA,CAAE,CAAF,EAAK,CAAL,EAAQ,WAAR,EAAqB,QAArB,CAAA;IACrB,CAAC,CAAC,oBAAoB,CAAC,IAAvB,CAA4B,CAAE,WAAF,EAAe,QAAf,CAA5B;AACA,WAAO;EAFc,EA5IvB;;;EAiJA,IAAC,CAAA,kBAAD,GAAsB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;IACpB,IAAG,CAAC,CAAC,oBAAoB,CAAC,MAAvB,GAAgC,CAAnC;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,CAAA,CAAG,KAAH,CAAS,kCAAT,CAAV,EADR;;AAEA,WAAO,CAAC,CAAC,oBAAoB,CAAC,GAAvB,CAAA;EAHa,EAjJtB;;;EAuJA,IAAC,CAAA,gCAAD,GAAoC,QAAA,CAAE,CAAF,EAAK,CAAL,EAAQ,WAAR,CAAA;AAClC,QAAA;IAAA,IAAO,yDAAP;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,CAAA,CAAG,KAAH,CAAS,uBAAT,CAAA,CAAkC,GAAA,CAAI,WAAJ,CAAlC,CAAA,CAAV,EADR;;AAEA,WAAO;EAH2B,EAvJpC;;;EA6JA,IAAC,CAAA,gCAAD,GAAoC,QAAA,CAAE,CAAF,EAAK,CAAL,EAAQ,WAAR,CAAA;AAClC,QAAA;IAAA,IAAO,yDAAP;MACE,KAAA,CAAM,OAAN,EAAe,CAAC,CAAC,4BAAjB;MACA,KAAA,CAAM,OAAN,EAAe,MAAM,CAAC,IAAP,CAAY,CAAC,CAAC,4BAAd,CAAf;MACA,MAAM,IAAI,KAAJ,CAAU,CAAA,CAAA,CAAG,KAAH,CAAS,uBAAT,CAAA,CAAkC,GAAA,CAAI,WAAJ,CAAlC,CAAA,CAAV,EAHR;;AAIA,WAAO;EAL2B,EA7JpC;;;;;EAuKA,IAAC,CAAA,kBAAD,GAAsB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;WAAY,CAAC,CAAC,QAAF,CAAW,QAAA,CAAE,KAAF,CAAA;MAC3C,IAAA,CAAc,MAAA,CAAO,KAAP,EAAc,GAAd,EAAmB,mBAAnB,EAAwC,IAAxC,CAAd;AAAA,eAAA;;aACA,IAAA,CAAK,OAAL,EAAgB,GAAG,CAAC,IAAJ,CAAS,GAAA,CAAI,KAAO,CAAA,CAAA,CAAX,CAAT,CAAhB;IAF2C,CAAX;EAAZ,EAvKtB;;;EA4KA,IAAC,CAAA,kBAAD,GAAsB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;AACpB,QAAA;IAAA,iBAAA,GAAoB;AACpB,WAAO,CAAA,CAAE,CAAE,KAAF,EAAS,IAAT,CAAA,GAAA;AAGP,UAAA,KAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,IAAA;;;MAAA,IAAG,MAAA,CAAO,KAAP,EAAc,GAAd,EAAmB,wBAAnB,CAAH;QACE,CAAE,IAAF,EAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,CAAA,GAA8B;QAC9B,CAAE,MAAF,EAAU,OAAV,CAAA,GAA8B,IAAC,CAAA,sCAAD,CAAwC,CAAxC,EAA2C,KAA3C;AAC9B;UACE,GAAG,CAAC,QAAJ,CAAa,IAAb,EAAmB;YAAE,QAAA,EAAU,QAAZ;YAAsB;UAAtB,CAAnB,EADF;SAAA,cAAA;UAEM;UACJ,IAAA,CAAK,CAAA,sEAAA,CAAA,CAAyE,IAAI,CAAC,OAA9E,CAAsF,EAAtF,CAAL;UACA,IAAA,CAAK,mBAAL;UACA,MAAM,MALR;;QAMA,IAAA,CAAK,KAAA,CAAM,KAAN,CAAL;QACA,IAAA,CAAK,CAAE,GAAF,EAAO,mBAAP,EAA4B,MAA5B,EAAsC,IAAA,CAAK,IAAL,CAAtC,CAAL,EAVF;OAAA,MAAA;;QAaE,IAAA,CAAK,KAAL,EAbF;OAAA;;AAeA,aAAO;IAlBA,CAAF;EAFa,EA5KtB;;;EAmMA,IAAC,CAAA,mBAAD,GAAuB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA,EAAA;;AAErB,WAAO,CAAA,CAAE,CAAE,KAAF,EAAS,IAAT,CAAA,GAAA;MACP,IAAG,MAAA,CAAO,KAAP,EAAc,GAAd,EAAmB,mBAAnB,CAAH;QACE,IAAC,CAAA,kBAAD,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,KAA1B;QACA,IAAA,CAAK,KAAA,CAAM,KAAN,CAAL,EAFF;OAAA,MAAA;QAIE,IAAA,CAAK,KAAL,EAJF;;AAKA,aAAO;IANA,CAAF;EAFc,EAnMvB;;;EA8MA,IAAC,CAAA,sBAAD,GAA0B,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;AACxB,WAAO,CAAA,CAAE,CAAE,KAAF,EAAS,IAAT,CAAA,GAAA;AAGP,UAAA,CAAA,EAAA,CAAA,EAAA,cAAA,EAAA,sBAAA,EAAA,uBAAA,EAAA,wBAAA,EAAA,qBAAA,EAAA,MAAA,EAAA,WAAA,EAAA,4BAAA,EAAA,SAAA;;;MAAA,IAAG,MAAA,CAAO,KAAP,EAAc,GAAd,EAAmB,oBAAnB,CAAH;QACE,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAA,GAAwB,MAAxB;;QAEA,IAAO,gBAAP;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,CAAA,CAAG,KAAH,CAAS,wEAAT,CAAA,CAAiF,GAAA,CAAI,KAAJ,CAAjF,CAAA,CAAV,EADR;;QAEA,IAAC,CAAA,gBAAD,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAC,CAAC,MAA1B;QACA,IAAA,CAAK,KAAA,CAAM,KAAN,CAAL,EANF;;;;OAAA,MAUK,IAAG,MAAA,CAAO,KAAP,EAAc,GAAd,EAAmB,oBAAnB,CAAH;;QAEH,WAAA,GAAgC,IAAC,CAAA,uBAAD,CAAkC,CAAlC,EAAqC,CAArC;QAChC,MAAA,GAAgC,IAAC,CAAA,gBAAD,CAAkC,CAAlC,EAAqC,CAArC,EAAwC,WAAxC;QAChC,4BAAA,GAAgC,IAAC,CAAA,gCAAD,CAAkC,CAAlC,EAAqC,CAArC,EAAwC,WAAxC;QAChC,qBAAA,GAAgC,IAAC,CAAA,yBAAD,CAAkC,CAAlC,EAAqC,CAArC;QAChC,KAAA,CAAM,OAAN,EAAe,4BAAf;QACA,cAAA,GAAgC,UAAU,CAAC,YAAX,CAAwB,MAAxB,EAAgC,4BAAhC,EAA8D,CAAC,CAAC,iBAAhE,EALhC;;QAOA,IAAG,6BAAH;UACE,sBAAA,GAA4B,IAAC,CAAA,0BAAD,CAA4B,CAA5B,EAA+B,CAA/B;UAC5B,wBAAA,GAA4B,IAAC,CAAA,gCAAD,CAAkC,CAAlC,EAAqC,CAArC,EAAwC,qBAAxC;UAC5B,uBAAA,GAA4B,CAAE,sBAAF,EAA0B,GAAA,cAA1B;UAC5B,wBAAwB,CAAC,IAAzB,CAA8B,uBAA9B,EAJF;SAAA,MAAA;UAOiB,KAAA,2BAAA,GAAA;;YAAf,IAAA,CAAK,SAAL;UAAe,CAPjB;SAPA;;QAgBA,IAAA,CAAK,KAAA,CAAM,KAAN,CAAL;QACA,IAAC,CAAA,eAAD,CAAiB,CAAjB,EAAoB,CAApB,EAnBG;OAAA,MAAA;;QAsBH,IAAA,CAAK,KAAL,EAtBG;;AAuBL,aAAO;IApCA,CAAF;EADiB,EA9M1B;;;EAsPA,IAAC,CAAA,cAAD,GAAkB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;AAChB,QAAA,cAAA,EAAA,WAAA,EAAA;IAAA,cAAA,GAAkB;IAClB,WAAA,GAAkB;IAClB,YAAA,GAAkB;AAClB,WAAO,CAAA,CAAE,CAAE,KAAF,EAAS,IAAT,CAAA,GAAA;AACP,UAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA;MAAA,IAAA,CAAyB,IAAC,CAAA,eAAD,CAAiB,CAAjB,EAAoB,CAApB,CAAzB;AAAA,eAAO,IAAA,CAAK,KAAL,EAAP;OAAA;;;;;;MAMA,IAAG,MAAA,CAAO,KAAP,EAAc,GAAd,EAAmB,OAAnB,CAAH;QACE,WAAA,GAAc,IAAC,CAAA,uBAAD,CAA0B,CAA1B,EAA6B,CAA7B,EAAd;;;;QAIA,YAAA,GAA4B;QAC5B,CAAE,IAAF,EAAQ,IAAR,EAAc,CAAd,EAAiB,IAAjB,CAAA,GAA4B;QAC5B,IAAA,CAAA,CAAO,WAAA,IAAO,eAAd,CAAA;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,CAAA,CAAG,KAAH,CAAS,qDAAT,CAAA,CAAgE,GAAA,CAAI,WAAJ,CAAhE,CAAgF,EAAhF,CAAA,CAAoF,EAAA,CAAG,KAAH,CAApF,CAA6F,CAA7F,CAAV,EADR;SANA;;;QAUA,IAAC,CAAA,mBAAD,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,WAA3B,EAAwC,CAAC,CAAC,GAA1C;QACA,cAAA,GAA4B,IAAC,CAAA,kBAAD,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,WAA1B,EAAwC,CAAC,CAAC,GAA1C;AAC5B,eAAO,IAAA,CAAK,KAAA,CAAM,KAAN,CAAL,EAbT;OANA;;MAqBA,IAAG,MAAA,CAAO,KAAP,EAAc,GAAd,EAAmB,OAAnB,CAAH;QACE,YAAA,GAA4B;QAC5B,cAAA,GAA4B;QAC5B,IAAC,CAAA,kBAAD,CAAoB,CAApB,EAAuB,CAAvB;AACA,eAAO,IAAA,CAAK,KAAA,CAAM,KAAN,CAAL,EAJT;OArBA;;MA2BA,IAAG,YAAH;;QAEE,cAAc,CAAC,IAAf,CAAoB,KAApB;AACA,eAAO,KAHT;OA3BA;;;MAiCA,IAAG,CAAE,MAAA,CAAO,KAAP,EAAc,GAAd,EAAmB,MAAnB,CAAF,CAAA,IAAkC,mCAArC;;AAEE,eAAO,KAFT;OAjCA;;;;;;;MA0CA,IAAA,CAAK,KAAL;AACA,aAAO;IA5CA,CAAF;EAJS,EAtPlB;;;EAySA,IAAC,CAAA,sCAAD,GAA0C,QAAA,CAAE,CAAF,EAAK,KAAL,CAAA,EAAA;;;;;;AAMxC,QAAA,CAAA,EAAA;IAAA,EAAA,GAAU,UAAU,CAAC,gBAAX,CAA4B,CAA5B;IACV,EAAE,CAAC,IAAH,GAAU,KAAO,CAAA,CAAA,EADjB;;;IAIA,CAAA,GAAI,QAAA,CAAA,CAAA;MACF,IAAC,CAAA,IAAD,GAAwB,QAAA,CAAE,SAAF,CAAA;eAAiB,UAAU,CAAC,IAAX,CAAiC,EAAjC,EAAqC,SAAS,CAAC,IAAV,CAAe,EAAf,CAArC;MAAjB;MACxB,IAAC,CAAA,KAAD,GAAwB,QAAA,CAAE,SAAF,CAAA;eAAiB,UAAU,CAAC,KAAX,CAAiC,EAAjC,EAAqC,SAAS,CAAC,IAAV,CAAe,EAAf,CAArC;MAAjB;MACxB,IAAC,CAAA,IAAD,GAAwB,QAAA,CAAE,SAAF,CAAA;eAAiB,UAAU,CAAC,IAAX,CAAiC,EAAjC,EAAqC,SAAS,CAAC,IAAV,CAAe,EAAf,CAArC;MAAjB;MACxB,IAAC,CAAA,OAAD,GAAwB,QAAA,CAAE,SAAF,CAAA;eAAiB,UAAU,CAAC,OAAX,CAAiC,EAAjC,EAAqC,SAAS,CAAC,IAAV,CAAe,EAAf,CAArC;MAAjB;MACxB,IAAC,CAAA,MAAD,GAAwB,QAAA,CAAE,SAAF,CAAA;eAAiB,UAAU,CAAC,MAAX,CAAiC,EAAjC,EAAqC,SAAS,CAAC,IAAV,CAAe,EAAf,CAArC;MAAjB;MACxB,IAAC,CAAA,SAAD,GAAwB,QAAA,CAAE,SAAF,CAAA;eAAiB,UAAU,CAAC,SAAX,CAAiC,EAAjC,EAAqC,SAAS,CAAC,IAAV,CAAe,EAAf,CAArC;MAAjB;MACxB,IAAC,CAAA,UAAD,GAAwB,QAAA,CAAE,SAAF,CAAA;eAAiB,UAAU,CAAC,UAAX,CAAiC,EAAjC,EAAqC,SAAS,CAAC,IAAV,CAAe,EAAf,CAArC;MAAjB;MACxB,IAAC,CAAA,WAAD,GAAwB,QAAA,CAAE,SAAF,CAAA;eAAiB,UAAU,CAAC,WAAX,CAAiC,EAAjC,EAAqC,SAAS,CAAC,IAAV,CAAe,EAAf,CAArC;MAAjB;MACxB,IAAC,CAAA,SAAD,GAAwB,QAAA,CAAE,SAAF,CAAA;eAAiB,UAAU,CAAC,SAAX,CAAiC,EAAjC,EAAqC,SAAS,CAAC,IAAV,CAAe,EAAf,CAArC;MAAjB;MACxB,IAAC,CAAA,UAAD,GAAwB,QAAA,CAAE,SAAF,CAAA;eAAiB,UAAU,CAAC,UAAX,CAAiC,EAAjC,EAAqC,SAAS,CAAC,IAAV,CAAe,EAAf,CAArC;MAAjB;MACxB,IAAC,CAAA,WAAD,GAAwB,QAAA,CAAE,SAAF,CAAA;eAAiB,UAAU,CAAC,WAAX,CAAiC,EAAjC,EAAqC,SAAS,CAAC,IAAV,CAAe,EAAf,CAArC;MAAjB;MACxB,IAAC,CAAA,kBAAD,GAAwB,QAAA,CAAE,SAAF,CAAA;eAAiB,UAAU,CAAC,kBAAX,CAAiC,EAAjC,EAAqC,SAAS,CAAC,IAAV,CAAe,EAAf,CAArC;MAAjB;MACxB,IAAC,CAAA,oBAAD,GAAwB,QAAA,CAAE,SAAF,CAAA;eAAiB,UAAU,CAAC,oBAAX,CAAiC,EAAjC,EAAqC,SAAS,CAAC,IAAV,CAAe,EAAf,CAArC;MAAjB;AACxB,aAAO;IAdL,EAJJ;;AAoBA,WAAO,CAAE,EAAF,EAAQ,CAAC,CAAC,KAAF,CAAQ,CAAA,CAAR,CAAR;EA1BiC;AAzS1C",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/TEX-WRITER/MKTSTABLE'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nECS                       = require './eval-cs'\nMKTS                      = require './main'\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nunstamp                   = MD_READER.unstamp.bind     MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\njr                        = JSON.stringify\n#...........................................................................................................\nMKTS_TABLE                = require './mkts-table'\nMKTS.MACRO_ESCAPER.register_raw_tag 'mkts-table-description'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$main = ( S ) ->\n  #.........................................................................................................\n  ### TAINT tie local state to events to avoid difficulties with non-synchronous / non-lockstepping\n  transforms ###\n  L = new_local_state()\n  return D.TEE.from_pipeline [\n    @$parse_description               S, L\n    @$store_layout_event              S, L\n    @$handle_content_events           S, L\n    # D.$observe ( event ) -> info '23993', ( CND.grey '--------->' ), jr event\n    @$handle_fields                   S, L\n    @$dump_table_layout               S, L\n    ]\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nnew_local_state = ->\n  R =\n    selectors_and_content_events:   {}\n    layout_events:                  {}\n    content_buffer:                 null\n    within_field:                   false\n    layout_name_stack:              []\n    ### TAINT we use this attribute to communicate the current selector from `$handle_fields()` back to\n    `$handle_content_events()`; this works b/c we're assuming that all event handling is happening in\n    lockstep. It might stop working as soon as the lockstepping is broken by an intervening asynchronous\n    or buffering stream transform. ###\n    ### TAINT used to store `layout_name` as well, already in `layout_name_stack` ###\n    field_selector_stack:           []\n  return R\n\n\n#-----------------------------------------------------------------------------------------------------------\n@is_within_table = ( S, L ) -> L.layout_name_stack.length > 0\n\n#-----------------------------------------------------------------------------------------------------------\n@get_current_layout_name = ( S, L ) ->\n  unless ( R = L.layout_name_stack[ L.layout_name_stack.length - 1 ] )?\n    throw new Error \"#{badge} µ79868 layout stack empty\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@get_current_field_selector = ( S, L ) ->\n  unless ( R = L.field_selector_stack[ L.field_selector_stack.length - 1 ] )?\n    throw new Error \"#{badge} µ58212 field_selector_stack stack empty\"\n  return R[ 1 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@get_enclosing_layout_name = ( S, L ) ->\n  ### I've come to thoroughly dislike zero-based indexing paired with non-existing negative indexes.\n  We all should be writing `d[ 1 ]`, `d[ 2 ]` for the first and second elements from the left, and\n  `d[ -1 ]`, `d[ -2 ]` for the first and second elements from the right end of a list. ###\n  length    = L.layout_name_stack.length\n  last_idx  = L.layout_name_stack.length - 1\n  return null if length < 2\n  return L.layout_name_stack[ last_idx - 1 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@pop_layout_name = ( S, L ) ->\n  R = @get_current_layout_name S, L\n  L.layout_name_stack.pop()\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@layout_from_name = ( S, L, layout_name ) ->\n  unless ( R = L.layout_events[ layout_name ] )?\n    throw new Error \"#{badge} µ47753 unknown layout #{rpr layout_name}\"\n  return R[ 2 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@push_layout_name = ( S, L, layout_name ) ->\n  unless L.layout_events[ layout_name ]?\n    throw new Error \"#{badge} µ42558 unknown layout #{rpr layout_name}\"\n  L.layout_name_stack.push layout_name\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@store_layout_event = ( S, L, event ) ->\n  [ _, _, layout, _, ] = event\n  if L.layout_events[ layout.name ]?\n    throw new Error \"#{badge} µ36339 refusing to re-define layout #{rpr layout.name}\"\n  L.layout_events[ layout.name ] = event\n  @_initialize_layout S, L, layout.name\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_initialize_layout = ( S, L, layout_name ) ->\n  L.selectors_and_content_events[ layout_name ] = []\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@new_content_buffer = ( S, L, layout_name, selector ) ->\n  unless ( target = L.selectors_and_content_events[ layout_name ] )?\n    throw new Error \"#{badge} µ24692 unknown layout #{rpr layout_name}\"\n  R = [ selector, ]\n  target.push R\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@push_field_selector = ( S, L, layout_name, selector ) ->\n  L.field_selector_stack.push [ layout_name, selector, ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@pop_field_selector = ( S, L ) ->\n  if L.field_selector_stack.length < 1\n    throw new Error \"#{badge} µ49782 field selector stack empty\"\n  return L.field_selector_stack.pop()\n\n#-----------------------------------------------------------------------------------------------------------\n@content_buffers_from_layout_name = ( S, L, layout_name ) ->\n  unless ( R = L.selectors_and_content_events[ layout_name ] )?\n    throw new Error \"#{badge} µ65671 unknown layout #{rpr layout_name}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@get_selectors_and_content_events = ( S, L, layout_name ) ->\n  unless ( R = L.selectors_and_content_events[ layout_name ] )?\n    debug '88733', L.selectors_and_content_events\n    debug '88733', Object.keys L.selectors_and_content_events\n    throw new Error \"#{badge} µ95392 unknown layout #{rpr layout_name}\"\n  return R\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$dump_table_layout = ( S, L ) -> D.$observe ( event ) ->\n  return unless select event, '.', 'MKTS/TABLE/layout', true\n  help '99871', ( CND.blue rpr event[ 2 ] )\n\n#-----------------------------------------------------------------------------------------------------------\n@$parse_description = ( S, L ) ->\n  within_mkts_table = false\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    ### TAINT change tag to sth like `mkts-table-layout` ###\n    if select event, '.', 'mkts-table-description'\n      [ type, name, text, meta, ] = event\n      [ layout, sandbox, ]        = @get_mkts_table_description_and_sandbox S, event\n      try\n        ECS.evaluate text, { language: 'coffee', sandbox, }\n      catch error\n        warn \"when trying to evaluate CS source text for <mkts-table> (source line ##{meta.line_nr}),\"\n        warn \"an error occurred\"\n        throw error\n      send stamp event\n      send [ '.', 'MKTS/TABLE/layout', layout, ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$store_layout_event = ( S, L ) ->\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '.', 'MKTS/TABLE/layout'\n      @store_layout_event S, L, event\n      send stamp event\n    else\n      send event\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$handle_content_events = ( S, L ) ->\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    ### When table contents start, we register that and do not send anything: ###\n    if select event, '(', 'mkts-table-content'\n      [ _, _, Q, _, ]       = event\n      ### OBS attribute is named 'layout' but contains layout name ###\n      unless Q.layout?\n        throw new Error \"#{badge} µ29245 missing required attribute `layout` for <mkts-table-content>: #{rpr event}\"\n      @push_layout_name S, L, Q.layout\n      send stamp event\n    #.......................................................................................................\n    ### When table contents end, we send all the sub-events needed to draw the table, and then the\n    description-end and description events: ###\n    else if select event, ')', 'mkts-table-content'\n      #.....................................................................................................\n      layout_name                   = @get_current_layout_name          S, L\n      layout                        = @layout_from_name                 S, L, layout_name\n      selectors_and_content_events  = @get_selectors_and_content_events S, L, layout_name\n      enclosing_layout_name         = @get_enclosing_layout_name        S, L\n      debug '27726', selectors_and_content_events\n      content_events                = MKTS_TABLE._walk_events layout, selectors_and_content_events, L.layout_name_stack\n      #.....................................................................................................\n      if enclosing_layout_name?\n        current_field_selector    = @get_current_field_selector S, L\n        enclosing_content_events  = @content_buffers_from_layout_name S, L, enclosing_layout_name\n        enclosed_content_events   = [ current_field_selector, content_events..., ]\n        enclosing_content_events.push enclosed_content_events\n      #.....................................................................................................\n      else\n        send sub_event for sub_event from content_events\n      #.....................................................................................................\n      send stamp event\n      @pop_layout_name S, L\n    #.......................................................................................................\n    else\n      send event\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$handle_fields = ( S, L ) ->\n  content_buffer  = null\n  layout_name     = null\n  within_field    = false\n  return $ ( event, send ) =>\n    return send event unless @is_within_table S, L\n    # debug '43474', ( CND.truth @is_within_table S, L ), jr event\n    #.......................................................................................................\n    ### If we are within table contents, we collect all field events and their contents as table field\n    contents; outside that, whitespace events are ignored, and other material generates errors: ###\n    #.......................................................................................................\n    if select event, '(', 'field'\n      layout_name = @get_current_layout_name  S, L\n      ### TAINT should throw error when <field> nested within <field> *without* intervening <mkts-table-content> ###\n      # if within_field\n      #   throw new Error \"#{badge} µ39418 detected nested <field> tag (#{jr event}) in table #{rpr layout_name}\"\n      within_field              = true\n      [ type, name, Q, meta, ]  = event\n      unless Q? and Q.key?\n        throw new Error \"#{badge} µ33810 missing <field> tag attribute 'key' in table #{rpr layout_name} (#{jr event})\"\n      ### TAINT this is exactly the kind of dangerous 'could have happened anywhere, anytime' state mutation\n      that advocates of immutable state are warning us about: ###\n      @push_field_selector S, L, layout_name, Q.key\n      content_buffer            = @new_content_buffer S, L, layout_name,  Q.key\n      return send stamp event\n    #.......................................................................................................\n    if select event, ')', 'field'\n      within_field              = false\n      content_buffer            = null\n      @pop_field_selector S, L\n      return send stamp event\n    #.......................................................................................................\n    if within_field\n      # debug '37734', layout_name, jr event\n      content_buffer.push event\n      return null\n    #.......................................................................................................\n    ### Ignore whitespace between fields: ###\n    if ( select event, '.', 'text' ) and ( event[ 2 ].match /^\\s*$/ )?\n      # whisper '27762', jr event\n      return null\n    #.......................................................................................................\n    ### TAINT should be a fail, not an exception: ###\n    # throw new Error \"detected illegal content: #{jr event}\"\n    # warn '27762', ( within_field ), jr event\n    # return null\n    #.......................................................................................................\n    send event\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_mkts_table_description_and_sandbox = ( S, event ) ->\n  ### This method makes the format-defining names of the MKTS Table Formatter available at the top level,\n  curried so that the current context (`me`) that contains the processed details as defined so far as well\n  as data on the general typesetting context. All names are templating functions, such that each may be\n  called as `grid'4x4'`, `merge'[a1]..[a4]'` and so on from the source within the MKTS document where the\n  table is being defined. ###\n  me      = MKTS_TABLE._new_description S\n  me.meta = event[ 3 ]\n  ### ... more typesetting detail attached here ... ###\n  #.........................................................................................................\n  f = ->\n    @name                 = ( raw_parts ) -> MKTS_TABLE.name                  me, raw_parts.join ''\n    @debug                = ( raw_parts ) -> MKTS_TABLE.debug                 me, raw_parts.join ''\n    @grid                 = ( raw_parts ) -> MKTS_TABLE.grid                  me, raw_parts.join ''\n    @padding              = ( raw_parts ) -> MKTS_TABLE.padding               me, raw_parts.join ''\n    @margin               = ( raw_parts ) -> MKTS_TABLE.margin                me, raw_parts.join ''\n    @unitwidth            = ( raw_parts ) -> MKTS_TABLE.unitwidth             me, raw_parts.join ''\n    @unitheight           = ( raw_parts ) -> MKTS_TABLE.unitheight            me, raw_parts.join ''\n    @columnwidth          = ( raw_parts ) -> MKTS_TABLE.columnwidth           me, raw_parts.join ''\n    @rowheight            = ( raw_parts ) -> MKTS_TABLE.rowheight             me, raw_parts.join ''\n    @fieldcells           = ( raw_parts ) -> MKTS_TABLE.fieldcells            me, raw_parts.join ''\n    @fieldborder          = ( raw_parts ) -> MKTS_TABLE.fieldborder           me, raw_parts.join ''\n    @fieldalignvertical   = ( raw_parts ) -> MKTS_TABLE.fieldalignvertical    me, raw_parts.join ''\n    @fieldalignhorizontal = ( raw_parts ) -> MKTS_TABLE.fieldalignhorizontal  me, raw_parts.join ''\n    return @\n  #.........................................................................................................\n  return [ me, ( f.apply {} ), ]\n\n\n\n"
  ]
}