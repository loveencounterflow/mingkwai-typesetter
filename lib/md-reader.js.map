{
  "version": 3,
  "file": "md-reader.js",
  "sourceRoot": "..",
  "sources": [
    "src/md-reader.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MK/TS/MD-READER'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#-----------------------------------------------------------------------------------------------------------\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n# $async                    = D.remit_async.bind D\n#...........................................................................................................\nMarkdown_parser           = require 'markdown-it'\n# Html_parser               = ( require 'htmlparser2' ).Parser\nnew_md_inline_plugin      = require 'markdown-it-regexp'\n#...........................................................................................................\nHELPERS                   = require './helpers'\n#...........................................................................................................\nmisfit                    = Symbol 'misfit'\nMKTS                      = require './main'\n@TYPOFIX                  = require './md-reader-typofix'\n#...........................................................................................................\nassign                    = Object.assign\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_badge = ( delta = 0 ) ->\n  ### Experimental, to be used with remarks when things got omitted or inserted. ###\n  caller_info = CND.get_caller_info delta + 2\n  # filename    = njs_path.basename caller_info[ 'route' ]\n  # line_nr     = caller_info[ 'line-nr' ]\n  method_name = caller_info[ 'function-name' ] ? caller_info[ 'method-name' ]\n  method_name = method_name.replace /^__dirname\\./, ''\n  # return \"#{filename}/#{method_name}\"\n  return method_name\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_remark = ( delta = 0 ) ->\n  my_badge = @_get_badge delta + 1\n  return ( kind, message, meta ) =>\n    return @stamp [ '#', kind, message, ( @copy meta, { badge: my_badge, } ), ]\n  # send stamp [ '#', 'insert', my_badge, \"inserting `p` tag\", ( copy meta ), ]\n\n\n\n#===========================================================================================================\n# MD / HTML PARSING\n#-----------------------------------------------------------------------------------------------------------\n@_new_markdown_parser = ->\n  #.........................................................................................................\n  ### https://markdown-it.github.io/markdown-it/#MarkdownIt.new ###\n  # feature_set = 'commonmark'\n  feature_set = 'zero'\n  #.........................................................................................................\n  settings    =\n    html:           yes,            # Enable HTML tags in source\n    xhtmlOut:       no,             # Use '/' to close single tags (<br />)\n    breaks:         no,             # Convert '\\n' in paragraphs into <br>\n    langPrefix:     'language-',    # CSS language prefix for fenced blocks\n    linkify:        yes,            # Autoconvert URL-like text to links\n    typographer:    yes,\n    quotes:         '“”‘’'\n    # quotes:         '\"\"\\'\\''\n    # quotes:         '\"\"`\\''\n    # quotes:         [ '<<', '>>', '!!!', '???', ]\n    # quotes:   ['«\\xa0', '\\xa0»', '‹\\xa0', '\\xa0›'] # French\n  #.........................................................................................................\n  R = new Markdown_parser feature_set, settings\n  # R = new Markdown_parser settings\n  R\n    .enable 'text'\n    # .enable 'newline'\n    .enable 'escape'\n    .enable 'backticks'\n    .enable 'strikethrough'\n    .enable 'emphasis'\n    .enable 'link'\n    .enable 'image'\n    .enable 'autolink'\n    .enable 'html_inline'\n    .enable 'entity'\n    # .enable 'code'\n    .enable 'fence'\n    .enable 'blockquote'\n    # .enable 'hr'\n    .enable 'list'\n    .enable 'reference'\n    .enable 'heading'\n    # .enable 'lheading'\n    .enable 'html_block'\n    .enable 'table'\n    .enable 'paragraph'\n    .enable 'normalize'\n    .enable 'block'\n    .enable 'inline'\n    # .enable 'linkify'\n    # .enable 'replacements'\n    .enable 'smartquotes'\n  #.......................................................................................................\n  R.use require 'markdown-it-footnote'\n  # R.use require 'markdown-it-multimd-table'\n  # R.use require 'markdown-it-mark'\n  # R.use require 'markdown-it-sub'\n  # R.use require 'markdown-it-sup'\n  #.......................................................................................................\n  # ### sample plugin ###\n  # user_pattern  = /@(\\w+)/\n  # user_handler  = ( match, utils ) ->\n  #   url = 'http://example.org/u/' + match[ 1 ]\n  #   return '<a href=\"' + utils.escape(url) + '\">' + utils.escape(match[1]) + '</a>'\n  # user_plugin = new_md_inline_plugin user_pattern, user_handler\n  # R.use user_plugin\n  #.......................................................................................................\n  return R\n\n\n#-----------------------------------------------------------------------------------------------------------\nget_parse_html_methods = ->\n  PARSE5      = require 'parse5'\n  get_message = ( source ) -> \"expected single opening node, got #{rpr source}\"\n  R           = {}\n  #.........................................................................................................\n  _cast_attribute_value = ( x ) -> if x is '' then true else x\n  #.........................................................................................................\n  _resolve_html_attributes = ( facets ) ->\n    assign {}, ( { \"#{facet.name}\": ( _cast_attribute_value facet.value ) } for facet in facets )...\n  #.........................................................................................................\n  R[ '_parse_html_open_tag' ] = ( source ) ->\n    tree    = PARSE5.parseFragment source\n    throw new Error get_message source unless ( cns = tree[ 'childNodes' ] ).length is 1\n    cn = cns[ 0 ]\n    throw new Error get_message source unless cn[ 'childNodes' ]?.length is 0\n    return [ 'begin', cn[ 'tagName' ], ( _resolve_html_attributes cn[ 'attrs' ] ), ]\n    # return [ 'begin', cn[ 'tagName' ], cn[ 'attrs' ][ 0 ] ? {}, ]\n  #.........................................................................................................\n  R[ '_parse_html_block' ] = ( source ) ->\n    tree    = PARSE5.parseFragment source\n    debug '@88817', tree\n    return null\n  #.........................................................................................................\n  return R\n#...........................................................................................................\nparse_methods = get_parse_html_methods()\n@_parse_html_open_tag = parse_methods[ '_parse_html_open_tag' ]\n@_parse_html_block    = parse_methods[ '_parse_html_block'    ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_parse_html_tag = ( source ) ->\n  if ( match = source.match @_parse_html_tag.close_tag_pattern )?\n    return [ 'end', match[ 1 ], ]\n  if ( match = source.match @_parse_html_tag.comment_pattern )?\n    return [ 'comment', 'comment', match[ 1 ], ]\n  return @_parse_html_open_tag source\n@_parse_html_tag.close_tag_pattern   = /^<\\/([^>]+)>$/\n@_parse_html_tag.comment_pattern     = /^<!--([\\s\\S]*)-->$/\n\n\n#===========================================================================================================\n# FENCES\n#-----------------------------------------------------------------------------------------------------------\n@FENCES = {}\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT moving to parentheses-only syntax; note that most of the `FENCES` submodule can then go ###\n@FENCES.left    = [ '(', ]\n@FENCES.right   = [ ')', ]\n@FENCES.pairs   =\n  '(':  ')'\n  ')':  '('\n\n#-----------------------------------------------------------------------------------------------------------\n@FENCES._get_opposite = ( fence, fallback ) =>\n  unless ( R = @FENCES.pairs[ fence ] )?\n    return fallback unless fallback is undefined\n    throw new Error \"unknown fence: #{rpr fence}\"\n  return R\n\n#===========================================================================================================\n# TRACKER\n#-----------------------------------------------------------------------------------------------------------\n@TRACKER = {}\n\n#-----------------------------------------------------------------------------------------------------------\ntracker_pattern = /// ^\n    ( [     .!$(  ]? )\n    ( [^ \\s .!$() ]* )\n    ( [         ) ]? )\n    $ ///\n\n#-----------------------------------------------------------------------------------------------------------\n@FENCES.parse = ( pattern, settings ) =>\n  left_fence  = null\n  name        = null\n  right_fence = null\n  symmetric   = settings?[ 'symmetric' ] ? yes\n  #.........................................................................................................\n  if ( not pattern? ) or pattern.length is 0\n    throw new Error \"pattern must be non-empty, got #{rpr pattern}\"\n  #.........................................................................................................\n  match = pattern.match @TRACKER._tracker_pattern\n  throw new Error \"not a valid pattern: #{rpr pattern}\" unless match?\n  #.........................................................................................................\n  [ _, left_fence, name, right_fence, ] = match\n  left_fence  = null if  left_fence.length is 0\n  name        = null if        name.length is 0\n  right_fence = null if right_fence.length is 0\n  #.........................................................................................................\n  if left_fence is '.'\n    ### Can not have a right fence if left fence is a dot ###\n    if right_fence?\n      throw new Error \"fence '.' can not have right fence, got #{rpr pattern}\"\n  #.........................................................................................................\n  else\n    ### Except for dot fence, must always have no fence or both fences in case `symmetric` is set ###\n    if symmetric\n      if ( left_fence? and not right_fence? ) or ( right_fence? and not left_fence? )\n        throw new Error \"unmatched fence in #{rpr pattern}\"\n  #.........................................................................................................\n  if left_fence? and left_fence isnt '.'\n    ### Complain about unknown left fences ###\n    unless left_fence in @FENCES.left\n      throw new Error \"illegal left_fence in pattern #{rpr pattern}\"\n    if right_fence?\n      ### Complain about non-matching fences ###\n      unless ( @FENCES._get_opposite left_fence, null ) is right_fence\n        throw new Error \"fences don't match in pattern #{rpr pattern}\"\n  if right_fence?\n    ### Complain about unknown right fences ###\n    unless right_fence in @FENCES.right\n      throw new Error \"illegal right_fence in pattern #{rpr pattern}\"\n  #.........................................................................................................\n  return [ left_fence, name, right_fence, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@TRACKER._tracker_pattern = tracker_pattern\n\n#-----------------------------------------------------------------------------------------------------------\n@TRACKER.new_tracker = ( patterns... ) =>\n  _MKTS = @\n  #.........................................................................................................\n  self = ( event ) ->\n    # CND.dir self\n    # debug '@763', \"tracking event #{rpr event}\"\n    for pattern, state of self._states\n      { parts } = state\n      continue unless _MKTS.select event, parts...\n      [ [ left_fence, right_fence, ], pattern_name, ] = parts\n      [ type, event_name, ]                           = event\n      if type is left_fence\n        # debug '@1', pattern, yes\n        self._enter state\n      else\n        # debug '@2', pattern, no\n        self._leave state\n        ### TAINT shouldn't throw error but issue warning remark ###\n        throw new Error \"too many right fences: #{rpr event}\" if state[ 'count' ] < 0\n    return event\n  #.........................................................................................................\n  self._states = {}\n  #.........................................................................................................\n  self._get_state = ( pattern ) ->\n    throw new Error \"untracked pattern #{rpr pattern}\" unless ( R = self._states[ pattern ] )?\n    return R\n  #.........................................................................................................\n  self.within = ( patterns... ) ->\n    for pattern in patterns\n      return true if self._within pattern\n    return false\n  self._within  = ( pattern ) -> ( self._get_state pattern )[ 'count' ] > 0\n  #.........................................................................................................\n  self.enter    = ( pattern ) -> self._enter self._get_state pattern\n  self.leave    = ( pattern ) -> self._leave self._get_state pattern\n  self._enter   = ( state   ) -> state[ 'count' ] += +1\n  ### TAINT should validate count when leaving ###\n  self._leave   = ( state   ) -> state[ 'count' ] += -1\n  #.........................................................................................................\n  do ->\n    for pattern in patterns\n      [ left_fence, pattern_name, right_fence, ]  = _MKTS.FENCES.parse pattern\n      state =\n        parts:    [ [ left_fence, right_fence, ], pattern_name, ]\n        count:    0\n      self._states[ pattern ] = state\n  #.........................................................................................................\n  return self\n\n\n#===========================================================================================================\n# _PRE (PREPROCESSING)\n#-----------------------------------------------------------------------------------------------------------\n@_PRE = {}\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$flatten_inline_tokens = ( S ) =>\n  return $ ( token, send ) ->\n    if ( type = token[ 'type' ] ) is 'inline'\n      send sub_token for sub_token in token[ 'children' ]\n    else\n      send token\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$flatten_image_tokens = ( S ) =>\n  return $ ( token, send ) ->\n    if ( type = token[ 'type' ] ) is 'image'\n      src = null\n      for [ attribute_name, attribute_value, ] in token[ 'attrs' ]\n        if attribute_name is 'src'\n          src = attribute_value\n          break\n      send { type: 'image_open',  src, map: token[ 'map' ], }\n      send sub_token for sub_token in token[ 'children' ]\n      send { type: 'image_close', src, map: token[ 'map' ], }\n    else\n      send token\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$reinject_html_blocks = ( S ) =>\n  ### re-inject HTML blocks ###\n  md_parser   = @_new_markdown_parser()\n  return $ ( token, send ) =>\n    { type, map, } = token\n    return send token unless type is 'html_block'\n    ### TAINT `map` location data is borked with this method ###\n    ### add extraneous text content; this causes the parser to parse the HTML block as a paragraph\n    with some inline HTML: ###\n    XXX_source  = \"XXX\" + token[ 'content' ]\n    debug '33392-1', token\n    debug '33392-2', XXX_source\n    ### for `environment` see https://markdown-it.github.io/markdown-it/#MarkdownIt.parse ###\n    ### TAINT what to do with useful data appearing in `environment`? ###\n    environment = {}\n    tokens      = md_parser.parse XXX_source, environment\n    ### remove extraneous text content: ###\n    removed     = tokens[ 1 ]?[ 'children' ]?.splice 0, 1\n    unless removed[ 0 ]?[ 'content' ] is \"XXX\"\n      debug '29282', \"offending token:\", token\n      throw new Error \"\"\"\n        should never happen (1):\n        error in MD-READER _PRE.$reinject_html_blocks\"\"\"\n    S.confluence.write token for token in tokens\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$rewrite_markdownit_tokens = ( S ) =>\n  unknown_tokens        = []\n  is_first              = yes\n  last_map              = [ 0, 0, ]\n  _send                 = null\n  remark                = @_get_remark()\n  within_footnote_block = false\n  end_token             = Symbol.for 'end'\n  last_link_href        = null\n  #.........................................................................................................\n  send_unknown = ( token, meta ) =>\n    { type, } = token\n    _send [ '?', type, token[ 'content' ], meta, ]\n    unknown_tokens.push type unless type in unknown_tokens\n  #.........................................................................................................\n  # return $ ( token, send, end ) =>\n  return $ ( token, send ) =>\n    # info '36372', JSON.stringify token\n    _send = send\n    #.......................................................................................................\n    if token is end_token\n      if unknown_tokens.length > 0\n        send remark 'warn', \"unknown tokens: #{unknown_tokens.sort().join ', '}\", {}\n      if is_first\n        is_first = no\n        send [ '(', 'document', null, {}, ]\n      send [ ')', 'document', null, {}, ]\n      setImmediate => send.end()\n    else if CND.isa_list token\n      ### TAINT this clause shouldn't be here; we should target resends (which could be source texts\n      or MKTS events) to appropriate insertion points in the stream ###\n      ### pass through re-injected MKTS events ###\n      send token\n    else\n      { type\n        map\n        markup }      = token\n      map            ?= last_map\n      line_nr         = ( map[ 0 ] ? 0 ) + 1\n      col_nr          = ( map[ 1 ] ? 0 ) + 1\n      #.....................................................................................................\n      meta = {\n        line_nr\n        col_nr\n        markup\n        }\n      if is_first\n        is_first = no\n        send [ '(', 'document', null, meta, ]\n      # #.....................................................................................................\n      # if type in [\n      #   'footnote_ref',\n      #   'footnote_open', 'footnote_close',\n      #   'footnote_anchor',\n      #   'footnote_block_open', 'footnote_block_close', ]\n      #   whisper '@a20g', token[ 'type' ]\n      #.....................................................................................................\n      if type is 'footnote_block_open'  then within_footnote_block = yes\n      #.....................................................................................................\n      if within_footnote_block or not S.has_ended\n        # urge '@a20g', token[ 'type' ]#, within_footnote_block\n        switch type\n          # blocks\n          when 'paragraph_open'     then send @hide [ '~', 'start-paragraph', null, meta, ]\n          when 'paragraph_close'    then send [ '.', 'p',             null,                         meta, ]\n          when 'bullet_list_open'   then send [ '(', 'ul',            null,                         meta, ]\n          when 'bullet_list_close'  then send [ ')', 'ul',            null,                         meta, ]\n          when 'list_item_open'     then send [ '(', 'li',            null,                         meta, ]\n          when 'list_item_close'    then send [ ')', 'li',            null,                         meta, ]\n          when 'blockquote_open'    then send [ '(', 'blockquote',    null,                         meta, ]\n          when 'blockquote_close'   then send [ ')', 'blockquote',    null,                         meta, ]\n          # inlines\n          # singles\n          when 'text'               then send [ '.', 'text',          token[ 'content' ],           meta, ]\n          when 'hr'                 then send [ '.', 'hr',            token[ 'markup' ],            meta, ]\n          #.................................................................................................\n          # specials\n          #.................................................................................................\n          # when 'strong_open'        then send [ '(', 'strong',        null,                         meta, ]\n          # when 'strong_close'       then send [ ')', 'strong',        null,                         meta, ]\n          # when 'em_open'            then send [ '(', 'em',            null,                         meta, ]\n          # when 'em_close'           then send [ ')', 'em',            null,                         meta, ]\n          when 'strong_open', 'strong_close', 'em_open', 'em_close'\n            type = if token[ 'type' ].endsWith 'open' then '(' else ')'\n            name = switch token[ 'markup' ]\n              when '*'  then 'em'\n              when '**' then 'strong'\n              when '_'  then 'smallcaps-lower'\n              when '__' then 'smallcaps-upper'\n            send [ type, name, null, meta, ]\n          when 'heading_open'\n            h_level = parseInt token[ 'tag' ][ 1 ], 10\n            # urge '44356', [ '(', 'h', h_level, meta, ]\n            send [ '(', 'h', h_level, meta, ]\n          #.................................................................................................\n          when 'heading_close'\n            h_level = parseInt token[ 'tag' ][ 1 ], 10\n            send [ ')', 'h', h_level, meta, ]\n          #.................................................................................................\n          when 'link_open'\n            ### NB markdown-it does not support nested link markup a la `xxx [333 [444](555) 666](777)`;\n            as such, we have only to recall the most recent link target when the linking span is closed. ###\n            for [ attribute_name, attribute_value, ] in token[ 'attrs' ]\n              if attribute_name is 'href'\n                last_link_href = attribute_value\n                break\n            send [ '(', 'link', last_link_href, meta, ]\n          #  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n          when 'link_close'\n            send [ ')', 'link', last_link_href, meta, ]\n            last_link_href = null\n          #.................................................................................................\n          when 'image_open'\n            meta[ 'src' ] = token[ 'src' ]\n            send [ '(', 'image', null, meta, ]\n          #  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n          when 'image_close'\n            meta[ 'src' ] = token[ 'src' ]\n            send [ ')', 'image', null, meta, ]\n          #.................................................................................................\n          when 'code_inline'\n            text_meta             = ( @copy meta )\n            text_meta[ 'markup' ] = ''\n            send [ '(', 'code-span',  null,                       meta,   ]\n            send [ '.', 'text',       token[ 'content' ],    text_meta,   ]\n            send [ ')', 'code-span',  null,               ( @copy meta ),  ]\n          #.................................................................................................\n          when 'footnote_ref'\n            id = token[ 'meta' ][ 'id' ]\n            send [ '.', 'footnote-ref', id, meta, ]\n          #  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n          when 'footnote_open'\n            id = token[ 'meta' ][ 'id' ]\n            send [ '(', 'footnote-def', id, meta, ]\n          #  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n          when 'footnote_close'\n            send [ ')', 'footnote-def', null, meta, ]\n          #  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n          when 'footnote_anchor'\n            null\n            # send remark 'drop', \"footnote anchor is dispensable\", ( @copy meta )\n          #  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n          when 'footnote_block_open', 'footnote_block_close'\n            null\n            # send remark 'drop', \"footnote block processed\", ( @copy meta )\n          #.................................................................................................\n          when 'table_open', 'table_close', 'tbody_open', 'tbody_close', 'td_open', 'td_close', 'th_open', \\\n            'th_close', 'thead_open', 'thead_close', 'tr_open', 'tr_close'\n              # debug '982342', token\n              if type is 'th_open' and token[ 'attrs' ]?\n                for [ attribute_name, attribute_value, ] in token[ 'attrs' ]\n                  if attribute_name is 'style'\n                    ( meta[ 'table' ]?= {} )[ 'style' ] = attribute_value\n                    break\n              [ tag, position, ] = type.split '_'\n              send [ ( if position is 'open' then '(' else ')' ), tag, null, meta, ]\n          #.................................................................................................\n          when 'html_block'\n            debug '29281', \"offending token:\", token\n            throw new Error \"should never happen (2)\"\n          #.................................................................................................\n          when 'fence'\n            switch token[ 'tag' ]\n              when 'code'\n                language_name = token[ 'info' ]\n                language_name = 'text' if language_name.length is 0\n                send [ '(', 'code', language_name,              meta,    ]\n                send [ '.', 'text', token[ 'content' ], ( @copy meta ),  ]\n                send [ ')', 'code', language_name,      ( @copy meta ),  ]\n              else send_unknown token, meta\n          #.................................................................................................\n          when 'html_inline'\n            [ position, name, extra, ] = @_parse_html_tag token[ 'content' ]\n            switch position\n              when 'comment'\n                send [ '.', 'comment', extra.trim(), meta, ]\n              when 'begin'\n                unless name is 'p'\n                  send [ '(', name, extra, meta, ]\n              when 'end'\n                if name is 'p' then send [ '.', name, null, meta, ]\n                else                send [ ')', name, null, meta, ]\n              else throw new Error \"unknown HTML tag position #{rpr position}\"\n          #.................................................................................................\n          else\n            # debug '@26.05', token\n            send_unknown token, meta\n        #...................................................................................................\n        last_map = map\n      #.....................................................................................................\n      if type is 'footnote_block_close' then within_footnote_block = no\n    # #.......................................................................................................\n    # if end?\n    #   if unknown_tokens.length > 0\n    #     send remark 'warn', \"unknown tokens: #{unknown_tokens.sort().join ', '}\", {}\n    #   send [ ')', 'document', null, {}, ]\n    #   # setImmediate => end()\n    #   setTimeout ( => end() ), 1000\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$issue_administrative_events = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, name, text, meta, ] = event\n    #.......................................................................................................\n    if @select event, '(', 'document'\n      send [ '~', 'start', null, ( @copy meta ), ]\n      send [ '~', 'flush', null, ( @copy meta ), ]\n      send event\n    #.......................................................................................................\n    else if @select event, ')', 'document'\n      send event\n      send [ '~', 'stop', null, ( @copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$process_end_command = ( S ) =>\n  S.has_ended   = no\n  remark        = @_get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    # [ type, name, text, meta, ] = event\n    if @select event, '!', 'end'\n      if not S.has_ended\n        [ _, _, _, meta, ]    = event\n        { line_nr, }          = meta\n        ### TAINT consider to re-send `document>` ###\n        send @stamp event\n        send remark 'info', \"encountered `<<!end>>` on line ##{line_nr}\", @copy meta\n        S.has_ended = yes\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$consolidate_tables_1  = ( S ) =>\n  ### TAINT assumes unnested tables without merged cells ###\n  track         = @TRACKER.new_tracker '(table)'\n  collector     = []\n  collecting    = no\n  col_count     = null\n  alignments    = null\n  description   = null\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, name, text, meta, ] = event\n    within_table                = track.within '(table)'\n    track event\n    #.......................................................................................................\n    if @select event, '(', 'table'\n      return send [ '.', 'warning', \"detected nested tables\", ( @copy meta ), ] if collecting\n      collecting        = yes\n      alignments        = []\n      description       = {}\n      meta[ 'table' ]  ?= description\n      collector.push event\n    #.......................................................................................................\n    else if collecting\n      #.....................................................................................................\n      if @select event, '(', [ 'td', 'th', ]\n        collector.push event\n        col_count += +1\n        ### TAINT relying on very specific format detail here; need `{ style: 'text-align:xxx' }` ###\n        style = meta[ 'table' ]?[ 'style' ] ? 'text-align:left'\n        [ style_name, style_value, ] = style.split ':'\n        if style_name is 'text-align' then  alignments.push style_value\n        else                                alignments.push 'left'\n      #.....................................................................................................\n      else if @select event, ')', 'tr'\n        description[ 'col_count'  ] = col_count\n        description[ 'alignments' ] = alignments\n        send past_event for past_event in collector\n        send event\n        collector.length  = 0\n        col_count         = 0\n        collecting        = no\n        alignments        = null\n        table_meta        = null\n      #.....................................................................................................\n      else\n        collector.push event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$consolidate_tables_2  = ( S ) =>\n  collector     = []\n  description   = null\n  row_count     = 0\n  within_table  = no\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, name, text, meta, ] = event\n    #.......................................................................................................\n    if @select event, '(', 'table'\n      within_table  = yes\n      description   = meta[ 'table' ]\n      return collector.push event\n    #.......................................................................................................\n    return send event unless within_table\n    #.......................................................................................................\n    if @select event, ')', 'table'\n      within_table                = no\n      description[ 'row_count' ]  = row_count\n      description                 = null\n      send cached_event for cached_event in collector\n      send event\n      collector.length            = 0\n      row_count                   = 0\n    #.......................................................................................................\n    else if @select event, '(', 'tr'\n      row_count += +1\n      collector.push event\n    #.......................................................................................................\n    else\n      collector.push event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$consolidate_footnotes  = ( S ) =>\n  track                   = @TRACKER.new_tracker '(footnote-def)'\n  collector               = []\n  idx_by_ids              = new Map()\n  current_footnote_events = []\n  current_footnote_id     = null\n  within_footnote_def     = no\n  #.........................................................................................................\n  return $ ( event, send, end ) =>\n    if event?\n      within_footnote_def = track.within '(footnote-def)'\n      track event\n      #.....................................................................................................\n      if @select event, '.', 'footnote-ref'\n        [ type, name, id, meta, ] = event\n        collector.push [ [ '(', 'footnote', id, ( @copy meta ), ], ]\n        idx_by_ids.set id, collector.length\n        collector.push []\n        collector.push [ [ ')', 'footnote', id, ( @copy meta ), ], ]\n      #.....................................................................................................\n      else if @select event, '(', 'footnote-def'\n        [ type, name, id, meta, ] = event\n        current_footnote_id       = id\n      #.....................................................................................................\n      else if @select event, ')', 'footnote-def'\n        current_footnote_id       = null\n      #.....................................................................................................\n      else\n        if within_footnote_def\n          target_idx = idx_by_ids.get current_footnote_id\n          unless target_idx\n            message = \"unknown footnote ID #{rpr current_footnote_id}\"\n            # send.error new Error message\n            send [ '.', 'warning', message, ( @copy meta ? {} ), ]\n          else\n            collector[ target_idx ].push event\n        else\n          collector.push [ event, ]\n    #.......................................................................................................\n    if end?\n      for events in collector\n        for event in events\n          send event\n      end()\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$close_dangling_open_tags = ( S ) =>\n  tag_stack = []\n  remark    = @_get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, name, text, meta, ] = event\n    #.......................................................................................................\n    if @select event, '(', 'document'\n      null\n    #.......................................................................................................\n    else if @select event, ')', 'document'\n      while tag_stack.length > 0\n        sub_event                                   = tag_stack.pop()\n        [ sub_type, sub_name, sub_text, sub_meta, ] = sub_event\n        sub_type = ')'\n        send remark 'resend', \"`#{sub_name}#{sub_type}`\", @copy meta\n        S.resend [ sub_type, sub_name, sub_text, ( @copy sub_meta ), ]\n    #.......................................................................................................\n    else if @select event, '('\n      tag_stack.push [ type, name, null, meta, ]\n      # debug '©18623', tag_stack\n    #.......................................................................................................\n    else if @select event, ')'\n      ### TAINT should check matching pairs ###\n      tag_stack.pop()\n    #.......................................................................................................\n    send event\n    return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_PRE.$extra_hr = ( S ) =>\n#   pattern     = /// ^ ( °{4,} | \\.{4,} | :{4,} | -{4,} | ={4,} | \\^{4,} | v{4,} ) $ ///gm\n#   within_code = no\n#   #.........................................................................................................\n#   return $ ( event, send ) =>\n#     #.......................................................................................................\n#     if @select event, '(', [ 'code', 'code-span', ]\n#       within_code = yes\n#       send event\n#     #.......................................................................................................\n#     else if @select event, ')', [ 'code', 'code-span', ]\n#       within_code = no\n#       send event\n#     #.......................................................................................................\n#     else if ( not within_code ) and @select event, '.', 'text'\n#       [ type, name, text, meta, ] = event\n#       is_plain = no\n#       for stretch in text.split pattern\n#         if is_plain = not is_plain\n#           send [ '.', 'text', stretch, ( @copy meta ), ]\n#         else\n#           send [ '.', 'hr', stretch, ( @copy meta ), ]\n#     #.......................................................................................................\n#     else\n#       send event\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$hr2 = ( S ) =>\n  ###\n\n  / slash\n  - plain (line)\n  = bold (line)\n  -= plain with bold (2 stacked lines)\n  =- bold with plain (2 stacked lines)\n  -=- plain, bold, plain (3 stacked lines)\n  . dotted (line)\n  * asterisks (line)\n  + swole (line)\n  0 compress (above & below)\n  1 normal (spacing, one line above & below; default)\n  2,1 custom (2 above, 1 below)\n  2 splendid (2 above & below)\n\n  // <!-- just a slash -->\n  /0-------/\n  0-------\n  /2+++++2/\n  /0--------============1/\n  ###\n  # splitter    = /// ^ ( \\/? [0-9]* [-=*+]{3,} [0-9]* \\/? ) $ ///gm\n  analyzer    = /// ^\n    ( \\/? )\n    ( [0-9]* )\n    ( -+ | =+ | \\.+ | \\*+ | \\++ | \\#+ | °+ )\n    ( -* | =* | \\.* | \\** | \\+* | \\#* | °* )\n    ( -* | =* | \\.* | \\** | \\+* | \\#* | °* )\n    ( [0-9]* )\n    ( \\1 ) $\n    ///\n  code_count  = 0\n  buffer      = null\n  send_       = null\n  #.........................................................................................................\n  flush = ->\n    return unless buffer?\n    send_ sub_event for sub_event in buffer\n    buffer = null\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    send_ = send\n    #.......................................................................................................\n    if @select event, '(', [ 'code', 'code-span', ]\n      flush()\n      code_count += +1\n      # send event\n    #.......................................................................................................\n    else if @select event, ')', [ 'code', 'code-span', ]\n      code_count += -1\n      # send event\n    #.......................................................................................................\n    if code_count < 1 and @select event, '~', 'start-paragraph', yes\n      throw new Error 'XXXX' if buffer?\n      buffer = []\n      buffer.push event\n    #.......................................................................................................\n    else if buffer? and @select event, '.', 'p'\n      buffer.push event\n      return flush() unless ( buffer.length is 3 ) and @select buffer[ 1 ], '.', 'text'\n      [ type, name, text, meta, ] = buffer[ 1 ]\n      match = text.match analyzer\n      return flush() unless match?\n      buffer = null\n      [ _, start, above, one, two, three, below, stop, ] = match\n      if start isnt stop\n        return send [ '.', 'warning', \"illegal HR markup #{rpr meta[ 'markup' ]}\", ( copy meta ), ]\n      slash = start is '/'\n      above = '0' if above.length is 0\n      below = '1' if below.length is 0\n      above = parseInt above, 10\n      below = parseInt below, 10\n      one   = one[   0 ] ? ''\n      two   = two[   0 ] ? ''\n      three = three[ 0 ] ? ''\n      send [ '.', 'hr2', { slash, above, one, two, three, below, stop, }, ( @copy meta, markup: text ), ]\n          # send [ '.', 'hr2', stretch, ( @copy meta ), ]\n    #.......................................................................................................\n    else if buffer?\n      buffer.push event\n      flush() if buffer.length > 2\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@select = ( event, type, name, hidden = no ) ->\n  ### TAINT should use the same syntax as accepted by `FENCES.parse` ###\n  ### check for arity as it's easy to write `select event, '(', ')', 'latex'` when what you meant\n  was `select event, [ '(', ')', ], 'latex'` ###\n  return false if ( not hidden ) and @is_hidden event\n  if ( arity = arguments.length ) > 4\n    throw new Error \"expected at most 3 arguments, got #{arity}\"\n  if type?\n    switch type_of_type = CND.type_of type\n      when 'text', 'symbol' then return false unless event[ 0 ] is type\n      when 'list'           then return false unless event[ 0 ] in type\n      else throw new Error \"expected a text, a symbol or a list, got a #{type_of_type}\"\n  if name?\n    switch type_of_name = CND.type_of name\n      when 'text', 'symbol' then return false unless event[ 1 ] is name\n      when 'list'           then return false unless event[ 1 ] in name\n      else throw new Error \"expected a text, a symbol or a list, got a #{type_of_name}\"\n  return true\n\n\n#===========================================================================================================\n# STAMPING & HIDING\n#-----------------------------------------------------------------------------------------------------------\n@stamp = ( event ) ->\n  ### 'Stamping' an event means to mark it as 'processed'; hence, downstream transformers can choose to\n  ignore events that have already been marked upstream, or, inversely choose to look out for events\n  that have not yet found a representation in the target document. **NB** that stamping and hiding an\n  event will place a copy of the `meta` event element into the event. ###\n  event[ 3 ] = @copy event[ 3 ], { stamped: yes, }\n  return event\n\n#-----------------------------------------------------------------------------------------------------------\n@unstamp = ( event ) ->\n  event[ 3 ] = @copy event[ 3 ], { stamped: no, }\n  return event\n\n#-----------------------------------------------------------------------------------------------------------\n@is_stamped   = ( event ) -> event[ 3 ]?[ 'stamped' ] is true\n@is_unstamped = ( event ) -> not @is_stamped event\n\n#-----------------------------------------------------------------------------------------------------------\n@hide = ( event ) ->\n  ### 'Stamping' an event means to mark it as 'processed'; hence, downstream transformers can choose to\n  ignore events that have already been marked upstream, or, inversely choose to look out for events\n  that have not yet found a representation in the target document. **NB** that stamping and hiding an\n  event will place a copy of the `meta` event element into the event. ###\n  event[ 3 ] = @copy event[ 3 ], { hidden: yes, }\n  return event\n\n#-----------------------------------------------------------------------------------------------------------\n@is_hidden = ( event ) -> event[ 3 ]?[ 'hidden' ] is true\n\n#-----------------------------------------------------------------------------------------------------------\n@copy = ( x, updates... ) ->\n  ### (Hopefully) fast semi-deep copying for events (i.e. lists with a possible `meta` object on\n  index 3) and plain objects. The value returned will be a shallow copy in the case of objects and\n  lists, but if a list has a value at index 3, that object will also be copied. Not guaranteed to\n  work for general values. ###\n  if ( isa_list = CND.isa_list x ) then R = []\n  else if         CND.isa_pod  x   then R = {}\n  else throw new Error \"unable to copy a #{CND.type_of x}\"\n  R       = Object.assign R, x, updates...\n  R[ 3 ]  = Object.assign {}, meta if isa_list and ( meta = R[ 3 ] )?\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_split_lines_with_nl = ( text ) -> ( line for line in text.split /(.*\\n)/ when line.length > 0 )\n\n#-----------------------------------------------------------------------------------------------------------\n@_flush_text_collector = ( send, collector, meta ) ->\n  if collector.length > 0\n    send [ '.', 'text', ( collector.join '' ), meta, ]\n    collector.length = 0\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_illegal_chrs = ( S ) ->\n  ### TAINT if these characters are illegal, we don't have to escape them when tunneling macros ###\n  ### TAINT must send MKTS events, not TeX to keep method general ###\n  return $ ( old_text, send ) ->\n    new_text = old_text.replace /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\ufffd-\\uffff]/g, ( $0 ) ->\n      cid_hex = ( $0.codePointAt 0 ).toString 16\n      pre     = '█'\n      post    = '█'\n      ### TAINT use mkts command ###\n      warn \"detected illegal character U+#{cid_hex}\" # if old_text isnt new_text\n      return \"\"\"{\\\\mktsStyleBold\\\\color{red}{%\n        \\\\mktsStyleSymbol#{pre}}U+#{cid_hex}{\\\\mktsStyleSymbol#{post}}}\"\"\"\n    send new_text\n\n#-----------------------------------------------------------------------------------------------------------\n@new_resender = ( S, stream ) ->\n  ### TAINT re-parsing new source text should be handled by regular stream transform at an appropriate\n  stream entry point ###\n  ### TAINT new parser not needed, can reuse 'main' parser ###\n  md_parser = @_new_markdown_parser()\n  return ( md_source ) =>\n    ### TAINT must handle data in environment ###\n    if CND.isa_text md_source\n      md_source   = MKTS.MACRO_ESCAPER.escape S, md_source\n      md_source   = @TYPOFIX.rewrite S, md_source\n      environment = {}\n      tokens      = md_parser.parse md_source, environment\n      # tokens      = md_parser.parse md_source, S.environment\n      #.......................................................................................................\n      ### TAINT intermediate solution ###\n      if ( keys = Object.keys environment ).length > 0\n        warn \"ignoring keys from sub-parsing environment: #{rpr keys}\"\n      #.......................................................................................................\n      if tokens.length > 0\n        ### Omit `paragraph_open` as first and `paragraph_close` as last token: ###\n        first_idx   = 0\n        last_idx    = tokens.length - 1\n        first_idx   = if tokens[ first_idx ][ 'type' ] is 'paragraph_open'  then first_idx + 1 else first_idx\n        last_idx    = if tokens[  last_idx ][ 'type' ] is 'paragraph_close' then  last_idx - 1 else  last_idx\n        # ( debug '©9fdeD', \"resending\", tokens[ idx ] ) for idx in [ first_idx .. last_idx ]\n        stream.write tokens[ idx ] for idx in [ first_idx .. last_idx ]\n    else\n      stream.write md_source\n\n\n#===========================================================================================================\n# STREAM CREATION\n#-----------------------------------------------------------------------------------------------------------\n@create_md_read_tee = ( S, md_source ) ->\n  switch arity = arguments.length\n    when 1\n      md_source = S\n      #.....................................................................................................\n      ### for `environment` see https://markdown-it.github.io/markdown-it/#MarkdownIt.parse ###\n      S =\n        # confluence:           confluence\n        environment:  {}\n    when 2\n      S.environment = {}\n    else\n      throw new Error \"expected 1 or 2 arguments, got #{arity}\"\n  #.........................................................................................................\n  ### TAINT `settings`, `S` and fitting should be the same object ###\n  settings =\n    S:                S\n  #.........................................................................................................\n  ### TAINT rewrite to use D.TEE.from_pipeline, don't use readstream, writestream ###\n  readstream    = D.create_throughstream()\n  writestream   = D.create_throughstream()\n  # confluence  = D.create_throughstream()\n  R             = D.TEE.from_readwritestreams readstream, writestream, settings\n  { input }     = R.tee\n  input.pause()\n  #.........................................................................................................\n  S.resend      = @new_resender S, readstream\n  S.confluence  = readstream\n  # S.confluence = input\n  #.........................................................................................................\n  readstream\n    # .pipe D.$observe ( event ) -> alert event\n    .pipe @_PRE.$flatten_inline_tokens                S\n    .pipe @_PRE.$flatten_image_tokens                 S\n    .pipe @_PRE.$reinject_html_blocks                 S\n    # .pipe D.$observe ( event ) => debug '©1', rpr event\n    .pipe @_PRE.$rewrite_markdownit_tokens            S\n    .pipe @_PRE.$issue_administrative_events          S\n    .pipe MKTS.MACRO_ESCAPER.$expand                  S\n    .pipe @_PRE.$process_end_command                  S\n    .pipe @_PRE.$consolidate_tables_1                 S\n    .pipe @_PRE.$consolidate_tables_2                 S\n    .pipe @_PRE.$consolidate_footnotes                S\n    # .pipe @_PRE.$extra_hr                             S\n    .pipe @_PRE.$hr2                                  S\n    .pipe MKTS.MACRO_INTERPRETER.$prepare_sandbox     S\n    .pipe MKTS.MACRO_INTERPRETER.$process_actions     S\n    .pipe MKTS.MACRO_INTERPRETER.$process_values      S\n    .pipe MKTS.MACRO_INTERPRETER.$process_commands    S\n    .pipe MKTS.MACRO_INTERPRETER.$process_regions     S\n    .pipe MKTS.MACRO_INTERPRETER.$consolidate_regions S\n    .pipe MKTS.MACRO_INTERPRETER.$process_code_blocks S\n    .pipe @_PRE.$close_dangling_open_tags             S\n    # .pipe D.$show '47594-B'\n    .pipe writestream\n  #.........................................................................................................\n  # readstream.on     'end', -> debug '©tdfA4', \"readstream ended\"\n  # writestream.on    'end', -> debug '©sId1V', \"writestream ended\"\n  # input.on          'end', -> debug '©1sbYv', \"input ended\"\n  # R[ 'output' ].on  'end', -> debug '©zSMOc', \"output ended\"\n  #.........................................................................................................\n  input.on 'resume', =>\n    S.t0        = +new Date()\n    md_parser   = @_new_markdown_parser()\n    MKTS.MACRO_ESCAPER.initialize_state S\n    md_source   = MKTS.MACRO_ESCAPER.escape S, md_source\n    md_source   = @TYPOFIX.rewrite S, md_source\n    S.chr_count = md_source.length\n    tokens      = md_parser.parse md_source, S.environment\n    # debug '©78531', rpr tokens\n    for token in tokens\n      input.write token\n    input.write Symbol.for 'end'\n  #.........................................................................................................\n  return R\n\n\n"
  ]
}