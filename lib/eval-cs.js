// Generated by CoffeeScript 2.3.2
(function() {
  //###########################################################################################################
  var CND, CS, VM, alert, badge, debug, echo, help, info, log, njs_fs, njs_path, rpr, urge, warn, whisper;

  njs_path = require('path');

  njs_fs = require('fs');

  //...........................................................................................................
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MK/TS/MACRO-ESCAPER/mkts-tables';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  // MKTS                      = require './main'
  CS = require('coffeescript');

  VM = require('vm');

  //-----------------------------------------------------------------------------------------------------------
  this.evaluate = (source, settings) => {
    var R, js_source, language, local_filename, macro_output, ref, ref1, sandbox, wrapped_source;
    //.........................................................................................................
    language = (ref = settings != null ? settings.language : void 0) != null ? ref : 'coffee';
    local_filename = '<STRING>';
    macro_output = [];
    sandbox = (ref1 = settings != null ? settings.sandbox : void 0) != null ? ref1 : {};
    // sandbox_backup            = MK.TS.DIFFPATCH.snapshot sandbox
    VM.createContext(sandbox);
    //.........................................................................................................
    switch (language) {
      case 'js':
        js_source = raw_source;
        break;
      case 'coffee':
        // wrapped_source  = "do =>\n  " + source.replace /\n/g, "\n  "
        wrapped_source = source;
        js_source = CS.compile(wrapped_source, {
          bare: true,
          filename: local_filename
        });
        break;
      default:
        throw new Error(`unknown language ${rpr(language)}`);
    }
    //.....................................................................................................
    R = VM.runInContext(js_source, sandbox, {
      filename: local_filename
    });
    // debug '77783', sandbox
    return R;
  };

  //###########################################################################################################
  if (module.parent == null) {
    debug('77733', this.evaluate("foo:\n  bar: 'baz'", {
      language: 'coffee'
    }));
  }

}).call(this);

//# sourceMappingURL=eval-cs.js.map
