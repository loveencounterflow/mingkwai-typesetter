// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var $, $async, CND, PS, alert, assign, badge, copy, debug, echo, eq, help, info, join, jr, log, new_pushable, rpr, rprx, test, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'HTML-TAGS/TESTS';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  test = require('guy-test');

  eq = CND.equals;

  jr = JSON.stringify;

  //...........................................................................................................
  join = function(x, joiner = '') {
    return x.join(joiner);
  };

  assign = Object.assign;

  // XREGEXP                   = require 'xregexp'
  PS = require('pipestreams');

  ({$, $async} = PS);

  new_pushable = require('pull-pushable');

  assign = Object.assign;

  jr = JSON.stringify;

  copy = function(...P) {
    return assign({}, ...P);
  };

  rprx = function(d) {
    var ref;
    return `${d.mark} ${d.type}:: ${jr(d.value)} ${jr((ref = d.stamped) != null ? ref : false)}`;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.active_chr_pattern = /(?:)/u;

  this.active_chrs = new Set();

  //-----------------------------------------------------------------------------------------------------------
  /* thx to https://stackoverflow.com/a/3561711/7568091 */
  this._escape_for_regex = function(text) {
    return text.replace(this._escape_for_regex.pattern, '\\$&');
  };

  this._escape_for_regex.pattern = /[-\/\\^$*+?.()|[\]{}]/g;

  //-----------------------------------------------------------------------------------------------------------
  this.add_active_chrs = function(...chrs) {
    var chr, i, len, pattern;
    for (i = 0, len = chrs.length; i < len; i++) {
      chr = chrs[i];
      if (!((CND.isa_text(chr)) && ((chr.match(/^.$/u)) != null))) {
        throw new Error(`expected single character, got ${rpr(chr)}`);
      }
      this.active_chrs.add(chr);
    }
    pattern = '[' + (((function() {
      var ref, results;
      ref = this.active_chrs;
      results = [];
      for (chr of ref) {
        results.push(this._escape_for_regex(chr));
      }
      return results;
    }).call(this)).join('|')) + ']';
    this.active_chr_pattern = new RegExp(pattern, 'u');
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.add_active_chrs('<', '&', '*', '`', '^', '_');

  help(this.active_chr_pattern);

  // debug @_escape_for_regex '*'
  // debug @_escape_for_regex '/'
  // debug @_escape_for_regex '^'
  // debug @_escape_for_regex '\\'
  // debug 'foo-bar'.match new RegExp '[x\\-a]'
  // @add_active_chr '-'; help @active_chr_pattern
  // @add_active_chr '^'; help @active_chr_pattern

  //-----------------------------------------------------------------------------------------------------------
  this.f = function(S) {
    var R, on_stop, pipeline;
    S.source = new_pushable();
    on_stop = PS.new_event_collector('stop', function() {
      return help('ok');
    });
    pipeline = [];
    //.........................................................................................................
    pipeline.push(S.source);
    pipeline.push($uncycle());
    // pipeline.push COLLATZ.$main S
    pipeline.push(PS.$watch(function(d) {
      if (!is_meta(d)) {
        return help('> sink  ', rprx(d));
      }
    }));
    //.........................................................................................................
    pipeline.push(PS.$watch(function(d) {
      if (select(d, '~', 'end')) {
        return S.source.end();
      }
    }));
    pipeline.push($try_to_recycle(S.source.push.bind(S.source)));
    //.........................................................................................................
    pipeline.push(on_stop.add(PS.$drain()));
    PS.pull(...pipeline);
    //.........................................................................................................
    R = function(value) {
      return S.source.push(new_event('.', 'number', value));
    };
    R.end = function() {
      return S.source.end();
    };
    return R;
  };

}).call(this);

//# sourceMappingURL=mktscript-parser.js.map
