// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var $, $async, $recycle, $unwrap_recycled, ACHRS_TRANSFORMS, CND, PS, S, _reduce, alert, assign, badge, copy, debug, echo, eq, help, i, info, is_recycling, is_stamped, is_system, join, jr, len, log, new_end_event, new_event, new_push_source, new_single_event, new_start_event, new_stop_event, new_system_event, new_text_event, new_warning, provide_achrs_transforms, push, recycling, rpr, rprx, select, select_all, stamp, test, text, texts, unwrap_recycled, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'HTML-TAGS/TESTS';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  test = require('guy-test');

  eq = CND.equals;

  jr = JSON.stringify;

  //...........................................................................................................
  join = function(x, joiner = '') {
    return x.join(joiner);
  };

  assign = Object.assign;

  // XREGEXP                   = require 'xregexp'
  PS = require('pipestreams');

  ({$, $async} = PS);

  assign = Object.assign;

  jr = JSON.stringify;

  copy = function(...P) {
    return assign({}, ...P);
  };

  rprx = function(d) {
    var ref;
    return `${d.mark} ${d.type}:: ${jr(d.value)} ${jr((ref = d.stamped) != null ? ref : false)}`;
  };

  // echo '{ ' + ( ( name for name of require './recycle' ).sort().join '\n  ' ) + " } = require './recycle'"
  ({$recycle, $unwrap_recycled, is_recycling, is_stamped, is_system, new_end_event, new_event, new_single_event, new_start_event, new_stop_event, new_system_event, new_text_event, new_push_source, new_warning, recycling, select, select_all, stamp, unwrap_recycled} = require('./recycle'));

  //-----------------------------------------------------------------------------------------------------------
  this.active_chr_pattern = /(?:)/u;

  this.active_chrs = new Set();

  //-----------------------------------------------------------------------------------------------------------
  /* thx to https://stackoverflow.com/a/3561711/7568091 */
  this._escape_for_regex = function(text) {
    return text.replace(this._escape_for_regex.pattern, '\\$&');
  };

  this._escape_for_regex.pattern = /[-\/\\^$*+?.()|[\]{}]/g;

  //-----------------------------------------------------------------------------------------------------------
  this.add_active_chrs = function(...chrs) {
    var achrs, chr, i, len;
    for (i = 0, len = chrs.length; i < len; i++) {
      chr = chrs[i];
      if (!((CND.isa_text(chr)) && ((chr.match(/^.$/u)) != null))) {
        throw new Error(`expected single character, got ${rpr(chr)}`);
      }
      this.active_chrs.add(chr);
    }
    achrs = ((function() {
      var ref, results;
      ref = this.active_chrs;
      results = [];
      for (chr of ref) {
        results.push(this._escape_for_regex(chr));
      }
      return results;
    }).call(this)).join('|');
    this.active_chr_pattern = RegExp(`^(?<left>.*?)(?<achrs>(?<achr>${achrs})\\k<achr>*)(?<right>.*)$`);
    // /// (?<!\\) (?<achr> (?<chr> [ \* ` + p ] ) \k<chr>* ) ///
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.add_active_chrs('<', '&', '*', '`', '^', '_', '𣥒');

  // help @active_chr_pattern

  // debug @_escape_for_regex '*'
  // debug @_escape_for_regex '/'
  // debug @_escape_for_regex '^'
  // debug @_escape_for_regex '\\'
  // debug 'foo-bar'.match new RegExp '[x\\-a]'
  // @add_active_chr '-'; help @active_chr_pattern
  // @add_active_chr '^'; help @active_chr_pattern

  //-----------------------------------------------------------------------------------------------------------
  this.split_on_first_active_chr = function(text) {
    var match;
    if ((match = text.match(this.active_chr_pattern)) == null) {
      /* If `text` contains an active character, return a POD with the keys `left`, `achr`, and `right`, where
      `left` holds the (possibly empty) text before the first active character, `achr` holds the active
      character itself, and `right` holds the remaining, agaoin possibly empty, text (that may or may not contain
      further active characters). */
      return null;
    }
    return match.groups;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$split_on_first_active_chr = function(S) {
    return $((d, send) => {
      var achr, achrs, left, parts, right;
      if (!((select(d, '.', 'text')) && (!d.clean))) {
        /* using ad-hoc `clean` attribute to indicate that text does not contain active characters */
        return send(d);
      }
      if ((parts = this.split_on_first_active_chr(d.value)) != null) {
        ({achr, achrs, left, right} = parts);
        send(new_single_event('achr-split', achrs, {achr, left, right}));
      } else {
        d.clean = true;
        send(d);
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$recycle_untouched_texts = function(S) {
    return $((d, send) => {
      if ((select(d, '.', 'text')) && (!d.clean)) {
        send(recycling(d));
      } else {
        send(d);
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$warn_on_unhandled_achrs = function(S) {
    return $((d, send) => {
      if (select(d, '.', 'achr-split')) {
        send(new_warning('µ99823', "unhandled active characters", d));
      } else {
        send(d);
      }
      return null;
    });
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  provide_achrs_transforms = function() {
    //-----------------------------------------------------------------------------------------------------------
    this.$em = function(S) {
      var within;
      within = false;
      return $((d, send) => {
        if ((select(d, '.', 'achr-split')) && (d.value === '*')) {
          /* using ad-hoc `clean` attribute to indicate that text does not contain active characters */
          send(new_text_event(d.left, {
            clean: true
          }));
          if (!within) {
            send(new_start_event('sf', 'em'));
          } else {
            send(new_stop_event('sf', 'em'));
          }
          send(new_text_event(d.right));
          within = !within;
        } else {
          send(d);
        }
        return null;
      });
    };
    //-----------------------------------------------------------------------------------------------------------
    this.$strong = function(S) {
      var within;
      within = false;
      return $((d, send) => {
        if ((select(d, '.', 'achr-split')) && (d.value === '**')) {
          /* using ad-hoc `clean` attribute to indicate that text does not contain active characters */
          send(new_text_event(d.left, {
            clean: true
          }));
          if (!within) {
            send(new_start_event('sf', 'strong'));
          } else {
            send(new_stop_event('sf', 'strong'));
          }
          send(new_text_event(d.right));
          within = !within;
        } else {
          send(d);
        }
        return null;
      });
    };
    //-----------------------------------------------------------------------------------------------------------
    return this;
  };

  ACHRS_TRANSFORMS = provide_achrs_transforms.apply({});

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.$show_events = function(S) {
    var level;
    level = 0;
    return PS.$watch((d) => {
      var indentation;
      indentation = '  '.repeat(level);
      if (select(d, '~', 'warning')) {
        warn(indentation + `warning ref ${d.ref}: ${d.message}`);
        warn(indentation + `generated by event: ${jr(d.value)}`);
      } else if (select(d, '~', null)) {
        whisper(indentation + jr(d));
      } else if (select(d, '.', 'text')) {
        help(indentation + CND.reverse(CND.yellow(rpr(d.value))));
      } else if (select(d, ['(', ')'], null)) {
        help(indentation + CND.plum(`${d.sigil} ${d.key}: ${jr(d.value)} ${_reduce(d)}`));
        level += (d.sigil === '(') ? +1 : -1;
      } else {
        urge(indentation + jr(d));
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  _reduce = function(d) {
    var R, key, value;
    R = {};
    for (key in d) {
      value = d[key];
      if (key !== 'sigil' && key !== 'key' && key !== 'value') {
        R[key] = value;
      }
    }
    if ((Object.keys(R)).length > 0) {
      return jr(R);
    } else {
      return '';
    }
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.new_parser = function(S) {
    var R, on_stop, pipeline;
    S.source = new_push_source();
    on_stop = PS.new_event_collector('stop', function() {
      return help('ok');
    });
    pipeline = [];
    //.........................................................................................................
    pipeline.push(S.source);
    // pipeline.push PS.$watch ( d ) => whisper jr d
    pipeline.push($unwrap_recycled());
    // pipeline.push COLLATZ.$main S
    //.........................................................................................................
    pipeline.push(this.$split_on_first_active_chr(S));
    pipeline.push(ACHRS_TRANSFORMS.$em(S));
    pipeline.push(ACHRS_TRANSFORMS.$strong(S));
    pipeline.push(this.$recycle_untouched_texts(S));
    pipeline.push(this.$warn_on_unhandled_achrs(S));
    //.........................................................................................................
    // pipeline.push PS.$watch ( d ) => help CND.blue jr d
    // pipeline.push PS.$watch ( d ) => help '> sink  ', rprx d unless is_meta d
    pipeline.push(PS.$watch((d) => {
      if (select(d, '~', 'end')) {
        return S.source.end();
      }
    }));
    pipeline.push($recycle(S.source.push));
    //.........................................................................................................
    pipeline.push(this.$show_events(S));
    pipeline.push(on_stop.add(PS.$drain()));
    PS.pull(...pipeline);
    //.........................................................................................................
    R = function(value) {
      return S.source.push(new_text_event(value));
    };
    R.end = function() {
      return S.source.end();
    };
    return R;
  };

  //###########################################################################################################
  if (module.parent == null) {
    S = {};
    texts = ['a **strong** and a *less strong* emphasis.', 'a line of *text*.', 'a line of 𣥒text*.', 'a line of text.'];
    push = this.new_parser(S);
    for (i = 0, len = texts.length; i < len; i++) {
      text = texts[i];
      whisper('#'.repeat(50));
      push(text);
    }
  }

  // pattern = /// (?<!\\) (?<achr> (?<chr> [ \* ` + p ] ) \k<chr>* ) ///
// # pattern = /// (?<!\\) (?<achr> ( [ \* ` + p ] ) \2* ) ///
// # pattern = /// (?<!\\) ( ( [ \* ` + p ] ) \2* ) ///
// debug 'flappy'.match pattern
// debug 'fla\\ppy'.match pattern

}).call(this);

//# sourceMappingURL=mktscript-parser.js.map
