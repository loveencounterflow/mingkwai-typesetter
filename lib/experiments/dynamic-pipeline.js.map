{
  "version": 3,
  "file": "dynamic-pipeline.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/dynamic-pipeline.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SCRATCH/DYNAMIC-PIPELINES'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n# #...........................................................................................................\n# suspend                   = require 'coffeenode-suspend'\n# step                      = suspend.step\n#...........................................................................................................\n# D                         = require 'pipedreams'\n# $                         = D.remit.bind D\n# $async                    = D.remit_async.bind D\nPS                        = require 'pipestreams'\n{ $, $async, }            = PS\nnew_pushable              = require 'pull-pushable'\nassign                    = Object.assign\njr                        = JSON.stringify\ncopy                      = ( P... ) -> assign {}, P...\nrprx                      = ( d ) -> \"#{d.mark} #{d.type}:: #{jr d.value}\"\n\n###\n\n\nPipestream Events v2\n====================\n\nd         := { mark,          type, value, ... }    # implicit global namespace\n          := { mark, prefix,  type, value, ... }    # explicit namespace\n\n# `d.mark` indicates 'regionality':\n\nmark      := '.' # singleton                        # will become '!'   # or '</>' ?\n          := '(' # start-of-region (SOR)            #                   # '<-'\n          := ')' # end-of-region   (EOR)            #                   # '->'\n\n# `prefix` indicates the namespace; where missing on an event or is `null`, `undefined` or `'global'`,\n# it indicates the global namespace:\n\nprefix    := null | undefined | 'global' | non-empty text\n\ntype      := non-empty text         # typename\n\nvalue     := any                    # payload\n\n###\n\n#-----------------------------------------------------------------------------------------------------------\nselect = ( event, prefix, marks, types ) ->\n  ### accepts 3 or 4 arguments; when 4, then second must be prefix (only one prefix allowed);\n  `marks` and `types` may be text or list of texts. ###\n  switch arity = arguments.length\n    # when 2 then [ prefix, marks, types, ] = [ null, prefix, marks, ]\n    when 3 then [ prefix, marks, types, ] = [ null, prefix, marks, ]\n    when 4 then null\n    else throw new Error \"expected 3 to 4 arguments, got arity\"\n  prefix  = null if ( not prefix? ) or ( prefix is 'global' )\n  marks  ?= null\n  types  ?= null\n  switch _type = CND.type_of prefix\n    when 'null' then null\n    when 'text' then return false unless event.prefix is prefix\n    else throw new Error \"expected a text or a list, got a #{_type}\"\n  switch _type = CND.type_of marks\n    when 'null' then null\n    when 'text' then return false unless event.mark is marks\n    when 'list' then return false unless event.mark in marks\n    else throw new Error \"expected a text or a list, got a #{_type}\"\n  switch _type = CND.type_of types\n    when 'null' then null\n    when 'text' then return false unless event.type is types\n    when 'list' then return false unless event.type in types\n    else throw new Error \"expected a text or a list, got a #{_type}\"\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\nnew_sync_sub_sender = ( transforms, send ) ->\n  ### Given a transform, construct a pipeline with a pushable as its source, and\n  return a function that accepts a send method and a data event. ###\n  # The sub-sender works by temporarily attaching a hidden ###\n  pushable      = new_pushable()\n  pipeline  = []\n  pipeline.push pushable\n  pipeline.push transform for transform in transforms\n  pipeline.push PS.$watch ( d ) -> send d\n  pipeline.push PS.$drain()\n  PS.pull pipeline...\n  return ( d ) -> pushable.push d\n\n#-----------------------------------------------------------------------------------------------------------\nplugins_library =\n\n  #-----------------------------------------------------------------------------------------------------------\n  doubler: $ ( d, send ) ->\n    if select d, '.', 'number'\n      # send d\n      send copy d, { value: 2 * d.value, }\n    else\n      whisper \"no match: #{rprx d}\"\n      send d\n\n  #-----------------------------------------------------------------------------------------------------------\n  tripler: $ ( d, send ) ->\n    if select d, '.', 'number'\n      send d\n      send copy d, { value: 3 * d.value, }\n    else\n      whisper \"no match: #{rprx d}\"\n      send d\n\n  #-----------------------------------------------------------------------------------------------------------\n  # logger: PS.$watch ( d ) -> null\n  logger: PS.$watch ( d ) -> whisper \"intermediate: #{rprx d}\"\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$plugins = ( S ) ->\n  pipeline          = []\n  pipeline.push $ ( d, send ) =>\n    self = @$plugins\n    if select d, '.', 'plugin'\n      debug 'plugin', rprx d\n      throw new Error \"unknown plugin #{rpr d.value}\" unless ( plugin = plugins_library[ d.value ] )?\n      self.plugins.push plugin\n      self.sub_sender = new_sync_sub_sender self.plugins, send\n    else if self.sub_sender?\n      self.sub_sender d\n    else\n      send d\n    return null\n  #.........................................................................................................\n  return PS.pull pipeline...\n@$plugins.plugins         = []\n@$plugins.sub_sender      = null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_outer_pipeline = ( S ) ->\n  source      = ( n for n in [ 1 .. 10 ] by +1 )\n  # source      = ( n for n in [ 1 .. 2e4 ] by +1 )\n  source      = ( { mark: '.', type: 'number', value, } for value in source )\n  interlude_1 = { mark: '.', type: 'plugin', value: 'doubler', }\n  # interlude_2 = { mark: '.', type: 'plugin', value: 'frobulator', }\n  interlude_2 = { mark: '.', type: 'plugin', value: 'logger', }\n  interlude_3 = { mark: '.', type: 'plugin', value: 'tripler', }\n  interlude_4 = { mark: '.', type: 'something', value: 'anything', }\n  source      = [\n    source[ 0 .. 1 ]...\n    interlude_1\n    source[ 2 .. 3 ]...\n    interlude_2\n    interlude_3\n    source[ 4 .. 6 ]...\n    interlude_4\n    source[ 6 .. ]... ]\n  source      = PS.new_value_source source\n  #.........................................................................................................\n  on_stop     = PS.new_event_collector 'stop', -> help 'ok'\n  pipeline    = []\n  #.........................................................................................................\n  pipeline.push source\n  pipeline.push PS.$watch ( d ) -> whisper '> source ', rprx d\n  pipeline.push @$plugins S\n  pipeline.push PS.$watch ( d ) -> help '> sink   ', rprx d\n  pipeline.push on_stop.add PS.$drain()\n  #.........................................................................................................\n  t0 = Date.now()\n  PS.pull pipeline...\n  t1 = Date.now()\n  debug ( ( t1 - t0 ) / 1000 ).toFixed 3\n  return null\n\nunless module.parent?\n  S = {}\n  @get_outer_pipeline S\n\n  ###\n  # x = {}\n  # y_sym = Symbol 'y'\n  # x[ y_sym ] = 42\n  # debug '55542', x\n  # x2 = copy x\n  # debug x is x2\n  # debug '55542', x2\n\n  pull = require('pull-stream')\n  urge 'this tick'\n  setImmediate -> urge 'next tick'\n\n  p1 = []\n  p1.push pull.values [1,2,3]\n  p1.push pull.map ( x ) -> 2 * x\n  p1.push pull.log()\n  # pull p1...\n\n  async_map_example = ->\n    p2 = []\n    p2.push pull.values [ 1 .. 4 ]\n    p2.push pull.map ( x ) -> whisper 'A', x; return x\n    p2.push pull.asyncMap ( x, handler ) ->\n      setTimeout ( -> handler null, 2 * x ), 2000\n      setTimeout ( -> handler null, Math.PI * x ), 1000\n    # p2.push pull.map ( x ) -> debug 'A', x; return x\n    # p2.push pull.asyncMap ( x, handler ) ->\n    #   setImmediate -> handler null, 2 * x\n    #   # setImmediate -> handler new Error 'oops' if x is 120\n    p2.push pull.map ( x ) -> help 'B', x; return x\n    # p2.push pull.log()\n    p2.push pull.drain()\n    pull p2...\n\n  log = ( error, d ) ->\n    throw error if error?\n    urge d\n\n  pull      = require('pull-stream')\n  paramap   = require('pull-paramap')\n  width     = 1\n  async_job = ( data, cb ) ->\n    whisper data\n    # cb null, data\n    cb null, data + 1.5\n    # cb null, data + 1.256\n    return null\n  p1 = []\n  p1.push pull.values [ 1, 3, 5, 7, ]\n  p1.push paramap async_job, width\n  p1.push pull.collect log\n  pull p1...\n\n  ```\n  //  pull(\n  //    pull.values([ 1, 3, 5, 7, ]),\n  //    //perform an async job in parallel,\n  //    //and return results in the order they arrive\n  //    paramap(function (data, cb) {\n  //      async_job(data, cb)\n  //    }, null, false), // optional flag `inOrder`, default true\n  //    pull.collect( log )\n  //  )\n  ```\n  ###"
  ]
}