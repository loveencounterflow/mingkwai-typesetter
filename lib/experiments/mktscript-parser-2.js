// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var $, $async, $recycle, $unwrap_recycled, ACHRS_TRANSFORMS, CND, MKTSP2, PS, S, alert, assign, badge, copy, debug, echo, eq, help, i, info, is_empty, is_recycling, is_stamped, is_system, join, jr, len, log, new_end_event, new_event, new_flush_event, new_push_source, new_single_event, new_start_event, new_stop_event, new_system_event, new_text_event, new_warning, pipeline, provide_achrs_transforms, recycling, rpr, rprx, select, select_all, source, stamp, test, text, texts, unwrap_recycled, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MKTSCRIPT-PARSER-2';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  test = require('guy-test');

  eq = CND.equals;

  jr = JSON.stringify;

  //...........................................................................................................
  join = function(x, joiner = '') {
    return x.join(joiner);
  };

  assign = Object.assign;

  // XREGEXP                   = require 'xregexp'
  PS = require('pipestreams');

  ({$, $async} = PS);

  assign = Object.assign;

  jr = JSON.stringify;

  copy = function(...P) {
    return assign({}, ...P);
  };

  rprx = function(d) {
    var ref;
    return `${d.mark} ${d.type}:: ${jr(d.value)} ${jr((ref = d.stamped) != null ? ref : false)}`;
  };

  // echo '{ ' + ( ( name for name of require './recycle' ).sort().join '\n  ' ) + " } = require './recycle'"
  ({$recycle, $unwrap_recycled, is_recycling, is_stamped, is_system, new_end_event, new_event, new_single_event, new_start_event, new_stop_event, new_system_event, new_text_event, new_push_source, new_flush_event, new_warning, recycling, select, select_all, stamp, unwrap_recycled} = require('./recycle'));

  //-----------------------------------------------------------------------------------------------------------
  is_empty = function(x) {
    if (x.length != null) {
      return x.length === 0;
    }
    if (x.size != null) {
      return x.size === 0;
    }
    throw new Error(`unable to determine length of a ${CND.type_of(x)}`);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.active_chr_pattern = /(?:)/u;

  this.active_chrs = new Set();

  //-----------------------------------------------------------------------------------------------------------
  /* thx to https://stackoverflow.com/a/3561711/7568091 */
  this._escape_for_regex = function(text) {
    return text.replace(this._escape_for_regex.pattern, '\\$&');
  };

  this._escape_for_regex.pattern = /[-\/\\^$*+?.()|[\]{}]/g;

  //-----------------------------------------------------------------------------------------------------------
  this.add_active_chrs = function(...chrs) {
    var achrs, chr, i, len;
    for (i = 0, len = chrs.length; i < len; i++) {
      chr = chrs[i];
      if (!((CND.isa_text(chr)) && ((chr.match(/^.$/u)) != null))) {
        throw new Error(`expected single character, got ${rpr(chr)}`);
      }
      this.active_chrs.add(chr);
    }
    achrs = ((function() {
      var ref, results;
      ref = this.active_chrs;
      results = [];
      for (chr of ref) {
        results.push(this._escape_for_regex(chr));
      }
      return results;
    }).call(this)).join('|');
    this.active_chr_pattern = RegExp(`^(?<left>.*?)(?<achrs>(?<achr>${achrs})\\k<achr>*)(?<right>.*)$`);
    // /// (?<!\\) (?<achr> (?<chr> [ \* ` + p ] ) \k<chr>* ) ///
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.add_active_chrs('<', '&', '*', '`', '^', '_', '𣥒');

  // help @active_chr_pattern

  // debug @_escape_for_regex '*'
  // debug @_escape_for_regex '/'
  // debug @_escape_for_regex '^'
  // debug @_escape_for_regex '\\'
  // debug 'foo-bar'.match new RegExp '[x\\-a]'
  // @add_active_chr '-'; help @active_chr_pattern
  // @add_active_chr '^'; help @active_chr_pattern

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.split_on_first_active_chr = function(text) {
    var match;
    if ((match = text.match(this.active_chr_pattern)) == null) {
      /* If `text` contains an active character, return a POD with the keys `left`, `achr`, and `right`, where
      `left` holds the (possibly empty) text before the first active character, `achr` holds the active
      character itself, and `right` holds the remaining, agaoin possibly empty, text (that may or may not contain
      further active characters). */
      return null;
    }
    return match.groups;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$split_on_first_active_chr = function(S) {
    return $((d, send) => {
      var achr, achrs, left, parts, right;
      if (!((select(d, '.', 'text')) && (!d.clean))) {
        /* using ad-hoc `clean` attribute to indicate that text does not contain active characters */
        return send(d);
      }
      if ((parts = this.split_on_first_active_chr(d.value)) != null) {
        ({achr, achrs, left, right} = parts);
        send(new_single_event('achr-split', achrs, {achr, left, right}, {
          $: d
        }));
      } else {
        d.clean = true;
        send(d);
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$recycle_untouched_texts = function(S) {
    return $((d, send) => {
      if ((select(d, '.', 'text')) && (!d.clean)) {
        send(recycling(d));
      } else {
        send(d);
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$warn_on_unhandled_achrs = function(S) {
    return $((d, send) => {
      var lnr, message, ref, ref1, ref2, text;
      if (select(d, '.', 'achr-split')) {
        lnr = (ref = (ref1 = d.$) != null ? ref1.lnr : void 0) != null ? ref : '?';
        text = ((ref2 = d.$) != null ? ref2.text : void 0) != null ? rpr(d.$.text) : '?';
        message = `unhandled active characters ${rpr(d.value)} on line ${lnr} in ${text}`;
        if (!is_empty(d.left)) {
          send(new_text_event(d.left, {
            clean: true,
            $: d
          }));
        }
        send(new_warning('µ99823', message, d, {
          $: d
        }));
      } else {
        send(d);
      }
      return null;
    });
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  provide_achrs_transforms = function() {
    //-----------------------------------------------------------------------------------------------------------
    /* TAINT add `li` */
    this.$em_and_strong_1 = function(S) {
      //.........................................................................................................
      return $((d, send) => {
        var is_achr, ref;
        //.......................................................................................................
        is_achr = select(d, '.', 'achr-split');
        //.......................................................................................................
        if (is_achr && ((ref = d.value) === '*' || ref === '**' || ref === '***')) {
          if (!is_empty(d.left)) {
            send(new_text_event(d.left, {
              clean: true,
              $: d
            }));
          }
          switch (d.value) {
            case '*':
              send(new_event(')(', 'em', null, {
                $: d
              }));
              break;
            case '**':
              send(new_event(')(', 'strong', null, {
                $: d
              }));
              break;
            case '***':
              send(new_event(')(', 'em-strong', null, {
                $: d
              }));
          }
          if (!is_empty(d.right)) {
            send(new_text_event(d.right, {
              $: d
            }));
          }
        } else {
          //.......................................................................................................
          send(d);
        }
        //.......................................................................................................
        return null;
      });
    };
    //-----------------------------------------------------------------------------------------------------------
    this.$em_and_strong_2 = function(S) {
      var buffer, close, flush, get_top, open, open_tags, send, within;
      send = null;
      buffer = [];
      open_tags = [];
      get_top = function() {
        return open_tags[open_tags.length - 1];
      };
      // within_any  = ( key ) -> key in open_tags
      within = function(key) {
        return get_top() === key;
      };
      open = function(key) {
        return open_tags.push(key);
      };
      // close       = ( key ) -> open_tags[ .. ] = open_tags.filter ( x ) -> x isnt key; return null
      close = function(key) {
        if (key === get_top()) {
          open_tags.pop();
        } else {
          throw `stack error: expected ${rpr(key)}, but stack is ${rpr(open_tags)}`;
        }
        return null;
      };
      flush = function() {
        var results;
        results = [];
        while (buffer.length > 0) {
          results.push(send(buffer.shift()));
        }
        return results;
      };
      //.........................................................................................................
      return $((d, _send) => {
        whisper('29998', within('em-strong'), (d.key === 'flush' ? CND.steel : CND.grey)(jr(d)));
        send = _send;
        if (select(d, '~', 'flush')) {
          if (within('em-strong')) {
            close('em-strong');
            debug(CND.white('99930-1', "close 'em-strong'"));
            send(new_start_event('em', null, {
              $: d
            }));
            send(new_start_event('strong', null, {
              $: d
            }));
          }
          flush();
          return send(d);
        }
        //.......................................................................................................
        if (select(d, ')(', 'em-strong')) {
          help('89887-1', d.$);
          help('89887-2', open_tags, within('em-strong'));
          help('89887-3', buffer);
          if (within('em-strong')) {
            debug('77222-1');
            close('em-strong');
            debug(CND.white('99930-2', "close 'em-strong'"));
            send(new_start_event('em', null, {
              $: d
            }));
            send(new_start_event('strong', null, {
              $: d
            }));
            flush();
            send(new_stop_event('strong', null, {
              $: d
            }));
            send(new_stop_event('em', null, {
              $: d
            }));
          } else if ((within('em')) || (within('strong'))) {
            debug('77222-2');
            while (true) {
              if (within('em')) {
                close('em');
                send(new_stop_event('em', null, {
                  $: d
                }));
              } else if (within('strong')) {
                close('strong');
                send(new_stop_event('strong', null, {
                  $: d
                }));
              } else {
                break;
              }
            }
          } else {
            open('em-strong');
            debug('77222-3', open_tags, within('em-strong'));
          }
        //.......................................................................................................
        } else if (select(d, ')(', 'em')) {
          if (within('em-strong')) {
            close('em-strong');
            debug(CND.white('99930-3', "close 'em-strong'"));
            open('strong');
            send(new_stop_event('em', null, {
              $: d
            }));
          } else if (within('em')) {
            close('em');
            send(new_stop_event('em', null, {
              $: d
            }));
          } else {
            open('em');
            send(new_start_event('em', null, {
              $: d
            }));
          }
        //.......................................................................................................
        } else if (select(d, ')(', 'strong')) {
          if (within('em-strong')) {
            close('em-strong');
            debug(CND.white('99930-4', "close 'em-strong'"));
            open('em');
            send(new_stop_event('strong', null, {
              $: d
            }));
          } else if (within('strong')) {
            close('strong');
            send(new_stop_event('strong', null, {
              $: d
            }));
          } else {
            open('strong');
            send(new_start_event('strong', null, {
              $: d
            }));
          }
        //.......................................................................................................
        } else if (within('em-strong')) {
          buffer.push(d);
          debug('10002', jr(buffer));
        } else {
          //.......................................................................................................
          send(d);
        }
        //.......................................................................................................
        // urge '89887-fin', open_tags, within 'em-strong'
        return null;
      });
    };
    // #-----------------------------------------------------------------------------------------------------------
    // @$em = ( S ) ->
    //   within = false
    //   return $ ( d, send ) =>
    //     if ( select d, '.', 'achr-split' ) and ( d.value is '*' )
    //       ### using ad-hoc `clean` attribute to indicate that text does not contain active characters ###
    //       send new_text_event d.left, { clean: true, $: d }
    //       if not within then  send new_start_event 'sf', 'em', $: d
    //       else                send new_stop_event  'sf', 'em', $: d
    //       send new_text_event d.right, $: d
    //       within = not within
    //     else
    //       send d
    //     return null

    // #-----------------------------------------------------------------------------------------------------------
    // @$strong = ( S ) ->
    //   within = false
    //   return $ ( d, send ) =>
    //     if ( select d, '.', 'achr-split' ) and ( d.value is '**' )
    //       ### using ad-hoc `clean` attribute to indicate that text does not contain active characters ###
    //       send new_text_event d.left, { clean: true, $: d }
    //       if not within then  send new_start_event 'sf', 'strong', $: d
    //       else                send new_stop_event  'sf', 'strong', $: d
    //       send new_text_event d.right, $: d
    //       within = not within
    //     else
    //       send d
    //     return null

    //-----------------------------------------------------------------------------------------------------------
    return this;
  };

  ACHRS_TRANSFORMS = provide_achrs_transforms.apply({});

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.$show_events = function(S) {
    var delta, indentation, level, reduce, rpr_lnr, start;
    level = 0;
    delta = 0;
    indentation = '  ';
    //.........................................................................................................
    rpr_lnr = function(d) {
      var ref, ref1;
      return CND.gold((ref = (ref1 = d.$) != null ? ref1.lnr : void 0) != null ? ref : '?');
    };
    start = function(d) {
      return (rpr_lnr(d)) + indentation;
    };
    reduce = function(d) {
      var R, key, value;
      R = {};
      for (key in d) {
        value = d[key];
        if (key !== 'sigil' && key !== 'key' && key !== 'value' && key !== '$') {
          R[key] = value;
        }
      }
      if ((Object.keys(R)).length > 0) {
        return jr(R);
      } else {
        return '';
      }
    };
    //.........................................................................................................
    return PS.$watch((d) => {
      var color;
      if (delta !== 0) {
        level = Math.max(0, level + delta);
        delta = 0;
        indentation = ('  '.repeat(level)) + '  ';
      }
      //.......................................................................................................
      if (select(d, '~', 'warning')) {
        warn((start(d)) + CND.red(`warning ref ${d.ref}: ${d.message}`));
        warn((start(d)) + CND.red(`generated by event: ${jr(d.value)}`));
      //.......................................................................................................
      } else if (select(d, '~', null)) {
        whisper((start(d)) + jr(d));
      //.......................................................................................................
      } else if (select(d, '.', 'text')) {
        help((start(d)) + (CND.white(rpr(d.value))));
      //.......................................................................................................
      } else if (select(d, ['(', ')'], null)) {
        color = (d.sigil === '(') ? CND.lime : CND.red;
        help((start(d)) + color(`${d.sigil} ${d.key}: ${jr(d.value)} ${reduce(d)}`));
        delta = (d.sigil === '(') ? +1 : -1;
      } else {
        //.......................................................................................................
        urge((start(d)) + jr(d));
      }
      //.......................................................................................................
      return null;
    });
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.$parse_special_forms = function(S) {
    var gsend, lnr, mktsp2_push_source;
    //---------------------------------------------------------------------------------------------------------
    lnr = 0;
    mktsp2_push_source = null;
    gsend = null;
    //---------------------------------------------------------------------------------------------------------
    this.$_as_text_event = function(d) {
      return $((d, send) => {
        var ref;
        /* Convert texts in to text events, adjust line nrs */
        /* TAINT should split texts into lines */
        if (CND.isa_text(d)) {
          lnr += +1;
          d = new_text_event(d, {
            $: {
              lnr,
              text: d
            }
          });
        } else if ((select(d, '.', 'text')) && (((ref = d.$) != null ? ref.lnr : void 0) != null)) {
          lnr = d.$.lnr;
        }
        //.......................................................................................................
        return send(d);
      });
    };
    //---------------------------------------------------------------------------------------------------------
    this.get_transformer = () => {
      var pipeline;
      pipeline = [];
      // pipeline.push PS.$watch ( d ) => whisper '12091', jr d
      pipeline.push(this.$_as_text_event());
      //.......................................................................................................
      pipeline.push($((d, send) => {
        gsend = send;
        if (mktsp2_push_source == null) {
          mktsp2_push_source = this.get_mktsp2_push_source();
        }
        mktsp2_push_source.push(d);
        return null;
      }));
      //.......................................................................................................
      return PS.pull(...pipeline);
    };
    //---------------------------------------------------------------------------------------------------------
    this.get_mktsp2_push_source = () => {
      var pipeline, source;
      source = new_push_source();
      pipeline = [];
      //.......................................................................................................
      pipeline.push(source);
      // pipeline.push PS.$watch ( d ) => whisper jr d
      pipeline.push($unwrap_recycled());
      //.......................................................................................................
      pipeline.push(this.$split_on_first_active_chr(S));
      pipeline.push(ACHRS_TRANSFORMS.$em_and_strong_1(S));
      pipeline.push(ACHRS_TRANSFORMS.$em_and_strong_2(S));
      // pipeline.push ACHRS_TRANSFORMS.$em                S
      // pipeline.push ACHRS_TRANSFORMS.$strong            S
      pipeline.push(this.$recycle_untouched_texts(S));
      pipeline.push(this.$warn_on_unhandled_achrs(S));
      //.......................................................................................................
      pipeline.push(PS.$watch((d) => {
        if (select(d, '~', 'end')) {
          return source.end();
        }
      }));
      pipeline.push($recycle(source.push));
      //.......................................................................................................
      pipeline.push(PS.$watch(function(d) {
        return gsend(d);
      }));
      pipeline.push(PS.$drain());
      PS.pull(...pipeline);
      //.......................................................................................................
      return source;
    };
    //---------------------------------------------------------------------------------------------------------
    return this.get_transformer();
  };

  //###########################################################################################################
  if (module.parent == null) {
    S = {};
    texts = [
      // 'a line of text.'
      // 'a line of *text*.'
      // 'a line of 𣥒text*.'
      // 'a **strong** and a *less strong* emphasis.'
      'a *normal and a **strong** emphasis*.',
      // 'another *such and **such*** emphasis.'
      // '***em* strong**.'
      // '***strong** em*.'
      'triple ***strong-em***.',
      'lone *star',
      'triple lone ***star'
    ];
    MKTSP2 = this;
    source = new_push_source();
    pipeline = [];
    pipeline.push(source);
    pipeline.push(PS.$watch((d) => {
      return whisper('33301', jr(d));
    }));
    pipeline.push(MKTSP2.$parse_special_forms(S));
    // pipeline.push PS.$watch ( d ) => urge jr d
    pipeline.push(MKTSP2.$show_events(S));
    pipeline.push(PS.$drain());
    PS.pull(...pipeline);
    for (i = 0, len = texts.length; i < len; i++) {
      text = texts[i];
      whisper('#'.repeat(50));
      source.push(text);
      source.push(new_flush_event());
    }
  }

  // pattern = /// (?<!\\) (?<achr> (?<chr> [ \* ` + p ] ) \k<chr>* ) ///
// # pattern = /// (?<!\\) (?<achr> ( [ \* ` + p ] ) \2* ) ///
// # pattern = /// (?<!\\) ( ( [ \* ` + p ] ) \2* ) ///
// debug 'flappy'.match pattern
// debug 'fla\\ppy'.match pattern

}).call(this);

//# sourceMappingURL=mktscript-parser-2.js.map
