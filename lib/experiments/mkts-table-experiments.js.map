{
  "version": 3,
  "file": "mkts-table-experiments.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/mkts-table-experiments.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MK/TS/MACRO-ESCAPER/mkts-tables'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\nXREGEXP                   = require 'xregexp'\nunified                   = require 'unified'\nremark_parse              = require 'remark-parse'\nstringify                 = require 'rehype-stringify'\nremark_to_rehype          = require 'remark-rehype'\nremark_to_html            = require 'remark-html'\nremark_grid_tables        = require 'remark-grid-tables'\njr                        = JSON.stringify\n\n#-----------------------------------------------------------------------------------------------------------\nshow_permutations = ->\n  columns = [ 'O', 'A', 'B', 'C', 'Z', ]\n  rows    = [ 'O', 'A', 'B', 'C', 'Z', ]\n\n  for column in columns\n    for row in rows\n      echo \"      \\\\node[color=gray] at ( \\\\c#{column}, \\\\r#{row} ) {{\\\\mktsStyleCode{}#{column}#{row}}};\"\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_tableparsing = ->\n  x = unified()\n    .use remark_parse\n    .use remark_grid_tables\n    # .use remark_to_rehype\n    .use stringify\n    .use remark_to_html\n\n  demo_1 = \"\"\"\n  +-------+----------+------+\n  | Table Headings   | Here |\n  +-------+----------+------+\n  | Sub   | Headings | Too  |\n  +=======+==========+======+\n  | cell  | column spanning |\n  + spans +----------+------+\n  | rows  | normal   | cell |\n  +-------+----------+------+\n  | multi | cells can be    |\n  | line  | *formatted*     |\n  |       | **paragraphs**  |\n  | cells |                 |\n  | too   |                 |\n  +-------+-----------------+\n\n  \"\"\"\n  debug x.stringify x.parse demo_1\n\n  demo_2 = \"\"\"\n    +-------+----------+------+\n    | Table Headings   | Here |\n    +-------+----------+------+\n    | Sub   | Headings | Too  |\n    +-------+----------+------+\n    | Sub   | Headings | Too  |\n    +=======+==========+======+\n    | cell  | column spanning |\n    + spans +----------+------+\n    | rows  | normal   | cell |\n    +-------+----------+------+\n    | multi | cells can be    |\n    | line  | *formatted*     |\n    |       | **paragraphs**  |\n    | cells |                 |\n    | too   |                 |\n    +-------+-----------------+\n\n\n\n  \"\"\"\n  debug x.stringify x.parse demo_2\n\n\n### ==================================================================================================== ###\n\n# debug EXCJSCC = require '../../src/experiments/exceljs-col-cache-module'\nEXCJSCC                   = require '../exceljs-spreadsheet-address-codec'\n\n\n# debug '77762-1', EXCJSCC.l2n               'A'    ### letter_from_number ###\n# debug '77762-2', EXCJSCC.l2n               'Z'\n# debug '77762-3', EXCJSCC.l2n               'AA'\n# # debug '77762-4', EXCJSCC.l2n               'zz' ### must be uppercase ###\n# debug '77762-5', EXCJSCC.n2l               '1'    ### letter_from_number ###\n# debug '77762-6', EXCJSCC.n2l               '256'\n# debug '77762-7', EXCJSCC.n2l               256\n# # debug '77762-8', EXCJSCC.validateAddress   '*+'\n# debug '77762-9', EXCJSCC.validateAddress   'AA1'\n# # debug '77762-10', EXCJSCC.validateAddress   'A:A'\n# debug '77762-11', EXCJSCC.decodeAddress     'A1'  ### convert address string into structure ###\n# debug '77762-12', EXCJSCC.decodeAddress     'AA1' ### like `{ address: 'A1', col: 1, row: 1, '$col$row': '$A$1' }` ###\n# debug '77762-13', EXCJSCC.getAddress        'AA1' ### convert r,c into structure (if only 1 arg, assume r is address string) ###\n# debug '77762-13', EXCJSCC.getAddress        '1', '2'\n# debug '77762-13', EXCJSCC.getAddress        1, 2\n# debug '77762-14', EXCJSCC.decode            'AA1' ### convert [address], [tl:br] into address structures ###\n# debug '77762-14', EXCJSCC.decode            'A1:B2'\n# # debug '77762-15', EXCJSCC.decodeEx          'AA1'\n# debug '77762-16', EXCJSCC.encodeAddress     1, 1 ### convert row,col into address string ###\n# debug '77762-16', EXCJSCC.encodeAddress     1234, 1234\n# debug '77762-17', EXCJSCC.encode            1234, 1234 ### convert row,col into string address or t,l,b,r into range ###\n# debug '77762-17', EXCJSCC.encode            1, 2, 3, 4\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_cellquad_sides = ( me, cellquad, side ) ->\n  switch side\n    when 'left'\n      row_nr_1    = cellquad.top\n      row_nr_2    = cellquad.bottom\n      col_nr_1    = cellquad.left\n      col_nr_2    = cellquad.left\n    when 'right'\n      row_nr_1    = cellquad.top\n      row_nr_2    = cellquad.bottom\n      col_nr_1    = cellquad.right\n      col_nr_2    = cellquad.right\n    when 'top'\n      row_nr_1    = cellquad.top\n      row_nr_2    = cellquad.top\n      col_nr_1    = cellquad.left\n      col_nr_2    = cellquad.right\n    when 'bottom'\n      row_nr_1    = cellquad.bottom\n      row_nr_2    = cellquad.bottom\n      col_nr_1    = cellquad.left\n      col_nr_2    = cellquad.right\n    when '*'\n      yield from @_walk_cellquad_sides me, cellquad, 'left'\n      yield from @_walk_cellquad_sides me, cellquad, 'right'\n      yield from @_walk_cellquad_sides me, cellquad, 'top'\n      yield from @_walk_cellquad_sides me, cellquad, 'bottom'\n      yield return\n    else\n      throw new Error \"(MKTS/TABLE 2658) illegal argument for side #{rpr side}\"\n  for row_nr in [ row_nr_1 .. row_nr_2 ]\n    for col_nr in [ col_nr_1 .. col_nr_2 ]\n      ### TAINT don't use EXCJSCC directly ###\n      col_letter  = ( EXCJSCC.n2l col_nr ).toLowerCase()\n      quad        = \"#{col_letter}#{row_nr}\"\n      yield { col_nr, row_nr, col_letter, quad, side, }\n  yield return\n\n#-----------------------------------------------------------------------------------------------------------\ncellquad = { top: 1, left: 1, bottom: 4, right: 3, tl: 'a1', br: 'c4' }\n\n( urge 'cellquad left   ', jr d ) for d from @_walk_cellquad_sides null, cellquad, 'left'\n# ( urge 'cellquad right  ', jr d ) for d from @_walk_cellquad_sides null, cellquad, 'right'\n# ( urge 'cellquad top    ', jr d ) for d from @_walk_cellquad_sides null, cellquad, 'top'\n# ( urge 'cellquad bottom ', jr d ) for d from @_walk_cellquad_sides null, cellquad, 'bottom'\n# ( urge '*',      jr d ) for d from @_walk_cellquad_sides null, cellquad, '*'\necho()\n# ( urge 'cell     left   ', jr d ) for d from @_walk_cell_sides null, cellquad, 'left'\n# ( urge 'cell     right  ', jr d ) for d from @_walk_cell_sides null, cellquad, 'right'\n# ( urge 'cell     top    ', jr d ) for d from @_walk_cell_sides null, cellquad, 'top'\n# ( urge 'cell     bottom ', jr d ) for d from @_walk_cell_sides null, cellquad, 'bottom'\n# ( urge '*',      jr d ) for d from @_walk_cell_sides null, cellquad, '*'\n\n\n\n\n\n\n\n"
  ]
}