{
  "version": 3,
  "file": "mktscript-parser.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/mktscript-parser.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HTML-TAGS/TESTS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\neq                        = CND.equals\njr                        = JSON.stringify\n#...........................................................................................................\njoin                      = ( x, joiner = '' ) -> x.join joiner\nassign                    = Object.assign\n# XREGEXP                   = require 'xregexp'\nPS                        = require 'pipestreams'\n{ $, $async, }            = PS\nassign                    = Object.assign\njr                        = JSON.stringify\ncopy                      = ( P... ) -> assign {}, P...\nrprx                      = ( d ) -> \"#{d.mark} #{d.type}:: #{jr d.value} #{jr d.stamped ? false}\"\n# echo '{ ' + ( ( name for name of require './recycle' ).sort().join '\\n  ' ) + \" } = require './recycle'\"\n{ $recycle\n  $unwrap_recycled\n  is_recycling\n  is_stamped\n  is_system\n  new_end_event\n  new_event\n  new_single_event\n  new_start_event\n  new_stop_event\n  new_system_event\n  new_text_event\n  new_push_source\n  new_warning\n  recycling\n  select\n  select_all\n  stamp\n  unwrap_recycled } = require './recycle'\n\n#-----------------------------------------------------------------------------------------------------------\n@active_chr_pattern   = /// ///u\n@active_chrs          = new Set()\n\n#-----------------------------------------------------------------------------------------------------------\n### thx to https://stackoverflow.com/a/3561711/7568091 ###\n@_escape_for_regex = ( text ) -> text.replace @_escape_for_regex.pattern, '\\\\$&'\n@_escape_for_regex.pattern = /[-\\/\\\\^$*+?.()|[\\]{}]/g\n\n#-----------------------------------------------------------------------------------------------------------\n@add_active_chrs = ( chrs... ) ->\n  for chr in chrs\n    unless ( CND.isa_text chr ) and ( chr.match /^.$/u )?\n      throw new Error \"expected single character, got #{rpr chr}\"\n    @active_chrs.add chr\n  achrs                 = ( ( @_escape_for_regex chr ) for chr from @active_chrs ).join '|'\n  @active_chr_pattern   = /// ^ (?<left> .*? ) (?<achrs> (?<achr> #{achrs} ) \\k<achr>* ) (?<right> .* ) $ ///\n                        # /// (?<!\\\\) (?<achr> (?<chr> [ \\* ` + p ] ) \\k<chr>* ) ///\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@add_active_chrs '<', '&', '*', '`', '^', '_', '𣥒'\n# help @active_chr_pattern\n\n# debug @_escape_for_regex '*'\n# debug @_escape_for_regex '/'\n# debug @_escape_for_regex '^'\n# debug @_escape_for_regex '\\\\'\n# debug 'foo-bar'.match new RegExp '[x\\\\-a]'\n# @add_active_chr '-'; help @active_chr_pattern\n# @add_active_chr '^'; help @active_chr_pattern\n\n\n#-----------------------------------------------------------------------------------------------------------\n@split_on_first_active_chr = ( text ) ->\n  ### If `text` contains an active character, return a POD with the keys `left`, `achr`, and `right`, where\n  `left` holds the (possibly empty) text before the first active character, `achr` holds the active\n  character itself, and `right` holds the remaining, agaoin possibly empty, text (that may or may not contain\n  further active characters). ###\n  return null unless ( match = text.match @active_chr_pattern )?\n  return match.groups\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_on_first_active_chr = ( S ) ->\n  return $ ( d, send ) =>\n    ### using ad-hoc `clean` attribute to indicate that text does not contain active characters ###\n    return send d unless ( select d, '.', 'text' ) and ( not d.clean )\n    if ( parts = @split_on_first_active_chr d.value )?\n      { achr, achrs, left, right, } = parts\n      send new_single_event 'achr-split', achrs, { achr, left, right, }\n    else\n      d.clean = true\n      send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$recycle_untouched_texts = ( S ) -> $ ( d, send ) =>\n    if ( select d, '.', 'text' ) and ( not d.clean ) then send recycling d\n    else send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$warn_on_unhandled_achrs = ( S ) -> $ ( d, send ) =>\n    if ( select d, '.', 'achr-split' ) then send new_warning 'µ99823', \"unhandled active characters\", d\n    else send d\n    return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nprovide_achrs_transforms = ->\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$em = ( S ) ->\n    within = false\n    return $ ( d, send ) =>\n      if ( select d, '.', 'achr-split' ) and ( d.value is '*' )\n        ### using ad-hoc `clean` attribute to indicate that text does not contain active characters ###\n        send new_text_event d.left, clean: true\n        if not within then  send new_start_event 'sf', 'em'\n        else                send new_stop_event  'sf', 'em'\n        send new_text_event d.right\n        within = not within\n      else\n        send d\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$strong = ( S ) ->\n    within = false\n    return $ ( d, send ) =>\n      if ( select d, '.', 'achr-split' ) and ( d.value is '**' )\n        ### using ad-hoc `clean` attribute to indicate that text does not contain active characters ###\n        send new_text_event d.left, clean: true\n        if not within then  send new_start_event 'sf', 'strong'\n        else                send new_stop_event  'sf', 'strong'\n        send new_text_event d.right\n        within = not within\n      else\n        send d\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  return @\n\nACHRS_TRANSFORMS = provide_achrs_transforms.apply {}\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$show_events = ( S ) ->\n  level       = 0\n  return PS.$watch ( d ) =>\n    indentation = '  '.repeat level\n    if select d, '~', 'warning'\n      warn indentation + \"warning ref #{d.ref}: #{d.message}\"\n      warn indentation + \"generated by event: #{jr d.value}\"\n    else if ( select d, '~', null )\n      whisper indentation + jr d\n    else if ( select d, '.', 'text' )\n      help indentation + CND.reverse CND.yellow rpr d.value\n    else if ( select d, [ '(', ')' ], null )\n      help indentation + CND.plum \"#{d.sigil} #{d.key}: #{jr d.value} #{_reduce d}\"\n      level += if ( d.sigil is '(' ) then +1 else -1\n    else\n      urge indentation + jr d\n    return null\n#-----------------------------------------------------------------------------------------------------------\n_reduce = ( d ) ->\n  R = {}\n  R[ key ] = value for key, value of d when key not in [ 'sigil', 'key', 'value', ]\n  return if ( Object.keys R ).length > 0 then jr R else ''\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@new_parser = ( S ) ->\n  S.source    = new_push_source()\n  on_stop     = PS.new_event_collector 'stop', -> help 'ok'\n  pipeline    = []\n  #.........................................................................................................\n  pipeline.push S.source\n  # pipeline.push PS.$watch ( d ) => whisper jr d\n  pipeline.push $unwrap_recycled()\n  # pipeline.push COLLATZ.$main S\n  #.........................................................................................................\n  pipeline.push @$split_on_first_active_chr         S\n  pipeline.push ACHRS_TRANSFORMS.$em                S\n  pipeline.push ACHRS_TRANSFORMS.$strong            S\n  pipeline.push @$recycle_untouched_texts           S\n  pipeline.push @$warn_on_unhandled_achrs           S\n  #.........................................................................................................\n  # pipeline.push PS.$watch ( d ) => help CND.blue jr d\n  # pipeline.push PS.$watch ( d ) => help '> sink  ', rprx d unless is_meta d\n  pipeline.push PS.$watch ( d ) => if ( select d, '~', 'end' ) then S.source.end()\n  pipeline.push $recycle S.source.push\n  #.........................................................................................................\n  pipeline.push @$show_events                       S\n  pipeline.push on_stop.add PS.$drain()\n  PS.pull pipeline...\n  #.........................................................................................................\n  R       = ( value ) -> S.source.push new_text_event value\n  R.end   = -> S.source.end()\n  return R\n\n\n\n############################################################################################################\nunless module.parent?\n  S = {}\n  texts = [\n    'a **strong** and a *less strong* emphasis.'\n    'a line of *text*.'\n    'a line of 𣥒text*.'\n    'a line of text.'\n    ]\n  push = @new_parser S\n  for text in texts\n    whisper '#'.repeat 50\n    push text\n\n  # pattern = /// (?<!\\\\) (?<achr> (?<chr> [ \\* ` + p ] ) \\k<chr>* ) ///\n  # # pattern = /// (?<!\\\\) (?<achr> ( [ \\* ` + p ] ) \\2* ) ///\n  # # pattern = /// (?<!\\\\) ( ( [ \\* ` + p ] ) \\2* ) ///\n  # debug 'flappy'.match pattern\n  # debug 'fla\\\\ppy'.match pattern\n\n\n"
  ]
}