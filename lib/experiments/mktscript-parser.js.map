{
  "version": 3,
  "file": "mktscript-parser.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/mktscript-parser.coffee"
  ],
  "names": [],
  "mappings": ";AACA;EAAA;AAAA,MAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,YAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAf5B;;;EAiBA,IAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,EAAA,GAA4B,GAAG,CAAC;;EAChC,EAAA,GAA4B,IAAI,CAAC,UAnBjC;;;EAqBA,IAAA,GAA4B,QAAA,CAAE,CAAF,EAAK,SAAS,EAAd,CAAA;WAAsB,CAAC,CAAC,IAAF,CAAO,MAAP;EAAtB;;EAC5B,MAAA,GAA4B,MAAM,CAAC,OAtBnC;;;EAwBA,EAAA,GAA4B,OAAA,CAAQ,aAAR;;EAC5B,CAAA,CAAE,CAAF,EAAK,MAAL,CAAA,GAA4B,EAA5B;;EACA,YAAA,GAA4B,OAAA,CAAQ,eAAR;;EAC5B,MAAA,GAA4B,MAAM,CAAC;;EACnC,EAAA,GAA4B,IAAI,CAAC;;EACjC,IAAA,GAA4B,QAAA,CAAA,GAAE,CAAF,CAAA;WAAY,MAAA,CAAO,CAAA,CAAP,EAAW,GAAA,CAAX;EAAZ;;EAC5B,IAAA,GAA4B,QAAA,CAAE,CAAF,CAAA;AAAS,QAAA;WAAA,CAAA,CAAA,CAAG,CAAC,CAAC,IAAL,EAAA,CAAA,CAAa,CAAC,CAAC,IAAf,CAAoB,GAApB,CAAA,CAAyB,EAAA,CAAG,CAAC,CAAC,KAAL,CAAzB,EAAA,CAAA,CAAuC,EAAA,mCAAe,KAAf,CAAvC,CAAA;EAAT,EA9B5B;;;EAiCA,IAAC,CAAA,kBAAD,GAAwB;;EACxB,IAAC,CAAA,WAAD,GAAwB,IAAI,GAAJ,CAAA,EAlCxB;;;;EAsCA,IAAC,CAAA,iBAAD,GAAqB,QAAA,CAAE,IAAF,CAAA;WAAY,IAAI,CAAC,OAAL,CAAa,IAAC,CAAA,iBAAiB,CAAC,OAAhC,EAAyC,MAAzC;EAAZ;;EACrB,IAAC,CAAA,iBAAiB,CAAC,OAAnB,GAA6B,yBAvC7B;;;EA0CA,IAAC,CAAA,eAAD,GAAmB,QAAA,CAAA,GAAE,IAAF,CAAA;AACjB,QAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA;IAAA,KAAA,sCAAA;;MACE,IAAA,CAAA,CAAO,CAAE,GAAG,CAAC,QAAJ,CAAa,GAAb,CAAF,CAAA,IAAyB,6BAAhC,CAAA;QACE,MAAM,IAAI,KAAJ,CAAU,CAAA,+BAAA,CAAA,CAAkC,GAAA,CAAI,GAAJ,CAAlC,CAAA,CAAV,EADR;;MAEA,IAAC,CAAA,WAAW,CAAC,GAAb,CAAiB,GAAjB;IAHF;IAIA,OAAA,GAAwB,GAAA,GAAM,CAAE;;AAA6B;AAAA;MAAA,KAAA,UAAA;qBAAzB,IAAC,CAAA,iBAAD,CAAmB,GAAnB;MAAyB,CAAA;;iBAA7B,CAAwD,CAAC,IAAzD,CAA8D,GAA9D,CAAF,CAAN,GAA8E;IACtG,IAAC,CAAA,kBAAD,GAAwB,IAAI,MAAJ,CAAW,OAAX,EAAoB,GAApB;AACxB,WAAO;EAPU,EA1CnB;;;EAoDA,IAAC,CAAA,eAAD,CAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,GAArC,EAA0C,GAA1C;;EACA,IAAA,CAAK,IAAC,CAAA,kBAAN,EArDA;;;;;;;;;;;EAgEA,IAAC,CAAA,CAAD,GAAK,QAAA,CAAE,CAAF,CAAA;AACH,QAAA,CAAA,EAAA,OAAA,EAAA;IAAA,CAAC,CAAC,MAAF,GAAc,YAAA,CAAA;IACd,OAAA,GAAc,EAAE,CAAC,mBAAH,CAAuB,MAAvB,EAA+B,QAAA,CAAA,CAAA;aAAG,IAAA,CAAK,IAAL;IAAH,CAA/B;IACd,QAAA,GAAc,GAFd;;IAIA,QAAQ,CAAC,IAAT,CAAc,CAAC,CAAC,MAAhB;IACA,QAAQ,CAAC,IAAT,CAAc,QAAA,CAAA,CAAd,EALA;;IAOA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,QAAA,CAAE,CAAF,CAAA;MAAS,IAAA,CAA+B,OAAA,CAAQ,CAAR,CAA/B;eAAA,IAAA,CAAK,UAAL,EAAiB,IAAA,CAAK,CAAL,CAAjB,EAAA;;IAAT,CAAV,CAAd,EAPA;;IASA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,QAAA,CAAE,CAAF,CAAA;MAAS,IAAK,MAAA,CAAO,CAAP,EAAU,GAAV,EAAe,KAAf,CAAL;eAAiC,CAAC,CAAC,MAAM,CAAC,GAAT,CAAA,EAAjC;;IAAT,CAAV,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,eAAA,CAAgB,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAd,CAAmB,CAAC,CAAC,MAArB,CAAhB,CAAd,EAVA;;IAYA,QAAQ,CAAC,IAAT,CAAc,OAAO,CAAC,GAAR,CAAY,EAAE,CAAC,MAAH,CAAA,CAAZ,CAAd;IACA,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR,EAbA;;IAeA,CAAA,GAAU,QAAA,CAAE,KAAF,CAAA;aAAa,CAAC,CAAC,MAAM,CAAC,IAAT,CAAc,SAAA,CAAU,GAAV,EAAe,QAAf,EAAyB,KAAzB,CAAd;IAAb;IACV,CAAC,CAAC,GAAF,GAAU,QAAA,CAAA,CAAA;aAAG,CAAC,CAAC,MAAM,CAAC,GAAT,CAAA;IAAH;AACV,WAAO;EAlBJ;AAhEL",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HTML-TAGS/TESTS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\neq                        = CND.equals\njr                        = JSON.stringify\n#...........................................................................................................\njoin                      = ( x, joiner = '' ) -> x.join joiner\nassign                    = Object.assign\n# XREGEXP                   = require 'xregexp'\nPS                        = require 'pipestreams'\n{ $, $async, }            = PS\nnew_pushable              = require 'pull-pushable'\nassign                    = Object.assign\njr                        = JSON.stringify\ncopy                      = ( P... ) -> assign {}, P...\nrprx                      = ( d ) -> \"#{d.mark} #{d.type}:: #{jr d.value} #{jr d.stamped ? false}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@active_chr_pattern   = /// ///u\n@active_chrs          = new Set()\n\n#-----------------------------------------------------------------------------------------------------------\n### thx to https://stackoverflow.com/a/3561711/7568091 ###\n@_escape_for_regex = ( text ) -> text.replace @_escape_for_regex.pattern, '\\\\$&'\n@_escape_for_regex.pattern = /[-\\/\\\\^$*+?.()|[\\]{}]/g\n\n#-----------------------------------------------------------------------------------------------------------\n@add_active_chrs = ( chrs... ) ->\n  for chr in chrs\n    unless ( CND.isa_text chr ) and ( chr.match /^.$/u )?\n      throw new Error \"expected single character, got #{rpr chr}\"\n    @active_chrs.add chr\n  pattern               = '[' + ( ( ( @_escape_for_regex chr ) for chr from @active_chrs ).join '|' ) + ']'\n  @active_chr_pattern   = new RegExp pattern, 'u'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@add_active_chrs '<', '&', '*', '`', '^', '_'\nhelp @active_chr_pattern\n\n# debug @_escape_for_regex '*'\n# debug @_escape_for_regex '/'\n# debug @_escape_for_regex '^'\n# debug @_escape_for_regex '\\\\'\n# debug 'foo-bar'.match new RegExp '[x\\\\-a]'\n# @add_active_chr '-'; help @active_chr_pattern\n# @add_active_chr '^'; help @active_chr_pattern\n\n#-----------------------------------------------------------------------------------------------------------\n@f = ( S ) ->\n  S.source    = new_pushable()\n  on_stop     = PS.new_event_collector 'stop', -> help 'ok'\n  pipeline    = []\n  #.........................................................................................................\n  pipeline.push S.source\n  pipeline.push $uncycle()\n  # pipeline.push COLLATZ.$main S\n  pipeline.push PS.$watch ( d ) -> help '> sink  ', rprx d unless is_meta d\n  #.........................................................................................................\n  pipeline.push PS.$watch ( d ) -> if ( select d, '~', 'end' ) then S.source.end()\n  pipeline.push $try_to_recycle S.source.push.bind S.source\n  #.........................................................................................................\n  pipeline.push on_stop.add PS.$drain()\n  PS.pull pipeline...\n  #.........................................................................................................\n  R       = ( value ) -> S.source.push new_event '.', 'number', value\n  R.end   = -> S.source.end()\n  return R\n\n"
  ]
}