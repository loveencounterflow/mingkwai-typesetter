{
  "version": 3,
  "file": "circular-pipelines.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/circular-pipelines.coffee"
  ],
  "names": [],
  "mappings": ";AACA;EAAA;AAAA,MAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,OAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,CAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,eAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,EAAA,UAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;IAAA,2DAAA;;;EAIA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR,EAL5B;;;EAOA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAlB5B;;;;;;;;;EA0BA,EAAA,GAA4B,OAAA,CAAQ,aAAR;;EAC5B,CAAA,CAAE,CAAF,EAAK,MAAL,CAAA,GAA4B,EAA5B;;EACA,MAAA,GAA4B,MAAM,CAAC;;EACnC,KAAA,GAA4B,QAAA,CAAE,GAAF,EAAO,CAAP,CAAA;WAAc,UAAA,CAAW,CAAX,EAAc,GAAA,GAAM,IAApB;EAAd;;EAC5B,KAAA,GAA4B;;EAC5B,EAAA,GAA4B,IAAI,CAAC;;EACjC,IAAA,GAA4B,QAAA,CAAA,GAAE,CAAF,CAAA;WAAY,MAAA,CAAO,CAAA,CAAP,EAAW,GAAA,CAAX;EAAZ;;EAC5B,IAAA,GAA4B,QAAA,CAAE,CAAF,CAAA;AAAS,QAAA,GAAA,EAAA;WAAA,CAAA,CAAA,CAAG,CAAC,CAAC,KAAL,EAAA,CAAA,CAAc,CAAC,CAAC,GAAhB,CAAoB,GAApB,CAAA,CAAyB,EAAA,iCAAa,IAAb,CAAzB,EAAA,CAAA,CAA8C,EAAA,qCAAe,KAAf,CAA9C,CAAA;EAAT,EAjC5B;;;EAmCA,GAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,CAAA,CAAE,MAAF,EACE,UADF,EAEE,KAFF,CAAA,GAE4B,GAF5B,EApCA;;;EAyCA,eAAA,GAAkB,QAAA,CAAA,CAAA,EAAA;;IAGhB,IAAC,CAAA,gBAAD,GAAoB,QAAA,CAAE,KAAF,EAAA,GAAS,KAAT,CAAA;AAClB,aAAO,GAAG,CAAC,gBAAJ,CAAqB,QAArB,EAA+B,KAA/B,EAAsC,GAAA,KAAtC;IADW,EAApB;;IAIA,IAAC,CAAA,MAAD,GAAW,QAAA,CAAE,CAAF,CAAA;aAAS,CAAA,KAAK;IAAd;IACX,IAAC,CAAA,MAAD,GAAW,QAAA,CAAE,CAAF,CAAA;oBAAS,GAAK,EAAL,KAAY;IAArB;IACX,IAAC,CAAA,OAAD,GAAW,QAAA,CAAE,CAAF,CAAA;oBAAS,GAAK,EAAL,KAAU;IAAnB,EANX;;IASA,IAAC,CAAA,aAAD,GAAiB,QAAA,CAAE,CAAF,CAAA;AACf,aAAO,CAAA,CAAE,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;QACP,IAAA,CAAA,CAAqB,CAAE,MAAA,CAAO,CAAP,EAAU,GAAV,EAAe,QAAf,CAAF,CAAA,IAAgC,CAAE,IAAC,CAAA,OAAD,CAAS,CAAC,CAAC,KAAX,CAAF,CAArD,CAAA;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;QACA,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;QACA,IAAA,CAAK,GAAG,CAAC,SAAJ,CAAc,IAAC,CAAA,gBAAD,CAAoB,CAAC,CAAC,KAAF,GAAU,CAA9B,EAAmC;UAAA,IAAA,EAAM,CAAC,CAAC;QAAR,CAAnC,CAAd,CAAL;AACA,eAAO;MAJA,CAAF;IADQ,EATjB;;IAiBA,IAAC,CAAA,YAAD,GAAgB,QAAA,CAAE,CAAF,CAAA;AACd,aAAO,CAAA,CAAE,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;QACP,IAAG,CAAE,MAAA,CAAO,CAAP,EAAU,GAAV,EAAe,QAAf,CAAF,CAAA,IAAgC,CAAE,CAAI,IAAC,CAAA,MAAD,CAAQ,CAAC,CAAC,KAAV,CAAN,CAAhC,IAA4D,CAAE,IAAC,CAAA,MAAD,CAAQ,CAAC,CAAC,KAAV,CAAF,CAA/D;;UAEE,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;UACA,IAAA,CAAK,GAAG,CAAC,SAAJ,CAAgB,IAAC,CAAA,gBAAD,CAAoB,CAAC,CAAC,KAAF,GAAU,CAAV,GAAc,CAAlC,EAAuC;YAAA,IAAA,EAAM,CAAC,CAAC;UAAR,CAAvC,CAAhB,CAAL,EAHF;SAAA,MAAA;UAKE,IAAA,CAAK,CAAL,EALF;;AAMA,eAAO;MAPA,CAAF;IADO,EAjBhB;;;;;;;;;IAmCA,IAAC,CAAA,WAAD,GAAe,QAAA,CAAE,CAAF,CAAA;AACb,UAAA;MAAA,KAAA,GAAQ,IAAI,GAAJ,CAAA;AACR,aAAO,CAAA,CAAE,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;QACP,IAAA,CAAqB,MAAA,CAAO,CAAP,EAAU,GAAV,EAAe,QAAf,CAArB;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;QACA,IAA6B,KAAK,CAAC,GAAN,CAAU,CAAC,CAAC,KAAZ,CAA7B;AAAA,iBAAO,IAAA,CAAK,IAAL,EAAW,CAAC,CAAC,KAAb,EAAP;;QACA,IAAA,CAAK,CAAL;eACA,KAAK,CAAC,GAAN,CAAU,CAAC,CAAC,KAAZ;MAJO,CAAF;IAFM,EAnCf;;IA4CA,IAAC,CAAA,UAAD,GAAc,QAAA,CAAE,CAAF,CAAA;AACZ,aAAO,CAAA,CAAE,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;QACP,IAAG,CAAE,UAAA,CAAW,CAAX,EAAc,GAAd,EAAmB,QAAnB,CAAF,CAAA,IAAoC,CAAE,IAAC,CAAA,MAAD,CAAQ,CAAC,CAAC,KAAV,CAAF,CAAvC;UACE,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;UACA,IAAA,CAAK,GAAG,CAAC,aAAJ,CAAA,CAAL,EAFF;SAAA,MAAA;UAIE,IAAA,CAAK,CAAL,EAJF;;AAKA,eAAO;MANA,CAAF;IADK,EA5Cd;;IAsDA,IAAC,CAAA,iBAAD,GAAqB,QAAA,CAAA,CAAA;aAAG,EAAE,CAAC,MAAH,CAAU,QAAA,CAAE,CAAF,CAAA;AAChC,YAAA;QAAA,IAAG,CAAE,UAAA,CAAW,CAAX,EAAc,GAAd,EAAmB,QAAnB,CAAF,CAAA,IAAoC,CAAE,IAAA,GAAO,GAAG,CAAC,OAAJ,CAAY,CAAC,CAAC,KAAd,CAAT,CAAA,KAAoC,QAA3E;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,iBAAA,CAAA,CAAoB,IAApB,CAAyB,IAAzB,CAAA,CAA+B,GAAA,CAAI,CAAJ,CAA/B,CAAA,CAAV,EADR;;AAEA,eAAO;MAHyB,CAAV;IAAH,EAtDrB;;IA4DA,IAAC,CAAA,KAAD,GAAS,QAAA,CAAE,CAAF,CAAA;AACP,UAAA;MAAA,QAAA,GAAW,GAAX;;;MAGA,QAAQ,CAAC,IAAT,CAAc,OAAO,CAAC,aAAR,CAA8B,CAA9B,CAAd;MACA,QAAQ,CAAC,IAAT,CAAc,OAAO,CAAC,YAAR,CAA8B,CAA9B,CAAd;MACA,QAAQ,CAAC,IAAT,CAAc,OAAO,CAAC,iBAAR,CAA8B,CAA9B,CAAd,EALA;;AAOA,aAAO,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;IARA,EA5DT;;AAuEA,WAAO;EA1ES;;EA2ElB,OAAA,GAAU,eAAe,CAAC,KAAhB,CAAsB,CAAA,CAAtB,EApHV;;;EAuHA,IAAC,CAAA,UAAD,GAAc,QAAA,CAAE,CAAF,CAAA;AACZ,QAAA,CAAA,EAAA;IAAA,CAAC,CAAC,MAAF,GAAc,GAAG,CAAC,eAAJ,CAAA;IACd,QAAA,GAAc,GADd;;IAGA,QAAQ,CAAC,IAAT,CAAc,CAAC,CAAC,MAAhB,EAHA;;IAKA,QAAQ,CAAC,IAAT,CAAc,GAAG,CAAC,gBAAJ,CAAA,CAAd,EALA;;;;IASA,QAAQ,CAAC,IAAT,CAAc,OAAO,CAAC,KAAR,CAAc,CAAd,CAAd,EATA;;IAWA,QAAQ,CAAC,IAAT,CAAc,GAAG,CAAC,QAAJ,CAAa,CAAC,CAAC,MAAM,CAAC,IAAtB,CAAd,EAXA;;;IAcA,QAAQ,CAAC,IAAT,CAAiB,CAAA,QAAA,CAAA,CAAA;AACf,UAAA;MAAA,SAAA,GAAY;AACZ,aAAO,CAAA,CAAE,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;;UACP,YAAa;;QACb,IAAG,UAAA,CAAW,CAAX,EAAc,GAAd,EAAmB,SAAnB,CAAH;UACE,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;UACA,IAAA,CAAK,GAAG,CAAC,SAAJ,CAAc,GAAd,EAAmB,SAAnB,EAA8B,SAA9B,CAAL;UACA,SAAA,GAAY,KAHd;SAAA,MAIK,IAAG,UAAA,CAAW,CAAX,EAAc,GAAd,EAAmB,QAAnB,CAAH;UACH,SAAS,CAAC,IAAV,CAAe,CAAC,CAAC,KAAjB,EADG;SAAA,MAAA;UAGH,IAAA,CAAK,CAAL,EAHG;;AAIL,eAAO;MAVA,CAAF;IAFQ,CAAA,CAAH,CAAA,CAAd,EAdA;;;;IA8BA,QAAQ,CAAC,IAAT,CAAiB,CAAA,QAAA,CAAA,CAAA;AACf,UAAA;MAAA,SAAA,GAAY;AACZ,aAAO,CAAA,CAAE,MAAF,EAAU,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;QACf,IAAG,SAAH;UACE,IAAG,UAAA,CAAW,CAAX,EAAc,GAAd,EAAmB,QAAnB,CAAH;mBACE,SAAS,CAAC,IAAV,CAAe,CAAC,CAAC,KAAjB,EADF;WAAA,MAAA;mBAGE,IAAA,CAAK,CAAL,EAHF;WADF;SAAA,MAAA;iBAME,IAAA,CAAK,SAAL,EANF;;MADe,CAAV;IAFQ,CAAA,CAAH,CAAA,CAAd,EA9BA;;IAyCA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,QAAA,CAAE,CAAF,CAAA;aAAS,IAAA,CAAK,SAAL,EAAgB,EAAA,CAAG,CAAH,CAAhB;IAAT,CAAV,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,QAAA,CAAA,CAAA;aAAG,IAAA,CAAK,IAAL;IAAH,CAAV,CAAd;IACA,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR,EA3CA;;IA6CA,CAAA,GAAU,QAAA,CAAE,KAAF,CAAA;MACR,IAAG,GAAG,CAAC,UAAJ,CAAe,KAAf,CAAH;eAA8B,CAAC,CAAC,MAAM,CAAC,IAAT,CAAc,GAAG,CAAC,SAAJ,CAAc,GAAd,EAAmB,QAAnB,EAA6B,KAA7B,CAAd,EAA9B;OAAA,MAAA;eAC8B,CAAC,CAAC,MAAM,CAAC,IAAT,CAAc,KAAd,EAD9B;;IADQ;IAGV,CAAC,CAAC,GAAF,GAAU,QAAA,CAAA,CAAA;aAAG,CAAC,CAAC,MAAM,CAAC,GAAT,CAAA;IAAH;AACV,WAAO;EAlDK,EAvHd;;;EA6KA,IAAO,qBAAP;IACE,CAAA,GAAI,CAAA;IACJ,IAAA,GAAO,IAAC,CAAA,UAAD,CAAY,CAAZ;IACP,IAAA,CAAK,aAAL;IACA,IAAA,CAAK,CAAL;IACA,IAAA,CAAK,GAAG,CAAC,gBAAJ,CAAqB,SAArB,CAAL;IACA,IAAA,CAAK,CAAL;IACA,IAAA,CAAK,GAAG,CAAC,gBAAJ,CAAqB,SAArB,CAAL,EAPF;;;EA7KA;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/EXPERIMENTS/CIRCULAR-PIPELINES'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n# #...........................................................................................................\n# suspend                   = require 'coffeenode-suspend'\n# step                      = suspend.step\n#...........................................................................................................\n# D                         = require 'pipedreams'\n# $                         = D.remit.bind D\n# $async                    = D.remit_async.bind D\nPS                        = require 'pipestreams'\n{ $, $async, }            = PS\nassign                    = Object.assign\nafter                     = ( dts, f ) -> setTimeout f, dts * 1000\ndefer                     = setImmediate\njr                        = JSON.stringify\ncopy                      = ( P... ) -> assign {}, P...\nrprx                      = ( d ) -> \"#{d.sigil} #{d.key}:: #{jr d.value ? null} #{jr d.stamped ? false}\"\n# echo '{ ' + ( ( name for name of require './recycle' ).sort().join '\\n  ' ) + \" } = require './recycle'\"\nPS2                       = require './recycle'\n{ select\n  select_all\n  stamp }                 = PS2\n\n#-----------------------------------------------------------------------------------------------------------\nprovide_collatz = ->\n\n  #-----------------------------------------------------------------------------------------------------------\n  @new_number_event = ( value, other... ) ->\n    return PS2.new_single_event 'number', value, other...\n\n  #-----------------------------------------------------------------------------------------------------------\n  @is_one  = ( n ) -> n is 1\n  @is_odd  = ( n ) -> n %% 2 isnt 0\n  @is_even = ( n ) -> n %% 2 is 0\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$even_numbers = ( S ) ->\n    return $ ( d, send ) =>\n      return send d unless ( select d, '!', 'number' ) and ( @is_even d.value )\n      send stamp d\n      send PS2.recycling @new_number_event ( d.value / 2 ), from: d.value\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$odd_numbers = ( S ) ->\n    return $ ( d, send ) =>\n      if ( select d, '!', 'number' ) and ( not @is_one d.value ) and ( @is_odd d.value )\n        ### If data event matches condition, stamp it and send it on with new data event: ###\n        send stamp d\n        send PS2.recycling ( @new_number_event ( d.value * 3 + 1 ), from: d.value )\n      else\n        send d\n      return null\n\n  # #-----------------------------------------------------------------------------------------------------------\n  # @$odd_numbers = ( S ) ->\n  #   return $ ( d, send ) =>\n  #     return send d unless ( select d, '!', 'number' ) and ( not @is_one d.value ) and ( @is_odd d.value )\n  #     send stamp d\n  #     send PS2.recycling ( @new_number_event ( d.value * 3 + 1 ) )\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$skip_known = ( S ) ->\n    known = new Set()\n    return $ ( d, send ) =>\n      return send d unless select d, '!', 'number'\n      return urge '->', d.value if known.has d.value\n      send d\n      known.add d.value\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$terminate = ( S ) ->\n    return $ ( d, send ) =>\n      if ( select_all d, '!', 'number' ) and ( @is_one d.value )\n        send stamp d\n        send PS2.new_end_event()\n      else\n        send d\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$throw_on_illegal = -> PS.$watch ( d ) ->\n    if ( select_all d, '!', 'number' ) and ( type = CND.type_of d.value ) isnt 'number'\n      throw new Error \"found an illegal #{type} in #{rpr d}\"\n    return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$main = ( S ) ->\n    pipeline = []\n    # pipeline.push COLLATZ.$skip_known           S\n    # pipeline.push PS.$delay 1\n    pipeline.push COLLATZ.$even_numbers         S\n    pipeline.push COLLATZ.$odd_numbers          S\n    pipeline.push COLLATZ.$throw_on_illegal     S\n    # pipeline.push COLLATZ.$terminate            S\n    return PS.pull pipeline...\n\n  #-----------------------------------------------------------------------------------------------------------\n  return @\nCOLLATZ = provide_collatz.apply {}\n\n#-----------------------------------------------------------------------------------------------------------\n@new_sender = ( S ) ->\n  S.source    = PS2.new_push_source()\n  pipeline    = []\n  #.........................................................................................................\n  pipeline.push S.source\n  # pipeline.push PS.$watch ( d ) -> urge '37744-1', jr d\n  pipeline.push PS2.$unwrap_recycled()\n  # # pipeline.push PS.$delay 0.25\n  # pipeline.push PS.$defer()\n  # pipeline.push PS.$watch ( d ) -> whisper '37744-2', jr d\n  pipeline.push COLLATZ.$main S\n  # pipeline.push PS.$watch ( d ) -> if ( select d, '~', 'end' ) then S.source.end()\n  pipeline.push PS2.$recycle S.source.push\n  # pipeline.push PS.$watch ( d ) -> help jr d\n  #.........................................................................................................\n  pipeline.push do ->\n    collector = null\n    return $ ( d, send ) ->\n      collector ?= []\n      if select_all d, '~', 'collect'\n        send stamp d\n        send PS2.new_event '!', 'numbers', collector\n        collector = null\n      else if select_all d, '!', 'number'\n        collector.push d.value\n      else\n        send d\n      return null\n  #.........................................................................................................\n  # pipeline.push PS.$watch ( d ) -> help '37744-3', jr d\n  #.........................................................................................................\n  pipeline.push do ->\n    collector = []\n    return $ 'null', ( d, send ) ->\n      if d?\n        if select_all d, '!', 'number'\n          collector.push d.value\n        else\n          send d\n      else\n        send collector\n  #.........................................................................................................\n  pipeline.push PS.$watch ( d ) -> help '37744-4', jr d\n  pipeline.push PS.$drain -> help 'ok'\n  PS.pull pipeline...\n  #.........................................................................................................\n  R       = ( value ) ->\n    if CND.isa_number value then  S.source.push PS2.new_event '!', 'number', value\n    else                          S.source.push value\n  R.end   = -> S.source.end()\n  return R\n\n\n############################################################################################################\nunless module.parent?\n  S = {}\n  send = @new_sender S\n  urge '-----------'\n  send 5\n  send PS2.new_system_event 'collect'\n  send 6\n  send PS2.new_system_event 'collect'\n  # for n in [ 2 .. 3 ]\n  #   debug n\n  #   do ( n ) ->\n  #     send n\n  #     # defer send n\n  #     send PS2.new_system_event 'collect'\n  #     urge '-----------'\n  #   # # send.end()\n  # # send PS2.new_system_event 'end'\n  # send.end()\n"
  ]
}