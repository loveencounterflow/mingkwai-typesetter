{
  "version": 3,
  "file": "circular-pipelines.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/circular-pipelines.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SCRATCH/CIRCULAR-PIPELINES'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n# #...........................................................................................................\n# suspend                   = require 'coffeenode-suspend'\n# step                      = suspend.step\n#...........................................................................................................\n# D                         = require 'pipedreams'\n# $                         = D.remit.bind D\n# $async                    = D.remit_async.bind D\nPS                        = require 'pipestreams'\n{ $, $async, }            = PS\nassign                    = Object.assign\njr                        = JSON.stringify\ncopy                      = ( P... ) -> assign {}, P...\nrprx                      = ( d ) -> \"#{d.sigil} #{d.key}:: #{jr d.value ? null} #{jr d.stamped ? false}\"\n# echo '{ ' + ( ( name for name of require './recycle' ).sort().join '\\n  ' ) + \" } = require './recycle'\"\n{ $recycle\n  $unwrap_recycled\n  is_recycling\n  is_stamped\n  is_system\n  new_end_event\n  new_event\n  new_single_event\n  new_start_event\n  new_stop_event\n  new_system_event\n  new_push_source\n  recycling\n  select\n  select_all\n  stamp\n  unwrap_recycled } = require './recycle'\n\n\n#-----------------------------------------------------------------------------------------------------------\nprovide_collatz = ->\n\n\n  #-----------------------------------------------------------------------------------------------------------\n  @new_number_event = ( value, other... ) ->\n    return new_single_event 'number', value, other...\n\n  #-----------------------------------------------------------------------------------------------------------\n  @is_one  = ( n ) -> n is 1\n  @is_odd  = ( n ) -> n %% 2 isnt 0\n  @is_even = ( n ) -> n %% 2 is 0\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$even_numbers = ( S ) ->\n    return $ ( d, send ) =>\n      if ( select d, '.', 'number' ) and ( @is_even d.value )\n        send stamp d\n        send recycling @new_number_event ( d.value / 2 )\n      else\n        send d\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$odd_numbers = ( S ) ->\n    return $ ( d, send ) =>\n      if ( select d, '.', 'number' ) and ( not @is_one d.value ) and ( @is_odd d.value )\n      # if ( select d, sigil: '.', key: 'number' ) and ( not @is_one d.value ) and ( @is_odd d.value )\n      # if ( select_single d, null, 'number' ) and ( not @is_one d.value ) and ( @is_odd d.value )\n      # if ( select_single d, 'kwic:number' ) and ( not @is_one d.value ) and ( @is_odd d.value )\n        send stamp d\n        send recycling @new_number_event ( d.value * 3 + 1 )\n      else\n        send d\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$skip_known = ( S ) ->\n    known = new Set()\n    return $ ( d, send ) =>\n      if select d, '.', 'number'\n        unless known.has d.value\n          send d\n          known.add d.value\n        else\n          urge '->', d.value\n      else\n        send d\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$terminate = ( S ) ->\n    return $ ( d, send ) =>\n      if ( select_all d, '.', 'number' ) and ( is_one d.value )\n        send stamp d\n        send new_end_event()\n      else\n        send d\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$main = ( S ) ->\n    pipeline = []\n    pipeline.push COLLATZ.$skip_known           S\n    pipeline.push COLLATZ.$even_numbers         S\n    pipeline.push COLLATZ.$odd_numbers          S\n    # pipeline.push COLLATZ.$terminate            S\n    return PS.pull pipeline...\n\n  #-----------------------------------------------------------------------------------------------------------\n  return @\nCOLLATZ = provide_collatz.apply {}\nxxx = new_push_source()\n\n#-----------------------------------------------------------------------------------------------------------\n@new_sender = ( S ) ->\n  S.source    = new_push_source()\n  on_stop     = PS.new_event_collector 'stop', -> help 'ok'\n  pipeline    = []\n  #.........................................................................................................\n  pipeline.push S.source\n  pipeline.push $unwrap_recycled()\n  # pipeline.push do ->\n  #   send  = null\n  #   PS.pull xxx, ( $ ( d, s ) -> send d if send? ), PS.$drain()\n  #   return $ ( d, _send ) ->\n  #     send = _send\n  #     send d\n  #     return null\n  pipeline.push COLLATZ.$main S\n  pipeline.push PS.$watch ( d ) -> help jr d\n  # pipeline.push PS.$watch ( d ) -> help '> sink  ', rprx d unless is_meta d\n  pipeline.push PS.$watch ( d ) -> if ( select d, '~', 'end' ) then S.source.end()\n  pipeline.push $recycle S.source.push\n  #.........................................................................................................\n  pipeline.push on_stop.add PS.$drain()\n  PS.pull pipeline...\n  #.........................................................................................................\n  R       = ( value ) -> S.source.push new_event '.', 'number', value\n  R.end   = -> S.source.end()\n  return R\n\n\n############################################################################################################\nunless module.parent?\n  S = {}\n  send = @new_sender S\n  urge '-----------'\n  send 42\n  urge '-----------'\n  for n in [ 1 .. 5 ]\n    send -n\n    urge '-----------'\n  # # send.end()\n  xxx.push new_event '.', 'number', 11\n"
  ]
}