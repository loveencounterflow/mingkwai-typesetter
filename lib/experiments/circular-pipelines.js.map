{
  "version": 3,
  "file": "circular-pipelines.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/circular-pipelines.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SCRATCH/CIRCULAR-PIPELINES'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n# #...........................................................................................................\n# suspend                   = require 'coffeenode-suspend'\n# step                      = suspend.step\n#...........................................................................................................\n# D                         = require 'pipedreams'\n# $                         = D.remit.bind D\n# $async                    = D.remit_async.bind D\nPS                        = require 'pipestreams'\n{ $, $async, }            = PS\nnew_pushable              = require 'pull-pushable'\nassign                    = Object.assign\njr                        = JSON.stringify\ncopy                      = ( P... ) -> assign {}, P...\nrprx                      = ( d ) -> \"#{d.mark} #{d.type}:: #{jr d.value} #{jr d.stamped ? false}\"\n\n###\n\n\nPipestream Events v2\n====================\n\nd         := { mark,          type, value, ... }    # implicit global namespace\n          := { mark, prefix,  type, value, ... }    # explicit namespace\n\n# `d.mark` indicates 'regionality':\n\nmark      := '.' # proper singleton\nmark      := '~' # meta singleton\n          := '(' # start-of-region (SOR)    # '<'\n          := ')' # end-of-region   (EOR)    # '>'\n\n# `prefix` indicates the namespace; where missing on an event or is `null`, `undefined` or `'global'`,\n# it indicates the global namespace:\n\nprefix    := null | undefined | 'global' | non-empty text\n\ntype      := non-empty text         # typename\n\nvalue     := any                    # payload\n\n###\n\n#-----------------------------------------------------------------------------------------------------------\nstamp = ( d ) ->\n  d.stamped = true\n  return d\n\n#-----------------------------------------------------------------------------------------------------------\nrecycle         = ( d       ) -> new_event '~', 'recycle', d\nuncycle         = ( d       ) -> if ( select_all d, '~', 'recycle' ) then d.value else d\n$uncycle        =             -> $ ( d, send ) -> send uncycle d\ntry_to_recycle  = ( d       ) -> if ( select d, '~', 'recycle' ) then d.value else null\n$try_to_recycle = ( resend  ) -> PS.$watch ( d ) -> if ( e = try_to_recycle d )? then resend d\nis_meta         = ( d       ) -> select_all d, '~', null\n\n#-----------------------------------------------------------------------------------------------------------\nselect = ( d, prefix, marks, types ) ->\n  ### Reject all stamped events: ###\n  return if ( d.stamped is true ) then false\n  return if ( d.recycle is true ) then false\n  ### TAINT avoid to test twice for arity ###\n  switch arity = arguments.length\n    when 3 then return select_all d, prefix, marks ### d, marks, types ###\n    when 4 then return select_all d, prefix, marks, types\n    else throw new Error \"expected 3 to 4 arguments, got arity\"\n\n#-----------------------------------------------------------------------------------------------------------\nselect_all = ( d, prefix, marks, types ) ->\n  ### accepts 3 or 4 arguments; when 4, then second must be prefix (only one prefix allowed);\n  `marks` and `types` may be text or list of texts. ###\n  switch arity = arguments.length\n    # when 2 then [ prefix, marks, types, ] = [ null, prefix, marks, ]\n    when 3 then [ prefix, marks, types, ] = [ null, prefix, marks, ]\n    when 4 then null\n    else throw new Error \"expected 3 to 4 arguments, got arity\"\n  #.........................................................................................................\n  prefix  = null if ( not prefix? ) or ( prefix is 'global' )\n  marks  ?= null\n  types  ?= null\n  switch _type = CND.type_of prefix\n    when 'null' then null\n    when 'text' then return false unless d.prefix is prefix\n    else throw new Error \"expected a text or a list, got a #{_type}\"\n  switch _type = CND.type_of marks\n    when 'null' then null\n    when 'text' then return false unless d.mark is marks\n    when 'list' then return false unless d.mark in marks\n    else throw new Error \"expected a text or a list, got a #{_type}\"\n  switch _type = CND.type_of types\n    when 'null' then null\n    when 'text' then return false unless d.type is types\n    when 'list' then return false unless d.type in types\n    else throw new Error \"expected a text or a list, got a #{_type}\"\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\nnew_event = ( mark, type, value, other... ) ->\n  value ?= null\n  return assign { mark, type, value, }, other...\n\n#-----------------------------------------------------------------------------------------------------------\nnew_number_event = ( value, other... ) ->\n  return new_event '.', 'number', value, other...\n\n\nprovide_collatz = ->\n\n  #-----------------------------------------------------------------------------------------------------------\n  @is_one  = ( n ) -> n is 1\n  @is_odd  = ( n ) -> n %% 2 isnt 0\n  @is_even = ( n ) -> n %% 2 is 0\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$even_numbers = ( S ) ->\n    return $ ( d, send ) =>\n      if ( select d, '.', 'number' ) and ( @is_even d.value )\n        send stamp d\n        send recycle new_number_event ( d.value / 2 )\n      else\n        send d\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$odd_numbers = ( S ) ->\n    return $ ( d, send ) =>\n      if ( select d, '.', 'number' ) and ( not @is_one d.value ) and ( @is_odd d.value )\n        send stamp d\n        send recycle new_number_event ( d.value * 3 + 1 )\n      else\n        send d\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$skip_known = ( S ) ->\n    known = new Set()\n    return $ ( d, send ) =>\n      if select d, '.', 'number'\n        unless known.has d.value\n          send d\n          known.add d.value\n        else\n          urge '->', d.value\n      else\n        send d\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$terminate = ( S ) ->\n    return $ ( d, send ) =>\n      if ( select_all d, '.', 'number' ) and ( is_one d.value )\n        send stamp d\n        send new_event '~', 'end'\n      else\n        send d\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$main = ( S ) ->\n    pipeline = []\n    pipeline.push COLLATZ.$skip_known           S\n    pipeline.push COLLATZ.$even_numbers         S\n    pipeline.push COLLATZ.$odd_numbers          S\n    # pipeline.push COLLATZ.$terminate            S\n    return PS.pull pipeline...\n\n  #-----------------------------------------------------------------------------------------------------------\n  return @\nCOLLATZ = provide_collatz.apply {}\n\n#-----------------------------------------------------------------------------------------------------------\n@new_sender = ( S ) ->\n  S.source    = new_pushable()\n  on_stop     = PS.new_event_collector 'stop', -> help 'ok'\n  pipeline    = []\n  #.........................................................................................................\n  pipeline.push S.source\n  pipeline.push $uncycle()\n  pipeline.push COLLATZ.$main S\n  pipeline.push PS.$watch ( d ) -> help '> sink  ', rprx d unless is_meta d\n  #.........................................................................................................\n  pipeline.push PS.$watch ( d ) -> if ( select d, '~', 'end' ) then S.source.end()\n  pipeline.push $try_to_recycle S.source.push.bind S.source\n  #.........................................................................................................\n  pipeline.push on_stop.add PS.$drain()\n  PS.pull pipeline...\n  #.........................................................................................................\n  R       = ( value ) -> S.source.push new_event '.', 'number', value\n  R.end   = -> S.source.end()\n  return R\n\n\n############################################################################################################\nunless module.parent?\n  S = {}\n  send = @new_sender S\n  urge '-----------'\n  send 42\n  urge '-----------'\n  for n in [ 1 .. 5 ]\n    send -n\n    urge '-----------'\n  # # send.end()\n"
  ]
}