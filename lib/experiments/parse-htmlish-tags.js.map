{
  "version": 3,
  "file": "parse-htmlish-tags.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/parse-htmlish-tags.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HTML-TAGS/TESTS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\neq                        = CND.equals\njr                        = JSON.stringify\n#...........................................................................................................\njoin                      = ( x, joiner = '' ) -> x.join joiner\nassign                    = Object.assign\n# XREGEXP                   = require 'xregexp'\nHP2                       = require 'htmlparser2'\nclose_tag_pattern         = /^(?<all><\\/(?<name>[^>\\s]+?)>)/\n\n#-----------------------------------------------------------------------------------------------------------\nsettings  =\n  lowerCaseTags:              false\n  lowerCaseAttributeNames:    false\n  decodeEntities:             false\n  xmlMode:                    false\n  recognizeSelfClosing:       true\n  recognizeCDATA:             false\n\n#-----------------------------------------------------------------------------------------------------------\nprovide_handlers = ( handler ) ->\n\n  #---------------------------------------------------------------------------------------------------------\n  @onopentag = ( name, attributes ) ->\n    start = @parser.startIndex\n    end   = @parser.endIndex\n    handler null, { mark: '(', name, attributes, start, end, }\n\n  #---------------------------------------------------------------------------------------------------------\n  @ontext = ( text ) ->\n    start = @parser.startIndex\n    end   = @parser.endIndex\n    handler null, { mark: '.', value: text, start, end, }\n\n  #---------------------------------------------------------------------------------------------------------\n  @onclosetag = ( name ) ->\n    start = @parser.startIndex\n    end   = @parser.endIndex\n    handler null, { mark: ')', name, start, end, }\n\n  #---------------------------------------------------------------------------------------------------------\n  @onprocessinginstruction = ( name, data ) ->\n    return handler new Error \"encounter illegal XML processing instruction: #{rp { name, data, }}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  @onerror = ( error ) -> handler error\n\n  #---------------------------------------------------------------------------------------------------------\n  @oncomment =              ( data              ) -> whisper 'comment', rpr { data, }\n  @oncommentend =           ()                    -> whisper 'commentend'\n\n  # onopentag:                ( name,  attributes ) -> whisper 'opentag'\n  # onopentagname:            ( name              ) -> whisper 'opentagname', rpr name\n  # onattribute:              ( name,  value      ) -> whisper 'attribute', rpr { name: value }\n  # ontext:                   ( text              ) -> whisper 'text'\n  # onclosetag:               ( name              ) -> whisper 'closetag'\n  # onprocessinginstruction:  ( name,  data       ) -> whisper 'processinginstruction', rpr { name, data, }\n  # oncdatastart:             ()                    -> whisper 'cdatastart'\n  # oncdataend:               ()                    -> whisper 'cdataend'\n  # onreset:                  ()                    -> whisper 'reset'\n  # onend:                    ()                    -> whisper 'end'\n  return @\n\n############################################################################################################\nunless module.parent?\n  sources = [\n    \"helo <x:tag>world\"\n    \"helo <x:tag></x:tag>world\"\n    \"helo <x:tag> </x:tag>world\"\n    \"helo <tag> </ignored>world\"\n    \"helo <x:tag/>world\"\n    \"helo <いきましょうか/>world\"\n    \"<div>just a </div> that is closed\"\n    \"just a </div> that is closed\"\n    # \"\"\"<?xml-stylesheet type=\"text/xsl\" href=\"style.xsl\"?>foobar\"\"\"\n    # \"helo <x:b>world</x:b>\"\n    # \"helo <b><i>world\"\n    # \"helo <tag foo/>world\"\n    # \"helo <tag foo>world</tag>\"\n    # \"helo <tag foo=bar/>world\"\n    # \"helo <TAG FOO=BAR/>world\"\n    # \"helo <tag foo='bar'/>world\"\n    # \"helo <TAG FOO='BAR'/>world\"\n    ]\n  handlers        = provide_handlers.call {}, ( error, d ) ->\n    throw error if error?\n    color = switch d.mark\n      when '.' then CND.white\n      when '(' then CND.lime\n      when ')' then CND.orange\n      else CND.red\n    urge color jr d\n  handlers.parser = new HP2.Parser handlers, settings\n  for source in sources\n    info rpr source\n    lone_tag_idx = source.indexOf '</'\n    if ( lone_tag_idx = source.indexOf '</' ) > -1 and lone_tag_idx <= ( source.indexOf '<' )\n      head  = source[ ... lone_tag_idx ]\n      tail  = source[ lone_tag_idx .. ]\n      urge rpr head\n      unless ( match = tail.match close_tag_pattern )?\n        throw new Error \"illegal HTML markup at ##{lone_tag_idx}: #{rpr source}\"\n      urge 'close tag:', match.groups.name\n      # debug match.groups.all.length\n      source = tail[ match.groups.all.length .. ]\n    handlers.parser.write source\n    handlers.parser.reset()\n    # parser.end()\n    # parser.parseComplete()\n\n\n\n\n"
  ]
}