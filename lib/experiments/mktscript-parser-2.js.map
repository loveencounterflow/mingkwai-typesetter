{
  "version": 3,
  "file": "mktscript-parser-2.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/mktscript-parser-2.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTSCRIPT-PARSER-2'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\neq                        = CND.equals\njr                        = JSON.stringify\n#...........................................................................................................\njoin                      = ( x, joiner = '' ) -> x.join joiner\nPS                        = require 'pipestreams'\n{ $, $async, }            = PS\nassign                    = Object.assign\njr                        = JSON.stringify\ncopy                      = ( P... ) -> assign {}, P...\nrprx                      = ( d ) -> \"#{d.mark} #{d.type}:: #{jr d.value} #{jr d.stamped ? false}\"\n# echo '{ ' + ( ( name for name of require './recycle' ).sort().join '\\n  ' ) + \" } = require './recycle'\"\n{ $recycle\n  $unwrap_recycled\n  is_recycling\n  is_stamped\n  is_system\n  new_end_event\n  new_event\n  new_single_event\n  new_start_event\n  new_stop_event\n  new_system_event\n  new_text_event\n  new_push_source\n  new_flush_event\n  new_warning\n  recycling\n  select\n  select_all\n  stamp\n  unwrap_recycled } = require './recycle'\n\n#-----------------------------------------------------------------------------------------------------------\nis_empty                  = ( x ) ->\n  return ( x.length is 0 ) if x.length?\n  return ( x.size   is 0 ) if x.size?\n  throw new Error \"unable to determine length of a #{CND.type_of x}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@active_chr_pattern   = /// ///u\n@active_chrs          = new Set()\n\n#-----------------------------------------------------------------------------------------------------------\n### thx to https://stackoverflow.com/a/3561711/7568091 ###\n@_escape_for_regex = ( text ) -> text.replace @_escape_for_regex.pattern, '\\\\$&'\n@_escape_for_regex.pattern = /[-\\/\\\\^$*+?.()|[\\]{}]/g\n\n#-----------------------------------------------------------------------------------------------------------\n@add_active_chrs = ( chrs... ) ->\n  for chr in chrs\n    unless ( CND.isa_text chr ) and ( chr.match /^.$/u )?\n      throw new Error \"expected single character, got #{rpr chr}\"\n    @active_chrs.add chr\n  achrs                 = ( ( @_escape_for_regex chr ) for chr from @active_chrs ).join '|'\n  @active_chr_pattern   = /// ^ (?<left> .*? ) (?<achrs> (?<achr> #{achrs} ) \\k<achr>* ) (?<right> .* ) $ ///\n                        # /// (?<!\\\\) (?<achr> (?<chr> [ \\* ` + p ] ) \\k<chr>* ) ///\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@add_active_chrs '<', '&', '*', '`', '^', '_', '𣥒'\n# help @active_chr_pattern\n\n# debug @_escape_for_regex '*'\n# debug @_escape_for_regex '/'\n# debug @_escape_for_regex '^'\n# debug @_escape_for_regex '\\\\'\n# debug 'foo-bar'.match new RegExp '[x\\\\-a]'\n# @add_active_chr '-'; help @active_chr_pattern\n# @add_active_chr '^'; help @active_chr_pattern\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@split_on_first_active_chr = ( text ) ->\n  ### If `text` contains an active character, return a POD with the keys `left`, `achr`, and `right`, where\n  `left` holds the (possibly empty) text before the first active character, `achr` holds the active\n  character itself, and `right` holds the remaining, agaoin possibly empty, text (that may or may not contain\n  further active characters). ###\n  return null unless ( match = text.match @active_chr_pattern )?\n  return match.groups\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_on_first_active_chr = ( S ) ->\n  return $ ( d, send ) =>\n    ### using ad-hoc `clean` attribute to indicate that text does not contain active characters ###\n    return send d unless ( select d, '.', 'text' ) and ( not d.clean )\n    if ( parts = @split_on_first_active_chr d.value )?\n      { achr, achrs, left, right, } = parts\n      send new_single_event 'achr-split', achrs, { achr, left, right, }, $: d\n    else\n      d.clean = true\n      send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$recycle_untouched_texts = ( S ) -> $ ( d, send ) =>\n    if ( select d, '.', 'text' ) and ( not d.clean )\n      send recycling d\n    else\n      send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$warn_on_unhandled_achrs = ( S ) -> $ ( d, send ) =>\n    if ( select d, '.', 'achr-split' )\n      lnr     = d.$?.lnr  ? '?'\n      text    = if d.$?.text? then ( rpr d.$.text ) else '?'\n      message = \"unhandled active characters #{rpr d.value} on line #{lnr} in #{text}\"\n      send new_text_event d.left, { clean: true, $: d } unless is_empty d.left\n      send new_warning 'µ99823', message, d, $: d\n    else\n      send d\n    return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nprovide_achrs_transforms = ->\n\n  #-----------------------------------------------------------------------------------------------------------\n  ### TAINT add `li` ###\n  @$em_and_strong_1 = ( S ) ->\n    #.........................................................................................................\n    return $ ( d, send ) =>\n      #.......................................................................................................\n      is_achr = select d, '.', 'achr-split'\n      #.......................................................................................................\n      if is_achr and ( d.value in [ '*', '**', '***', ] )\n        send new_text_event d.left, { clean: true, $: d } unless is_empty d.left\n        switch d.value\n          when '*'    then send new_event ')(', 'em',         null, $: d\n          when '**'   then send new_event ')(', 'strong',     null, $: d\n          when '***'  then send new_event ')(', 'em-strong',  null, $: d\n        send new_text_event d.right, $: d unless is_empty d.right\n      #.......................................................................................................\n      else\n        send d\n      #.......................................................................................................\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$em_and_strong_2 = ( S ) ->\n    send        = null\n    buffer      = []\n    open_tags   = []\n    get_top     = -> open_tags[ open_tags.length - 1 ]\n    # within_any  = ( key ) -> key in open_tags\n    within      = ( key ) -> get_top() is key\n    open        = ( key ) -> open_tags.push key\n    # close       = ( key ) -> open_tags[ .. ] = open_tags.filter ( x ) -> x isnt key; return null\n    close       = ( key ) ->\n      if ( key is get_top() )\n        open_tags.pop()\n      else\n        throw \"stack error: expected #{rpr key}, but stack is #{rpr open_tags}\"\n      return null\n    flush       = -> send buffer.shift() while buffer.length > 0\n    #.........................................................................................................\n    return $ ( d, _send ) =>\n      whisper '29998', ( within 'em-strong' ), ( if d.key is 'flush' then CND.steel else CND.grey ) jr d\n      send = _send\n      if select d, '~', 'flush'\n        if within 'em-strong'\n          close 'em-strong'\n          debug CND.white '99930-1', \"close 'em-strong'\"\n          send new_start_event  'em',     null, $: d\n          send new_start_event  'strong', null, $: d\n        flush()\n        return send d\n      #.......................................................................................................\n      if select d, ')(', 'em-strong'\n        help '89887-1', d.$\n        help '89887-2', open_tags, within 'em-strong'\n        help '89887-3', buffer\n        if within 'em-strong'\n          # debug '77222-1'\n          close 'em-strong'\n          # debug CND.white '99930-2', \"close 'em-strong'\"\n          send new_start_event  'em',     null, $: d\n          send new_start_event  'strong', null, $: d\n          flush()\n          send new_stop_event   'strong', null, $: d\n          send new_stop_event   'em',     null, $: d\n        else if ( within 'em' ) or ( within 'strong' )\n          # debug '77222-2'\n          loop\n            if within 'em'\n              close 'em'\n              send new_stop_event 'em', null, $: d\n            else if within 'strong'\n              close 'strong'\n              send new_stop_event 'strong', null, $: d\n            else\n              break\n        else\n          open 'em-strong'\n          # debug '77222-3', open_tags, within 'em-strong'\n      #.......................................................................................................\n      else if select d, ')(', 'em'\n        if within 'em-strong'\n          close 'em-strong'\n          # debug CND.white '99930-3', \"close 'em-strong'\"\n          open 'strong'\n          send new_stop_event   'em',     null, $: d\n        else if within 'em'\n          close 'em'\n          send new_stop_event   'em',     null, $: d\n        else\n          open 'em'\n          send new_start_event  'em',     null, $: d\n      #.......................................................................................................\n      else if select d, ')(', 'strong'\n        if within 'em-strong'\n          close 'em-strong'\n          # debug CND.white '99930-4', \"close 'em-strong'\"\n          open 'em'\n          send new_stop_event   'strong', null, $: d\n        else if within 'strong'\n          close 'strong'\n          send new_stop_event   'strong', null, $: d\n        else\n          open 'strong'\n          send new_start_event  'strong', null, $: d\n      #.......................................................................................................\n      else if within 'em-strong'\n        buffer.push d\n        # debug '10002', jr buffer\n      #.......................................................................................................\n      else\n        send d\n      #.......................................................................................................\n      # urge '89887-fin', open_tags, within 'em-strong'\n      return null\n\n  # #-----------------------------------------------------------------------------------------------------------\n  # @$em = ( S ) ->\n  #   within = false\n  #   return $ ( d, send ) =>\n  #     if ( select d, '.', 'achr-split' ) and ( d.value is '*' )\n  #       ### using ad-hoc `clean` attribute to indicate that text does not contain active characters ###\n  #       send new_text_event d.left, { clean: true, $: d }\n  #       if not within then  send new_start_event 'sf', 'em', $: d\n  #       else                send new_stop_event  'sf', 'em', $: d\n  #       send new_text_event d.right, $: d\n  #       within = not within\n  #     else\n  #       send d\n  #     return null\n\n  # #-----------------------------------------------------------------------------------------------------------\n  # @$strong = ( S ) ->\n  #   within = false\n  #   return $ ( d, send ) =>\n  #     if ( select d, '.', 'achr-split' ) and ( d.value is '**' )\n  #       ### using ad-hoc `clean` attribute to indicate that text does not contain active characters ###\n  #       send new_text_event d.left, { clean: true, $: d }\n  #       if not within then  send new_start_event 'sf', 'strong', $: d\n  #       else                send new_stop_event  'sf', 'strong', $: d\n  #       send new_text_event d.right, $: d\n  #       within = not within\n  #     else\n  #       send d\n  #     return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  return @\n\nACHRS_TRANSFORMS = provide_achrs_transforms.apply {}\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$show_events = ( S ) ->\n  level       = 0\n  delta       = 0\n  indentation = '  '\n  #.........................................................................................................\n  rpr_lnr     = ( d ) -> CND.gold d.$?.lnr ? '?'\n  start       = ( d ) -> ( rpr_lnr d ) + indentation\n  reduce      = ( d ) ->\n    R = {}\n    R[ key ] = value for key, value of d when key not in [ 'sigil', 'key', 'value', '$', ]\n    return if ( Object.keys R ).length > 0 then jr R else ''\n  #.........................................................................................................\n  return PS.$watch ( d ) =>\n    if delta isnt 0\n      level         = Math.max 0, level + delta\n      delta         = 0\n      indentation   = ( '  '.repeat level ) + '  '\n    #.......................................................................................................\n    if select d, '~', 'warning'\n      warn ( start d ) + CND.red \"warning ref #{d.ref}: #{d.message}\"\n      warn ( start d ) + CND.red \"generated by event: #{jr d.value}\"\n    #.......................................................................................................\n    else if ( select d, '~', null )\n      whisper ( start d ) + jr d\n    #.......................................................................................................\n    else if ( select d, '.', 'text' )\n      help ( start d ) + ( CND.white rpr d.value )\n    #.......................................................................................................\n    else if ( select d, [ '(', ')' ], null )\n      color = if ( d.sigil is '(' ) then CND.lime else CND.red\n      help ( start d ) + color \"#{d.sigil} #{d.key}: #{jr d.value} #{reduce d}\"\n      delta = if ( d.sigil is '(' ) then +1 else -1\n    #.......................................................................................................\n    else\n      urge ( start d ) + jr d\n    #.......................................................................................................\n    return null\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$parse_special_forms = ( S ) ->\n\n  #---------------------------------------------------------------------------------------------------------\n  lnr                 = 0\n  mktsp2_push_source  = null\n\n  #---------------------------------------------------------------------------------------------------------\n  @$_as_text_event = ( d ) -> $ ( d, send ) =>\n    ### Convert texts in to text events, adjust line nrs ###\n    ### TAINT should split texts into lines ###\n    if CND.isa_text d\n      lnr  += +1\n      d     = new_text_event d, $: { lnr, text: d, }\n    else if ( select d, '.', 'text' ) and d.$?.lnr?\n      lnr   = d.$.lnr\n    #.......................................................................................................\n    send d\n\n  #---------------------------------------------------------------------------------------------------------\n  @get_transformer = =>\n    mktsp2_push_source  = null\n    pipeline            = []\n    # pipeline.push PS.$watch ( d ) => whisper '12091', jr d\n    pipeline.push @$_as_text_event()\n    #.......................................................................................................\n    pipeline.push $async ( d, send, done ) =>\n    # pipeline.push $ ( d, send ) =>\n      mktsp2_push_source ?= @get_mktsp2_push_source()\n      mktsp2_push_source.push new_system_event 'send-and-done', { send, done, }\n      mktsp2_push_source.push d\n      return null\n    #.......................................................................................................\n    return PS.pull pipeline...\n\n  #---------------------------------------------------------------------------------------------------------\n  @get_mktsp2_push_source = =>\n    source      = new_push_source()\n    pipeline    = []\n    #.......................................................................................................\n    pipeline.push source\n    # pipeline.push PS.$watch ( d ) => whisper jr d\n    pipeline.push $unwrap_recycled()\n    #.......................................................................................................\n    pipeline.push @$split_on_first_active_chr         S\n    pipeline.push ACHRS_TRANSFORMS.$em_and_strong_1   S\n    pipeline.push ACHRS_TRANSFORMS.$em_and_strong_2   S\n    # pipeline.push ACHRS_TRANSFORMS.$em                S\n    # pipeline.push ACHRS_TRANSFORMS.$strong            S\n    pipeline.push @$recycle_untouched_texts           S\n    pipeline.push @$warn_on_unhandled_achrs           S\n    #.......................................................................................................\n    pipeline.push PS.$watch ( d ) => if ( select d, '~', 'end' ) then source.end()\n    pipeline.push $recycle source.push\n    #.......................................................................................................\n    pipeline.push do =>\n      senders = null\n      PS.$watch ( d ) ->\n        if select d, '~', 'send-and-done'\n          debug '29922', d\n          senders = d\n        else\n          senders.send d\n          senders.done()\n    pipeline.push PS.$drain()\n    PS.pull pipeline...\n    #.......................................................................................................\n    return source\n\n  #---------------------------------------------------------------------------------------------------------\n  return @get_transformer()\n\n\n############################################################################################################\nunless module.parent?\n  S = {}\n  texts = [\n    # 'a line of text.'\n    # 'a line of *text*.'\n    # 'a line of 𣥒text*.'\n    # 'a **strong** and a *less strong* emphasis.'\n    'a *normal and a **strong** emphasis*.'\n    # 'another *such and **such*** emphasis.'\n    # '***em* strong**.'\n    # '***strong** em*.'\n    'triple ***strong-em***.'\n    'lone *star'\n    'triple lone ***star'\n    ]\n  MKTSP2    = @\n  source    = new_push_source()\n  pipeline  = []\n  pipeline.push source\n  pipeline.push PS.$watch ( d ) => whisper '33301', jr d\n  pipeline.push MKTSP2.$parse_special_forms S\n  # pipeline.push PS.$watch ( d ) => urge jr d\n  pipeline.push MKTSP2.$show_events         S\n  pipeline.push PS.$drain()\n  PS.pull pipeline...\n\n  for text in texts\n    whisper '#'.repeat 50\n    source.push text\n    source.push new_flush_event()\n\n  # pattern = /// (?<!\\\\) (?<achr> (?<chr> [ \\* ` + p ] ) \\k<chr>* ) ///\n  # # pattern = /// (?<!\\\\) (?<achr> ( [ \\* ` + p ] ) \\2* ) ///\n  # # pattern = /// (?<!\\\\) ( ( [ \\* ` + p ] ) \\2* ) ///\n  # debug 'flappy'.match pattern\n  # debug 'fla\\\\ppy'.match pattern\n\n\n"
  ]
}