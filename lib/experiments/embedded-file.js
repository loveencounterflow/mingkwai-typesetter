// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var $, $async, CND, FS, PATH, PS, XREGEXP, alert, assign, badge, debug, echo, help, info, jr, log, rpr, urge, warn, whisper;

  //###########################################################################################################
  PATH = require('path');

  FS = require('fs');

  //...........................................................................................................
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MK/TS/EMBEDDED-FILE';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  XREGEXP = require('xregexp');

  PS = require('pipestreams');

  ({$, $async} = PS);

  // new_pushable              = require 'pull-pushable'
  assign = Object.assign;

  jr = JSON.stringify;

  //-----------------------------------------------------------------------------------------------------------
  this.get_path_and_fragment = function(xpath) {
    var match;
    if ((match = xpath.match(/^(?<path>.*?)(?<fragment>[^#]+)$/)) == null) {
      return {
        path: xpath,
        fragment: null
      };
    }
    return {
      path: match.groups.path,
      fragment: match.groups.fragment
    };
  };

  //-----------------------------------------------------------------------------------------------------------
  this.read_embedded_file = function(xpath) {
    var d, on_stop, pipeline, source;
    d = this.get_path_and_fragment(xpath);
    source = PS.new_file_source(xpath);
    //.........................................................................................................
    on_stop = PS.new_event_collector('stop', function() {
      return help('ok');
    });
    pipeline = [];
    pipeline.push(source);
    pipeline.push(PS.$split());
    pipeline.push(PS.$show());
    pipeline.push(on_stop.add(PS.$drain()));
    return PS.pull(...pipeline);
  };

}).call(this);

//# sourceMappingURL=embedded-file.js.map
