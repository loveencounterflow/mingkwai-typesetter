{
  "version": 3,
  "file": "embedded-file.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/embedded-file.coffee"
  ],
  "names": [],
  "mappings": ";AACA;EAAA;AAAA,MAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,OAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR,EAL5B;;;EAOA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAlB5B;;;EAoBA,OAAA,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,aAAR;;EAC5B,CAAA,CAAE,CAAF,EAAK,MAAL,CAAA,GAA4B,EAA5B,EAtBA;;;EAwBA,MAAA,GAA4B,MAAM,CAAC;;EACnC,EAAA,GAA4B,IAAI,CAAC,UAzBjC;;;EA4BA,IAAC,CAAA,qBAAD,GAAyB,QAAA,CAAE,KAAF,CAAA;AACvB,QAAA;IAAA,IAA+C,iEAA/C;AAAA,aAAO;QAAE,IAAA,EAAM,KAAR;QAAe,QAAA,EAAU;MAAzB,EAAP;;AACA,WAAO;MAAE,IAAA,EAAM,KAAK,CAAC,MAAM,CAAC,IAArB;MAA2B,QAAA,EAAU,KAAK,CAAC,MAAM,CAAC;IAAlD;EAFgB,EA5BzB;;;EAiCA,IAAC,CAAA,kBAAD,GAAsB,QAAA,CAAE,KAAF,CAAA;AACpB,QAAA,CAAA,EAAA,OAAA,EAAA,QAAA,EAAA;IAAA,CAAA,GAAY,IAAC,CAAA,qBAAD,CAAuB,KAAvB;IACZ,MAAA,GAAY,EAAE,CAAC,eAAH,CAAmB,KAAnB,EADZ;;IAGA,OAAA,GAAY,EAAE,CAAC,mBAAH,CAAuB,MAAvB,EAA+B,QAAA,CAAA,CAAA;aAAG,IAAA,CAAK,IAAL;IAAH,CAA/B;IACZ,QAAA,GAAY;IACZ,QAAQ,CAAC,IAAT,CAAc,MAAd;IACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAA,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,KAAH,CAAA,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,OAAO,CAAC,GAAR,CAAY,EAAE,CAAC,MAAH,CAAA,CAAZ,CAAd;WACA,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;EAVoB;AAjCtB",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MK/TS/EMBEDDED-FILE'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nXREGEXP                   = require 'xregexp'\nPS                        = require 'pipestreams'\n{ $, $async, }            = PS\n# new_pushable              = require 'pull-pushable'\nassign                    = Object.assign\njr                        = JSON.stringify\n\n#-----------------------------------------------------------------------------------------------------------\n@get_path_and_fragment = ( xpath ) ->\n  return { path: xpath, fragment: null, } unless ( match = xpath.match /^(?<path>.*?)(?<fragment>[^#]+)$/ )?\n  return { path: match.groups.path, fragment: match.groups.fragment, }\n\n#-----------------------------------------------------------------------------------------------------------\n@read_embedded_file = ( xpath ) ->\n  d         = @get_path_and_fragment xpath\n  source    = PS.new_file_source xpath\n  #.........................................................................................................\n  on_stop   = PS.new_event_collector 'stop', -> help 'ok'\n  pipeline  = []\n  pipeline.push source\n  pipeline.push PS.$split()\n  pipeline.push PS.$show()\n  pipeline.push on_stop.add PS.$drain()\n  PS.pull pipeline...\n\n\n\n"
  ]
}