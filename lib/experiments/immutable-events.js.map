{
  "version": 3,
  "file": "immutable-events.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/immutable-events.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/TEX-WRITER/MKTSTABLE'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\njr                        = JSON.stringify\n#...........................................................................................................\nI                         = require 'immutable'\ndebug '36333', Object.keys I\n\n#-----------------------------------------------------------------------------------------------------------\nget       = ( me, key, value  ) -> me.get key, value\nset       = ( me, key, value  ) -> me.set key, value\npush      = ( me, value       ) -> me.push value\npop       = ( me              ) -> me.pop()\nsame_as   = ( me, you         ) -> me is you\n\n#-----------------------------------------------------------------------------------------------------------\nequals = ( me, you ) ->\n  ### TAINT no way to make sure `equals` is a method and that it tests for deep equality ###\n  if  me.equals?  then return    me.equals you\n  if you.equals?  then return   you.equals me\n  return                        CND.equals me, you\n\n{ Map, List } = I\nmap1 = Map { a: 1, b: 2, c: 3 }\nmap2 = set map1, 'b', 50\ninfo ( get map1, 'b' ) + \" vs. \" + ( get map2, 'b' )\ninfo map1\ninfo map2\ninfo jr map1\ninfo jr map2\n\nd = List ( x for x in [ 5 .. 12 ] by +2 )\n\ndebug '27723', map1[ 'x' ]\ndebug '27723', Object.keys map1\ndebug '27723 IN   ', jr ( key for key in map1 )\ndebug '27723 OF   ', jr ( key for key of map1 )\ndebug '27723 FROM ', jr ( key for key from map1 )\ndebug '27723 IN   ', jr ( key for key in d )\ndebug '27723 OF   ', jr ( key for key of d )\ndebug '27723 FROM ', jr ( key for key from d )\n\nd1 = d\nd2 = push d, 3\nd3 = pop  d2\ninfo 'd             ', d\ninfo 'd1            ', d1\ninfo 'd2            ', d2\ninfo 'd is d1       ', d is d1\ninfo 'd1 is d2      ', d1 is d2\ninfo 'd1 is d3      ', d1 is d3\ninfo 'd1.equals d3  ', equals d1, d3\n\nd4 = set d, 0, 'helo'\n\nfor x from d4\n  debug '33444', x\nfor [ x, y, ] from map1\n  debug '33444', x, y\n\nurge a = Map Object.assign {}, { x: 42, }, map1.toJS()\nurge b = Map Object.assign {}, map1.toJS(), { x: 42, }\n\ninfo a is b\ninfo I.is a, b\ninfo a.equals b\ninfo equals a, b\n\ninfo()\ninfo equals a, b\nx = [3,4,]\ny = [3,4,]\na = set a, 'oops', x\nb = set b, 'oops', y\nurge a\npush x, 42\npush y, 42\nurge a\nurge b\ninfo equals a, b\n\n# foo = set a, 'baz', 'fuckyeah'\n# urge()\n# urge foo.baz\n# urge ( get foo, 'baz' )\n# urge get( foo, 'baz' )\n# urge foo.get( 'baz' )\n# urge ( foo.get 'baz' )\n\n# urge ( u.baz foo )\n# foo.bar.baz\n\n# ( u.baz u.bar foo )\n# ( u.bar.baz foo )\n# # f'foo.bar.baz' = 42\n\nhandler =\n  get: ( target, key ) ->\n    debug '36631', 'get', rpr key\n    return target[ key ] if key of target\n    return '**no such value**'\n\n  set: ( target, key, value ) ->\n    debug '36633', 'set', target\n    R = wrap target.set key, value\n    debug '36633', 'R', rpr R\n    return R\n\n# new_cpod = ( P... ) -> new Proxy ( Object.freeze Object.assign {}, P... ), handler\nwrap      = ( x ) -> new Proxy x, handler\nnew_cpod  = ( P... ) -> wrap ( Map Object.assign {}, P... )\n\n# p = new Proxy { foo: 45, }, handler\np = new_cpod { foo: 45, }\ndelete p.foo\ndebug '99902', p\n\n\n# debug '99902', p.foo\n# debug '99902', p.helo\n# q = ( p.bar = 'what a bar!' )\n# q = set p.bar, 'what a bar!'\n# q = set p, 'bar', 'what a bar!'\n# debug '10101', p.bar\n# debug '10101', rpr q\n# debug '10101', q.bar\n\n\n# debug d = Object.freeze { x: 42, }\n# d.x = 108\n# debug d\n\n\n\n\n\n\n\n\n\n\n\n"
  ]
}