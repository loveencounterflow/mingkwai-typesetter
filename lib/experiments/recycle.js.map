{
  "version": 3,
  "file": "recycle.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/recycle.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SCRATCH/CIRCULAR-PIPELINES'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n# #...........................................................................................................\n# suspend                   = require 'coffeenode-suspend'\n# step                      = suspend.step\n#...........................................................................................................\n# D                         = require 'pipedreams'\n# $                         = D.remit.bind D\n# $async                    = D.remit_async.bind D\nPS                        = require 'pipestreams'\n{ $, $async, }            = PS\n_new_push_source          = require 'pull-pushable'\nassign                    = Object.assign\njr                        = JSON.stringify\ncopy                      = ( P... ) -> assign {}, P...\nrprx                      = ( d ) -> \"#{d.sigil} #{d.key}:: #{jr d.value ? null} #{jr d.stamped ? false}\"\n\n###\n\n\nPipestream Events v2\n====================\n\nd         := { sigil,          key, value, ..., $, }    # implicit global namespace\n          := { sigil, prefix,  key, value, ..., $, }    # explicit namespace\n\n# `d.sigil` indicates 'regionality':\n\nsigil     := '.' # proper singleton\n          := '~' # system singleton\n          := '(' # start-of-region (SOR)    # '<'\n          := ')' # end-of-region   (EOR)    # '>'\n\n# `prefix` indicates the namespace; where missing on an event or is `null`, `undefined` or `'global'`,\n# it indicates the global namespace:\n\nprefix    := null | undefined | 'global' | non-empty text\n\nkey       := non-empty text         # typename\n\nvalue     := any                    # payload\n\n$         := pod                    # system-level attributes, to be copied from old to new events\n\n###\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@stamp = ( d ) ->\n  ### Set the `stamped` attribute on event to sigil it as processed. Stamped events will not be selected\n  by the `select` method, only by the `select_all` method. ###\n  d.stamped = true\n  return d\n\n\n#===========================================================================================================\n# RECYCLING\n#-----------------------------------------------------------------------------------------------------------\n@$unwrap_recycled = -> return $ ( d, send ) => send @unwrap_recycled d\n@unwrap_recycled = ( d ) ->\n  ### Given an event, return its value if its a `~recycle` event; otherwise, return the event itself. ###\n  return if ( @is_recycling d ) then d.value else d\n\n#-----------------------------------------------------------------------------------------------------------\n@$recycle = ( push ) ->\n  ### Stream transform to send events either down the pipeline (using `send`) or\n  to an alternate destination, using the `push` method ( the only argument to\n  this function). Normally, this will be the `push` method of a push source, but\n  it could be any function that accepts a single event as argument. ###\n  return $ ( d, send ) =>\n    if ( @is_recycling d ) then push d else send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@new_push_source = ->\n  ### Return a `pull-streams` `pushable`. Methods `push` and `end` will be bound to the instance\n  so they can be freely passed around. ###\n  R       = _new_push_source()\n  R.push  = R.push.bind R\n  R.end   = R.end.bind R\n  return R\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@select = ( d, prefix, sigils, keys ) ->\n  ### Reject all stamped and recycle events: ###\n  return false if @is_stamped   d\n  return false if @is_recycling d\n  ### TAINT avoid to test twice for arity ###\n  switch arity = arguments.length\n    when 3 then return @select_all d, prefix, sigils ### d, sigils, keys ###\n    when 4 then return @select_all d, prefix, sigils, keys\n    else throw new Error \"expected 3 to 4 arguments, got #{arity}\"\n\n# #-----------------------------------------------------------------------------------------------------------\n# @select_system = ( d, prefix, keys ) ->\n#   ### TAINT avoid to test twice for arity ###\n#   switch arity = arguments.length\n#     when 2 then return @select_all d, prefix, sigils ### d, sigils, keys ###\n#     when 3 then return @select_all d, prefix, sigils, keys\n#     else throw new Error \"expected 3 to 4 arguments, got arity\"\n\n#-----------------------------------------------------------------------------------------------------------\n@select_all = ( d, prefix, sigils, keys ) ->\n  ### accepts 3 or 4 arguments; when 4, then second must be prefix (only one prefix allowed);\n  `sigils` and `keys` may be text or list of texts. ###\n  switch arity = arguments.length\n    # when 2 then [ prefix, sigils, keys, ] = [ null, prefix, sigils, ]\n    when 3 then [ prefix, sigils, keys, ] = [ null, prefix, sigils, ]\n    when 4 then null\n    else throw new Error \"expected 3 to 4 arguments, got arity\"\n  #.........................................................................................................\n  prefix  = null if ( not prefix? ) or ( prefix is 'global' )\n  sigils  ?= null\n  keys  ?= null\n  switch _type = CND.type_of prefix\n    when 'null' then null\n    when 'text' then return false unless d.prefix is prefix\n    else throw new Error \"expected a text or a list, got a #{_type}\"\n  switch _type = CND.type_of sigils\n    when 'null' then null\n    when 'text' then return false unless d.sigil is sigils\n    when 'list' then return false unless d.sigil in sigils\n    else throw new Error \"expected a text or a list, got a #{_type}\"\n  switch _type = CND.type_of keys\n    when 'null' then null\n    when 'text' then return false unless d.key is keys\n    when 'list' then return false unless d.key in keys\n    else throw new Error \"expected a text or a list, got a #{_type}\"\n  return true\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@is_system = ( d ) ->\n  ### Return whether event is a system event (i.e. whether its `sigil` equals `'~'`). ###\n  return d.sigil is '~'\n\n#-----------------------------------------------------------------------------------------------------------\n@is_recycling = ( d ) ->\n  ### Return whether event is a recycling wrapper event. ###\n  return ( d.sigil is '~' ) and ( d.key is 'recycle' )\n\n#-----------------------------------------------------------------------------------------------------------\n@is_stamped = ( d ) ->\n  ### Return whether event is stamped (i.e. already processed). ###\n  return d.stamped ? false\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@new_event = ( sigil, key, value, other... ) ->\n  ### When `other` contains a key `$`, it is treated as a hint to copy\n  system-level attributes; if the value of key `$` is a POD that has itself a\n  key `$`, then a copy of that value is used. This allows to write `new_event\n  ..., $: d` to copy system-level attributes such as source locations to a new\n  event. ###\n  if value? then  R = assign { sigil, key, value, }, other...\n  else            R = assign { sigil, key,        }, other...\n  ### TAINT consider to resolve recursively ###\n  if ( CND.isa_pod R.$ ) and ( CND.isa_pod R.$.$ ) then R.$ = copy R.$.$\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_single_event   = ( key, value, other...  ) -> @new_event '.', key, value, other...\n@new_start_event    = ( key, value, other...  ) -> @new_event '(', key, value, other...\n@new_stop_event     = ( key, value, other...  ) -> @new_event ')', key, value, other...\n@new_system_event   = ( key, value, other...  ) -> @new_event '~', key, value, other...\n@new_end_event      =                           -> @new_system_event 'end'\n@new_flush_event    =                           -> @new_system_event 'flush'\n@new_text_event     = (      value, other...  ) -> @new_single_event 'text',    value, other...\n@recycling          = ( d )                     -> @new_system_event 'recycle', d\n\n#-----------------------------------------------------------------------------------------------------------\n@new_warning = ( ref, message, d, other...  ) ->\n  @new_system_event 'warning', d, { ref, message, }, other...\n\n\n############################################################################################################\nL = @\ndo ->\n  for key, value of L\n    continue unless CND.isa_function value\n    L[ key ] = value.bind L\n  return null\n"
  ]
}