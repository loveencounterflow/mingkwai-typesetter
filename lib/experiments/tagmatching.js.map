{
  "version": 3,
  "file": "tagmatching.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/tagmatching.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,OAAA,EAAA,MAAA,EAAA,QAAA,EAAA,GAAA,EAAA,QAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA;;EAIA,QAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,MAAA,GAA4B,OAAA,CAAQ,IAAR,EAL5B;;;EAOA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,OAAA,GAA4B,OAAA,CAAQ,SAAR,EAnB5B;;;EAuBA,IAAA,GAAO;;EACP,OAAA,CAAQ,WAAR,EAAqB,OAAO,CAAC,cAAR,CAAuB,IAAvB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,GAA3C,CAArB;;EAIA,IAAA,GAAO;;EACP,OAAA,CAAQ,WAAR,EAAqB,OAAO,CAAC,cAAR,CAAuB,IAAvB,EAA6B,WAA7B,EAA0C,QAA1C,EAAoD,IAApD,EAA0D;IAC3E,UAAA,EAAY,CAAC,SAAD,EAAY,MAAZ,EAAoB,OAApB,EAA6B,OAA7B;EAD+D,CAA1D,CAArB;;EAcA,IAAA,GAAO;;EACP,OAAA,CAAQ,WAAR,EAAqB,OAAO,CAAC,cAAR,CAAuB,IAAvB,EAA6B,GAA7B,EAAkC,GAAlC,EAAuC,GAAvC,EAA4C;IAC7D,UAAA,EAAY,CAAC,SAAD,EAAY,IAAZ,EAAkB,OAAlB,EAA2B,IAA3B,CADiD;IAE7D,UAAA,EAAY;EAFiD,CAA5C,CAArB;;EAcA,IAAA,GAAO;;EACP,OAAA,CAAQ,WAAR,EAAqB,OAAO,CAAC,cAAR,CAAuB,IAAvB,EAA6B,GAA7B,EAAkC,GAAlC,EAAuC,IAAvC,CAArB;;EAIA,MAAA,GAAY,wEA/DZ;;;;EAkEA,QAAA,GAAY;IAAE,UAAA,EAAY,CAAE,SAAF,EAAa,MAAb,EAAqB,OAArB,EAA8B,OAA9B;EAAd;;EACZ,OAAA,GAAY,OAAO,CAAC,cAAR,CAAuB,MAAvB,EAA+B,OAA/B,EAAwC,QAAxC,EAAkD,IAAlD,EAAwD,QAAxD;;EACZ,IAAG,eAAH;IACE,KAAA,yCAAA;;MACE,IAAA,CAAK,KAAL;IADF,CADF;;AApEA",
  "sourcesContent": [
    "\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MK/TS/MACRO-ESCAPER/tagmatching'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\nXREGEXP                   = require 'xregexp'\n\n\n#-----------------------------------------------------------------------------------------------------------\nstr1 = '(t((e))s)t()(ing)'\nwhisper '--( 1 )--', XREGEXP.matchRecursive(str1, '\\\\(', '\\\\)', 'g')\n### -> ['t((e))s', '', 'ing'] ###\n\n### Extended information mode with valueNames ###\nstr2 = 'Here is <div> <div>an</div></div> example'\nwhisper '--( 2 )--', XREGEXP.matchRecursive(str2, '<div\\\\s*>', '</div>', 'gi', {\n    valueNames: ['between', 'left', 'match', 'right']\n})\n###\n -> [\n{name: 'between', value: 'Here is ',       start: 0,  end: 8},\n{name: 'left',    value: '<div>',          start: 8,  end: 13},\n{name: 'match',   value: ' <div>an</div>', start: 13, end: 27},\n{name: 'right',   value: '</div>',         start: 27, end: 33},\n{name: 'between', value: ' example',       start: 33, end: 41}\n]\n###\n\n### Omitting unneeded parts with null valueNames, and using escapeChar ###\nstr3 = '...{1}.\\\\{{function(x,y){return {y:x}}}'\nwhisper '--( 3 )--', XREGEXP.matchRecursive(str3, '{', '}', 'g', {\n    valueNames: ['literal', null, 'value', null],\n    escapeChar: '\\\\'\n})\n###\n -> [\n{name: 'literal', value: '...',  start: 0, end: 3},\n{name: 'value',   value: '1',    start: 4, end: 5},\n{name: 'literal', value: '.\\\\{', start: 6, end: 9},\n{name: 'value',   value: 'function(x,y){return {y:x}}', start: 10, end: 37}\n]\n###\n\n### Sticky mode via flag y ###\nstr4 = '<1><<<2>>><3>4<5>'\nwhisper '--( 4 )--', XREGEXP.matchRecursive(str4, '<', '>', 'gy')\n### -> ['1', '<<2>>', '3'] ###\n\n\nsource    = 'Here is a <raw>somewhat contrived</raw> and <raw>longer</raw> example'\n# source    = 'Here is a <raw> <raw>somewhat <raw>contrived</raw> and </raw> longer</raw> example'\n# source    = 'Here is a <raw>example</raw>.'\nsettings  = { valueNames: [ 'between', 'left', 'match', 'right', ], }\nmatches   = XREGEXP.matchRecursive source, '<raw>', '</raw>', 'gi', settings\nif matches?\n  for match in matches\n    urge match\n\n"
  ]
}