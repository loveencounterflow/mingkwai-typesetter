// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var $, $async, $recycle, $unwrap_recycled, CND, COLLATZ, FS, PATH, PS, S, after, alert, assign, badge, copy, debug, defer, echo, help, info, is_recycling, is_stamped, is_system, jr, log, new_end_event, new_event, new_push_source, new_single_event, new_start_event, new_stop_event, new_system_event, provide_collatz, recycling, rpr, rprx, select, select_all, send, stamp, unwrap_recycled, urge, warn, whisper,
    modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  //###########################################################################################################
  PATH = require('path');

  FS = require('fs');

  //...........................................................................................................
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MKTS/EXPERIMENTS/CIRCULAR-PIPELINES';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  // #...........................................................................................................
  // suspend                   = require 'coffeenode-suspend'
  // step                      = suspend.step
  //...........................................................................................................
  // D                         = require 'pipedreams'
  // $                         = D.remit.bind D
  // $async                    = D.remit_async.bind D
  PS = require('pipestreams');

  ({$, $async} = PS);

  assign = Object.assign;

  after = function(dts, f) {
    return setTimeout(f, dts * 1000);
  };

  defer = setImmediate;

  jr = JSON.stringify;

  copy = function(...P) {
    return assign({}, ...P);
  };

  rprx = function(d) {
    var ref, ref1;
    return `${d.sigil} ${d.key}:: ${jr((ref = d.value) != null ? ref : null)} ${jr((ref1 = d.stamped) != null ? ref1 : false)}`;
  };

  // echo '{ ' + ( ( name for name of require './recycle' ).sort().join '\n  ' ) + " } = require './recycle'"
  ({$recycle, $unwrap_recycled, is_recycling, is_stamped, is_system, new_end_event, new_event, new_single_event, new_start_event, new_stop_event, new_system_event, new_push_source, recycling, select, select_all, stamp, unwrap_recycled} = require('./recycle'));

  //-----------------------------------------------------------------------------------------------------------
  provide_collatz = function() {
    //-----------------------------------------------------------------------------------------------------------
    this.new_number_event = function(value, ...other) {
      return new_single_event('number', value, ...other);
    };
    //-----------------------------------------------------------------------------------------------------------
    this.is_one = function(n) {
      return n === 1;
    };
    this.is_odd = function(n) {
      return modulo(n, 2) !== 0;
    };
    this.is_even = function(n) {
      return modulo(n, 2) === 0;
    };
    //-----------------------------------------------------------------------------------------------------------
    this.$even_numbers = function(S) {
      return $((d, send) => {
        if (!((select(d, '.', 'number')) && (this.is_even(d.value)))) {
          return send(d);
        }
        send(stamp(d));
        return send(recycling(this.new_number_event(d.value / 2)));
      });
    };
    //-----------------------------------------------------------------------------------------------------------
    this.$odd_numbers = function(S) {
      return $((d, send) => {
        if (!((select(d, '.', 'number')) && (!this.is_one(d.value)) && (this.is_odd(d.value)))) {
          return send(d);
        }
        send(stamp(d));
        return send(recycling(this.new_number_event(d.value * 3 + 1)));
      });
    };
    //-----------------------------------------------------------------------------------------------------------
    this.$skip_known = function(S) {
      var known;
      known = new Set();
      return $((d, send) => {
        if (!select(d, '.', 'number')) {
          return send(d);
        }
        if (known.has(d.value)) {
          return urge('->', d.value);
        }
        send(d);
        return known.add(d.value);
      });
    };
    //-----------------------------------------------------------------------------------------------------------
    this.$terminate = function(S) {
      return $((d, send) => {
        if ((select_all(d, '.', 'number')) && (this.is_one(d.value))) {
          send(stamp(d));
          send(new_end_event());
        } else {
          send(d);
        }
        return null;
      });
    };
    //-----------------------------------------------------------------------------------------------------------
    this.$throw_on_illegal = function() {
      return PS.$watch(function(d) {
        var type;
        if ((select_all(d, '.', 'number')) && (type = CND.type_of(d.value)) !== 'number') {
          throw new Error(`found an illegal ${type} in ${rpr(d)}`);
        }
        return null;
      });
    };
    //-----------------------------------------------------------------------------------------------------------
    this.$main = function(S) {
      var pipeline;
      pipeline = [];
      // pipeline.push COLLATZ.$skip_known           S
      pipeline.push(COLLATZ.$even_numbers(S));
      pipeline.push(COLLATZ.$odd_numbers(S));
      pipeline.push(COLLATZ.$throw_on_illegal(S));
      // pipeline.push COLLATZ.$terminate            S
      return PS.pull(...pipeline);
    };
    //-----------------------------------------------------------------------------------------------------------
    return this;
  };

  COLLATZ = provide_collatz.apply({});

  //-----------------------------------------------------------------------------------------------------------
  this.new_sender = function(S) {
    var R, pipeline;
    S.source = new_push_source();
    pipeline = [];
    //.........................................................................................................
    pipeline.push(S.source);
    pipeline.push($unwrap_recycled());
    pipeline.push(PS.$delay(0.25));
    // pipeline.push PS.$defer()
    pipeline.push(COLLATZ.$main(S));
    pipeline.push(PS.$watch(function(d) {
      if (select(d, '~', 'end')) {
        return S.source.end();
      }
    }));
    pipeline.push($recycle(S.source.push));
    // pipeline.push PS.$watch ( d ) -> whisper rpr d
    pipeline.push(PS.$watch(function(d) {
      return help(jr(d));
    }));
    //.........................................................................................................
    pipeline.push($((function() {
      var collector;
      collector = null;
      return function(d, send) {
        if (collector == null) {
          collector = [];
        }
        if (select_all(d, '~', 'collect')) {
          send(collector);
          return collector = null;
        } else if (select_all(d, '.', 'number')) {
          return collector.push(d.value);
        }
      };
    })()));
    //.........................................................................................................
    pipeline.push(PS.$watch(function(d) {
      return urge(jr(d));
    }));
    pipeline.push(PS.$drain(function() {
      return help('ok');
    }));
    PS.pull(...pipeline);
    //.........................................................................................................
    R = function(value) {
      if (CND.isa_number(value)) {
        return S.source.push(new_event('.', 'number', value));
      } else {
        return S.source.push(value);
      }
    };
    R.end = function() {
      return S.source.end();
    };
    return R;
  };

  //###########################################################################################################
  if (module.parent == null) {
    S = {};
    send = this.new_sender(S);
    urge('-----------');
    send(5);
    send(new_system_event('collect'));
    send(6);
    send(new_system_event('collect'));
  }

  // for n in [ 2 .. 3 ]
//   debug n
//   do ( n ) ->
//     send n
//     # defer send n
//     send new_system_event 'collect'
//     urge '-----------'
//   # # send.end()
// # send new_system_event 'end'
// send.end()
/*

#-----------------------------------------------------------------------------------------------------------
@$odd_numbers = ( S ) ->
  unq         = 'Ã¾108'
  syncnr      = 0
  open_syncs  = new Map()
  buffers     = {}
  #.........................................................................................................
  unq_from_sync = ( sync ) -> sync.replace ///^ ([^\/]+) \/ .* $///, '$1'
  is_my_sync    = ( unq, sync ) -> return unq is unq_from_sync sync
  #.........................................................................................................
  has_open_syncs = ( unq ) ->
    return false unless ( target = open_syncs.get unq )?
    return target.size > 0
  #.........................................................................................................
  open_sync   = ( unq ) ->
    syncnr += +1;
    R       = "#{unq}/#{syncnr}"
    open_syncs.set unq, ( target = new Set() ) unless ( target = open_syncs.get unq )?
    target.add R
    return R
  #.........................................................................................................
  close_sync = ( sync ) ->
    unq = unq_from_sync sync
    if ( target = open_syncs.get unq )?
      target.delete sync
      open_syncs.delete unq if target.size is 0
      return [] unless ( R = buffers[ sync ] )?
      delete buffers[ sync ]
      return R
  #.........................................................................................................
  sync_stack = []
  #.........................................................................................................
  return $async ( d, send, done ) =>
    whisper '88893', d, open_syncs if d.sync?
    ## # TAINT should close in stack order ## #
    #.....................................................................................................
    if ( select d, '~', 'sync' ) and ( is_my_sync unq, d.sync )
      sync_stack.pop()
      send x for x in close_sync d.sync
      return done()
    #.....................................................................................................
    if has_open_syncs unq
      most_recent_sync = sync_stack[ sync_stack.length - 1 ]
      debug '77663', most_recent_sync
      ( buffers[ most_recent_sync ]?= [] ).push d
      return done()
    #.....................................................................................................
    unless ( select d, '.', 'number' ) and ( not @is_one d.value ) and ( @is_odd d.value )
      send d
      return done()
    #.....................................................................................................
    sync = open_sync unq
    sync_stack.push sync
    send stamp d
    send recycling ( @new_number_event ( d.value * 3 + 1 ) ), sync
    done()
 */

}).call(this);

//# sourceMappingURL=circular-pipelines.js.map
