{
  "version": 3,
  "file": "mktscript-writer.js",
  "sourceRoot": "..",
  "sources": [
    "src/mktscript-writer.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/mktscript-writer'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#-----------------------------------------------------------------------------------------------------------\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n# $async                    = D.remit_async.bind D\n#...........................................................................................................\nMarkdown_parser           = require 'markdown-it'\n# Html_parser               = ( require 'htmlparser2' ).Parser\nnew_md_inline_plugin      = require 'markdown-it-regexp'\n#...........................................................................................................\n# HELPERS                   = require './helpers'\n# @MACROS                   = require './macros'\n#...........................................................................................................\nmisfit                    = Symbol 'misfit'\nMKTS                      = require './main'\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$show_mktsmd_events = ( S ) ->\n#   unknown_events    = []\n#   indentation       = ''\n#   tag_stack         = []\n#   return D.$observe ( event, has_ended ) =>\n#     if event?\n#       [ type, name, text, meta, ] = event\n#       if type is '?'\n#         unknown_events.push name unless name in unknown_events\n#         warn JSON.stringify event\n#       else\n#         color = CND.blue\n#         #...................................................................................................\n#         if is_hidden event\n#           color = CND.brown\n#         else\n#           switch type\n#             # when '('  then color = CND.yellow\n#             when '('  then color = CND.lime\n#             when ')'  then color = CND.olive\n#             when '!'  then color = CND.indigo\n#             when '#'  then color = CND.plum\n#             when '.'\n#               switch name\n#                 when 'text' then color = CND.BLUE\n#                 # when 'code' then color = CND.orange\n#         #...................................................................................................\n#         text = if text? then ( color rpr text ) else ''\n#         switch type\n#           #.................................................................................................\n#           when 'text'\n#             log indentation + ( color type ) + ' ' + rpr name\n#           #.................................................................................................\n#           when 'tex'\n#             if S.show_tex_events ? no\n#               log indentation + ( color type ) + ( color name ) + ' ' + text\n#           #.................................................................................................\n#           when '#'\n#             [ _, kind, message, _, ]  = event\n#             my_badge                  = \"(#{meta[ 'badge' ]})\"\n#             color = switch kind\n#               when 'insert' then  'lime'\n#               when 'drop'   then  'orange'\n#               when 'warn'   then  'RED'\n#               when 'info'   then  'BLUE'\n#               else                'grey'\n#             log ( CND[ color ] '#' + kind ), ( CND.white message ), ( CND.grey my_badge )\n#           #.................................................................................................\n#           else\n#             log indentation + ( color type ) + ( color name ) + ' ' + text\n#         #...................................................................................................\n#         unless is_hidden event\n#           switch type\n#             #.................................................................................................\n#             when '(', ')'\n#               switch type\n#                 when '('\n#                   tag_stack.push [ type, name, ]\n#                 when ')'\n#                   if tag_stack.length > 0\n#                     [ topmost_type, topmost_name, ] = tag_stack.pop()\n#                     unless topmost_name is name\n#                       warn \"encountered <<#{name}#{type}>> when <<#{topmost_name})>> was expected\"\n#                   else\n#                     warn \"level below zero\"\n#               indentation = ( new Array tag_stack.length ).join '  '\n#     #.......................................................................................................\n#     if has_ended\n#       if tag_stack.length > 0\n#         warn \"unclosed tags: #{tag_stack.join ', '}\"\n#       if unknown_events.length > 0\n#         warn \"unknown events: #{unknown_events.sort().join ', '}\"\n#     return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_mktsmd_events = ( S ) ->\n  return D.$observe ( event, has_ended ) =>\n    if event?\n      # debug '33733', rpr event\n      [ type, name, text, meta, ] = event\n      if select event, 'tex', null, yes\n        null\n      else if select event, '#'\n        switch name\n          when 'warn'\n            line_color = CND.red\n          else\n            line_color = CND.brown\n        log line_color type, name, text\n      else\n        if is_hidden event                   then line_color = CND.grey\n        else if select event, '.', 'warning' then line_color = CND.red\n        else if select event, '.', 'text'    then line_color = CND.blue\n        else                                      line_color = CND.white\n        #...................................................................................................\n        markup = meta[ 'markup' ] ? ''\n        markup = if markup.length > 0 then ( rpr markup ) else ''\n        log line_color type, name, ( if text? then rpr text else '' ), ( CND.grey markup )\n    #.......................................................................................................\n    if has_ended\n      null\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$produce_mktscript = ( S ) ->\n  level                   = 0\n  indentation             = ''\n  tag_stack               = []\n  mktscript_locator       = S.layout_info[ 'mktscript-locator' ]\n  mktscript_output        = njs_fs.createWriteStream mktscript_locator\n  write                   = ( x ) -> mktscript_output.write x, { encoding: 'utf-8', }\n  clr_anchor              = '\\x1b[1;32m'\n  clr_reset               = '\\x1b[0m'\n  #.........................................................................................................\n  return D.$observe ( event, has_ended ) =>\n    if ( not event? ) or has_ended\n      write \"#{clr_anchor}     █  #{clr_reset}# EOF\"\n      return null\n    #.......................................................................................................\n    [ type, name, text, meta, ] = event\n    if meta?.line_nr?\n      line_nr_txt = meta.line_nr.toString().padStart 4, '0'\n      anchor      = \"#{clr_anchor}#{line_nr_txt} █ #{clr_reset}\"\n      # anchor      = CND.grey \"#{line_nr_txt} █ \"\n    else\n      anchor = \"#{clr_anchor}     █  #{clr_reset}\"\n    #.....................................................................................................\n    # send JSON.stringify event\n    text_rpr = ''\n    if text?\n      ### TAINT we have to adopt a new event format; for now, the `text` attribute is misnamed,\n      as it is really a `data` attribute ###\n      if CND.isa_text text\n        ### TAINT doesn't recognize escaped backslash ###\n        text_rpr = ' ' + ( rpr text ).replace /\\\\n/g, '\\n'\n      else if ( Object.keys text ).length > 0\n        text_rpr = ' ' + JSON.stringify text\n    switch type\n      when '('\n        # write '33347 indent plus'\n        level        += +1\n        indentation   = '  '.repeat level\n      when ')'\n        # write '33347 indent minus'\n        level        += -1\n        indentation   = '  '.repeat level\n\n    #   when '?'\n    #     write \"\\n#{anchor}#{type}#{name}\\n\"\n    #   when '('\n    #     write \"#{anchor}#{type}#{name}\"\n    #   when ')', '!'\n    #     write \"#{type}\\n\"\n    #   when '('\n    #     write \"#{type}#{name}\"\n    #   when ')'\n    #     write \"#{type}\"\n    #   when '.'\n    #     switch name\n    #       when 'hr'\n    #         write \"\\n#{anchor}#{type}#{name}\\n\"\n    #       when 'p'\n    #         write \"¶\\n\"\n    #       when 'text'\n    #         ### TAINT doesn't recognize escaped backslash ###\n    #         text_rpr = ( rpr text ).replace /\\\\n/g, '\\n'\n    #         write text_rpr\n    #       else\n    #         write \"\\n#{anchor}IGNORED: #{rpr event}\"\n    #   else\n    #     write \"\\n#{anchor}IGNORED: #{rpr event}\"\n    write \"#{anchor}#{indentation}#{type}#{name}#{text_rpr}\"\n    write '\\n'\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@mkts_events_from_md = ( source, settings, handler ) ->\n  switch arity = arguments.length\n    when 2\n      handler   = settings\n      settings  = {}\n    when 3 then null\n    else throw new Error \"expected 2 or 3 arguments, got #{arity}\"\n  bare          = settings[ 'bare' ] ? no\n  md_readstream = MKTS.MD_READER.create_md_read_tee source\n  { input\n    output }    = md_readstream.tee\n  Z             = []\n  output.pipe $ ( event, send ) =>\n    # debug '©G3QXt', event\n    Z.push event unless bare and select event, [ '(', ')', ], 'document'\n  output.on 'end', -> handler null, Z\n  input.resume()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@mktscript_from_md = ( md_source, settings, handler ) ->\n  ### TAINT code duplication ###\n  switch arity = arguments.length\n    when 2\n      handler   = settings\n      settings  = {}\n    when 3 then null\n    else throw new Error \"expected 2 or 3 arguments, got #{arity}\"\n  #.........................................................................................................\n  source_route        = settings[ 'source-route' ] ? '<STRING>'\n  md_readstream       = MKTS.MD_READER.create_md_read_tee md_source\n  { input\n    output }          = md_readstream.tee\n  f                   = => input.resume()\n  #.........................................................................................................\n  output\n    .pipe @$produce_mktscript md_readstream.tee[ 'S' ]\n    # .pipe D.$show '>>>>>>>>>>>>>>'\n    .pipe do =>\n      Z = []\n      return $ ( event, send, end ) =>\n        Z.push event if event?\n        if end?\n          handler null, Z.join ''\n          end()\n  #.........................................................................................................\n  D.run f, @_handle_error\n  return null\n"
  ]
}