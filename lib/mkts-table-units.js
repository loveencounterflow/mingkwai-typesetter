// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var $, $async, CND, D, alert, assign, badge, copy, debug, echo, help, info, jr, log, rpr, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MKTS/TABLE/UNITS';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  D = require('pipedreams');

  ({$, $async} = D);

  //...........................................................................................................
  assign = Object.assign;

  copy = function(x) {
    return Object.assign({}, x);
  };

  jr = JSON.stringify;

  this.pattern = /^\s*(?<value>(?:\+|-)?[0-9]*\.?[0-9]*)\s*(?<unit>[^\s0-9]+)\s*$/;

  //-----------------------------------------------------------------------------------------------------------
  this.factors = {
    mm: 1/* mm */,
    cm: 10/* mm */,
    m: 1000,
    pt: 1 / (7227 / 2540),
    /* ~0.35mm */lineheight: 5.26
  };

  //-----------------------------------------------------------------------------------------------------------
  this./* preset, may change */_get_factor = function(unit) {
    var R;
    if ((R = this.factors[unit]) == null) {
      throw new Error(`(MKTS/TABLE µ88309) unknown unit ${rpr(unit)}`);
    }
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.set_factor = function(source_unit, target_value, target_unit) {
    /* TAINT validate numbers */
    if (target_unit !== 'mm') {
      throw new Error(`(MKTS/TABLE µ43272) expected 'mm' as target unit, got ${rpr(target_unit)}`);
    }
    //.........................................................................................................
    this.factors[source_unit] = target_value;
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.new_quantity = function(x, unit = null) {
    var type;
    if (unit == null) {
      switch ((type = CND.type_of(x))) {
        case 'text':
          return this.parse(x);
        case 'MKTS/TABLE/quantity':
          return Object.assign({}, x);
        default:
          throw new Error(`(MKTS/TABLE µ88404) expected a text or a 'MKTS/TABLE/quantity', got a ${rpr(type)}`);
      }
    }
    return {
      '~isa': 'MKTS/TABLE/quantity',
      value: x,
      unit
    };
  };

  //-----------------------------------------------------------------------------------------------------------
  this.parse = function(text) {
    var match, unit, value;
    // text = '1' + text unless ( text.match /^\s*[0-9]/ )?
    if ((match = text.match(this.pattern)) == null) {
      throw new Error(`(MKTS/TABLE µ88272) unable to parse ${rpr(text)}`);
    }
    //.........................................................................................................
    ({value, unit} = match.groups);
    if (value === '+' || value === '-') {
      throw new Error(`(MKTS/TABLE µ88272) unable to parse ${rpr(text)}`);
    }
    if (value === '') {
      value = '1';
    }
    //.........................................................................................................
    return this.new_quantity(parseFloat(value), unit);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.as_text = function(me, operator, operand) {
    var type;
    if (CND.isa_number(me)) {
      return this.as_text(operand, operator, me);
    }
    //.........................................................................................................
    if ((type = CND.type_of(me)) !== 'MKTS/TABLE/quantity') {
      throw new Error(`(MKTS/TABLE µ88316) expected a 'MKTS/TABLE/quantity', got a ${rpr(type)}`);
    }
    if (operator == null) {
      //.........................................................................................................
      return `${me.value}${me.unit}`;
    }
    //.........................................................................................................
    switch (operator) {
      case '*':
        return this.as_text(this.multiply(copy(me), operand));
      default:
        throw new Error(`(MKTS/TABLE µ88360) unknown operand ${rpr(operand)}`);
    }
  };

  //-----------------------------------------------------------------------------------------------------------
  this.multiply = function(me, factor) {
    me = this.new_quantity(me);
    me.value *= factor;
    return me;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.negate = function(me) {
    return this.multiply(me, -1);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.conform = function(me, you) {
    var me_value, you_value;
    me = this.new_quantity(me);
    you = this.new_quantity(you);
    if (you.value !== 1) {
      throw new Error(`(MKTS/TABLE µ88309) unable to conform to a quantity with value other than 1, got ${rpr(you)}`);
    }
    me_value = me.value * this._get_factor(me.unit);
    you_value = you.value * this._get_factor(you.unit);
    you.value = me_value / you_value;
    return you;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.add = function(me, you) {
    var me_value, you_value;
    me = this.new_quantity(me);
    you = this.new_quantity(you);
    me_value = me.value * this._get_factor(me.unit);
    you_value = you.value * this._get_factor(you.unit);
    return this.conform(this.new_quantity(me_value + you_value, 'mm'), me.unit);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.integer_multiple = function(me, you) {
    var me_value, ratio, you_value;
    /* Given a comparison quantity and a reference quantity, return a quantity
    whose unit is the unit of the reference quantity, and whose value is a whole
    number such that the length expressed by the comparison quantity will fit into
    resulting length by the smallest integer multiple of the reference length.
    For example, `integer_multiple '15.5mm', '5mm'` will result in `20mm`, because
    `20mm` is the smallest integer multiple of `5mm` that is longer than `15.5mm`. */
    //.........................................................................................................
    me = this.new_quantity(me);
    you = this.new_quantity(you);
    me_value = me.value * this._get_factor(me.unit);
    you_value = you.value * this._get_factor(you.unit);
    ratio = Math.ceil(me_value / you_value);
    return this.multiply(you, ratio);
  };

  // #-----------------------------------------------------------------------------------------------------------
// @integer_multiple_minus_one = ( me, you ) ->
//   R =
//   return ( @integer_multiple me, you )

}).call(this);

//# sourceMappingURL=mkts-table-units.js.map
