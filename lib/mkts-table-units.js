// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var $, $async, CND, D, alert, assign, badge, copy, debug, echo, help, info, jr, log, rpr, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MKTS/TABLE/UNITS';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  D = require('pipedreams');

  $ = D.remit.bind(D);

  $async = D.remit_async.bind(D);

  //...........................................................................................................
  assign = Object.assign;

  copy = function(x) {
    return Object.assign({}, x);
  };

  jr = JSON.stringify;

  this.pattern = /^\s*(?<value>[0-9]+\.?[0-9]*)\s*(?<unit>[^\s0-9]+)\s*$/;

  //-----------------------------------------------------------------------------------------------------------
  this.parse_nonnegative_quantity = function(text) {
    var R, match;
    if ((match = text.match(this.pattern)) == null) {
      throw new Error(`(MKTS/TABLE µ5375) unable to parse ${rpr(text)} as nonnegative quantity`);
    }
    //.........................................................................................................
    R = assign({}, match.groups, {
      '~isa': 'MKTS/TABLE/quantity'
    });
    R.value = parseFloat(R.value);
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.as_text = function(me, operator, operand) {
    var type;
    if (CND.isa_number(me)) {
      return this.as_text(operand, operator, me);
    }
    //.........................................................................................................
    if ((type = CND.type_of(me)) !== 'MKTS/TABLE/quantity') {
      throw new Error(`(MKTS/TABLE µ5375) expected a 'MKTS/TABLE/quantity', got a ${rpr(type)}`);
    }
    if (operator == null) {
      //.........................................................................................................
      return `${me.value}${me.unit}`;
    }
    //.........................................................................................................
    switch (operator) {
      case '*':
        return this.as_text(this.multiply(copy(me), operand));
      default:
        throw new Error(`(MKTS/TABLE µ6920) unknown operand ${rpr(operand)}`);
    }
  };

  //-----------------------------------------------------------------------------------------------------------
  this.multiply = function(me, factor) {
    me.value *= factor;
    return me;
  };

}).call(this);

//# sourceMappingURL=mkts-table-units.js.map
