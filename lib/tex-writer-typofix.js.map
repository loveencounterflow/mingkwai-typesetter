{
  "version": 3,
  "file": "tex-writer-typofix.js",
  "sourceRoot": "..",
  "sources": [
    "src/tex-writer-typofix.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA;;;;;;;;;AAAA,MAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,SAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,UAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,mBAAA;IAAA,oBAAA;;;;;;;;;;;;;;;;;EA+BA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EA1C5B;;;EA4CA,CAAA,GAA4B,OAAA,CAAQ,qBAAR;;EAC5B,CAAA,CAAE,CAAF,CAAA,GAA4B,CAA5B;;EACA,SAAA,GAA4B,OAAA,CAAQ,aAAR;;EAC5B,IAAA,GAA4B,SAAS,CAAC,IAAI,CAAC,IAAf,CAA2B,SAA3B;;EAC5B,IAAA,GAA4B,SAAS,CAAC,IAAI,CAAC,IAAf,CAA2B,SAA3B;;EAC5B,KAAA,GAA4B,SAAS,CAAC,KAAK,CAAC,IAAhB,CAA2B,SAA3B;;EAC5B,MAAA,GAA4B,SAAS,CAAC,MAAM,CAAC,IAAjB,CAA2B,SAA3B;;EAC5B,SAAA,GAA4B,SAAS,CAAC,SAAS,CAAC,IAApB,CAA2B,SAA3B;;EAC5B,UAAA,GAA4B,SAAS,CAAC,UAAU,CAAC,IAArB,CAA2B,SAA3B,EApD5B;;;EAsDA,KAAA,GAA4B,OAAA,CAAQ,oBAAR;;EAC5B,mBAAA,GAA4B,MAAA,CAAO,mBAAP;;EAC5B,EAAA,GAA4B,IAAI,CAAC,UAxDjC;;;;;EA6DA,IAAC,CAAA,oBAAD,GAAwB,QAAA,CAAE,CAAF,CAAA,EAAA;;AAEtB,WAAO,CAAA,CAAE,CAAE,KAAF,EAAS,IAAT,CAAA,GAAA;AACP,UAAA,WAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA;MAAA,IAAA,CAAyB,MAAA,CAAO,KAAP,EAAc,GAAd,EAAmB,mBAAnB,CAAzB;AAAA,eAAO,IAAA,CAAK,KAAL,EAAP;;MACA,CAAE,IAAF,EAAQ,IAAR,EAAc,WAAd,EAA2B,IAA3B,CAAA,GAAsC;MACtC,CAAA,CAAE,IAAF,EAAQ,GAAR,CAAA,GAAsC,WAAtC;MACA,IAAyB,GAAA,KAAO,QAAhC;AAAA,eAAO,IAAA,CAAK,KAAL,EAAP;;AACA,cAAO,IAAP;AAAA,aACO,IADP;AACiB,iBAAO,IAAA,CAAK,CAAE,KAAF,EAAS,mBAAT,CAAL;AADxB,aAEO,GAFP;AAEiB,iBAAO,IAAA,CAAK,CAAE,KAAF,EAAS,KAAT,CAAL;AAFxB,aAGO,GAHP;AAGiB,iBAAO,IAAA,CAAK,CAAE,KAAF,EAAS,KAAT,CAAL;AAHxB,aAIO,GAJP;AAIiB,iBAAO,IAAA,CAAK,CAAE,KAAF,EAAS,KAAT,CAAL;AAJxB,aAKO,GALP;AAKiB,iBAAO,IAAA,CAAK,CAAE,KAAF,EAAS,KAAT,CAAL;AALxB,aAMO,GANP;AAMiB,iBAAO,IAAA,CAAK,CAAE,KAAF,EAAS,KAAT,CAAL;AANxB,aAOO,GAPP;AAOiB,iBAAO,IAAA,CAAK,CAAE,KAAF,EAAS,KAAT,CAAL;AAPxB,aAQO,GARP;AAQiB,iBAAO,IAAA,CAAK,CAAE,KAAF,EAAS,qBAAT,CAAL;AARxB,aASO,GATP;AASiB,iBAAO,IAAA,CAAK,CAAE,KAAF,EAAS,oBAAT,CAAL;AATxB,aAUO,GAVP;AAUiB,iBAAO,IAAA,CAAK,CAAE,KAAF,EAAS,KAAT,CAAL;AAVxB;AAWA,aAAO,IAAA,CAAK,KAAL;IAhBA,CAAF;EAFe,EA7DxB;;;EAkFA,IAAC,CAAA,WAAD,GAAe,QAAA,CAAE,CAAF,CAAA,EAAA;;;;;;AAMb,QAAA,aAAA,EAAA,KAAA,EAAA,oBAAA,EAAA,iBAAA,EAAA;IAAA,aAAA,GAAsB;IACtB,IAAA,GAAsB;IACtB,KAAA,GAAsB;IACtB,iBAAA,GAAsB,KAHtB;;IAKA,oBAAA,GAAuB,CAAA,CAAA,GAAA;AACrB,UAAA;MAAA,IAAG,aAAa,CAAC,MAAd,GAAuB,CAA1B;QACE,IAA0B,yBAA1B;UAAA,aAAa,CAAC,IAAd,CAAmB,GAAnB,EAAA;;QACA,aAAa,CAAC,IAAd,CAAmB,GAAnB;QACA,GAAA,GAAwB,UAAA,GAAa,aAAa,CAAC,IAAd,CAAmB,EAAnB;QACrC,iBAAA,GAAwB;QACxB,aAAa,CAAC,MAAd,GAAwB;QACxB,IAAA,CAAK,CAAE,KAAF,EAAS,GAAT,CAAL,EANF;;MAOA,IAAc,aAAd;QAAA,IAAA,CAAK,KAAL,EAAA;;AACA,aAAO;IATc,EALvB;;AAgBA,WAAO,CAAA,CAAE,MAAF,EAAU,CAAE,MAAF,EAAU,KAAV,CAAA,GAAA;AACf,UAAA,WAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,EAAA,YAAA,EAAA,SAAA,EAAA,IAAA,EAAA;MAAA,IAAA,GAAQ;MACR,KAAA,GAAQ;MAER,IAAqC,aAArC;;AAAA,eAAO,oBAAA,CAAA,EAAP;;MACA,IAAA,CAAqC,MAAA,CAAO,KAAP,EAAc,GAAd,EAAmB,mBAAnB,CAArC;AAAA,eAAO,oBAAA,CAAA,EAAP;OAJA;;MAMA,CAAE,IAAF,EAAQ,IAAR,EAAc,WAAd,EAA2B,IAA3B,CAAA,GAAkD;MAClD,CAAA;QAAE,IAAF;QAAQ,GAAR;QAAa,GAAb;QAAkB,GAAA,EAAK;MAAvB,CAAA,GAAkD,WAAlD;MACA,MAAA,GAAkD,aAAS,GAAT,EAAA,KAAA;MAClD,IAAA,CAAqC,MAArC;AAAA,eAAO,oBAAA,CAAA,EAAP;OATA;;MAWA,IAAG,cAAH;QACE,CAAA;UAAE,KAAA,EAAO,YAAT;UAAuB,SAAA,EAAW;QAAlC,CAAA,GAAkD,MAAlD,EADF;OAAA,MAAA;QAGE,IAAA,CAAK,CAAE,GAAF,EAAO,SAAP,EAAkB,CAAA,kDAAA,CAAA,CAAqD,WAArD,CAAA,CAAlB,EAAwF,IAAA,CAAK,IAAL,CAAxF,CAAL;QACA,YAAA,GAAgB;QAChB,SAAA,GAAgB,KALlB;OAXA;;MAkBA,IAAG,iBAAA,KAAuB,YAA1B;QAEE,IAA0B,yBAA1B;;UAAA,aAAa,CAAC,IAAd,CAAmB,GAAnB,EAAA;;QACA,aAAa,CAAC,IAAd,CAAmB,GAAnB;QACA,aAAa,CAAC,IAAd,CAAmB,YAAnB;QACA,iBAAA,GAAoB,aALtB;OAlBA;;MAyBA,GAAA,GAAQ;;QACR,MAAQ;;MACR,aAAa,CAAC,IAAd,CAAmB,GAAnB,EA3BA;;AA6BA,aAAO;IA9BQ,CAAV;EAtBM,EAlFf;;;EAyIA,IAAC,CAAA,eAAD,GAAmB,QAAA,CAAE,CAAF,CAAA,EAAA;;;AAGjB,QAAA;IAAA,oBAAA,GAAwB,CAAE,WAAF,EAAe,eAAf,EAAxB;;;AAGA,WAAO,CAAA,CAAE,CAAE,MAAF,EAAU,KAAV,CAAA,GAAA;AACP,UAAA,SAAA,EAAA,WAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,EAAA,YAAA,EAAA,SAAA,EAAA,IAAA,EAAA;MAAA,IAAA,GAAQ;MACR,KAAA,GAAQ;MAER,IAAA,CAAyB,MAAA,CAAO,KAAP,EAAc,GAAd,EAAmB,mBAAnB,CAAzB;;AAAA,eAAO,IAAA,CAAK,KAAL,EAAP;OAHA;;MAKA,CAAE,IAAF,EAAQ,IAAR,EAAc,WAAd,EAA2B,IAA3B,CAAA,GAAkD;MAClD,CAAA;QAAE,IAAF;QAAQ,GAAR;QAAa,GAAb;QAAkB,GAAA,EAAK;MAAvB,CAAA,GAAkD,WAAlD;MACA,IAAqB,aAAS,GAAT,EAAA,KAAA,MAArB;AAAA,eAAO,IAAA,CAAK,KAAL,EAAP;;MACA,IAAyB,cAAzB;AAAA,eAAO,IAAA,CAAK,KAAL,EAAP;;MAEA,CAAA,CAAA;;QAAE,KAAA,EAAO,YAAT;QAAuB,SAAA,EAAW;MAAlC,CAAA,GAAkD,MAAlD;MAGA,IAAuB,aAAgB,oBAAhB,EAAA,YAAA,MAAvB;;;QAAA,YAAA,GAAe,KAAf;;MACA,IAAqB,CAAM,oBAAN,CAAA,IAA0B,CAAM,iBAAN,CAA/C;AAAA,eAAO,IAAA,CAAK,KAAL,EAAP;OAdA;;MAgBA,SAAA,GAAY;MACZ,IAAqC,oBAArC;QAAA,SAAS,CAAC,IAAV,CAAe,CAAA,CAAA,CAAA,CAAI,YAAJ,CAAA,CAAf,EAAA;;MACA,SAAS,CAAC,IAAV,CAAkB,iBAAH,GAAmB,SAAnB,GAAkC,IAAjD;MACA,IAAsB,oBAAtB;QAAA,SAAS,CAAC,IAAV,CAAe,GAAf,EAAA;;MACA,GAAA,GAAY,SAAS,CAAC,IAAV,CAAe,EAAf;MACZ,IAAA,CAAK,CAAE,KAAF,EAAS,GAAT,CAAL,EArBA;;AAuBA,aAAO;IAxBA,CAAF;EANU,EAzInB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8OA,IAAC,CAAA,MAAD,GAAU,QAAA,CAAE,CAAF,CAAA;AACR,WAAO,CAAA,CAAE,CAAE,KAAF,EAAS,IAAT,CAAA,GAAA;AACP,UAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA;MAAA,IAAA,CAAyB,MAAA,CAAO,KAAP,EAAc,GAAd,EAAmB,MAAnB,CAAzB;AAAA,eAAO,IAAA,CAAK,KAAL,EAAP;;MACA,CAAE,IAAF,EAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,CAAA,GAA8B;AAC9B;MAAA,KAAA,qCAAA;;QACE,IAAA,CAAK,CAAE,GAAF,EAAO,mBAAP,EAA4B,KAA5B,EAAmC,IAAnC,CAAL;MADF;AAEA,aAAO;IALA,CAAF;EADC,EA9OV;;;EAuPA,IAAC,CAAA,0BAAD,GAA8B,QAAA,CAAE,CAAF,CAAA;AAC5B,WAAO,CAAA,CAAE,CAAE,KAAF,EAAS,IAAT,CAAA,GAAA;AACP,UAAA,GAAA,EAAA,WAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,SAAA,EAAA;MAAA,IAAA,CAAyB,MAAA,CAAO,KAAP,EAAc,GAAd,EAAmB,mBAAnB,CAAzB;AAAA,eAAO,IAAA,CAAK,KAAL,EAAP;;MACA,CAAE,IAAF,EAAQ,IAAR,EAAc,KAAd,EAAqB,IAArB,CAAA,GAA+B;MAC/B,WAAA,GAAc,KAAK,CAAC,QAAN,CAAe,KAAf;MACd,CAAA,CAAE,GAAF,CAAA,GAAc,WAAd;MACA,IAAG,GAAA,KAAS,GAAT,IAAA,GAAA,KAAc,KAAjB;QACE,IAAA,CAAK,CAAE,IAAF,EAAQ,IAAR,EAAc,WAAd,EAA2B,IAA3B,CAAL,EADF;OAAA,MAAA;AAME;;;;QAAA,KAAA,qCAAA;;UACE,IAAA,CAAK,CAAE,IAAF,EAAQ,IAAR,EAAgB,KAAK,CAAC,QAAN,CAAe,SAAf,CAAhB,EAA4C,IAA5C,CAAL;QADF,CANF;;AAQA,aAAO;IAbA,CAAF;EADqB,EAvP9B;;;EAwQA,IAAC,CAAA,uBAAD,GAA2B,QAAA,CAAE,CAAF,CAAA,EAAA;;AAEzB,QAAA,SAAA,EAAA,KAAA,EAAA,oBAAA,EAAA;IAAA,SAAA,GAAgB;IAChB,IAAA,GAAgB;IAChB,KAAA,GAAgB,KAFhB;;IAIA,oBAAA,GAAuB,CAAA,CAAA,GAAA;AACrB,UAAA;MAAA,IAAG,SAAS,CAAC,MAAV,GAAmB,CAAtB;QACE,GAAA,GAAoB,SAAS,CAAC,IAAV,CAAe,EAAf;QACpB,SAAS,CAAC,MAAV,GAAoB;QACpB,IAAA,CAAK,CAAE,KAAF,EAAS,GAAT,CAAL,EAHF;;MAKA,IAAc,aAAd;;QAAA,IAAA,CAAK,KAAL,EAAA;;AACA,aAAO;IAPc,EAJvB;;AAaA,WAAO,CAAA,CAAE,MAAF,EAAU,CAAE,MAAF,EAAU,KAAV,CAAA,GAAA;AACf,UAAA,CAAA,EAAA;MAAA,IAAA,GAAQ;MACR,KAAA,GAAQ;MAER,IAAqC,aAArC;;AAAA,eAAO,oBAAA,CAAA,EAAP;;MACA,IAAA,CAAqC,MAAA,CAAO,KAAP,EAAc,KAAd,CAArC;AAAA,eAAO,oBAAA,CAAA,EAAP;OAJA;;MAMA,CAAE,CAAF,EAAK,GAAL,CAAA,GAAc;MACd,SAAS,CAAC,IAAV,CAAe,GAAf,EAPA;;AASA,aAAO;IAVQ,CAAV;EAfkB,EAxQ3B;;;EAoSA,IAAC,CAAA,yBAAD,GAA6B,QAAA,CAAE,CAAF,CAAA;AAC3B,WAAO,CAAA,CAAE,CAAE,KAAF,EAAS,IAAT,CAAA,GAAA;AACP,UAAA,WAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA;MAAA,IAAA,CAAyB,MAAA,CAAO,KAAP,EAAc,GAAd,EAAmB,mBAAnB,CAAzB;AAAA,eAAO,IAAA,CAAK,KAAL,EAAP;;MACA,CAAE,IAAF,EAAQ,IAAR,EAAc,WAAd,EAA2B,IAA3B,CAAA,GAAqC,MADrC;;MAGA,KAAA,GAAQ,WAAa,CAAA,MAAA,EAHrB;;MAKA,IAAA,CAAK,CAAE,KAAF,EAAS,KAAT,CAAL;AACA,aAAO;IAPA,CAAF;EADoB,EApS7B;;;;;EAkTA,IAAC,CAAA,uBAAD,GAA2B,QAAA,CAAE,CAAF,CAAA;AACzB,QAAA;IAAA,QAAA,GAAW,CACT,IAAC,CAAA,MAAD,CAA4B,CAA5B,CADS,EAET,IAAC,CAAA,0BAAD,CAA4B,CAA5B,CAFS,EAGT,IAAC,CAAA,WAAD,CAA4B,CAA5B,CAHS,EAIT,IAAC,CAAA,eAAD,CAA4B,CAA5B,CAJS,EAKT,IAAC,CAAA,oBAAD,CAA4B,CAA5B,CALS,EAMT,IAAC,CAAA,yBAAD,CAA4B,CAA5B,CANS,EAOT,IAAC,CAAA,uBAAD,CAA4B,CAA5B,CAPS,EAAX;;AAUA,WAAO,CAAC,CAAC,UAAF,CAAa,CAAE,QAAF,CAAb;EAXkB,EAlT3B;;;EAgUA,IAAC,CAAA,sBAAD,GAA0B,QAAA,CAAE,CAAF,EAAK,IAAL,EAAW,OAAX,CAAA;AACxB,QAAA,SAAA,EAAA;IAAA,SAAA,GAAY;IACZ,KAAA,GAAY,CAAC,CAAC,UAAF,CAAA;IACZ,KACE,CAAC,IADH,CACQ,IAAC,CAAA,uBAAD,CAAyB,CAAzB,CADR,CAEE,CAAC,IAFH,CAEQ,CAAA,CAAE,CAAE,KAAF,CAAA,GAAA;AACN,UAAA,CAAA,EAAA;MAAA,IAAA,CAAc,MAAA,CAAO,KAAP,EAAc,KAAd,CAAd;AAAA,eAAA;;MACA,CAAE,CAAF,EAAK,GAAL,CAAA,GAAa;aACb,SAAS,CAAC,IAAV,CAAe,GAAf;IAHM,CAAF,CAFR,CAME,CAAC,IANH,CAMQ,CAAA,CAAE,QAAF,EAAY,CAAA,CAAA,GAAA;aAChB,OAAA,CAAQ,IAAR,EAAc,SAAS,CAAC,IAAV,CAAe,EAAf,CAAd;IADgB,CAAZ,CANR,EAFA;;IAWA,CAAC,CAAC,IAAF,CAAQ,KAAR,EAAe,CAAE,GAAF,EAAO,MAAP,EAAe,IAAf,EAAqB,CAAA,CAArB,CAAf;IACA,CAAC,CAAC,GAAF,CAAQ,KAAR,EAZA;;AAcA,WAAO;EAfiB;;EAhU1B;;;AAAA",
  "sourcesContent": [
    "\n\n\n###\n\n{\\latin{}a}{\\latin{}g}{\\latin{}f}{\\latin{}i}{\\latin{} }{\\cjk{}{\\cn{}{\\mktstfRaise{-0.2}\\cnxBabel{}癶}}}{\\cjk{}{\\cn{}里}}{\\cjk{}{\\cnxb{}{\\cnxJzr{}}}}{\\latin{} }{\\cjk{}{\\cn{}里}}{\\cjk{}{\\cnxa{}䊷}}{\\mktsRsgFb{}இ}{\\latin{} }{\\latin{}a}{\\latin{}g}{\\latin{}f}{\\latin{}i}\n\nagfi {\\cjk{}\\cn{}{\\mktstfRaise{-0.2}\\cnxBabel{}癶}里{\\cnxb{}\\cnxJzr{}} 里{\\cnxa{}䊷}}{\\mktsRsgFb{}இ} agfi\n\nagfi {\\cjk{}\\cn{}{\\mktstfRaise{-0.2}\\cnxBabel{}癶}里\\cnxb{}\\cnxJzr{}\\cn 里\\cnxa{}䊷}{\\mktsRsgFb{}இ} agfi\n\n###\n\n###\n\ntypofix v1:\n{\\cjk{}{\\cn{}里}{\\cn{}里}{\\cn\\cnxa{}䊷}{\\cn\\cnxa{}䊷}{\\cn{}里}{\\cn{}里}{\\cn{}里}{\\cn{}里}{\\cn{}里}}\\\\\n\ntypofix v2:\n{\\cjk{}{\\cn{}里里}{\\cnxa{}䊷䊷}{\\cn{}里里里里里}}\n\ntypofix v2 intermediate:\n{\\CJK{}{\\CN{}里里}{\\CNXA{}䊷䊷}{\\CN{}里里里里里}}\n###\n\n\n\n############################################################################################################\n# njs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'mkts/tex-writer-typofix'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nD                         = require '../../../pipedreams'\n{ $ }                     = D\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\n#...........................................................................................................\nMKNCR                     = require '../../mingkwai-ncr'\nΣ_glyph_description       = Symbol 'glyph-description'\njr                        = JSON.stringify\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$format_tex_specials = ( S ) ->\n  ### TAINT should preserve raw text from before replacements ###\n  return $ ( event, send ) =>\n    return send event unless select event, '.', Σ_glyph_description\n    [ type, name, description, meta, ]  = event\n    { uchr, rsg, }                      = description\n    return send event unless rsg is 'u-latn'\n    switch uchr\n      when '\\\\' then return send [ 'tex', '\\\\textbackslash{}',    ]\n      when '{'  then return send [ 'tex', '\\\\{',                  ]\n      when '}'  then return send [ 'tex', '\\\\}',                  ]\n      when '$'  then return send [ 'tex', '\\\\$',                  ]\n      when '#'  then return send [ 'tex', '\\\\#',                  ]\n      when '%'  then return send [ 'tex', '\\\\%',                  ]\n      when '_'  then return send [ 'tex', '\\\\_',                  ]\n      when '^'  then return send [ 'tex', '\\\\textasciicircum{}',  ]\n      when '~'  then return send [ 'tex', '\\\\textasciitilde{}',   ]\n      when '&'  then return send [ 'tex', '\\\\&',                  ]\n    return send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$format_cjk = ( S ) ->\n  ### NOTE same pattern as in `$consolidate_tex_events` ###\n  ### TAINT should preserve raw text from before replacements ###\n  ### TAINT use piped streams for logic? ###\n  ### TAINT unify with `$format_non_cjk` ###\n  ### TAINT do not use a collector, may potentially store text of entire document in memory ###\n  cjk_collector       = []\n  send                = null\n  event               = null\n  last_texcmd_block   = null\n  #.........................................................................................................\n  flush_and_send_event = =>\n    if cjk_collector.length > 0\n      cjk_collector.push \"}\" if last_texcmd_block?\n      cjk_collector.push \"}\"\n      tex                   = \"{\\\\cjk{}\" + cjk_collector.join ''\n      last_texcmd_block     = null\n      cjk_collector.length  = 0\n      send [ 'tex', tex, ]\n    send event if event?\n    return null\n  #.........................................................................................................\n  return $ 'null', ( _event, _send ) =>\n    send  = _send\n    event = _event\n    #.......................................................................................................\n    return flush_and_send_event() unless event?\n    return flush_and_send_event() unless select event, '.', Σ_glyph_description\n    #.......................................................................................................\n    [ type, name, description, meta, ]              = event\n    { uchr, rsg, tag, tex: texcmd, }                = description\n    is_cjk                                          = 'cjk' in tag\n    return flush_and_send_event() unless is_cjk\n    #.......................................................................................................\n    if texcmd?\n      { block: texcmd_block, codepoint: texcmd_cp, }  = texcmd\n    else\n      send [ '.', 'warning', \"missing TeX command in description for codepoint: #{description}\", ( copy meta ), ]\n      texcmd_block  = \"\\\\cn{}\"\n      texcmd_cp     = null\n    #.......................................................................................................\n    if last_texcmd_block isnt texcmd_block\n      ### close previous open TeX block command, if any: ###\n      cjk_collector.push '}' if last_texcmd_block?\n      cjk_collector.push '{'\n      cjk_collector.push texcmd_block\n      last_texcmd_block = texcmd_block\n    #.......................................................................................................\n    tex   = texcmd_cp\n    tex  ?= uchr\n    cjk_collector.push tex\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$format_non_cjk = ( S ) ->\n  ### TAINT code duplication ###\n  ### TAINT unify with `$format_cjk` ###\n  ignore_texcmd_blocks  = [ '\\\\latin{}', '\\\\mktsRsgFb{}', ]\n  # ignore_texcmd_blocks  = [ '\\\\latin{}', ]\n  #.........................................................................................................\n  return $ ( _event, _send ) =>\n    send  = _send\n    event = _event\n    #.......................................................................................................\n    return send event unless select event, '.', Σ_glyph_description\n    #.......................................................................................................\n    [ type, name, description, meta, ]              = event\n    { uchr, rsg, tag, tex: texcmd, }                = description\n    return send event if 'cjk' in tag\n    return send event unless texcmd?\n    #.......................................................................................................\n    { block: texcmd_block, codepoint: texcmd_cp, }  = texcmd\n    # debug '79876', texcmd, texcmd in ignore_texcmd_blocks\n    # return send event if texcmd_block in ignore_texcmd_blocks\n    texcmd_block = null if texcmd_block in ignore_texcmd_blocks\n    return send event if ( not texcmd_block? ) and ( not texcmd_cp? )\n    #.......................................................................................................\n    collector = []\n    collector.push \"{#{texcmd_block}\" if texcmd_block?\n    collector.push if texcmd_cp? then texcmd_cp else uchr\n    collector.push \"}\" if texcmd_block?\n    tex       = collector.join ''\n    send [ 'tex', tex, ]\n    #.......................................................................................................\n    return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$format_cjk = ( S ) ->\n#   ### NOTE same pattern as in `$consolidate_tex_events` ###\n#   ### TAINT should preserve raw text from before replacements ###\n#   ### TAINT use piped streams for logic? ###\n#   cjk_collector         = []\n#   send                  = null\n#   event                 = null\n#   last_texcmd_block     = null\n#   script                = 'latin'\n#   last_script           = script\n#   ignore_texcmd_blocks  = [ '\\\\latin{}', ]\n#   must_close_group      = no\n#   #.........................................................................................................\n#   flush_and_send_event = =>\n#     if cjk_collector.length > 0\n#       cjk_collector.push \"}\" if last_texcmd_block?\n#       cjk_collector.push \"}\"\n#       tex                   = \"{\\\\cjk{}\" + cjk_collector.join ''\n#       last_texcmd_block     = null\n#       cjk_collector.length  = 0\n#       send [ 'tex', tex, ]\n#     send event if event?\n#     return null\n#   #.........................................................................................................\n#   return $ 'null', ( _event, _send ) =>\n#     send  = _send\n#     event = _event\n#     #.......................................................................................................\n#     return flush_and_send_event() unless event?\n#     return flush_and_send_event() unless select event, '.', Σ_glyph_description\n#     #.......................................................................................................\n#     [ type, name, description, meta, ]  = event\n#     { uchr, rsg, tag, tex: texcmd, }    = description\n#     script                              = if ( 'cjk' in tag ) then 'cjk' else 'latin'\n#     flush_and_send_event() if script isnt last_script\n#     last_script                         = script\n#     #.......................................................................................................\n#     if texcmd?\n#       { block: texcmd_block, codepoint: texcmd_cp, }  = texcmd\n#     else\n#       send [ '.', 'warning', \"missing TeX command in description for codepoint: #{description}\", ( copy meta ), ]\n#       texcmd_block  = null\n#       texcmd_cp     = null\n#     #.......................................................................................................\n#     if last_texcmd_block isnt texcmd_block\n#       ### close previous open TeX block command, if any: ###\n#       if must_close_group\n#         cjk_collector.push '}' if cjk_collector?\n#         must_close_group = no\n#       debug \"30222\", rpr texcmd_block, texcmd_block in ignore_texcmd_blocks\n#       if texcmd_block in ignore_texcmd_blocks\n#         must_close_group  = no\n#       else\n#         must_close_group  = yes\n#         cjk_collector.push '{'\n#         cjk_collector.push texcmd_block\n#       last_texcmd_block = texcmd_block\n#     #.......................................................................................................\n#     tex   = texcmd_cp\n#     tex  ?= uchr\n#     cjk_collector.push tex\n#     #.......................................................................................................\n#     return null\n\n\n#===========================================================================================================\n# SPLITTING, WRAPPING, UNWRAPPING\n#-----------------------------------------------------------------------------------------------------------\n@$split = ( S ) ->\n  return $ ( event, send ) =>\n    return send event unless select event, '.', 'text'\n    [ type, name, text, meta, ] = event\n    for glyph in MKNCR.chrs_from_text text\n      send [ '.', Σ_glyph_description, glyph, meta, ]\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$wrap_as_glyph_description = ( S ) ->\n  return $ ( event, send ) =>\n    return send event unless select event, '.', Σ_glyph_description\n    [ type, name, glyph, meta, ] = event\n    description = MKNCR.describe glyph\n    { csg, }    = description\n    if csg in [ 'u', 'jzr', ]\n      send [ type, name, description, meta, ]\n    else\n      ### NOTE In case the CSG is not an 'inner' one (either Unicode or Jizura), the glyph can only\n      have been represented as an extended NCR (a string like `&morohashi#x12ab;`). In that case,\n      we send all the constituent US-ASCII glyphs separately so the NCR will be rendered literally. ###\n      for sub_glyph in Array.from glyph\n        send [ type, name, ( MKNCR.describe sub_glyph ), meta, ]\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$consolidate_tex_events = ( S ) ->\n  ### NOTE same pattern as in `$format_cjk` ###\n  collector     = []\n  send          = null\n  event         = null\n  #.........................................................................................................\n  flush_and_send_event = =>\n    if collector.length > 0\n      tex               = collector.join ''\n      collector.length  = 0\n      send [ 'tex', tex, ]\n    #.......................................................................................................\n    send event if event?\n    return null\n  #.........................................................................................................\n  return $ 'null', ( _event, _send ) =>\n    send  = _send\n    event = _event\n    #.......................................................................................................\n    return flush_and_send_event() unless event?\n    return flush_and_send_event() unless select event, 'tex'\n    #.......................................................................................................\n    [ _, tex, ] = event\n    collector.push tex\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$unwrap_glyph_description = ( S ) ->\n  return $ ( event, send ) =>\n    return send event unless select event, '.', Σ_glyph_description\n    [ type, name, description, meta, ] = event\n    # debug '70333', description\n    glyph = description[ 'uchr' ]\n    ### TAINT send `tex` or `text` event? ###\n    send [ 'tex', glyph, ]\n    return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$fix_typography_for_tex = ( S ) ->\n  pipeline = [\n    @$split                     S\n    @$wrap_as_glyph_description S\n    @$format_cjk                S\n    @$format_non_cjk            S\n    @$format_tex_specials       S\n    @$unwrap_glyph_description  S\n    @$consolidate_tex_events    S\n    # $ ( event ) -> help '65099', rpr event[ 1 ] if select event, 'tex'\n    ]\n  return D.new_stream { pipeline, }\n\n#-----------------------------------------------------------------------------------------------------------\n@fix_typography_for_tex = ( S, text, handler ) ->\n  collector = []\n  input     = D.new_stream()\n  input\n    .pipe @$fix_typography_for_tex S\n    .pipe $ ( event ) =>\n      return unless select event, 'tex'\n      [ _, tex,] = event\n      collector.push tex\n    .pipe $ 'finish', =>\n      handler null, collector.join ''\n  #.........................................................................................................\n  D.send  input, [ '.', 'text', text, {}, ]\n  D.end   input\n  #.........................................................................................................\n  return null\n\n\n# ############################################################################################################\n# unless module.parent?\n#   debug '83744', MKNCR.describe '&#x3000;'\n\n\n\n"
  ]
}