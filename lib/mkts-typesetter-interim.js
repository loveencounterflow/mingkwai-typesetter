(function() {
  var $, $async, ASYNC, CACHE, CND, D, HELPERS, MKTS, OPTIONS, SEMVER, TEXLIVEPACKAGEINFO, alert, badge, copy, debug, echo, help, hide, info, is_hidden, is_stamped, log, njs_fs, njs_path, options_route, ref, rpr, select, stamp, step, suspend, urge, warn, whisper, ƒ;

  njs_path = require('path');

  njs_fs = require('fs');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'JIZURA/MKTS-interim';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  suspend = require('coffeenode-suspend');

  step = suspend.step;

  D = require('pipedreams');

  $ = D.remit.bind(D);

  $async = D.remit_async.bind(D);

  ASYNC = require('async');

  ƒ = CND.format_number.bind(CND);

  HELPERS = require('./HELPERS');

  TEXLIVEPACKAGEINFO = require('./TEXLIVEPACKAGEINFO');

  options_route = '../options.coffee';

  ref = require('./OPTIONS'), CACHE = ref.CACHE, OPTIONS = ref.OPTIONS;

  SEMVER = require('semver');

  MKTS = require('./MKTS');

  hide = MKTS.hide.bind(MKTS);

  copy = MKTS.copy.bind(MKTS);

  stamp = MKTS.stamp.bind(MKTS);

  select = MKTS.select.bind(MKTS);

  is_hidden = MKTS.is_hidden.bind(MKTS);

  is_stamped = MKTS.is_stamped.bind(MKTS);

  this.compile_options = function() {

    /* TAINT this method should go to OPTIONS */
    var cache_locator, cache_route, has_double_slash, has_single_slash, i, len, locator, locators, options_home, options_locator, ref1, route, texinputs_routes;
    options_locator = require.resolve(njs_path.resolve(__dirname, options_route));
    options_home = njs_path.dirname(options_locator);
    this.options = OPTIONS.from_locator(options_locator);
    this.options['home'] = options_home;
    this.options['locator'] = options_locator;
    cache_route = this.options['cache']['route'];
    this.options['cache']['locator'] = cache_locator = njs_path.resolve(options_home, cache_route);
    this.options['xelatex-command'] = njs_path.resolve(options_home, this.options['xelatex-command']);
    if (!njs_fs.existsSync(cache_locator)) {
      this.options['cache']['%self'] = {};
      CACHE.save(this.options);
    }
    this.options['cache']['%self'] = require(cache_locator);
    if ((texinputs_routes = (ref1 = this.options['texinputs']) != null ? ref1['routes'] : void 0) != null) {
      locators = [];
      for (i = 0, len = texinputs_routes.length; i < len; i++) {
        route = texinputs_routes[i];
        has_single_slash = /\/$/.test(route);
        has_double_slash = /\/\/$/.test(route);
        locator = njs_path.resolve(options_home, route);
        if (has_double_slash) {
          locator += '//';
        } else if (has_single_slash) {
          locator += '/';
        }
        locators.push(locator);
      }

      /* TAINT duplication: tex_inputs_home, texinputs_value */

      /* TAINT path separator depends on OS */
      this.options['texinputs']['value'] = locators.join(':');
    }
    return CACHE.update(this.options);
  };

  this.compile_options();

  this.write_mkts_master = function(layout_info, handler) {
    return step((function(_this) {
      return function*(resume) {
        var content_locator, defs, filename, fonts_home, fontspec_version, home, i, len, lines, main_font_name, master_locator, name, newcommands, ref1, ref2, styles, texname, text, use_new_syntax, value, write;
        lines = [];
        write = lines.push.bind(lines);
        master_locator = layout_info['master-locator'];
        content_locator = layout_info['content-locator'];
        help("writing " + master_locator);
        write("");
        write("% " + master_locator);
        write("% do not edit this file");
        write("% generated from " + _this.options['locator']);
        write("% on " + (new Date()));
        write("");
        write("\\documentclass[a4paper,twoside]{book}");
        write("");
        defs = _this.options['defs'];
        write("");
        write("% DEFS");
        if (defs != null) {
          for (name in defs) {
            value = defs[name];
            write("\\def\\" + name + "{" + value + "}");
          }
        }
        newcommands = _this.options['newcommands'];
        write("");
        write("% NEWCOMMANDS");
        if (newcommands != null) {
          for (name in newcommands) {
            value = newcommands[name];
            warn("implicitly converting newcommand value for " + name);
            value = njs_path.resolve(__dirname, '..', value);
            write("\\newcommand{\\" + name + "}{%\n" + value + "%\n}");
          }
        }
        write("");
        write("% PACKAGES");
        write("\\usepackage{mkts2015-consolidated}");
        fontspec_version = (yield TEXLIVEPACKAGEINFO.read_texlive_package_version(_this.options, 'fontspec', resume));
        use_new_syntax = SEMVER.satisfies(fontspec_version, '>=2.4.0');
        fonts_home = _this.options['fonts']['home'];
        write("");
        write("% FONTS");
        write("% assuming fontspec@" + fontspec_version);
        write("\\usepackage{fontspec}");
        ref1 = _this.options['fonts']['files'];
        for (i = 0, len = ref1.length; i < len; i++) {
          ref2 = ref1[i], texname = ref2.texname, home = ref2.home, filename = ref2.filename;
          if (home == null) {
            home = fonts_home;
          }
          if (use_new_syntax) {

            /* TAINT should properly escape values */
            write("\\newfontface{\\" + texname + "}{" + filename + "}[Path=" + home + "/]");
          } else {
            write("\\newfontface\\" + texname + "[Path=" + home + "/]{" + filename + "}");
          }
        }
        write("");
        write("");
        write("% STYLES");
        if ((styles = _this.options['styles']) != null) {
          for (name in styles) {
            value = styles[name];
            write("\\newcommand{\\" + name + "}{%\n" + value + "%\n}");
          }
        }
        main_font_name = _this.options['fonts']['main'];
        if (main_font_name == null) {
          throw new Error("need entry options/fonts/name");
        }
        write("");
        write("% CONTENT");
        write("\\begin{document}" + main_font_name);
        write("");
        write("\\input{" + content_locator + "}");
        write("");
        write("\\end{document}");
        text = lines.join('\n');
        return njs_fs.writeFile(master_locator, text, handler);
      };
    })(this));
  };

  this.MKTX = {
    DOCUMENT: {},
    COMMAND: {},
    REGION: {},
    BLOCK: {},
    INLINE: {},
    MIXED: {},
    CLEANUP: {}
  };

  this.MKTX.COMMAND.$do = (function(_this) {
    return function(S) {
      var CS, VM, local_filename, sandbox;
      CS = require('coffee-script');
      VM = require('vm');
      local_filename = 'XXXXXXXXXXXXX';
      S.local = {
        definitions: new Map()
      };
      sandbox = {
        urge: CND.get_logger('urge', local_filename),
        help: CND.get_logger('help', local_filename),
        __filename: local_filename,
        define: function(pod) {
          var key, results, value;
          results = [];
          for (key in pod) {
            value = pod[key];
            results.push(S.local.definitions.set(key, value));
          }
          return results;
        }
      };
      VM.createContext(sandbox);
      return $(function(event, send) {
        var action, cs_source, js_source, meta, type;
        if (select(event, '!', 'do')) {
          type = event[0], action = event[1], cs_source = event[2], meta = event[3];
          js_source = CS.compile(cs_source, {
            bare: true,
            filename: local_filename
          });
          urge('4742', js_source);
          VM.runInContext(js_source, sandbox, {
            filename: local_filename
          });
          return send(stamp(hide(event)));
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.MKTX.COMMAND.$expansion = (function(_this) {
    return function(S) {
      var remark;
      remark = MKTS._get_remark();
      return $(function(event, send) {
        var _, definition, identifier, meta, type;
        if (select(event, '!')) {
          type = event[0], identifier = event[1], _ = event[2], meta = event[3];
          if ((definition = S.local.definitions.get(identifier)) != null) {
            send(stamp(hide(['(', '!', identifier, copy(meta)])));
            send(remark('resend', "expanding `" + identifier + "`", copy(meta)));
            S.resend(definition);
            return send(stamp(hide([')', '!', identifier, copy(meta)])));
          } else {
            return send(event);
          }
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.MKTX.COMMAND.$new_page = (function(_this) {
    return function(S) {
      return $(function(event, send) {
        if (!select(event, '!', 'new-page')) {
          return send(event);
        }
        send(stamp(event));
        return send(['tex', "\\null\\newpage{}"]);
      });
    };
  })(this);

  this.MKTX.COMMAND.$comment = (function(_this) {
    return function(S) {
      var remark;
      remark = MKTS._get_remark();
      return $(function(event, send) {
        var meta, name, text, type;
        if (!select(event, '.', 'comment')) {
          return send(event);
        }
        type = event[0], name = event[1], text = event[2], meta = event[3];
        return send(remark('drop', "`.comment`: " + (rpr(text)), copy(meta)));
      });
    };
  })(this);

  this.MKTX.DOCUMENT.$begin = (function(_this) {
    return function(S) {
      return $(function(event, send) {
        if (select(event, '<', 'document')) {
          send(stamp(event));
          return send(['tex', "\n% begin of MD document\n"]);
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.MKTX.DOCUMENT.$end = (function(_this) {
    return function(S) {
      return $(function(event, send) {
        if (select(event, '>', 'document')) {
          send(stamp(event));
          return send(['tex', "\n% end of MD document\n"]);
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.MKTX.REGION._begin_multi_column = (function(_this) {
    return function() {

      /* TAINT Column count must come from layout / options / MKTS-MD command */
      return ['tex', '\\begin{multicols}{2}'];
    };
  })(this);

  this.MKTX.REGION._end_multi_column = (function(_this) {
    return function() {
      return ['tex', '\\end{multicols}'];
    };
  })(this);

  this.MKTX.COMMAND.$multi_column = (function(_this) {
    return function(S) {
      return $(function(event, send) {
        var meta, name, text, type;
        if (select(event, '!', 'multi-column')) {
          type = event[0], name = event[1], text = event[2], meta = event[3];
          send(stamp(hide(['(', '!', name, copy(meta)])));
          send(['{', 'multi-column', text, copy(meta)]);
          send(stamp(hide([')', '!', name, copy(meta)])));
        } else {
          send(event);
        }
        return null;
      });
    };
  })(this);

  this.MKTX.REGION.$multi_column = (function(_this) {
    return function(S) {
      var remark, track;
      track = MKTS.TRACKER.new_tracker('{multi-column}');
      remark = MKTS._get_remark();
      return $(function(event, send) {
        var meta, name, text, type, within_multi_column;
        within_multi_column = track.within('{multi-column}');
        track(event);
        if (select(event, ['{', '}'], 'multi-column')) {
          send(stamp(event));
          type = event[0], name = event[1], text = event[2], meta = event[3];
          if (type === '{') {
            if (within_multi_column) {
              send(remark('drop', "`{multi-column` because already within `{multi-column}`".copy(meta)));
            } else {
              send(track(_this.MKTX.REGION._begin_multi_column()));
            }
          } else {
            if (within_multi_column) {
              send(track(_this.MKTX.REGION._end_multi_column()));
            } else {
              send(remark('drop', "`multi-column}` because not within `{multi-column}`".copy(meta)));
            }
          }
        } else {
          send(event);
        }
        return null;
      });
    };
  })(this);

  this.MKTX.REGION.$single_column = (function(_this) {
    return function(S) {

      /* TAINT consider to implement command `change_column_count = ( send, n )` */
      var remark, track;
      track = MKTS.TRACKER.new_tracker('{multi-column}');
      remark = MKTS._get_remark();
      return $(function(event, send) {
        var meta, name, text, type, within_multi_column;
        within_multi_column = track.within('{multi-column}');
        track(event);
        if (select(event, ['{', '}'], 'single-column')) {
          type = event[0], name = event[1], text = event[2], meta = event[3];
          if (type === '{') {
            if (within_multi_column) {
              send(remark('insert', "`multi-column}`", copy(meta)));
              send(track(_this.MKTX.REGION._end_multi_column()));
              send(stamp(event));
            } else {
              send(remark('drop', "`single-column` because not within `{multi-column}`", copy(meta)));
            }
          } else {
            if (within_multi_column) {
              send(stamp(event));
              send(remark('insert', "`{multi-column`", copy(meta)));
              send(track(_this.MKTX.REGION._begin_multi_column()));
            } else {
              send(remark('drop', "`single-column` because not within `{multi-column}`", copy(meta)));
            }
          }
        } else {
          send(event);
        }
        return null;
      });
    };
  })(this);

  this.MKTX.REGION.$keep_lines = (function(_this) {
    return function(S) {
      var track;
      track = MKTS.TRACKER.new_tracker('{keep-lines}');
      return $(function(event, send) {
        var meta, name, text, type, within_keep_lines;
        within_keep_lines = track.within('{keep-lines}');
        track(event);
        if (select(event, '.', 'text')) {
          type = event[0], name = event[1], text = event[2], meta = event[3];

          /* TAINT other replacements possible; use API */

          /* TAINT U+00A0 (nbsp) might be too wide */
          if (within_keep_lines) {
            text = text.replace(/\u0020/g, '\u00a0');
          }
          return send([type, name, text, meta]);
        } else if (select(event, ['{', '}'], 'keep-lines')) {
          send(stamp(event));
          type = event[0], name = event[1], text = event[2], meta = event[3];
          if (type === '{') {
            track.enter('{keep-lines}');
            return send(['tex', "\\begingroup\\mktsObeyAllLines{}"]);
          } else {
            send(['tex', "\\endgroup{}"]);
            return track.leave('{keep-lines}');
          }
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.MKTX.REGION.$code = (function(_this) {
    return function(S) {

      /* TAINT code duplication with `REGION.$keep_lines` possible */
      var track;
      track = MKTS.TRACKER.new_tracker('{code}');
      return $(function(event, send) {
        var meta, name, text, type, within_code;
        within_code = track.within('{code}');
        track(event);
        if (select(event, '.', 'text')) {
          type = event[0], name = event[1], text = event[2], meta = event[3];
          if (within_code) {
            text = text.replace(/\u0020/g, '\u00a0');
          }
          return send([type, name, text, meta]);
        } else if (select(event, ['{', '}'], 'code')) {
          send(stamp(event));
          type = event[0], name = event[1], text = event[2], meta = event[3];
          if (type === '{') {
            return send(['tex', "\\begingroup\\mktsObeyAllLines\\mktsStyleCode{}"]);
          } else {
            return send(['tex', "\\endgroup{}"]);
          }
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.MKTX.BLOCK.$heading = (function(_this) {
    return function(S) {
      var restart_multicols, track;
      restart_multicols = false;
      track = MKTS.TRACKER.new_tracker('{multi-column}');
      return $(function(event, send) {
        var meta, name, text, type, within_multi_column;
        within_multi_column = track.within('{multi-column}');
        track(event);
        if (select(event, ['[', ']'], ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])) {
          send(stamp(event));
          type = event[0], name = event[1], text = event[2], meta = event[3];
          if (type === '[') {
            if (within_multi_column && (name === 'h1' || name === 'h2')) {
              send(track(_this.MKTX.REGION._end_multi_column(meta)));
              restart_multicols = true;
            }
            send(['tex', "\n"]);
            switch (name) {
              case 'h1':
                return send(['tex', "\\chapter{"]);
              case 'h2':
                return send(['tex', "\\section{"]);
              default:
                return send(['tex', "\\subsection{"]);
            }
          } else {

            /* Placing the closing brace on a new line seems to improve line breaking */
            send(['tex', "\n"]);
            send(['tex', "}"]);
            send(['tex', "\n"]);
            if (restart_multicols) {
              send(track(_this.MKTX.REGION._begin_multi_column(meta)));
              return restart_multicols = false;
            }
          }
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.MKTX.BLOCK.$paragraph = (function(_this) {
    return function(S) {

      /* TAINT should unify the two observers */
      var track;
      track = MKTS.TRACKER.new_tracker('{code}', '{keep-lines}');
      return $(function(event, send) {
        var meta, name, text, type, within_code, within_keep_lines;
        within_code = track.within('{code}');
        within_keep_lines = track.within('{keep-lines}');
        track(event);
        if (select(event, '.', 'p')) {
          type = event[0], name = event[1], text = event[2], meta = event[3];
          if (within_code || within_keep_lines) {
            send(stamp(event));
            return send(['tex', '\n\n']);
          } else {
            send(stamp(event));
            return send(_this.MKTX.BLOCK._end_paragraph());
          }
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.MKTX.BLOCK._end_paragraph = (function(_this) {
    return function() {

      /* TAINT use command from sty */

      /* TAINT make configurable */
      return ['tex', '\\mktsShowpar\\par\n'];
    };
  })(this);

  this.MKTX.BLOCK.$unordered_list = (function(_this) {
    return function(S) {
      var item_markup_tex, tex_by_md_markup;
      tex_by_md_markup = {
        '*': '$\\star$',
        'fallback': '—'
      };
      item_markup_tex = null;
      return $(function(event, send) {
        var markup, meta, name, ref1, text, type;
        if (select(event, '[', 'ul')) {
          type = event[0], name = event[1], text = event[2], meta = event[3];
          markup = meta.markup;

          /* TAINT won't work in nested lists */

          /* TAINT make configurable */
          item_markup_tex = (ref1 = tex_by_md_markup[markup]) != null ? ref1 : tex_by_md_markup['fallback'];
          send(stamp(event));
          return send(['tex', '\\begin{itemize}']);
        } else if (select(event, '[', 'li')) {
          send(stamp(event));
          return send(['tex', "\\item[" + item_markup_tex + "] "]);
        } else if (select(event, ']', 'li')) {
          send(stamp(event));
          return send(['tex', '\n']);
        } else if (select(event, ']', 'ul')) {
          send(stamp(event));
          return send(['tex', '\\end{itemize}']);
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.MKTX.BLOCK.$hr = (function(_this) {
    return function(S) {
      var remark;
      remark = MKTS._get_remark();
      return $(function(event, send) {
        var chr, meta, name, text, type;
        if (select(event, '.', 'hr')) {
          send(stamp(event));
          type = event[0], name = event[1], text = event[2], meta = event[3];
          switch (chr = text[0]) {
            case '-':
              return send(['tex', '\n--------------\n']);
            case '*':
              return send(['tex', '\n**************\n']);
            default:
              return send(remark('drop', "`[hr] because markup unknown " + (rpr(text)), copy(meta)));
          }
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.MKTX.INLINE.$code = (function(_this) {
    return function(S) {
      return $(function(event, send) {
        var meta, name, text, type;
        if (select(event, ['(', ')'], 'code')) {
          send(stamp(event));
          type = event[0], name = event[1], text = event[2], meta = event[3];
          if (type === '(') {
            return send(['tex', '{\\mktsStyleCode{}']);
          } else {
            return send(['tex', "}"]);
          }
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.MKTX.MIXED.$raw = (function(_this) {
    return function(S) {
      var track;
      track = MKTS.TRACKER.new_tracker('{raw}', '[raw]', '(raw)', '{definitions}');
      return $(function(event, send) {
        var meta, name, raw_text, text, type, within_raw;
        within_raw = track.within('{raw}', '[raw]', '(raw)', '{definitions}');
        track(event);
        if (select(event, '.', 'raw')) {
          return send(stamp(event));
        } else if (within_raw && select(event, '.', 'text')) {
          throw new Error("should never happen");
          type = event[0], name = event[1], text = event[2], meta = event[3];
          raw_text = meta['raw'];

          /* TAINT could the added `{}` conflict with some (La)TeX commands? */
          return send(stamp(['.', 'raw', raw_text, meta]));
        } else if (select(event, ['}', ']'], 'raw')) {
          send(stamp(event));
          return send(_this.MKTX.BLOCK._end_paragraph());
        } else if (select(event, ['{', '[', '(', ')'], 'raw')) {
          return null;
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.MKTX.MIXED.$footnote = (function(_this) {
    return function(S) {
      return $(function(event, send) {
        var id, meta, name, type;
        if (select(event, '(', 'footnote')) {
          send(stamp(event));
          type = event[0], name = event[1], id = event[2], meta = event[3];
          return send(['tex', "\\footnote{"]);
        } else if (select(event, ')', 'footnote')) {
          send(stamp(event));
          return send(['tex', "}"]);
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.MKTX.MIXED.$remove_footnote_extra_paragraphs = (function(_this) {
    return function(S) {
      var last_event;
      last_event = null;
      return $(function(event, send, end) {
        if (event != null) {
          if (select(event, ')', 'footnote')) {
            if ((last_event != null) && !select(last_event, '.', 'p')) {
              send(last_event);
            }
            last_event = event;
          } else {
            if (last_event != null) {
              send(last_event);
            }
            last_event = event;
          }
        }
        if (end != null) {
          if (last_event != null) {
            send(last_event);
          }
          return end();
        }
      });
    };
  })(this);

  this.MKTX.INLINE.$translate_i_and_b = (function(_this) {
    return function(S) {
      return $(function(event, send) {
        var meta, name, new_name, text, type;
        if (select(event, ['(', ')'], ['i', 'b'])) {
          type = event[0], name = event[1], text = event[2], meta = event[3];
          new_name = name === 'i' ? 'em' : 'strong';
          return send([type, new_name, text, meta]);
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.MKTX.INLINE.$em_and_strong = (function(_this) {
    return function(S) {
      return $(function(event, send) {
        var meta, name, text, type;
        if (select(event, ['(', ')'], ['em', 'strong'])) {
          send(stamp(event));
          type = event[0], name = event[1], text = event[2], meta = event[3];
          if (type === '(') {
            if (name === 'em') {
              return send(['tex', '{\\mktsStyleItalic{}']);

              /* TAINT must not be sent when in vertical mode */
            } else {
              return send(['tex', '{\\mktsStyleBold{}']);
            }
          } else {
            if (name === 'em') {
              send(['tex', '\\/']);
            }
            return send(['tex', "}"]);
          }
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.MKTX.CLEANUP.$remove_empty_texts = function(S) {
    var remark;
    remark = MKTS._get_remark();
    return $((function(_this) {
      return function(event, send) {
        var meta, name, text, type;
        if (select(event, '.', 'text')) {
          type = event[0], name = event[1], text = event[2], meta = event[3];
          if (text === '') {

            /* remain silent to make output an easier read */
            return null;
          } else {
            return send(event);
          }
        } else {
          return send(event);
        }
      };
    })(this));
  };

  this.MKTX.CLEANUP.$remove_empty_p_tags = (function(_this) {
    return function(S) {
      var remark, text_count;
      text_count = 0;
      remark = MKTS._get_remark();
      return $(function(event, send) {
        var _, meta;
        if (select(event, [']', '}'])) {
          text_count = 0;
          return send(event);
        } else if (select(event, '.', 'text')) {
          text_count += +1;
          return send(event);
        } else if (select(event, '.', 'p')) {
          if (text_count > 0) {
            send(event);
          } else {
            _ = event[0], _ = event[1], _ = event[2], meta = event[3];
            send(remark('drop', "`.p` because it's empty", copy(meta)));
          }
          return text_count = 0;
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.MKTX.REGION.$correct_p_tags_before_regions = (function(_this) {
    return function(S) {
      var last_was_begin_document, last_was_p, remark;
      last_was_p = false;
      last_was_begin_document = false;
      remark = MKTS._get_remark();
      return $(function(event, send) {
        var meta;
        if (select(event, 'tex')) {
          return send(event);
        } else if (select(event, '<', 'document')) {
          last_was_p = false;
          last_was_begin_document = true;
          return send(event);
        } else if (select(event, '.', 'p')) {
          last_was_p = true;
          last_was_begin_document = false;
          return send(event);
        } else if (select(event, ['{', '['])) {
          if ((!last_was_begin_document) && (!last_was_p)) {
            meta = event[event.length - 1];
            send(remark('insert', "`.p` because region or block opens", copy(meta)));
            send(['.', 'p', null, copy(meta)]);
          }
          send(event);
          last_was_p = false;
          return last_was_begin_document = false;
        } else {
          last_was_p = false;
          last_was_begin_document = false;
          return send(event);
        }
      });
    };
  })(this);

  this.$filter_tex = function() {
    return $((function(_this) {
      return function(event, send) {
        if (select(event, 'tex')) {
          return send(event[1]);
        } else if (select(event, '.', ['text', 'raw'])) {
          return send(event[2]);
        } else {
          if (!is_stamped(event)) {
            return warn("unhandled event: " + (JSON.stringify(event)));
          }
        }
      };
    })(this));
  };

  this.tex_from_md = function(source, settings, handler) {
    var Z, arity, input;
    throw new Error("not yet implemented");
    switch (arity = arguments.length) {
      case 2:
        handler = settings;
        settings = {};
        break;
      case 3:
        null;
        break;
      default:
        throw new Error("expected 2 or 3 arguments, got " + arity);
    }
    input = this.create_mdreadstream(source);
    Z = [];
    input.pipe($((function(_this) {
      return function(event, send) {
        if (!(bare && _this.select(event, ['<', '>'], 'document'))) {
          return Z.push(event);
        }
      };
    })(this)));
    input.on('end', function() {
      return handler(null, Z);
    });
    input.resume();
    return null;
  };

  this.pdf_from_md = function(source_route, handler) {
    return D.run((function(_this) {
      return function() {
        return step(function*(resume) {
          var S, content_locator, input, layout_info, source_locator, tex_output, text;
          if (handler == null) {
            handler = function() {};
          }
          layout_info = HELPERS.new_layout_info(_this.options, source_route);
          (yield _this.write_mkts_master(layout_info, resume));
          source_locator = layout_info['source-locator'];
          content_locator = layout_info['content-locator'];
          tex_output = njs_fs.createWriteStream(content_locator);

          /* TAINT should read MD source stream */
          text = njs_fs.readFileSync(source_locator, {
            encoding: 'utf-8'
          });
          input = MKTS.create_mdreadstream(text);

          /* TAINT get state via return value of MKTS.create_mdreadstream */
          S = {
            options: _this.options,
            layout_info: layout_info,
            input: input,
            resend: input.XXX_resend
          };
          tex_output.on('close', function() {
            return HELPERS.write_pdf(layout_info, function(error) {
              if (error != null) {
                throw error;
              }
              if (handler != null) {
                return handler(null);
              }
            });
          });
          input.pipe(MKTS.$fix_typography_for_tex(_this.options)).pipe(_this.MKTX.DOCUMENT.$begin(S)).pipe(_this.MKTX.DOCUMENT.$end(S)).pipe(_this.MKTX.MIXED.$raw(S)).pipe(_this.MKTX.MIXED.$footnote(S)).pipe(_this.MKTX.MIXED.$remove_footnote_extra_paragraphs(S)).pipe(_this.MKTX.COMMAND.$do(S)).pipe(_this.MKTX.COMMAND.$expansion(S)).pipe(_this.MKTX.COMMAND.$new_page(S)).pipe(_this.MKTX.COMMAND.$comment(S)).pipe(_this.MKTX.COMMAND.$multi_column(S)).pipe(_this.MKTX.REGION.$multi_column(S)).pipe(_this.MKTX.REGION.$single_column(S)).pipe(_this.MKTX.REGION.$keep_lines(S)).pipe(_this.MKTX.REGION.$code(S)).pipe(_this.MKTX.BLOCK.$heading(S)).pipe(_this.MKTX.BLOCK.$hr(S)).pipe(_this.MKTX.BLOCK.$unordered_list(S)).pipe(_this.MKTX.INLINE.$code(S)).pipe(_this.MKTX.INLINE.$translate_i_and_b(S)).pipe(_this.MKTX.INLINE.$em_and_strong(S)).pipe(_this.MKTX.BLOCK.$paragraph(S)).pipe(_this.MKTX.CLEANUP.$remove_empty_texts(S)).pipe(MKTS.$close_dangling_open_tags(S)).pipe(MKTS.$show_mktsmd_events(S)).pipe(MKTS.$write_mktscript(S)).pipe(MKTS.$show_unhandled_tags(S)).pipe(_this.$filter_tex()).pipe(MKTS.$show_illegal_chrs(S)).pipe(tex_output);
          return input.resume();
        });
      };
    })(this), (function(_this) {
      return function(error) {
        var ref1, stack;
        alert(error['message']);
        stack = (ref1 = error['stack']) != null ? ref1 : "(no stacktrace available)";
        whisper('\n' + (stack.split('\n')).slice(0, 11).join('\n'));
        whisper('...');
        return process.exit(1);
      };
    })(this));
  };

  if (module.parent == null) {
    this.pdf_from_md('texts/demo');
  }

}).call(this);

//# sourceMappingURL=../sourcemaps/mkts-typesetter-interim.js.map
