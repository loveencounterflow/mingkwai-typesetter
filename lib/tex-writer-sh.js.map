{
  "version": 3,
  "file": "tex-writer-sh.js",
  "sourceRoot": "..",
  "sources": [
    "src/tex-writer-sh.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\n# njs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'mkts/tex-writer-sh'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# D                         = require '../../../pipedreams'\n# { $, $async, }            = D\nPIPEDREAMS3B7B            = require 'pipedreams-3b7b'\n$                         = PIPEDREAMS3B7B.remit.bind PIPEDREAMS3B7B\n$async                    = PIPEDREAMS3B7B.remit_async.bind PIPEDREAMS3B7B\n#...........................................................................................................\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\n#...........................................................................................................\nCP                        = require 'child_process'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$spawn = ( S ) =>\n  return $async ( event, send, end ) =>\n    #.......................................................................................................\n    if event? and select event, '!', 'sh'\n      [ type, name, parameters, meta, ] = event\n      [ cmd, ]  = parameters\n      cp        = CP.spawn cmd, { shell: true, }\n      cp.stdout\n        .pipe PIPEDREAMS3B7B.$split()\n        .pipe PIPEDREAMS3B7B.$show '================>'\n        #...................................................................................................\n        .pipe $ ( line, _, sub_end ) =>\n          send [ '.', 'text', line + '\\n', ( copy meta ), ]\n          if sub_end?\n            send.done()\n            sub_end()\n    #.......................................................................................................\n    else\n      send event\n      send.done()\n    #.......................................................................................................\n    end() if end?\n    return null\n\n# @$spawn = ( S ) ->\n#   return $ ( event, send ) =>\n#     if select event, '!', 'sh'\n#       debug '38744', \"spawn temporarily not functional\"\n#       send stamp event\n#     else\n#       send event\n#     return null\n\n\n\n\n\n"
  ]
}