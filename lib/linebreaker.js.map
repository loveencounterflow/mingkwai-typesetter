{
  "version": 3,
  "file": "linebreaker.js",
  "sourceRoot": "..",
  "sources": [
    "src/linebreaker.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA;;EAKA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC,GAAG,CAAC,IAAR,CAAa,GAAb;;EAC5B,KAAA,GAA4B,mBAP5B;;;;;EAaA,IAAC,CAAA,WAAD,GAAe,QAAA,CAAE,IAAF,EAAQ,QAAR,CAAA;AACb,QAAA,CAAA,EAAA,UAAA,EAAA,IAAA,EAAA,QAAA,EAAA,CAAA,EAAA,WAAA,EAAA,aAAA,EAAA,GAAA,EAAA,YAAA,EAAA,OAAA,EAAA,IAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,QAAA,EAAA,KAAA,EAAA,MAAA,EAAA,OAAA,EAAA;IAAA,IAAA,GAAkB,IAAI,CAAC,OAAL,CAAa,KAAb,EAAoB,GAApB;IAClB,aAAA,GAAkB;IAClB,WAAA,+EAAgD;IAChD,IAAA,0EAAgD;IAChD,QAAA,8EAAgD;IAChD,IAAsD,QAAtD;MAAA,MAAM,IAAI,KAAJ,CAAU,kCAAV,EAAN;;IACA,UAAA,gFAAgD;IAChD,OAAA,GAAqB,UAAH,GAAmB,OAAnB,GAAgC,KAPlD;;IASA,IAAG,IAAH;MACE,MAAA,GAAS,IAAI,CAAC,KAAL,CAAW,wCAAX;MACT,CAAA;;AAAY;QAAA,KAAA,wCAAA;;cAAyB,KAAA,KAAW;yBAA1C;;QAAM,CAAA;;WAFd;KAAA,MAAA;;MAKE,YAAA,GAAkB,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAJ,CAA4B,IAA5B;MAClB,CAAA,GAAkB,GADlB;;AAGA,aAAM,UAAA,GAAa,YAAY,CAAC,SAAb,CAAA,CAAnB;QACE,CAAA,CAAE,QAAF,EAAY,QAAZ,CAAA,GAA0B,UAA1B,EAAA;;QAEA,IAAG,WAAA,IAAgB,uBAAnB;UAAwC,IAAA,GAAO,IAAM,2CAArD;SAAA,MAAA;UACwC,IAAA,GAAO,IAAoB,+BADnE;;QAEA,aAAA,GAAgB;QAChB,IAAG,UAAH;AACiB;UAAA,KAAA,sCAAA;;gBAAuC,OAAO,CAAC,MAAR,GAAiB;cAAvE,CAAC,CAAC,IAAF,CAAO,OAAP;;UAAe,CADjB;SAAA,MAAA;UAGE,CAAC,CAAC,IAAF,CAAO,IAAP,EAHF;;MANF,CARF;KATA;;AA4BA,WAAO;EA7BM;AAbf",
  "sourcesContent": [
    "\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'MKTS/LINEBREAKER'\n\n\n#===========================================================================================================\n# UNICODE LINE BREAKING\n#-----------------------------------------------------------------------------------------------------------\n@fragmentize = ( text, settings ) ->\n  text            = text.replace /\\n/g, ' '\n  last_position   = null\n  incremental     = settings?[ 'incremental'  ] ? yes\n  chrs            = settings?[ 'chrs'         ] ? no\n  extended        = settings?[ 'extended'     ] ? no\n  throw new Error \"setting `extended` not supported\" if extended\n  whitespace      = settings?[ 'whitespace'   ] ? no\n  matcher         = if whitespace then /(\\s+)/ else null\n  #.........................................................................................................\n  if chrs\n    shreds = text.split /// ( (?: [  \\ud800-\\udbff ] [ \\udc00-\\udfff ] ) | . ) ///\n    R = ( shred for shred in shreds when shred isnt '' )\n  #.........................................................................................................\n  else\n    line_breaker    = new ( require 'linebreak' ) text\n    R               = []\n    #.......................................................................................................\n    while breakpoint = line_breaker.nextBreak()\n      { position, required, } = breakpoint\n      #.....................................................................................................\n      if incremental and last_position? then  part = text[ last_position ... breakpoint.position ]\n      else                                    part = text[               ... breakpoint.position ]\n      last_position = position\n      if whitespace\n        R.push subpart for subpart in part.split matcher when subpart.length > 0\n      else\n        R.push part\n  #.......................................................................................................\n  return R\n\n\n"
  ]
}