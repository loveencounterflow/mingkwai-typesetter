{
  "version": 3,
  "file": "tex-writer-plugin.js",
  "sourceRoot": "../..",
  "sources": [
    "src/plugins/tex-writer-plugin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n############################################################################################################\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MK/TS/TEX-WRITER/PLUGIN'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n# #...........................................................................................................\n# suspend                   = require 'coffeenode-suspend'\n# step                      = suspend.step\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n# #...........................................................................................................\n# ASYNC                     = require 'async'\n# #...........................................................................................................\n# ƒ                         = CND.format_number.bind CND\n# HELPERS                   = require '../helpers'\n# TEXLIVEPACKAGEINFO        = require '../texlivepackageinfo'\n# options_route             = '../options.coffee'\n# { CACHE, OPTIONS, }       = require '../options-and-cache'\n# SEMVER                    = require 'semver'\n# #...........................................................................................................\n# XNCHR                     = require '../xnchr'\n# MKTS                      = require '../main'\n# MKTSCRIPT_WRITER          = require '../mktscript-writer'\nMD_READER                 = require '../md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nunstamp                   = MD_READER.unstamp.bind     MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\n# MACRO_ESCAPER             = require '../macro-escaper'\n# MACRO_INTERPRETER         = require '../macro-interpreter'\n# LINEBREAKER               = require '../linebreaker'\n# @COLUMNS                  = require '../tex-writer-columns'\n# @MKTS_TABLE               = require '../tex-writer-mkts-table'\n# AUX                       = require '../tex-writer-aux'\n# YADDA                     = require '../yadda'\nOVAL                      = require '../object-validator'\n# UNITS                     = require '../mkts-table-units'\n#...........................................................................................................\n# Σ_formatted_warning       = Symbol 'formatted-warning'\npromisify                 = ( require 'util' ).promisify\njr                        = JSON.stringify\nplugins_sym               = Symbol 'plugins'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_resolve_arguments = ( S, Q ) =>\n  reference_path                      = S.layout_info[ 'source-home' ]\n  #.....................................................................................................\n  if ( match = Q.src.match /// ^ (?<module_path> .+? ) \\# (?<method_path> [^\\#]+ ) $ /// )?\n    { module_path, method_path, } = match.groups\n    method_path                   = null if method_path is ''\n  #.....................................................................................................\n  else\n    module_path = Q.src\n    method_path = 'main'\n  #.....................................................................................................\n  crumbs  = if method_path? then method_path.split '.' else null\n  locator = PATH.join reference_path, module_path\n  #.....................................................................................................\n  try\n    module    = require locator\n    callable  = module\n    if crumbs?\n      for crumb in crumbs\n        callable = callable[ crumb ]\n        throw new Error \"not callable: #{rpr crumb} in #{rpr method_path}\" unless CND.isa_function callable\n  catch error\n    alert '98987-1', \"when trying to resolve #{rpr Q.src}\"\n    alert '98987-2', \"starting with module #{rpr locator}\"\n    alert '98987-3', \"an error occurred\"\n    throw error\n  #.....................................................................................................\n  return Object.assign {}, Q, { locator, module_path, method_path, callable, }\n\n#-----------------------------------------------------------------------------------------------------------\n@_prefix_from_event = ( S, event ) =>\n  registry                    = S[ plugins_sym ]\n  [ type, name, text, meta, ] = event\n  debug '88595', 'prefix', name\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\n@$plugin = ( S ) =>\n  schema =\n    postprocess: ( Q ) =>\n      throw new Error \"µ38893 expected non-empty text, got #{jr Q}\" unless Q.src.length     > 0\n      throw new Error \"µ38894 expected non-empty text, got #{jr Q}\" unless Q.prefix.length  > 0\n      return @_resolve_arguments S, Q\n    #.......................................................................................................\n    properties:\n      src:        { type: 'string', }\n      prefix:     { type: 'string', }\n    #.......................................................................................................\n    additionalProperties: false\n    required:             [ 'src', 'prefix', ]\n  #.........................................................................................................\n  validate_and_cast = OVAL.new_validator schema\n  registry          = S[ plugins_sym ] = {}\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '.', 'plugin'\n      [ type, name, Q, meta, ] = event\n      Q = validate_and_cast Q\n      debug '33933', Q\n      send stamp event\n    #.......................................................................................................\n    else if ( prefix = @_prefix_from_event S, event )?\n      debug '10095', 'plugin', jr event\n      send stamp event\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n\n\n"
  ]
}