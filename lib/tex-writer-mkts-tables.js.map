{
  "version": 3,
  "file": "tex-writer-mkts-tables.js",
  "sourceRoot": "..",
  "sources": [
    "src/tex-writer-mkts-tables.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MK/TS/TEX-WRITER/MKTSTABLES'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nECS                       = require './eval-cs'\nMKTS                      = require './main'\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nunstamp                   = MD_READER.unstamp.bind     MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\n#...........................................................................................................\nMKTS.MACRO_ESCAPER.register_raw_tag 'mkts-table'\n\n#-----------------------------------------------------------------------------------------------------------\n@$main = ( S ) ->\n  #.........................................................................................................\n  return D.TEE.from_pipeline [\n    @$parse_description         S\n    @$grid                      S\n    D.$observe ( event ) ->\n      return unless select event, '.', 'mkts-table-description'\n      help '99871', ( CND.blue rpr event[ 2 ] )\n    ]\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$parse_description = ( S ) ->\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '.', 'mkts-table'\n      [ type, name, text, meta, ] = event\n      try\n        description = ECS.evaluate text, { language: 'coffee', }\n      catch error\n        warn \"when trying to evaluate CS source text for <mkts-table> (source line ##{meta.line_nr}),\"\n        warn \"an error occurred\"\n        throw error\n      send stamp event\n      send [ '.', 'mkts-table-description', description, ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$grid = ( S ) -> D.$observe ( event ) =>\n  return unless select event, '.', 'mkts-table-description'\n  [ _, _, d, meta, ] = event\n  #.........................................................................................................\n  unless ( type = CND.type_of d.grid ) is 'text'\n    throw new Error \"need a text for mkts-table/grid, got a #{type}\"\n  unless ( match = d.grid.match /^(\\d+)\\s*x(\\d+)$/ )?\n    throw new Error \"need a text like '3 x 4' or similar for mkts-table/grid, got #{rpr d.grid}\"\n  #.........................................................................................................\n  [ _, col_count_txt, row_count_txt, ] = match\n  d.grid = [ ( parseInt col_count_txt, 10 ), ( parseInt row_count_txt, 10 ), ]\n  #.........................................................................................................\n  return null\n\n\n\n\n"
  ]
}