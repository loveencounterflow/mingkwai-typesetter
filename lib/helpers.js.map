{
  "version": 3,
  "file": "helpers.js",
  "sourceRoot": "..",
  "sources": [
    "src/helpers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/HELPERS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#-----------------------------------------------------------------------------------------------------------\nASYNC                     = require 'async'\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n\n# #-----------------------------------------------------------------------------------------------------------\n# @provide_tmp_folder = ( options ) ->\n#   njs_fs.mkdirSync options[ 'tmp-home' ] unless njs_fs.existsSync options[ 'tmp-home' ]\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @tmp_locator_for_extension = ( layout_info, extension ) ->\n#   tmp_home            = layout_info[ 'tmp-home' ]\n#   tex_locator         = layout_info[ 'tex-locator' ]\n#   ### TAINT should extension be sanitized? maybe just check for /^\\.?[-a-z0-9]$/? ###\n#   throw new Error \"need non-empty extension\" unless extension.length > 0\n#   extension           = \".#{extension}\" unless ( /^\\./ ).test extension\n#   return njs_path.join CND.swap_extension tex_locator, extension\n\n#-----------------------------------------------------------------------------------------------------------\n@resolve_document_relative_path = ( S, path ) ->\n  debug '38893', S.layout_info[ 'source-home' ]\n  debug '38893', path\n  debug '38893', njs_path.resolve S.layout_info[ 'source-home' ], path\n  return njs_path.resolve S.layout_info[ 'source-home' ], path\n\n#-----------------------------------------------------------------------------------------------------------\n@new_layout_info = ( options, source_route, validate = yes ) ->\n  xelatex_command       = options[ 'xelatex-command' ]\n  source_home           = njs_path.resolve process.cwd(), source_route\n  source_name           = options[ 'main' ][ 'filename' ]\n  source_locator        = njs_path.join source_home, source_name\n  #.........................................................................................................\n  if validate\n    throw new Error \"unable to locate #{source_home}\"     unless njs_fs.existsSync source_home\n    throw new Error \"not a directory: #{source_home}\"     unless ( njs_fs.statSync source_home ).isDirectory()\n    throw new Error \"unable to locate #{source_locator}\"  unless njs_fs.existsSync source_locator\n    throw new Error \"not a file: #{source_locator}\"       unless ( njs_fs.statSync source_locator ).isFile()\n  #.........................................................................................................\n  # tex_locator           = njs_path.join tmp_home, CND.swap_extension source_name, '.tex'\n  job_name              = njs_path.basename source_home\n  aux_locator           = njs_path.join source_home, \"#{job_name}.aux\"\n  pdf_locator           = njs_path.join source_home, \"#{job_name}.pdf\"\n  mktscript_locator      = njs_path.join source_home, \"#{job_name}.mktscript\"\n  # tex_inputs_home       = njs_path.resolve __dirname, '..', 'tex-inputs'\n  master_name           = options[ 'master' ][ 'filename' ]\n  master_ext            = njs_path.extname master_name\n  master_locator        = njs_path.join source_home, master_name\n  content_name          = options[ 'content' ][ 'filename' ]\n  content_locator       = njs_path.join source_home, content_name\n  ### TAINT duplication: tex_inputs_home, texinputs_value ###\n  texinputs_value       = options[ 'texinputs' ][ 'value' ]\n  #.........................................................................................................\n  R =\n    'aux-locator':                aux_locator\n    'content-locator':            content_locator\n    'job-name':                   job_name\n    'master-locator':             master_locator\n    'master-name':                master_name\n    'pdf-locator':                pdf_locator\n    'mktscript-locator':          mktscript_locator\n    'source-home':                source_home\n    'source-locator':             source_locator\n    'source-name':                source_name\n    'source-route':               source_route\n    # 'tex-inputs-home':            tex_inputs_home\n    'tex-inputs-value':           texinputs_value\n    'xelatex-command':            xelatex_command\n    'xelatex-run-count':          0\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@write_pdf = ( layout_info, handler ) ->\n  #.........................................................................................................\n  job_name            = layout_info[ 'job-name'             ]\n  source_home         = layout_info[ 'source-home'          ]\n  xelatex_command     = layout_info[ 'xelatex-command'      ]\n  master_locator      = layout_info[ 'master-locator'       ]\n  aux_locator         = layout_info[ 'aux-locator'          ]\n  pdf_locator         = layout_info[ 'pdf-locator'          ]\n  last_digest         = null\n  last_digest         = CND.id_from_route aux_locator if njs_fs.existsSync aux_locator\n  digest              = null\n  count               = 0\n  texinputs_value     = layout_info[ 'tex-inputs-value' ]\n  parameters          = [ texinputs_value, source_home, job_name, master_locator, ]\n  # ### !!!!!!!!!!!!!!!!!!!!!!!!!! ###\n  # PATH = require 'path'\n  # cwd = process.cwd()\n  # for parameter, parameter_idx in parameters\n  #   debug '60051', PATH.relative cwd, parameter\n  # ### !!!!!!!!!!!!!!!!!!!!!!!!!! ###\n  error_lines         = []\n  urge \"#{xelatex_command}\"\n  whisper \"$#{idx + 1}: #{parameters[ idx ]}\" for idx in [ 0 ... parameters.length ]\n  log \"#{xelatex_command} #{parameters.join ' '}\"\n  #.........................................................................................................\n  pdf_from_tex = ( next ) =>\n    count          += 1\n    cp              = ( require 'child_process' ).spawn xelatex_command, parameters\n    error_detected  = false\n    urge \"run ##{count}\"\n    #.......................................................................................................\n    cp.stdout\n      .pipe D.$split()\n      #.....................................................................................................\n      .pipe D.$observe ( line ) => error_detected = true if line is 'No pages of output.'\n      .pipe D.$observe ( line ) => alert line if error_detected\n      .pipe D.$observe ( line ) => echo ( if error_detected then CND.red else CND.grey ) line\n    #.......................................................................................................\n    cp.stderr\n      .pipe D.$split()\n      .pipe D.$observe ( line ) =>\n        error_lines.push line\n        echo CND.red line\n    #.......................................................................................................\n    cp.on 'close', ( exit_code ) =>\n      #.....................................................................................................\n      if exit_code isnt 0\n        alert '33533', '—'.repeat 108\n        alert '33533', \"command\"\n        alert \"#{xelatex_command} #{parameters.join ' '}\"\n        alert '33533', \"exited with #{rpr exit_code}\"\n        alert '33533', '—'.repeat 108\n        # return handler new Error \"Error during PDF creation\"\n        error_detected = yes\n      #.....................................................................................................\n      if error_lines.length > 0\n        ### TAINT looks like we're getting empty lines on stderr? ###\n        message = ( line for line in error_lines when line.length > 0 ).join '\\n'\n        if message.length > 0\n          alert message\n          return handler message\n      #.....................................................................................................\n      if error_detected\n        return handler new Error \"detected error, see transcript\"\n      #.....................................................................................................\n      digest = CND.id_from_route aux_locator\n      if digest is last_digest\n        echo ( CND.grey badge ), CND.lime \"done.\"\n        layout_info[ 'xelatex-run-count' ] = count\n        ### TAINT move pdf to layout_info[ 'source-home' ] ###\n        handler null\n      else\n        last_digest = digest\n        next()\n  #.........................................................................................................\n  ASYNC.forever pdf_from_tex\n\n\n"
  ]
}