// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var CND, MKTS_TABLE_API, SQY, alert, badge, debug, echo, help, info, jr, log, misfit, rpr, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MKTS/TABLE/LAYOUT-READER/SQY';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  jr = JSON.stringify;

  // ### TAINT cyclic dependency ###
  // MKTS_TABLE                = require './mkts-table'
  MKTS_TABLE_API = require('./mkts-table-api');

  SQY = require('sqy');

  misfit = Symbol('misfit');

  //-----------------------------------------------------------------------------------------------------------
  this.read_layout = function(S, L, event, source) {
    /* TAINT take advantage of Nearley's streaming API */
    /* TAINT simplify dispatcher code */
    var MKTS_TABLE, R, _, error, fail, i, j, len, len1, ref, t, tokens;
    try {
      tokens = SQY.parse(source);
    } catch (error1) {
      error = error1;
      CND.warn(`when trying to parse source\n\n${source}\n\nan error was encountered: ${rpr(error.message)}`);
      throw error;
    }
    //.........................................................................................................
    R = null;
//.........................................................................................................
    for (i = 0, len = tokens.length; i < len; i++) {
      t = tokens[i];
      // whisper '88373', jr t
      _ = misfit;
      //.......................................................................................................
      switch (t.type) {
        case 'cheat':
          alert('25521', "cheating");
          MKTS_TABLE = require('./mkts-table');
          MKTS_TABLE.columnwidth(R, '20');
          MKTS_TABLE.rowheight(R, '20');
          continue;
        case 'create_layout':
          R = MKTS_TABLE_API.create_layout(S, event.meta, t.id);
          continue;
      }
      //.......................................................................................................
      if (R == null) {
        throw new Error(`µ9893 must create layout before ${t.type}`);
      }
      //.......................................................................................................
      switch (t.type) {
        case 'set_grid':
          _ = MKTS_TABLE_API.set_grid(R, t.size);
          break;
        case 'set_debug':
          _ = MKTS_TABLE_API.set_debug(R, t.value);
          break;
        case 'set_unit_lengths':
          _ = MKTS_TABLE_API.set_unit_lengths(R, t.value, t.unit);
          break;
        case 'set_lane_sizes':
          _ = MKTS_TABLE_API.set_lane_sizes(R, t.direction, t.value);
          break;
        case 'set_default_gaps':
          _ = MKTS_TABLE_API.set_default_gaps(R, t.feature, t.value);
      }
      if (_ !== misfit) {
        //.......................................................................................................
        continue;
      }
      if (R.grid == null) {
        throw new Error(`µ9894 must set grid before ${t.type}`);
      }
      //.......................................................................................................
      switch (t.type) {
        case 'create_field':
          _ = MKTS_TABLE_API.create_field(R, t.id, t.selector);
          break;
        case 'set_sel_border':
          _ = MKTS_TABLE_API.set_borders(R, t.selectors, t.edges, t.style);
          break;
        case 'set_sel_alignment':
          _ = MKTS_TABLE_API.set_alignment(R, t.selectors, t.direction, t.align);
          break;
        case 'set_field_gaps':
          _ = MKTS_TABLE_API.set_field_gaps(R, t.selectors, t.edges, t.feature, t.value);
      }
      if (_ !== misfit) {
        //.......................................................................................................
        continue;
      }
      warn(`unhandled token type ${rpr(t.type)}`);
    }
    //.........................................................................................................
    /* TAINT will abandon this kind of fails handling */
    if (R.fails.length > 0) {
      ref = R.fails;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        fail = ref[j];
        alert('44093', fail);
      }
      throw new Error("µ9894 detected fails");
    }
    //.........................................................................................................
    return R;
  };

}).call(this);

//# sourceMappingURL=mkts-table-layout-reader-sqy.js.map
