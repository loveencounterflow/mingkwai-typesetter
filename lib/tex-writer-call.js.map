{
  "version": 3,
  "file": "tex-writer-call.js",
  "sourceRoot": "..",
  "sources": [
    "src/tex-writer-call.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nPATH                      = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'mkts/tex-writer-call'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPIPEDREAMS                = require '../../../pipedreams'\nPS                        = require 'pipestreams'\n{ $, $async, }            = PS\n#...........................................................................................................\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\n\n#-----------------------------------------------------------------------------------------------------------\n@_resolve_arguments = ( S, event ) =>\n  reference_path                      = S.layout_info[ 'source-home' ]\n  [ type, name, parameters, meta, ]   = event\n  [ module_path, method_path, P..., ] = parameters\n  locator                             = PATH.join reference_path, module_path\n  [ crumbs..., method_name, ]         = method_path.split '.'\n  #.....................................................................................................\n  try\n    module  = require locator\n    module  = module[ crumb ] for crumb in crumbs\n  catch error\n    alert '98987', \"when trying to resolve #{crumbs.join '.'}\"\n    alert '98987', \"starting with module #{rpr locator}\"\n    alert '98987', \"an error occurred at path component #{rpr crumb}\"\n    throw error\n  #.....................................................................................................\n  return {\n    type,\n    name,\n    parameters,\n    meta,\n    module_path,\n    method_path,\n    P,\n    method_name,\n    locator,\n    module,\n    crumbs, }\n\n#-----------------------------------------------------------------------------------------------------------\n@$call_await = ( S ) =>\n  ### TAINT implicitly assumes return value will be lines of text ###\n  ### parses MKTS commands of the form `<<!call_await module_path, method_name, parameters... >>` ###\n  # self = @\n  return PIPEDREAMS.$async ( event, send, end ) =>\n    #.......................................................................................................\n    if event? and select event, '!', 'call_await'\n      { module, method_name, P, meta, locator, crumbs, } = @_resolve_arguments S, event\n      #.....................................................................................................\n      try\n        lines   = await module[ method_name ] P...\n      #.....................................................................................................\n      catch error\n        alert '98987', \"when trying to call method #{rpr method_name}\"\n        alert '98987', \"from module #{rpr locator}##{crumbs.join '.'}\"\n        alert '98987', \"with arguments #{rpr P}\"\n        alert '98987', \"an error occurred:\"\n        alert '98987', error.message\n        throw error if throw_all_errors\n        send [ '.', 'warning', error.message, ( copy meta ), ]\n        return send.done()\n      #.....................................................................................................\n      for line in lines\n        line = line + '\\n' unless line.endsWith '\\n'\n        send [ '.', 'text', line, ( copy meta ), ]\n      send.done()\n    #.......................................................................................................\n    else\n      send event\n      send.done()\n    #.......................................................................................................\n    end() if end?\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$call_stream = ( S ) =>\n  ### TAINT implicitly assumes return value will be lines of text ###\n  # self = @\n  return PIPEDREAMS.$async ( event, send, end ) =>\n    #.......................................................................................................\n    if event? and select event, '!', 'call_stream'\n      { module, method_name, P, meta, locator, crumbs, } = @_resolve_arguments S, event\n      #.....................................................................................................\n      try\n        on_stop   = PS.new_event_collector 'stop', ->\n          send.done()\n          help \"(finished $call_stream #{method_name})\"\n        pipeline  = []\n        pipeline.push await module[ method_name ] P...\n        pipeline.push PS.$watch ( line ) ->\n          line = line + '\\n' unless line.endsWith '\\n'\n          send [ '.', 'text', line, ( copy meta ), ]\n        pipeline.push on_stop.add PS.$drain()\n        PS.pull pipeline...\n      #.....................................................................................................\n      catch error\n        alert '98987', \"when trying to call method #{rpr method_name}\"\n        alert '98987', \"from module #{rpr locator}##{crumbs.join '.'}\"\n        alert '98987', \"with arguments #{rpr P}\"\n        alert '98987', \"an error occurred:\"\n        alert '98987', error.message\n        throw error\n    #.......................................................................................................\n    else\n      send event\n      send.done()\n    #.......................................................................................................\n    end() if end?\n    return null\n\n\n"
  ]
}