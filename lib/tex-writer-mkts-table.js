// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var $, $async, CND, D, ECS, MD_READER, MKTS, MKTS_TABLE, alert, badge, copy, debug, echo, help, hide, info, is_hidden, is_stamped, log, rpr, select, stamp, unstamp, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MKTS/TEX-WRITER/MKTSTABLE';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  D = require('pipedreams');

  $ = D.remit.bind(D);

  $async = D.remit_async.bind(D);

  //...........................................................................................................
  ECS = require('./eval-cs');

  MKTS = require('./main');

  MD_READER = require('./md-reader');

  hide = MD_READER.hide.bind(MD_READER);

  copy = MD_READER.copy.bind(MD_READER);

  stamp = MD_READER.stamp.bind(MD_READER);

  unstamp = MD_READER.unstamp.bind(MD_READER);

  select = MD_READER.select.bind(MD_READER);

  is_hidden = MD_READER.is_hidden.bind(MD_READER);

  is_stamped = MD_READER.is_stamped.bind(MD_READER);

  //...........................................................................................................
  MKTS_TABLE = require('./mkts-table');

  MKTS.MACRO_ESCAPER.register_raw_tag('mkts-table-description');

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.$main = function(S) {
    //.........................................................................................................
    return D.TEE.from_pipeline([this.$parse_description(S), this.$render_description(S), this.$dump_table_description(S)]);
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.$dump_table_description = function(S) {
    return D.$observe(function(event) {
      if (!select(event, '.', 'MKTS/TABLE/description', true)) {
        return;
      }
      return help('99871', CND.blue(rpr(event[2])));
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$parse_description = function(S) {
    var within_mkts_table;
    within_mkts_table = false;
    return $((event, send) => {
      var description, error, meta, name, sandbox, text, type;
      //.......................................................................................................
      if (select(event, '.', 'mkts-table-description')) {
        [type, name, text, meta] = event;
        [description, sandbox] = this.get_mkts_table_description_and_sandbox(S, event);
        try {
          ECS.evaluate(text, {
            language: 'coffee',
            sandbox
          });
        } catch (error1) {
          error = error1;
          warn(`when trying to evaluate CS source text for <mkts-table> (source line #${meta.line_nr}),`);
          warn("an error occurred");
          throw error;
        }
        send(stamp(event));
        send(['.', 'MKTS/TABLE/description', description, copy(meta)]);
      } else {
        //.......................................................................................................
        send(event);
      }
      //.......................................................................................................
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$render_description = function(S) {
    return $((event, send) => {
      var description, meta, name, ref, sub_event, type;
      if (!select(event, '.', 'MKTS/TABLE/description')) {
        return send(event);
      }
      [type, name, description, meta] = event;
      ref = MKTS_TABLE._walk_events(description);
      for (sub_event of ref) {
        send(sub_event);
      }
      send(stamp(event));
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.get_mkts_table_description_and_sandbox = function(S, event) {
    /* This method makes the format-defining names of the MKTS Table Formatter available at the top level,
    curried so that the current context (`me`) that contains the processed details as defined so far as well
    as data on the general typesetting context. All names are templating functions, such that each may be
    called as `grid'4x4'`, `merge'[a1]..[a4]'` and so on from the source within the MKTS document where the
    table is being defined. */
    var f, me;
    me = MKTS_TABLE._new_description(S);
    me.meta = event[3];
    /* ... more typesetting detail attached here ... */
    //.........................................................................................................
    f = function() {
      this.debug = function(raw_parts) {
        return MKTS_TABLE.debug(me, raw_parts.join(''));
      };
      this.gridwidth = function(raw_parts) {
        return MKTS_TABLE.gridwidth(me, raw_parts.join(''));
      };
      this.gridheight = function(raw_parts) {
        return MKTS_TABLE.gridheight(me, raw_parts.join(''));
      };
      this.paddingwidth = function(raw_parts) {
        return MKTS_TABLE.paddingwidth(me, raw_parts.join(''));
      };
      this.paddingheight = function(raw_parts) {
        return MKTS_TABLE.paddingheight(me, raw_parts.join(''));
      };
      this.marginwidth = function(raw_parts) {
        return MKTS_TABLE.marginwidth(me, raw_parts.join(''));
      };
      this.marginheight = function(raw_parts) {
        return MKTS_TABLE.marginheight(me, raw_parts.join(''));
      };
      this.unitwidth = function(raw_parts) {
        return MKTS_TABLE.unitwidth(me, raw_parts.join(''));
      };
      this.unitheight = function(raw_parts) {
        return MKTS_TABLE.unitheight(me, raw_parts.join(''));
      };
      this.quadwidths = function(raw_parts) {
        return MKTS_TABLE.quadwidths(me, raw_parts.join(''));
      };
      this.quadheights = function(raw_parts) {
        return MKTS_TABLE.quadheights(me, raw_parts.join(''));
      };
      this.cellquads = function(raw_parts) {
        return MKTS_TABLE.cellquads(me, raw_parts.join(''));
      };
      this.cellborder = function(raw_parts) {
        return MKTS_TABLE.cellborder(me, raw_parts.join(''));
      };
      return this;
    };
    //.........................................................................................................
    return [me, f.apply({})];
  };

}).call(this);

//# sourceMappingURL=tex-writer-mkts-table.js.map
