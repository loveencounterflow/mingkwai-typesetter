// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var $, $async, CND, D, ECS, IG, MD_READER, MKTS, _fail, _record, _record_fail, _stackerr, alert, badge, contains, copy, debug, echo, help, hide, info, is_hidden, is_stamped, jr, log, rpr, select, stamp, tex, texr, unstamp, urge, warn, whisper,
    indexOf = [].indexOf;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MKTS/TABLE';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  D = require('pipedreams');

  $ = D.remit.bind(D);

  $async = D.remit_async.bind(D);

  //...........................................................................................................
  ECS = require('./eval-cs');

  MKTS = require('./main');

  MD_READER = require('./md-reader');

  hide = MD_READER.hide.bind(MD_READER);

  copy = MD_READER.copy.bind(MD_READER);

  stamp = MD_READER.stamp.bind(MD_READER);

  unstamp = MD_READER.unstamp.bind(MD_READER);

  select = MD_READER.select.bind(MD_READER);

  is_hidden = MD_READER.is_hidden.bind(MD_READER);

  is_stamped = MD_READER.is_stamped.bind(MD_READER);

  //...........................................................................................................
  copy = function(x) {
    return Object.assign({}, x);
  };

  jr = JSON.stringify;

  IG = require('intergrid');

  //-----------------------------------------------------------------------------------------------------------
  tex = function(source) {
    return ['tex', source];
  };

  //-----------------------------------------------------------------------------------------------------------
  texr = function(ref, source) {
    source = ref != null ? `${source}% MKTSTBL ${ref}\n` : `${source}%\n`;
    return tex(source);
  };

  //-----------------------------------------------------------------------------------------------------------
  contains = function(text, pattern) {
    switch (CND.type_of(pattern)) {
      case 'regex':
        return (text.match(pattern)) != null;
      default:
        throw new Error(`pattern not supported: ${rpr(pattern)}`);
    }
    return null;
  };

  //===========================================================================================================
  // INITIALIZATION
  //-----------------------------------------------------------------------------------------------------------
  this._new_description = function(S) {
    var R;
    R = {
      '~isa': 'MKTS/TABLE/description',
      debug: false,
      fails: [],
      /* recoverable errors / fails warnings */fieldcells: {},
      /* field extents in terms of cells, by field designations */cellfields: {},
      /* which cells belong to what fields, by cellkeys */table_dimensions: {},
      /* width and height of enclosing `\minipage`, in terms of (unitwidth,unitheight) */cell_dimensions: {},
      fieldborders: {},
      /* field borders, as TikZ styles by edges */field_dimensions: {},
      /* field extents in terms of (unitwidth,unitheight), by field designations */border_dimensions: {},
      /* border extents in terms of (unitwidth,unitheight), by field designations */pod_dimensions: {},
      /* pod extents in terms of (unitwidth,unitheight), by field designations */valigns: {},
      /* vertical pod alignments, by field designations */colwidths: [null],
      /* [ 0 ] is default, [ 1 .. grid.width ] explicit or implicit widths */rowheights: [null],
      /* [ 0 ] is default, [ 1 .. grid.height ] explicit or implicit heights */joint_coordinates: null,
      //.......................................................................................................
      styles: {
        sThin: 'thin',
        sThick: 'thick',
        sDotted: 'dotted',
        sDashed: 'dashed',
        sRed: 'red',
        sBlack: 'black',
        sDebugCellgrid: 'gray!30,sThin',
        sDebugFieldgrid: 'gray!30,sThin',
        sDebugJoints: 'gray!30,sThick'
      },
      //.......................................................................................................
      default: {
        unitwidth: '1mm',
        unitheight: '1mm',
        colwidth: 10,
        rowheight: 10,
        marginwidth: 0,
        marginheight: 0,
        paddingwidth: 0,
        paddingheight: 0
      }
    };
    return R;
  };

  //===========================================================================================================
  // PUBLIC API
  //-----------------------------------------------------------------------------------------------------------
  this._set_unitsize = function(me, direction, text) {
    var p;
    if (direction !== 'width' && direction !== 'height') {
      throw _stackerr(me, 'µ4613', `expected 'width' or 'height', got ${rpr(direction)}`);
    }
    p = `unit${direction}`;
    //.........................................................................................................
    /* Do nothing if dimension already defined: */
    if (me[p] != null) {
      return _record_fail(me, 'µ5661', `unable to re-define ${p}`);
    }
    //.........................................................................................................
    me[p] = text;
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._set_lanesizes = function(me, direction, text) {
    var base, base1, fail, i, j, lane_count, lanenr, length, match, nr, p, ps, ref1, ref2, ref3, selector, z;
    if (direction !== 'width' && direction !== 'height') {
      throw _stackerr(me, 'µ2352', `expected 'width' or 'height', got ${rpr(direction)}`);
    }
    p = direction === 'width' ? 'colwidth' : 'rowheight';
    ps = direction === 'width' ? 'colwidths' : 'rowheights';
    //.........................................................................................................
    this._ensure_grid(me);
    lane_count = me.grid[direction];
    //.........................................................................................................
    if ((match = text.match(/^(?:(?<selector>[^:]+):)?(?<length>[+\d.]+)$/)) == null) {
      _record_fail(me, 'µ6377', `need a text like '2.7', 'A*,C3:20' or similar for mkts-table/${p}, got ${rpr(text)}`);
      return null;
    }
    //.........................................................................................................
    ({selector, length} = match.groups);
    length = parseFloat(length);
    debug('37733', rpr(p), rpr(text), match.groups);
    //.........................................................................................................
    if (selector != null) {
      if ((base = me[ps])[0] == null) {
        base[0] = me.default[p];
      }
      for (nr = i = 1, ref1 = lane_count; (1 <= ref1 ? i <= ref1 : i >= ref1); nr = 1 <= ref1 ? ++i : --i) {
        if ((base1 = me[ps])[nr] == null) {
          base1[nr] = me.default[p];
        }
      }
      /* set defaults where missing */      debug('37734-1', me[ps]);
      ref2 = this._walk_fails_and_lanenrs_from_direction_and_selector(me, direction, selector);
      for (z of ref2) {
        [fail, lanenr] = z;
        /* TAINT ad-hoc fail message production, use method */
        if (fail != null) {
          _record(me, fail);
        } else {
          me[ps][lanenr] = length;
        }
      }
      debug('37734-2', me[ps]);
    } else {
      me[ps][0] = length/* set default */
      for (nr = j = 1, ref3 = lane_count; (1 <= ref3 ? j <= ref3 : j >= ref3); nr = 1 <= ref3 ? ++j : --j) {
        me[ps][nr] = length;
      }
    }
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.grid = function(me, text) {
    if (me.grid != null) {
      return _record_fail(me, 'µ5689', "unable to re-define grid");
    }
    me.grid = IG.GRID.new_grid_from_cellkey(text);
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.unitwidth = function(me, text) {
    return this._set_unitsize(me, 'width', text);
  };

  this.unitheight = function(me, text) {
    return this._set_unitsize(me, 'height', text);
  };

  this.columnwidth = function(me, text) {
    return this._set_lanesizes(me, 'width', text);
  };

  this.rowheight = function(me, text) {
    return this._set_lanesizes(me, 'height', text);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.fieldcells = function(me, text) {
    var base, d, designation, fieldcell, name, ref1;
    this._ensure_grid(me);
    this._ensure_unitvector(me);
    if (!contains(text, /\.\./)) {
      text = text + '..' + text;
    }
    d = IG.GRID.parse_rangekey(me.grid, text);
    designation = IG.CELLS.get_cellkey({
      colnr: d.left_colnr,
      rownr: d.top_rownr
    });
    /* TAINT we should allow multiple fields with same designation */
    if (me.fieldcells[designation] != null) {
      throw new Error(`(MKTS/TABLE µ5375) unable to redefine field ${designation}: ${rpr(text)}`);
    }
    //.........................................................................................................
    me.fieldcells[designation] = d;
    ref1 = IG.GRID.walk_cells_from_rangeref(me.grid, d);
    for (fieldcell of ref1) {
      ((base = me.cellfields)[name = fieldcell.cellkey] != null ? base[name] : base[name] = []).push(designation);
    }
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.fieldborder = function(me, text) {
    var base, d, edge, fieldname, i, j, len, len1, ref1, ref2;
    d = this._parse_fieldborder(me, text);
    ref1 = d.fieldnames;
    for (i = 0, len = ref1.length; i < len; i++) {
      fieldname = ref1[i];
      ref2 = d.edges;
      for (j = 0, len1 = ref2.length; j < len1; j++) {
        edge = ref2[j];
        ((base = me.fieldborders)[fieldname] != null ? base[fieldname] : base[fieldname] = {})[edge] = d.style;
      }
    }
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.fieldalignvertical = function(me, text) {
    var _, fail, field_designation, fieldhints, match, ref1, value, z;
    if ((match = text.match(/^(.+?):([^:]+)$/)) == null) {
      throw new Error(`(MKTS/TABLE µ5229) expected something like 'c3:top' for mkts-table/fieldalignvertical, got ${rpr(text)}`);
    }
    [_, fieldhints, value] = match;
    //.........................................................................................................
    if (value !== 'top' && value !== 'bottom' && value !== 'center' && value !== 'spread') {
      throw new Error(`(MKTS/TABLE µ1876) expected one of 'top', 'bottom', 'center', 'spread' for mkts-table/fieldalignvertical, got ${rpr(value)}`);
    }
    ref1 = this._walk_fails_and_field_designations_from_hints(me, fieldhints);
    //.........................................................................................................
    for (z of ref1) {
      [fail, field_designation] = z;
      /* TAINT ad-hoc fail message production, use method */
      if (fail != null) {
        _record(me, `${fail} (${jr({field_designation})})`);
      } else {
        me.valigns[field_designation] = value;
      }
    }
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.debug = function(me, text) {
    switch (text) {
      case 'true':
        me.debug = true;
        break;
      case 'false':
        me.debug = false;
        break;
      default:
        throw new Error(`(MKTS/TABLE µ1343) expected 'true' or 'false' for mkts-table/debug, got ${rpr(text)}`);
    }
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.marginwidth = function(me, text) {
    this._ensure_unitvector(me);
    /* TAINT use parser, validate syntax */
    me.marginwidth = parseFloat(text);
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.marginheight = function(me, text) {
    this._ensure_unitvector(me);
    /* TAINT use parser, validate syntax */
    me.marginheight = parseFloat(text);
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.paddingwidth = function(me, text) {
    this._ensure_unitvector(me);
    /* TAINT use parser, validate syntax */
    me.paddingwidth = parseFloat(text);
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.paddingheight = function(me, text) {
    this._ensure_unitvector(me);
    /* TAINT use parser, validate syntax */
    me.paddingheight = parseFloat(text);
    //.........................................................................................................
    return null;
  };

  //===========================================================================================================
  // PARSERS ETC
  //-----------------------------------------------------------------------------------------------------------
  this._idx_from_col_and_row = function(col, row) {
    var col_idx, row_idx, type;
    if ((type = CND.type_of(col)) !== 'text') {
      throw new Error(`(MKTS/TABLE µ6848) expected a text for col, got a ${rpr(type)}`);
    }
    if ((type = CND.type_of(row)) !== 'text') {
      throw new Error(`(MKTS/TABLE µ1080) expected a text for row, got a ${rpr(type)}`);
    }
    //.........................................................................................................
    col_idx = (col.codePointAt(0)) - ('a'.codePointAt(0));
    row_idx = (parseInt(row, 10)) - 1;
    return {
      col: col_idx,
      row: row_idx
    };
  };

  //-----------------------------------------------------------------------------------------------------------
  /* TAINT use proper parsing tool */
  this._parse_fieldborder = function(me, fieldborder) {
    var _, edges, fail, field_designation, fieldhints, fieldnames, groups, ref1, style, type, z;
    if ((type = CND.type_of(fieldborder)) !== 'text') {
      throw new Error(`(MKTS/TABLE µ1225) expected a text for fieldborder, got a ${rpr(type)}`);
    }
    if ((groups = fieldborder.match(/^(.+):(.+):(.*)$/)) == null) {
      throw new Error(`(MKTS/TABLE µ2582) expected a fieldborder like 'a1:left:sDashed,sThick', got ${rpr(fieldborder)}`);
    }
    [_, fieldhints, edges, style] = groups;
    //.........................................................................................................
    edges = (function() {
      var i, len, ref1, results;
      ref1 = edges.split(',');
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        _ = ref1[i];
        results.push(_.trim());
      }
      return results;
    })();
    if (indexOf.call(edges, '*') >= 0) {
      edges = ['top', 'left', 'bottom', 'right'];
    }
    fieldnames = [];
    ref1 = this._walk_fails_and_field_designations_from_hints(me, fieldhints);
    //.........................................................................................................
    for (z of ref1) {
      [fail, field_designation] = z;
      /* TAINT ad-hoc fail message production, use method */
      if (fail != null) {
        _record(me, `${fail} (${jr({field_designation})})`);
      } else {
        fieldnames.push(field_designation);
      }
    }
    //.........................................................................................................
    style = style.trim();
    if (style === 'none' || style === '') {
      style = null;
    }
    //.........................................................................................................
    return {fieldnames, edges, style};
  };

  //===========================================================================================================
  // EVENT GENERATORS
  //-----------------------------------------------------------------------------------------------------------
  this._walk_events = function*(me, fieldhints_and_content_events) {
    this._compute_cell_dimensions(me);
    this._compute_field_dimensions(me);
    this._compute_border_dimensions(me);
    this._compute_pod_dimensions(me);
    this._compute_table_height(me);
    yield* this._walk_opening_events(me);
    yield* this._walk_style_events(me);
    yield* this._walk_field_borders_events(me);
    yield* this._walk_pod_events(me, fieldhints_and_content_events);
    yield* this._walk_debug_joints_events(me);
    yield* this._walk_debug_cellgrid_events(me);
    yield* this._walk_debug_fieldgrid_events(me);
    yield* this._walk_closing_events(me);
    yield* this._convert_fails_to_warnings(me);
  };

  //-----------------------------------------------------------------------------------------------------------
  //.........................................................................................................
  // ### dump description for debugging ###
  // ### TAINT make dump configurable ###
  // ### TAINT print in smaller type ###
  // yield [ 'tex', '\\par{}', ]
  // yield [ 'text', "MKTS Table Description:\n\n", ( copy me.meta ), ]
  // yield [ '(', 'code', [],                       ( copy me.meta ), ]
  // yield [ '.', 'text', ( rpr me ),               ( copy me.meta ), ]
  // yield [ ')', 'code', [],                       ( copy me.meta ), ]
  // yield [ 'tex', '\\par{}', ]
  //.........................................................................................................
  this._walk_opening_events = function*(me) {
    this._ensure_unitvector(me);
    yield tex("\n\n");
    yield tex("\\par% Beginning of MKTS Table ==============================================================================\n");
    yield texr('µ1', "{\\setlength{\\fboxsep}{0mm}");
    if (me.debug) {
      yield texr('µ2', "\\mktsColorframebox{red}{% debugging framebox");
    }
    /* NOTE only height of minipage is important; TikZ will happily draw outside of minipage when told */
    /* TAINT calculate proper height so text will keep register */
    yield texr('µ3', `\\newdimen\\mktsTableUnitwidth\\setlength{\\mktsTableUnitwidth}{${me.unitwidth}}`);
    yield texr('µ4', `\\newdimen\\mktsTableUnitheight\\setlength{\\mktsTableUnitheight}{${me.unitheight}}`);
    yield texr('µ2', `\\begin{minipage}[t][${me.table_dimensions.height}\\mktsTableUnitheight][t]{\\linewidth}`);
    yield texr('µ5', "\\begin{tikzpicture}[ overlay, yshift = 0mm, yscale = -1, line cap = rect ]");
    yield texr('µ6', `\\tikzset{x=${me.unitwidth}};\\tikzset{y=${me.unitheight}};`);
  };

  //-----------------------------------------------------------------------------------------------------------
  this._walk_closing_events = function*(me) {
    yield texr('µ7', "\\end{tikzpicture}");
    yield texr('µ8', "\\end{minipage}}");
    if (me.debug) {
      yield texr('µ8', "}% debugging framebox");
    }
    yield tex("\\par% End of MKTS Table ====================================================================================\n\n");
  };

  //-----------------------------------------------------------------------------------------------------------
  this._walk_style_events = function*(me) {
    var key, ref1, value;
    ref1 = me.styles;
    for (key in ref1) {
      value = ref1[key];
      yield texr('µ9', `\\tikzset{${key}/.style={${value}}}`);
    }
  };

  //-----------------------------------------------------------------------------------------------------------
  this._walk_field_borders_events = function*(me) {
    var borderstyle, d, designation, fieldborders, ref1;
    ref1 = me.border_dimensions;
    //.........................................................................................................
    for (designation in ref1) {
      d = ref1[designation];
      if ((fieldborders = me.fieldborders[designation]) == null) {
        continue;
      }
      if ((borderstyle = fieldborders['left']) != null) {
        yield texr('µ10', `\\draw[${borderstyle}] (${d.left},${d.top}) -- (${d.left},${d.bottom});`);
      }
      if ((borderstyle = fieldborders['right']) != null) {
        yield texr('µ11', `\\draw[${borderstyle}] (${d.right},${d.top}) -- (${d.right},${d.bottom});`);
      }
      if ((borderstyle = fieldborders['top']) != null) {
        yield texr('µ12', `\\draw[${borderstyle}] (${d.left},${d.top}) -- (${d.right},${d.top});`);
      }
      if ((borderstyle = fieldborders['bottom']) != null) {
        yield texr('µ13', `\\draw[${borderstyle}] (${d.left},${d.bottom}) -- (${d.right},${d.bottom});`);
      }
    }
  };

  //-----------------------------------------------------------------------------------------------------------
  //.........................................................................................................
  this._get_valign_tex = function(me, valign) {
    switch (valign) {
      case 'top':
        return 't';
      case 'bottom':
        return 'b';
      case 'center':
        return 'c';
      case 'spread':
        return 's';
      default:
        throw new Error(`(MKTS/TABLE µ4799) illegal value for valign ${rpr(valign)}`);
    }
  };

  //-----------------------------------------------------------------------------------------------------------
  this._walk_pod_events = function*(me, fieldhints_and_content_events) {
    var content, d, field_designation, i, len, ref1, ref2, ref3, sub_event, valign_tex, z;
    ref1 = this._walk_most_recent_field_designations(me, fieldhints_and_content_events);
    for (z of ref1) {
      [field_designation, content] = z;
      d = me.pod_dimensions[field_designation];
      valign_tex = this._get_valign_tex(me, (ref2 = (ref3 = me.valigns[field_designation]) != null ? ref3 : me.valigns['*']) != null ? ref2 : 'center');
      yield texr('µ14', `\\node[anchor=north west,inner sep=0mm] at (${d.left},${d.top})`);
      yield texr('µ15', `{\\begin{minipage}[t][${d.height}\\mktsTableUnitheight][${valign_tex}]{${d.width}\\mktsTableUnitwidth}`);
      yield ['.', 'noindent', null, {}];
      for (i = 0, len = content.length; i < len; i++) {
        sub_event = content[i];
        yield sub_event;
      }
      yield texr('µ16', "\\end{minipage}};");
    }
  };

  //===========================================================================================================
  // EVENT GENERATORS: DEBUGGING EVENTS
  //-----------------------------------------------------------------------------------------------------------
  //.........................................................................................................
  this._should_debug = function(me) {
    return me.debug || (me.fails.length !== 0);
  };

  //-----------------------------------------------------------------------------------------------------------
  this._walk_debug_cellgrid_events = function*(me) {
    var bottom, colnr, i, j, left, ref1, ref2, right, rownr, top, x, y;
    if (!this._should_debug(me)) {
      return;
    }
    //.........................................................................................................
    yield texr('µ17', "\\begin{scope}[on background layer]");
    //.........................................................................................................
    /* TAINT use fixed size like 1mm */
    top = (this._top_from_rownr(me, 1)) - 3;
    bottom = (this._bottom_from_rownr(me, me.grid.height)) + 3;
    for (colnr = i = 1, ref1 = me.grid.width + 1; (1 <= ref1 ? i <= ref1 : i >= ref1); colnr = 1 <= ref1 ? ++i : --i) {
      x = this._left_from_colnr(me, colnr);
      yield texr('µ18', `\\draw[sDebugCellgrid] (${x},${top}) -- (${x},${bottom});`);
    }
    //.........................................................................................................
    /* TAINT use fixed size like 1mm */
    left = (this._left_from_colnr(me, 1)) - 3;
    right = (this._right_from_colnr(me, me.grid.width)) + 3;
    for (rownr = j = 1, ref2 = me.grid.height + 1; (1 <= ref2 ? j <= ref2 : j >= ref2); rownr = 1 <= ref2 ? ++j : --j) {
      y = this._top_from_rownr(me, rownr);
      yield texr('µ19', `\\draw[sDebugCellgrid] (${left},${y}) -- (${right},${y});`);
    }
    //.........................................................................................................
    yield texr('µ20', "\\end{scope}");
  };

  //-----------------------------------------------------------------------------------------------------------
  //.........................................................................................................
  this._walk_debug_fieldgrid_events = function*(me) {
    /* TAINT use fixed size like 1mm */
    var bottom, d, designation, left, ref1, right, top;
    if (!this._should_debug(me)) {
      return;
    }
    //.........................................................................................................
    yield texr('µ21', "\\begin{scope}[on background layer]");
    ref1 = me.field_dimensions;
    //.........................................................................................................
    for (designation in ref1) {
      d = ref1[designation];
      left = d.left + 0.5;
      right = d.right - 0.5;
      top = d.top + 0.5;
      bottom = d.bottom - 0.5;
      yield ['tex', `\\draw[sDebugFieldgrid] (${left},${bottom})` + ` -- (${left},${top})` + ` -- (${right},${top});`];
      yield ['tex', ` \\draw[sDebugFieldgrid] (${right},${top}) ` + ` -- (${right},${bottom});`];
      yield ['tex', ` \\draw[sDebugFieldgrid] (${left},${bottom}) ` + ` -- (${right},${bottom});`];
      yield ['tex', "% MKTSTBL@26\n"];
    }
    //.........................................................................................................
    yield texr('µ22', "\\end{scope}");
  };

  //-----------------------------------------------------------------------------------------------------------
  //.........................................................................................................
  this._walk_debug_joints_events = function*(me) {
    var cellkey, colletters, colnr, ref1, ref2, rownr, x, y, z;
    if (!this._should_debug(me)) {
      return;
    }
    this._ensure_grid(me);
    this._ensure_joint_coordinates(me);
    //.........................................................................................................
    yield texr('µ23', "\\begin{scope}[on background layer]");
    ref1 = IG.GRID.walk_colletters_and_colnrs(me.grid);
    //.........................................................................................................
    /* TAINT use fixed size like 1mm */
    for (z of ref1) {
      [colletters, colnr] = z;
      ref2 = IG.GRID.walk_rownrs(me.grid);
      for (rownr of ref2) {
        x = (this._left_from_colnr(me, colnr)) + 2;
        y = (this._top_from_rownr(me, rownr)) + 2;
        cellkey = `${colletters}${rownr}`;
        yield tex(`\\node[sDebugJoints] at (${x},${y}) {{\\mktsStyleCode{}${cellkey}}}; `);
      }
    }
    //.........................................................................................................
    yield texr('µ24', "\\end{scope}");
  };

  //-----------------------------------------------------------------------------------------------------------
  //.........................................................................................................
  this._convert_fails_to_warnings = function*(me) {
    var fail, i, len, ref1;
    ref1 = me.fails;
    for (i = 0, len = ref1.length; i < len; i++) {
      fail = ref1[i];
      yield ['.', 'warning', fail, copy(me.meta)];
      yield ['tex', '\\par\n'];
    }
  };

  //===========================================================================================================
  // ENSURERS
  //-----------------------------------------------------------------------------------------------------------
  this._ensure_unitvector = function(me) {
    if (me.unitwidth == null) {
      this.unitwidth(me, me.default.unitwidth);
    }
    if (me.unitheight == null) {
      this.unitheight(me, me.default.unitheight);
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._ensure_joint_coordinates = function(me) {
    if (me.joint_coordinates != null) {
      return null;
    }
    this._ensure_cellwidths(me);
    this._ensure_cellheights(me);
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._ensure_grid = function(me) {
    if (me.grid != null) {
      return null;
    }
    throw new Error("(MKTS/TABLE µ5307) grid must be set");
  };

  //-----------------------------------------------------------------------------------------------------------
  this._ensure_cellwidths = function(me) {
    if ((me.colwidths.length === me.grid.width + 1) && (indexOf.call(me.colwidths.slice(1), null) < 0)) {
      return null;
    }
    throw new Error(`(MKTS/TABLE µ4039) colwidths must be all set; got ${rpr(me.colwidths)}`);
  };

  //-----------------------------------------------------------------------------------------------------------
  this._ensure_cellheights = function(me) {
    if ((me.rowheights.length === me.grid.height + 1) && (indexOf.call(me.rowheights.slice(1), null) < 0)) {
      return null;
    }
    throw new Error(`(MKTS/TABLE µ8054) rowheights must be all set; got ${rpr(me.rowheights)}`);
  };

  //-----------------------------------------------------------------------------------------------------------
  this._ensure_margin = function(me) {
    if (me.marginwidth == null) {
      this.marginwidth(me, me.default.marginwidth);
    }
    if (me.marginheight == null) {
      this.marginheight(me, me.default.marginheight);
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._ensure_padding = function(me) {
    if (me.paddingwidth == null) {
      this.paddingwidth(me, me.default.paddingwidth);
    }
    if (me.paddingheight == null) {
      this.paddingheight(me, me.default.paddingheight);
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._compute_cell_dimensions = function(me) {
    var bottom, colletters, colnr, designation, left, ref1, ref2, right, rownr, top, z;
    this._ensure_grid(me);
    ref1 = IG.GRID.walk_colletters_and_colnrs(me.grid);
    for (z of ref1) {
      [colletters, colnr] = z;
      ref2 = IG.GRID.walk_rownrs(me.grid);
      for (rownr of ref2) {
        designation = `${colletters}${rownr}`;
        left = this._left_from_colnr(me, colnr);
        right = this._right_from_colnr(me, colnr);
        top = this._top_from_rownr(me, rownr);
        bottom = this._bottom_from_rownr(me, rownr);
        // ### TAINT must not become negative ###
        // cellwidth_u   = right  - left # - 2 * me.marginwidth
        // cellheight_u  = bottom - top  # - 2 * me.marginheight
        me.cell_dimensions[designation] = {colnr, rownr, left, right, top, bottom};
      }
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._compute_field_dimensions = function(me) {
    var bottom, designation, fieldcells, height, left, ref1, right, top, width;
    ref1 = me.fieldcells;
    /* TAINT use me.field_dimensions */
    for (designation in ref1) {
      fieldcells = ref1[designation];
      left = this._left_from_colnr(me, fieldcells.left_colnr);
      right = this._right_from_colnr(me, fieldcells.right_colnr);
      top = this._top_from_rownr(me, fieldcells.top_rownr);
      bottom = this._bottom_from_rownr(me, fieldcells.bottom_rownr);
      width = right - left;
      height = bottom - top;
      me.field_dimensions[designation] = {left, right, width, top, bottom, height};
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._compute_border_dimensions = function(me) {
    /* TAINT must not become negative */
    var bottom, d, designation, height, left, ref1, right, top, width;
    this._ensure_margin(me);
    ref1 = me.field_dimensions;
    for (designation in ref1) {
      d = ref1[designation];
      left = d.left + me.marginwidth;
      right = d.right - me.marginwidth;
      top = d.top + me.marginheight;
      bottom = d.bottom - me.marginheight;
      width = right - left;
      height = bottom - top;
      me.border_dimensions[designation] = {left, right, width, top, bottom, height};
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._compute_pod_dimensions = function(me) {
    /* TAINT must not become negative */
    var bottom, d, designation, height, left, ref1, right, top, width;
    this._ensure_padding(me);
    ref1 = me.field_dimensions;
    for (designation in ref1) {
      d = ref1[designation];
      left = d.left + me.paddingwidth;
      right = d.right - me.paddingwidth;
      top = d.top + me.paddingheight;
      bottom = d.bottom - me.paddingheight;
      width = right - left;
      height = bottom - top;
      me.pod_dimensions[designation] = {left, right, width, top, bottom, height};
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._compute_table_height = function(me) {
    me.table_dimensions.height = this._bottom_from_rownr(me, me.grid.height);
    me.table_dimensions.width = null/* not used ATM, all tables are nominally as wide as column */
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._left_from_colnr = function(me, colnr) {
    var R, i, nr, ref1;
    /* TAINT should precompute */
    this._ensure_cellwidths(me);
    R = 0;
    for (nr = i = 1, ref1 = colnr; (1 <= ref1 ? i < ref1 : i > ref1); nr = 1 <= ref1 ? ++i : --i) {
      R += me.colwidths[nr];
    }
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._right_from_colnr = function(me, colnr) {
    return (this._left_from_colnr(me, colnr)) + me.colwidths[colnr];
  };

  //-----------------------------------------------------------------------------------------------------------
  this._top_from_rownr = function(me, rownr) {
    var R, i, nr, ref1;
    /* TAINT should precompute */
    this._ensure_cellheights(me);
    R = 0;
    for (nr = i = 1, ref1 = rownr; (1 <= ref1 ? i < ref1 : i > ref1); nr = 1 <= ref1 ? ++i : --i) {
      R += me.rowheights[nr];
    }
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._bottom_from_rownr = function(me, rownr) {
    return (this._top_from_rownr(me, rownr)) + me.rowheights[rownr];
  };

  //===========================================================================================================
  // ITERATORS
  //-----------------------------------------------------------------------------------------------------------
  this._walk_fails_and_field_designations_from_hints = function*(me, fieldhints) {
    /* TAINT this will have to be changed to allow for named fields */
    var cell, count, field_designation, field_designations, i, len, ref1, seen_field_designations;
    count = 0;
    seen_field_designations = new Set();
    ref1 = IG.GRID.walk_cells_from_selector(me.grid, fieldhints);
    //.........................................................................................................
    for (cell of ref1) {
      if ((field_designations = me.cellfields[cell.cellkey]) == null) {
        continue;
      }
      for (i = 0, len = field_designations.length; i < len; i++) {
        field_designation = field_designations[i];
        if (seen_field_designations.has(field_designation)) {
          continue;
        }
        seen_field_designations.add(field_designation);
        count += +1;
        yield [null, field_designation];
      }
    }
    //.........................................................................................................
    if (count === 0) {
      yield [_fail(me, 'µ5131', `field hint ${rpr(fieldhints)} do not match any field`), null];
    }
  };

  //-----------------------------------------------------------------------------------------------------------
  //.........................................................................................................
  this._walk_fails_and_lanenrs_from_direction_and_selector = function*(me, direction, selector) {
    var cell, count, lanenr, p, ref1, seen_lanenrs;
    if (direction !== 'width' && direction !== 'height') {
      throw _stackerr(me, 'µ4656', `expected 'width' or 'height', got ${rpr(direction)}`);
    }
    //.........................................................................................................
    count = 0;
    seen_lanenrs = new Set();
    p = direction === 'width' ? 'colnr' : 'rownr';
    ref1 = IG.GRID.walk_cells_from_selector(me.grid, selector);
    //.........................................................................................................
    /* TAINT should implement this in intergrid */
    for (cell of ref1) {
      lanenr = cell[p];
      if (seen_lanenrs.has(lanenr)) {
        continue;
      }
      seen_lanenrs.add(lanenr);
      count += +1;
      yield [null, lanenr];
    }
    //.........................................................................................................
    if (count === 0) {
      /* should never happen */
      yield [_fail(me, 'µ5131', `selector ${rpr(selector)} doesn't match any lane`), null];
    }
  };

  //-----------------------------------------------------------------------------------------------------------
  //.........................................................................................................
  this._walk_most_recent_field_designations = function*(me, fieldhints_and_stuff) {
    /* Given a list of `[ fieldhints, x... ]` lists, return a list of `[ designation, x... ]` lists such
    that each `designation` that resulted from each of the `fieldhints` is only kept from the instance
    that appeared last in the list. Each `fieldhints` can produce an arbitrary number of matching field
    designations, and later occurrences of a given field will replace earlier appearances. */
    var R, fail, field_designation, fieldhints, i, len, ref1, stuff, z;
    R = {};
    for (i = 0, len = fieldhints_and_stuff.length; i < len; i++) {
      [fieldhints, ...stuff] = fieldhints_and_stuff[i];
      ref1 = this._walk_fails_and_field_designations_from_hints(me, fieldhints);
      for (z of ref1) {
        [fail, field_designation] = z;
        if (fail != null) {
          _record(me, fail);
        } else {
          R[field_designation] = stuff;
        }
      }
    }
    for (field_designation in R) {
      stuff = R[field_designation];
      yield [field_designation, ...stuff];
    }
  };

  // #-----------------------------------------------------------------------------------------------------------
  // @_walk_table_edge_field_designations = ( me, edge ) ->
  //   seen_field_designations = new Set()
  //   for d from IG.GRID.walk_edge_cellrefs me.grid, edge
  //     continue unless ( field_designations = me.cellfields[ d.cellkey ] )?
  //     for field_designation in field_designations
  //       continue if seen_field_designations.has field_designation
  //       seen_field_designations.add field_designation
  //       yield field_designation
  //   yield return

  //===========================================================================================================
  // HELPERS
  //-----------------------------------------------------------------------------------------------------------
  _stackerr = function(me, ref, message, error = null) {
    /*
    Prepends local error message to the original one so we get more informative traces. Usage:

    ```
    try
      ...
    catch error
      throw _stackerr error, "(MKTS/TABLE µ4781) ... new message ..."
    ```
    */
    var filename, line_nr, ref1, ref2;
    filename = (ref1 = me.meta.filename) != null ? ref1 : '<NOFILENAME>';
    line_nr = (ref2 = me.meta.line_nr) != null ? ref2 : '(NOLINENR)';
    message = `[${badge}#${ref}: ${filename}#${line_nr}]: ${message}`;
    if (error != null) {
      error.message = `${message}\n${error.message}`;
    } else {
      error = new Error(message);
    }
    return error;
  };

  //-----------------------------------------------------------------------------------------------------------
  _fail = function(me, ref, message) {
    /* TAINT using strings as error values is generally being frowned upon */
    var filename, line_nr, ref1, ref2;
    filename = (ref1 = me.meta.filename) != null ? ref1 : '<NOFILENAME>';
    line_nr = (ref2 = me.meta.line_nr) != null ? ref2 : '(NOLINENR)';
    return `[${badge}#${ref}: ${filename}#${line_nr}]: ${message}`;
  };

  //-----------------------------------------------------------------------------------------------------------
  _record = function(me, message) {
    me.fails.push(message);
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  _record_fail = function(me, ref, message) {
    return _record(me, _fail(me, ref, message));
  };

}).call(this);

//# sourceMappingURL=mkts-table.js.map
