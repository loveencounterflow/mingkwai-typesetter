// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var $, $async, CND, D, ECS, MD_READER, MKTS, alert, badge, copy, debug, echo, help, hide, info, is_hidden, is_stamped, log, rpr, select, stamp, unstamp, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'MKTS/TABLE';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  D = require('pipedreams');

  $ = D.remit.bind(D);

  $async = D.remit_async.bind(D);

  //...........................................................................................................
  ECS = require('./eval-cs');

  MKTS = require('./main');

  MD_READER = require('./md-reader');

  hide = MD_READER.hide.bind(MD_READER);

  copy = MD_READER.copy.bind(MD_READER);

  stamp = MD_READER.stamp.bind(MD_READER);

  unstamp = MD_READER.unstamp.bind(MD_READER);

  select = MD_READER.select.bind(MD_READER);

  is_hidden = MD_READER.is_hidden.bind(MD_READER);

  is_stamped = MD_READER.is_stamped.bind(MD_READER);

  //...........................................................................................................
  copy = function(x) {
    return Object.assign({}, x);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.new_description = function(S) {
    var R;
    R = {
      '~isa': 'MKTS/TABLE/description',
      grid: {
        width: 4,
        height: 4
      },
      /* default unit for width, height: */
      u: {
        width: '10mm',
        height: '10mm'
      },
      cells: []
    };
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.grid = function(me, t) {
    var _, col_count_txt, match, row_count_txt, type;
    //.........................................................................................................
    if ((type = CND.type_of(t)) !== 'text') {
      throw new Error(`(MKTS/TABLE 5183) need a text for mkts-table/grid, got a ${type}`);
    }
    if ((match = t.match(/^(\d+)\s*x(\d+)$/)) == null) {
      throw new Error(`(MKTS/TABLE 7414) need a text like '3 x 4' or similar for mkts-table/grid, got ${rpr(t)}`);
    }
    //.........................................................................................................
    [_, col_count_txt, row_count_txt] = match;
    me.grid.width = parseInt(col_count_txt, 10);
    me.grid.height = parseInt(row_count_txt, 10);
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.merge = function(me, text) {
    var type;
    //.........................................................................................................
    if ((type = CND.type_of(text)) !== 'text') {
      throw new Error(`(MKTS/TABLE 3075) need a text for mkts-table/merge, got a ${type}`);
    }
    //.........................................................................................................
    me.cells.push(this.parse_merge_quadref(text));
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._idx_from_col_and_row = function(col, row) {
    var col_idx, row_idx, type;
    if ((type = CND.type_of(col)) !== 'text') {
      throw new Error(`(MKTS/TABLE 4726) expected a text for col, got a ${rpr(type)}`);
    }
    if ((type = CND.type_of(row)) !== 'text') {
      throw new Error(`(MKTS/TABLE 8186) expected a text for row, got a ${rpr(type)}`);
    }
    col_idx = (col.codePointAt(0)) - ('a'.codePointAt(0));
    row_idx = (parseInt(row, 10)) - 1;
    return {
      col: col_idx,
      row: row_idx
    };
  };

  //-----------------------------------------------------------------------------------------------------------
  /* TAINT use proper parsing tool */
  this.parse_merge_quadref = function(merge_quadref) {
    var _, match, q1col, q1idx, q1row, q2col, q2idx, q2row, type;
    if ((type = CND.type_of(merge_quadref)) !== 'text') {
      throw new Error(`(MKTS/TABLE 2120) expected a text for merge_quadref, got a ${rpr(type)}`);
    }
    /* TAINT only supports quadrefs `[a1]` thru `[z99]` */
    if ((match = merge_quadref.match(/^\[([a-z])([0-9]{1,2})\]\.\.\[([a-z])([0-9]{1,2})\]$/)) == null) {
      throw new Error(`(MKTS/TABLE 6098) expected a merge-quadref like '[a1]..[d4]', got ${rpr(merge_quadref)}`);
    }
    [_, q1col, q1row, q2col, q2row] = match;
    q1idx = this._idx_from_col_and_row(q1col, q1row);
    q2idx = this._idx_from_col_and_row(q2col, q2row);
    return [/* TAINT validate that q2 is not to the left / top of q1 */ q1idx, q2idx];
  };

  //-----------------------------------------------------------------------------------------------------------
  this.mkts_events_from_table_description = function(me) {
    var R, event, i, len, ref;
    this._fill_out_tex_names(me);
    R = [];
    //.........................................................................................................
    R.push(['tex', '\\par{}']);
    /* isolate block content */    R.push(['tex', '{%\n']);
    //.........................................................................................................
    /* begin group */    R.push(['tex', '\\setlength{\\fboxsep}{0mm}%\n']);
    ref = this._get_newdimen_events(me);
    for (i = 0, len = ref.length; i < len; i++) {
      event = ref[i];
      /* initialize */      R.push(event);
    }
    //.........................................................................................................
    R.push(['tex', '}%\n']);
    //.........................................................................................................
    /* end group */    R.push(['tex', '\\par{}']);
    /* description for debugging */    R.push(['(', 'code', [], copy(me)]);
    R.push(['.', 'text', rpr(me), copy(me)]);
    R.push([')', 'code', [], copy(me)]);
    //.........................................................................................................
    // R.push [ 'tex', "\\〇一二三四五六七八九{} ", ]
    // R.push [ '.', 'text', "Ⅷ六", ( copy me ), ]
    R.push(['tex', '\\par{}']);
//.........................................................................................................
/* isolate block content */    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._fill_out_tex_names = function(me) {
    var col, col_txt, i, j, ref, ref1, row, row_txt;
    for (col = i = 0, ref = me.grid.width; (0 <= ref ? i <= ref : i >= ref); col = 0 <= ref ? ++i : --i) {
      col_txt = this._obfuscate_integer(col);
      for (row = j = 0, ref1 = me.grid.height; (0 <= ref1 ? j <= ref1 : j >= ref1); row = 0 <= ref1 ? ++j : --j) {
        row_txt = this._obfuscate_integer(row);
      }
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._get_newdimen_events = function(me) {
    /* TAINT precompute array */
    var R, col, col_txt, i, j, ref, ref1, row, row_txt;
    R = [];
    me.coordinates = [];
    for (col = i = 0, ref = me.grid.width; (0 <= ref ? i <= ref : i >= ref); col = 0 <= ref ? ++i : --i) {
      col_txt = (function() {
        switch (col) {
          case 0:
            return 'O';
          case me.grid.width:
            return 'Z';
          default:
            return String.fromCodePoint(('A'.codePointAt(0)) - 1 + col);
        }
      })();
      for (row = j = 0, ref1 = me.grid.height; (0 <= ref1 ? j <= ref1 : j >= ref1); row = 0 <= ref1 ? ++j : --j) {
        row_txt = (function() {
          switch (row) {
            case 0:
              return 'O';
            case me.grid.width:
              return 'Z';
            default:
              return String.fromCodePoint(('A'.codePointAt(0)) - 1 + row);
          }
        })();
        me.coordinates.push(col_txt + row_txt);
      }
    }
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._obfuscate_integer = function(n) {
    var R;
    R = `${n}`;
    R = R.replace(/0/g, '零');
    R = R.replace(/1/g, '壹');
    R = R.replace(/2/g, '貳');
    R = R.replace(/3/g, '叄');
    R = R.replace(/4/g, '肆');
    R = R.replace(/5/g, '陸');
    R = R.replace(/6/g, '柒');
    R = R.replace(/7/g, '捌');
    R = R.replace(/8/g, '玖');
    return R;
  };

}).call(this);

//# sourceMappingURL=mkts-table.js.map
