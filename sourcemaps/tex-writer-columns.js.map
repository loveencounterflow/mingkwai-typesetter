{"version":3,"sources":["tex-writer-columns.coffee"],"names":[],"mappings":"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","file":"tex-writer-columns.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MK/TS/TEX-WRITER/COLUMNS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nMKTS                      = require './main'\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nunstamp                   = MD_READER.unstamp.bind     MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\n# hide                      = MK.TS.MD_READER.hide.bind        MK.TS.MD_READER\n# copy                      = MK.TS.MD_READER.copy.bind        MK.TS.MD_READER\n# stamp                     = MK.TS.MD_READER.stamp.bind       MK.TS.MD_READER\n# unstamp                   = MK.TS.MD_READER.unstamp.bind     MK.TS.MD_READER\n# select                    = MK.TS.MD_READER.select.bind      MK.TS.MD_READER\n# is_hidden                 = MK.TS.MD_READER.is_hidden.bind   MK.TS.MD_READER\n# is_stamped                = MK.TS.MD_READER.is_stamped.bind  MK.TS.MD_READER\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$main = ( S ) ->\n  #.........................................................................................................\n  return D.TEE.from_pipeline [\n    @$initialize_state          S\n    @$end_columns_with_document S\n    @$region_slash              S\n    @$command_slash             S\n    @$columns                   S\n    @$transform_to_pretex       S\n    # @$transform_pretex_to_tex   S\n    ]\n\n#===========================================================================================================\n# STREAM TRANSFORMS\n#-----------------------------------------------------------------------------------------------------------\n@$initialize_state = ( S ) ->\n  sandbox   = {}\n  is_first  = yes\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '~', 'change'\n      [ _, _, changeset, _, ] = event\n      sandbox                 = MK.TS.DIFFPATCH.patch changeset, sandbox\n      send event\n    #.......................................................................................................\n    else if is_first and select event, '~', 'flush'\n      is_first        = no\n      [ ..., meta, ]  = event\n      sandbox_backup  = MK.TS.DIFFPATCH.snapshot sandbox\n      throw new Error \"namespace collision: `S.sandbox.COLUMNS` already defined\" if sandbox[ 'COLUMNS' ]?\n      sandbox[ 'COLUMNS' ] =\n        count: 2 # default number of columns in document **when using multiple columns**\n        stack: [ @_new_setting(), ]\n      changeset = MKTS.DIFFPATCH.diff sandbox_backup, sandbox\n      send [ '~', 'change', changeset, ( copy meta ), ] if changeset.length > 0\n      send event\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$end_columns_with_document = ( S ) ->\n  remark = MK.TS.MD_READER._get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, ')', 'document'\n      [ ..., meta, ] = event\n      send [ '!', 'columns', [ 1, ], ( copy meta, 'multi-columns': 'omit-open', ), ]\n      send event\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$region_slash = ( S ) ->\n  track         = MD_READER.TRACKER.new_tracker '(slash)'\n  event_buffer  = null\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_slash = track.within '(slash)'\n    track event\n    #.......................................................................................................\n    if select event, '(', 'slash'\n      send stamp event\n      event_buffer = []\n    #.......................................................................................................\n    else if select event, ')', 'slash'\n      [ ..., meta, ] = event\n      send stamp copy event\n      send [ '!', 'slash', event_buffer, ( copy meta ), ]\n      event_buffer = null\n    #.......................................................................................................\n    else if within_slash\n      event_buffer.push event\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$command_slash = ( S ) ->\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '!', 'slash'\n      [ type, name, parameters, meta, ] = event\n      send stamp hide copy event\n      #.....................................................................................................\n      # send [ '!', 'columns', [ 'push', ], ( copy meta ), ]\n      send [ '!', 'columns', [ 1, ], ( copy meta ), ]\n      #.....................................................................................................\n      if CND.isa_list parameters\n        for x in parameters\n          ### TAINT should formally check for `event`ness of value ###\n          if CND.isa_list x\n            send x\n          else\n            send [ '.', 'warning', \"ignoring argument to <<!slash>>: #{rpr x}\", ( copy meta ), ]\n      #.....................................................................................................\n      send [ '!', 'columns', [  'pop', ], ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$columns = ( S ) ->\n  remark  = MK.TS.MD_READER._get_remark()\n  sandbox = {}\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '~', 'change'\n      [ _, _, changeset, _, ] = event\n      sandbox                 = MK.TS.DIFFPATCH.patch changeset, sandbox\n      send event\n    #.......................................................................................................\n    else if select event, '!', 'columns'\n      [ type, name, parameters, meta, ] = event\n      parameters.push sandbox.COLUMNS.count if parameters.length is 0\n      [ parameter, ] = parameters\n      switch type = CND.type_of parameter\n        #...................................................................................................\n        when 'text'\n          switch parameter\n            when 'pop'\n              send stamp hide copy event\n              @_restore_column_count sandbox, event, send\n            else\n              send stamp hide copy event\n              message = \"unknown text argument #{rpr parameter}\"\n              send [ '.', 'warning', message, ( copy meta ), ]\n        #...................................................................................................\n        when 'number'\n          unless ( parameter > 0 ) and ( ( Math.floor parameter ) is parameter )\n            send stamp hide copy event\n            message = \"expected non-zero positive integer, got #{rpr parameter}\"\n            return send [ '.', 'warning', message, ( copy meta ), ]\n          send stamp hide copy event\n          @_change_column_count sandbox, event, send, parameter\n        #...................................................................................................\n        else\n          send stamp hide copy event\n          message = \"expected a text or a number, got a #{parameter_type}\"\n          send [ '.', 'warning', message, ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\n@_new_setting = ( P... ) ->\n  R =\n    count: 1 # number of columns at current point\n  return Object.assign R, P...\n\n#-----------------------------------------------------------------------------------------------------------\n@_push              = ( sandbox, setting ) -> sandbox.COLUMNS.stack.push setting\n@_pop               = ( sandbox )          -> sandbox.COLUMNS.stack.pop()\n@_get_column_count  = ( sandbox )          -> sandbox.COLUMNS.stack[ @_get_stack_idx sandbox ][ 'count' ]\n@_get_stack_idx     = ( sandbox )          -> sandbox.COLUMNS.stack.length - 1\n\n#-----------------------------------------------------------------------------------------------------------\n@_change_column_count = ( sandbox, event, send, column_count ) ->\n  @_stop_column_region  sandbox, event, send\n  @_start_column_region sandbox, event, send, column_count\n\n#-----------------------------------------------------------------------------------------------------------\n@_restore_column_count = ( sandbox, event, send ) ->\n  @_stop_column_region  sandbox, event, send\n  @_pop sandbox\n  column_count = @_get_column_count sandbox\n  @_start_column_region sandbox, event, send, column_count\n\n#-----------------------------------------------------------------------------------------------------------\n@_start_column_region = ( sandbox, event, send, column_count ) ->\n  # send stamp hide copy event\n  @_push sandbox, @_new_setting { count: column_count, }\n  # debug '©66343', event, column_count\n  # debug '©66343', S.sandbox.COLUMNS.stack\n  # if column_count isnt 1\n  [ ..., meta, ]  = event\n  ### TAINT this event should be namespaced and handled only right before output ###\n  unless meta[ 'multi-columns' ] is 'omit-open'\n    send [ '(', 'multi-columns', [ column_count, ], ( copy meta ), ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_stop_column_region = ( sandbox, event, send ) ->\n  ### No-op in case we're in base ('ambient', 'document') state ###\n  # urge '77262', sandbox.sandbox.COLUMNS.stack\n  # send stamp hide copy event\n  return if ( @_get_stack_idx sandbox ) is 0\n  column_count    = @_get_column_count sandbox\n  # last_state      = @_pop sandbox\n  ### No-op in case we're already in single-column state ###\n  # return if column_count is 1\n  [ ..., meta, ]  = event\n  ### TAINT this event should be namespaced and handled only right before output ###\n  # debug '928772', [ ')', 'multi-columns', [ column_count, ], ( copy meta ), ]\n  send [ ')', 'multi-columns', [ column_count, ], ( copy meta ), ]\n\n\n#===========================================================================================================\n# TRANSFORM TO TEX\n#-----------------------------------------------------------------------------------------------------------\n@$transform_to_pretex = ( S ) ->\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, name, parameters, meta, ] = event\n    #.......................................................................................................\n    if select event, '(', 'multi-columns'\n      send hide stamp event\n      [ column_count, ] = parameters\n      if column_count > 1\n        send stamp [ '(', 'COLUMNS/group', null, ( copy meta, tex: 'pass-through', ), ]\n        send stamp [ '.', 'COLUMNS/tex', \"\\\\vspace{\\\\parskip}%TEX-WRITER/COLUMNS/$transform-to-tex\\n\", ( copy meta, tex: 'pass-through', ), ]\n        send stamp [ '.', 'COLUMNS/tex', \"\\\\begin{multicols}{#{column_count}}\\\\raggedcolumns{}\", ( copy meta, tex: 'pass-through', ), ]\n    #.......................................................................................................\n    else if select event, ')', 'multi-columns'\n      # send stamp event\n      [ column_count, ] = parameters\n      if column_count > 1\n        send stamp [ '.', 'COLUMNS/tex', \"\\\\end{multicols}\\n\\n\", ( copy meta, tex: 'pass-through', ), ]\n        send stamp [ ')', 'COLUMNS/group', null, ( copy meta, tex: 'pass-through', ), ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$XXX_transform_pretex_to_tex = ( S ) ->\n  buffer          = []\n  within_group    = no\n  all_whitespace  = yes\n  ws_pattern      = /// ^ [ \\x20 \\t \\n ]* $ ///\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    # urge '99876', event\n    if CND.isa_text event\n      type  = null\n      name  = null\n      text  = event\n      meta  = null\n    else\n      [ type, name, text, meta, ] = event\n    #.......................................................................................................\n    if select event, '(', 'COLUMNS/group'\n      # help '975', ( JSON.stringify event )[ .. 50 ]\n      within_group = yes\n    #.......................................................................................................\n    else if select event, ')', 'COLUMNS/group'\n      # warn '975', ( JSON.stringify event )[ .. 50 ]\n      if all_whitespace\n        whisper \"ignoring multicols b/c group only contains whitespace\"\n      else\n        send sub_text for sub_text in buffer\n      ### TAINT code duplication with the above ###\n      buffer.length   = 0\n      within_group    = no\n      all_whitespace  = yes\n    #.......................................................................................................\n    else if select event, '.', 'COLUMNS/tex'\n      # urge '975', ( JSON.stringify event )[ .. 50 ]\n      buffer.push text\n      # send text\n    #.......................................................................................................\n    else\n      if within_group\n        all_whitespace = all_whitespace and ws_pattern.test text\n        buffer.push text\n        debug '975', event if text is undefined\n        # whisper '975', all_whitespace, rpr text\n      else\n        # info '975', ( JSON.stringify event )[ .. 50 ]\n        send event\n    #.......................................................................................................\n    return null\n\n\n\n\n\n"]}