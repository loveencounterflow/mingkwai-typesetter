{"version":3,"sources":["tex-writer-columns.coffee"],"names":[],"mappings":"AAMA;AAAA,MAAA,8LAAA;IAAA;;EAAA,QAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,MAAA,GAA4B,OAAA,CAAQ,IAAR;;EAE5B,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAE5B,OAAA,GAA4B,OAAA,CAAQ,oBAAR;;EAC5B,IAAA,GAA4B,OAAO,CAAC;;EAEpC,CAAA,GAA4B,OAAA,CAAQ,YAAR;;EAC5B,CAAA,GAA4B,CAAC,CAAC,KAAK,CAAC,IAAR,CAAa,CAAb;;EAC5B,MAAA,GAA4B,CAAC,CAAC,WAAW,CAAC,IAAd,CAAmB,CAAnB;;EAE5B,SAAA,GAA4B,OAAA,CAAQ,aAAR;;EAC5B,IAAA,GAA4B,SAAS,CAAC,IAAI,CAAC,IAAf,CAA2B,SAA3B;;EAC5B,IAAA,GAA4B,SAAS,CAAC,IAAI,CAAC,IAAf,CAA2B,SAA3B;;EAC5B,KAAA,GAA4B,SAAS,CAAC,KAAK,CAAC,IAAhB,CAA2B,SAA3B;;EAC5B,OAAA,GAA4B,SAAS,CAAC,OAAO,CAAC,IAAlB,CAA2B,SAA3B;;EAC5B,MAAA,GAA4B,SAAS,CAAC,MAAM,CAAC,IAAjB,CAA2B,SAA3B;;EAC5B,SAAA,GAA4B,SAAS,CAAC,SAAS,CAAC,IAApB,CAA2B,SAA3B;;EAC5B,UAAA,GAA4B,SAAS,CAAC,UAAU,CAAC,IAArB,CAA2B,SAA3B;;EAY5B,IAAC,CAAA,KAAD,GAAS,SAAE,CAAF;IACP,IAAC,CAAA,iBAAD,CAAmB,CAAnB;AAEA,WAAO,CAAC,CAAC,GAAG,CAAC,aAAN,CAAoB,CACzB,IAAC,CAAA,0BAAD,CAA4B,CAA5B,CADyB,EAEzB,IAAC,CAAA,MAAD,CAA4B,CAA5B,CAFyB,EAGzB,IAAC,CAAA,QAAD,CAA4B,CAA5B,CAHyB,EAIzB,IAAC,CAAA,iBAAD,CAA4B,CAA5B,CAJyB,CAApB;EAHA;;EAaT,IAAC,CAAA,0BAAD,GAA8B,SAAE,CAAF;AAC5B,QAAA;IAAA,MAAA,GAAS,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,WAAhB,CAAA;AAET,WAAO,CAAA,CAAE,CAAA,SAAA,KAAA;aAAA,SAAE,KAAF,EAAS,IAAT;AAEP,YAAA;QAAA,IAAG,MAAA,CAAO,KAAP,EAAc,GAAd,EAAmB,UAAnB,CAAH;UACS;UACP,IAAA,CAAK,CAAE,GAAF,EAAO,SAAP,EAAkB,CAAE,CAAF,CAAlB,EAA4B,IAAA,CAAK,IAAL,CAA5B,CAAL;UACA,IAAA,CAAK,KAAL,EAHF;SAAA,MAAA;UAME,IAAA,CAAK,KAAL,EANF;;AAQA,eAAO;MAVA;IAAA,CAAA,CAAA,CAAA,IAAA,CAAF;EAHqB;;EAgB9B,IAAC,CAAA,MAAD,GAAU,SAAE,CAAF;AAER,WAAO,CAAA,CAAE,CAAA,SAAA,KAAA;aAAA,SAAE,KAAF,EAAS,IAAT;AACP,YAAA;QAAA,IAAG,MAAA,CAAO,KAAP,EAAc,GAAd,EAAmB,OAAnB,CAAH;UACI,eAAF,EAAQ,eAAR,EAAc,qBAAd,EAA0B;UAC1B,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,KAAL,CAAL,CAAN,CAAL;UAGA,IAAA,CAAK,CAAE,GAAF,EAAO,SAAP,EAAkB,CAAE,CAAF,CAAlB,EAA4B,IAAA,CAAK,IAAL,CAA5B,CAAL;UAEA,IAAG,GAAG,CAAC,QAAJ,CAAa,UAAb,CAAH;AACE,iBAAA,4CAAA;;;AACE;cACA,IAAG,GAAG,CAAC,QAAJ,CAAa,CAAb,CAAH;gBACE,IAAA,CAAK,CAAL,EADF;eAAA,MAAA;gBAGE,IAAA,CAAK,CAAE,GAAF,EAAO,SAAP,EAAkB,mCAAA,GAAmC,CAAC,GAAA,CAAI,CAAJ,CAAD,CAArD,EAAiE,IAAA,CAAK,IAAL,CAAjE,CAAL,EAHF;;AAFF,aADF;;UAQA,IAAA,CAAK,CAAE,GAAF,EAAO,SAAP,EAAkB,CAAG,KAAH,CAAlB,EAAiC,IAAA,CAAK,IAAL,CAAjC,CAAL,EAfF;SAAA,MAAA;UAkBE,IAAA,CAAK,KAAL,EAlBF;;AAoBA,eAAO;MArBA;IAAA,CAAA,CAAA,CAAA,IAAA,CAAF;EAFC;;EA0BV,IAAC,CAAA,QAAD,GAAY,SAAE,CAAF;AACV,QAAA;IAAA,MAAA,GAAS,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,WAAhB,CAAA;AAET,WAAO,CAAA,CAAE,CAAA,SAAA,KAAA;aAAA,SAAE,KAAF,EAAS,IAAT;AAEP,YAAA;QAAA,IAAG,MAAA,CAAO,KAAP,EAAc,GAAd,EAAmB,QAAnB,CAAH;UACE,IAAA,CAAK,KAAL,EADF;;QAGA,IAAG,MAAA,CAAO,KAAP,EAAc,GAAd,EAAmB,SAAnB,CAAH;UACI,eAAF,EAAQ,eAAR,EAAc,qBAAd,EAA0B;UAC1B,IAAmC,UAAU,CAAC,MAAX,KAAqB,CAAxD;YAAA,UAAU,CAAC,IAAX,CAAgB,CAAC,CAAC,OAAO,CAAC,KAA1B,EAAA;;UACE,YAAe;AAEjB,kBAAO,cAAA,GAAiB,GAAG,CAAC,OAAJ,CAAY,SAAZ,CAAxB;AAAA,iBAEO,MAFP;AAGI,sBAAO,SAAP;AAAA,qBACO,KADP;kBAEI,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,KAAL,CAAL,CAAN,CAAL;kBACA,KAAC,CAAA,qBAAD,CAAuB,CAAvB,EAA0B,KAA1B,EAAiC,IAAjC;AAFG;AADP;kBAKI,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,KAAL,CAAL,CAAN,CAAL;kBACA,OAAA,GAAU,wBAAA,GAAwB,CAAC,GAAA,CAAI,SAAJ,CAAD;kBAClC,IAAA,CAAK,CAAE,GAAF,EAAO,SAAP,EAAkB,OAAlB,EAA6B,IAAA,CAAK,IAAL,CAA7B,CAAL;AAPJ;AADG;AAFP,iBAYO,QAZP;cAaI,IAAA,CAAA,CAAO,CAAE,SAAA,GAAY,CAAd,CAAA,IAAsB,CAAE,CAAE,IAAI,CAAC,KAAL,CAAW,SAAX,CAAF,CAAA,KAA4B,SAA9B,CAA7B,CAAA;gBACE,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,KAAL,CAAL,CAAN,CAAL;gBACA,OAAA,GAAU,0CAAA,GAA0C,CAAC,GAAA,CAAI,SAAJ,CAAD;AACpD,uBAAO,IAAA,CAAK,CAAE,GAAF,EAAO,SAAP,EAAkB,OAAlB,EAA6B,IAAA,CAAK,IAAL,CAA7B,CAAL,EAHT;;cAIA,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,KAAL,CAAL,CAAN,CAAL;cACA,KAAC,CAAA,oBAAD,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,IAAhC,EAAsC,SAAtC;AANG;AAZP;cAqBI,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,KAAL,CAAL,CAAN,CAAL;cACA,OAAA,GAAU,qCAAA,GAAsC;cAChD,IAAA,CAAK,CAAE,GAAF,EAAO,SAAP,EAAkB,OAAlB,EAA6B,IAAA,CAAK,IAAL,CAA7B,CAAL;AAvBJ,WALF;SAAA,MAAA;UA+BE,IAAA,CAAK,KAAL,EA/BF;;AAiCA,eAAO;MAtCA;IAAA,CAAA,CAAA,CAAA,IAAA,CAAF;EAHG;;EA+CZ,IAAC,CAAA,YAAD,GAAgB,SAAA;AACd,QAAA;IADgB;IAChB,CAAA,GACE;MAAA,KAAA,EAAO,CAAP;;AACF,WAAO,MAAM,CAAC,MAAP,eAAc,CAAA,CAAG,SAAA,WAAA,CAAA,CAAA,CAAjB;EAHO;;EAMhB,IAAC,CAAA,iBAAD,GAAqB,SAAE,CAAF;AACnB,QAAA;IAAA,IAAsE,iBAAtE;AAAA,YAAU,IAAA,KAAA,CAAM,kDAAN,EAAV;;IACA,CAAC,CAAC,OAAF,GAAoB;IACpB,YAAA,GAAoB,IAAC,CAAA,YAAD,CAAA;IACpB,CAAC,CAAC,OAAO,CAAC,KAAV,GAAoB;IACpB,CAAC,CAAC,OAAO,CAAC,KAAV,GAAoB,CAAE,YAAF;AACpB,WAAO;EANY;;EASrB,IAAC,CAAA,KAAD,GAAsB,SAAE,CAAF,EAAK,OAAL;WACpB,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,IAAhB,CAAqB,OAArB;EADoB;;EAEtB,IAAC,CAAA,IAAD,GAAsB,SAAE,CAAF;WACpB,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,GAAhB,CAAA;EADoB;;EAEtB,IAAC,CAAA,iBAAD,GAAsB,SAAE,CAAF;WACpB,CAAC,CAAC,OAAO,CAAC,KAAO,CAAA,IAAC,CAAA,cAAD,CAAgB,CAAhB,CAAA,CAAqB,CAAA,OAAA;EADlB;;EAEtB,IAAC,CAAA,cAAD,GAAsB,SAAE,CAAF;WAAkB,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,MAAhB,GAAyB;EAA3C;;EAGtB,IAAC,CAAA,oBAAD,GAAwB,SAAE,CAAF,EAAK,KAAL,EAAY,IAAZ,EAAkB,YAAlB;IACtB,IAAC,CAAA,mBAAD,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,IAAhC;WACA,IAAC,CAAA,oBAAD,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,IAAhC,EAAsC,YAAtC;EAFsB;;EAKxB,IAAC,CAAA,qBAAD,GAAyB,SAAE,CAAF,EAAK,KAAL,EAAY,IAAZ;AACvB,QAAA;IAAA,IAAC,CAAA,mBAAD,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,IAAhC;IACA,IAAC,CAAA,IAAD,CAAM,CAAN;IACA,YAAA,GAAe,IAAC,CAAA,iBAAD,CAAmB,CAAnB;WACf,IAAC,CAAA,oBAAD,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,IAAhC,EAAsC,YAAtC;EAJuB;;EAOzB,IAAC,CAAA,oBAAD,GAAwB,SAAE,CAAF,EAAK,KAAL,EAAY,IAAZ,EAAkB,YAAlB;AAEtB,QAAA;IAAA,IAAC,CAAA,KAAD,CAAO,CAAP,EAAU,IAAC,CAAA,YAAD,CAAc;MAAE,KAAA,EAAO,YAAT;KAAd,CAAV;IAGA,IAAG,YAAA,KAAkB,CAArB;MACS;;AACP;MACA,IAAA,CAAK,CAAE,GAAF,EAAO,eAAP,EAAwB,CAAE,YAAF,CAAxB,EAA6C,IAAA,CAAK,IAAL,CAA7C,CAAL,EAHF;;AAIA,WAAO;EATe;;EAYxB,IAAC,CAAA,mBAAD,GAAuB,SAAE,CAAF,EAAK,KAAL,EAAY,IAAZ;;AACrB;AAAA,QAAA;IAGA,IAAU,CAAE,IAAC,CAAA,cAAD,CAAgB,CAAhB,CAAF,CAAA,KAAyB,CAAnC;AAAA,aAAA;;IACA,YAAA,GAAkB,IAAC,CAAA,iBAAD,CAAmB,CAAnB;;AAElB;IACA,IAAU,YAAA,KAAgB,CAA1B;AAAA,aAAA;;IACO;;AACP;WACA,IAAA,CAAK,CAAE,GAAF,EAAO,eAAP,EAAwB,CAAE,YAAF,CAAxB,EAA6C,IAAA,CAAK,IAAL,CAA7C,CAAL;EAXqB;;EAiBvB,IAAC,CAAA,iBAAD,GAAqB,SAAE,CAAF;AAEnB,WAAO,CAAA,CAAE,CAAA,SAAA,KAAA;aAAA,SAAE,KAAF,EAAS,IAAT;AACP,YAAA;QAAE,eAAF,EAAQ,eAAR,EAAc,qBAAd,EAA0B;QAE1B,IAAG,MAAA,CAAO,KAAP,EAAc,GAAd,EAAmB,eAAnB,CAAH;UACE,IAAA,CAAK,KAAA,CAAM,KAAN,CAAL;UACE,eAAkB;UACpB,IAAA,CAAK,CAAE,KAAF,EAAS,mDAAA,GAAoD,YAApD,GAAiE,oBAA1E,CAAL,EAHF;SAAA,MAKK,IAAG,MAAA,CAAO,KAAP,EAAc,GAAd,EAAmB,eAAnB,CAAH;UACH,IAAA,CAAK,KAAA,CAAM,KAAN,CAAL;UACE,eAAkB;UACpB,IAAA,CAAK,CAAE,KAAF,EAAS,sBAAT,CAAL,EAHG;SAAA,MAAA;UAMH,IAAA,CAAK,KAAL,EANG;;AAQL,eAAO;MAhBA;IAAA,CAAA,CAAA,CAAA,IAAA,CAAF;EAFY;;;AA6CrB;;;;;;;;;;;;AA9PA","file":"tex-writer-columns.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MK/TS/TEX-WRITER/COLUMNS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nunstamp                   = MD_READER.unstamp.bind     MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\n# hide                      = MK.TS.MD_READER.hide.bind        MK.TS.MD_READER\n# copy                      = MK.TS.MD_READER.copy.bind        MK.TS.MD_READER\n# stamp                     = MK.TS.MD_READER.stamp.bind       MK.TS.MD_READER\n# unstamp                   = MK.TS.MD_READER.unstamp.bind     MK.TS.MD_READER\n# select                    = MK.TS.MD_READER.select.bind      MK.TS.MD_READER\n# is_hidden                 = MK.TS.MD_READER.is_hidden.bind   MK.TS.MD_READER\n# is_stamped                = MK.TS.MD_READER.is_stamped.bind  MK.TS.MD_READER\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$main = ( S ) ->\n  @_initialize_state S\n  #.........................................................................................................\n  return D.TEE.from_pipeline [\n    @$end_columns_with_document S\n    @$slash                     S\n    @$columns                   S\n    @$transform_to_tex          S\n    ]\n\n#===========================================================================================================\n# STREAM TRANSFORMS\n#-----------------------------------------------------------------------------------------------------------\n@$end_columns_with_document = ( S ) ->\n  remark = MK.TS.MD_READER._get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, ')', 'document'\n      [ ..., meta, ] = event\n      send [ '!', 'columns', [ 1, ], ( copy meta ), ]\n      send event\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$slash = ( S ) ->\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '!', 'slash'\n      [ type, name, parameters, meta, ] = event\n      send stamp hide copy event\n      #.....................................................................................................\n      # send [ '!', 'columns', [ 'push', ], ( copy meta ), ]\n      send [ '!', 'columns', [ 1, ], ( copy meta ), ]\n      #.....................................................................................................\n      if CND.isa_list parameters\n        for x in parameters\n          ### TAINT should formally check for `event`ness of value ###\n          if CND.isa_list x\n            send x\n          else\n            send [ '.', 'warning', \"ignoring argument to <<!slash>>: #{rpr x}\", ( copy meta ), ]\n      #.....................................................................................................\n      send [ '!', 'columns', [  'pop', ], ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$columns = ( S ) ->\n  remark = MK.TS.MD_READER._get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '~', 'update'\n      urge event\n    #.......................................................................................................\n    if select event, '!', 'columns'\n      [ type, name, parameters, meta, ] = event\n      parameters.push S.COLUMNS.count if parameters.length is 0\n      [ parameter, ] = parameters\n      #.....................................................................................................\n      switch parameter_type = CND.type_of parameter\n        #...................................................................................................\n        when 'text'\n          switch parameter\n            when 'pop'\n              send stamp hide copy event\n              @_restore_column_count S, event, send\n            else\n              send stamp hide copy event\n              message = \"unknown text argument #{rpr parameter}\"\n              send [ '.', 'warning', message, ( copy meta ), ]\n        #...................................................................................................\n        when 'number'\n          unless ( parameter > 0 ) and ( ( Math.floor parameter ) is parameter )\n            send stamp hide copy event\n            message = \"expected non-zero positive integer, got #{rpr parameter}\"\n            return send [ '.', 'warning', message, ( copy meta ), ]\n          send stamp hide copy event\n          @_change_column_count S, event, send, parameter\n        #...................................................................................................\n        else\n          send stamp hide copy event\n          message = \"expected a text or a number, got a #{parameter_type}\"\n          send [ '.', 'warning', message, ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\n@_new_setting = ( P... ) ->\n  R =\n    count: 1 # number of columns at current point\n  return Object.assign R, P...\n\n#-----------------------------------------------------------------------------------------------------------\n@_initialize_state = ( S ) ->\n  throw new Error \"namespace collision: `S.COLUMNS` already defined\" if S.COLUMNS?\n  S.COLUMNS         = {}\n  base_setting      = @_new_setting()\n  S.COLUMNS.count   = 2 # default number of columns in document **when using multiple columns**\n  S.COLUMNS.stack   = [ base_setting, ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_push              = ( S, setting ) ->\n  S.COLUMNS.stack.push setting\n@_pop               = ( S )          ->\n  S.COLUMNS.stack.pop()\n@_get_column_count  = ( S )          ->\n  S.COLUMNS.stack[ @_get_stack_idx S ][ 'count' ]\n@_get_stack_idx     = ( S )          -> S.COLUMNS.stack.length - 1\n\n#-----------------------------------------------------------------------------------------------------------\n@_change_column_count = ( S, event, send, column_count ) ->\n  @_stop_column_region  S, event, send\n  @_start_column_region S, event, send, column_count\n\n#-----------------------------------------------------------------------------------------------------------\n@_restore_column_count = ( S, event, send ) ->\n  @_stop_column_region  S, event, send\n  @_pop S\n  column_count = @_get_column_count S\n  @_start_column_region S, event, send, column_count\n\n#-----------------------------------------------------------------------------------------------------------\n@_start_column_region = ( S, event, send, column_count ) ->\n  # send stamp hide copy event\n  @_push S, @_new_setting { count: column_count, }\n  # debug '©66343', event, column_count\n  # debug '©66343', S.COLUMNS.stack\n  if column_count isnt 1\n    [ ..., meta, ]  = event\n    ### TAINT this event should be namespaced and handled only right before output ###\n    send [ '(', 'multi-columns', [ column_count, ], ( copy meta ), ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_stop_column_region = ( S, event, send ) ->\n  ### No-op in case we're in base ('ambient', 'document') state ###\n  # urge '77262', S.COLUMNS.stack\n  # send stamp hide copy event\n  return if ( @_get_stack_idx S ) is 0\n  column_count    = @_get_column_count S\n  # last_state      = @_pop S\n  ### No-op in case we're already in single-column state ###\n  return if column_count is 1\n  [ ..., meta, ]  = event\n  ### TAINT this event should be namespaced and handled only right before output ###\n  send [ ')', 'multi-columns', [ column_count, ], ( copy meta ), ]\n\n\n#===========================================================================================================\n# TRANSFORM TO TEX\n#-----------------------------------------------------------------------------------------------------------\n@$transform_to_tex = ( S ) ->\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, name, parameters, meta, ] = event\n    #.......................................................................................................\n    if select event, '(', 'multi-columns'\n      send stamp event\n      [ column_count, ] = parameters\n      send [ 'tex', \"\\n\\n\\\\vspace{\\\\mktsLineheight}\\\\begin{multicols}{#{column_count}}\\\\raggedcolumns{}\" ]\n    #.......................................................................................................\n    else if select event, ')', 'multi-columns'\n      send stamp event\n      [ column_count, ] = parameters\n      send [ 'tex', \"\\\\end{multicols}\\n\\n\" ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_begin_multi_column = ( S, column_count = 2 ) ->\n#   ### TAINT Column count must come from layout / options / MKTS-MD command ###\n#   ### TAINT make `\\raggedcolumns` optional? ###\n#   column_count ?= S.document.column_count\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_end_multi_column = ( S, column_count = 2 ) ->\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_is_single_column = ( S ) ->\n#   return ( @_get_column_count S ) is 1\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_column_count_would_change = ( S, column_count ) ->\n#   return @( _get_column_count S ) isnt column_count\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_get_last_column_count = ( S ) ->\n#   return 1 if S.COLUMNS.stack.length is 1\n#   return S.COLUMNS.stack[ S.COLUMNS.stack.length - 2 ][ 'count' ]\n\n\n###\n\n<<(.>>@document.column_count = 3<<)>>\n\n\n<<!columns 1>>                            (single-column\n<<!columns 1>>                            (multi-column 1\n<<!columns>>                              (multi-column\n\n<<!columns 'push'>>\n<<!columns 'pop'>>\n\n\n\n\n###\n\n\n\n"]}