{"version":3,"sources":["tex-writer-columns.coffee"],"names":[],"mappings":"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","file":"tex-writer-columns.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MK/TS/TEX-WRITER/COLUMNS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nunstamp                   = MD_READER.unstamp.bind     MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\n# hide                      = MK.TS.MD_READER.hide.bind        MK.TS.MD_READER\n# copy                      = MK.TS.MD_READER.copy.bind        MK.TS.MD_READER\n# stamp                     = MK.TS.MD_READER.stamp.bind       MK.TS.MD_READER\n# unstamp                   = MK.TS.MD_READER.unstamp.bind     MK.TS.MD_READER\n# select                    = MK.TS.MD_READER.select.bind      MK.TS.MD_READER\n# is_hidden                 = MK.TS.MD_READER.is_hidden.bind   MK.TS.MD_READER\n# is_stamped                = MK.TS.MD_READER.is_stamped.bind  MK.TS.MD_READER\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$main = ( S ) =>\n  S.COLUMNS ?= {}\n  #.........................................................................................................\n  return D.TEE.from_pipeline [\n    @$regions_from_commands     S\n    @$consolidate_columns       S\n    @$slash                     S\n    @$multi_column              S\n    @$single_column             S\n    ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_begin_multi_column = ( S, column_count = 2 ) =>\n  ### TAINT Column count must come from layout / options / MKTS-MD command ###\n  ### TAINT make `\\raggedcolumns` optional? ###\n  column_count ?= S.document.column_count\n  return [ 'tex', \"\\n\\n\\\\vspace{\\\\mktsLineheight}\\\\begin{multicols}{#{column_count}}\\\\raggedcolumns{}\" ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_end_multi_column = ( S, column_count = 2 ) =>\n  return [ 'tex', \"\\\\end{multicols}\\n\\n\" ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$regions_from_commands = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '!', 'multi-column'\n      [ type, name, parameters, meta, ] = event\n      send stamp hide copy event\n      send [ '(', 'multi-column', parameters, ( copy meta ), ]\n      # send stamp hide [ ')', '!',       name, ( copy meta ), ]\n    #.......................................................................................................\n    else if select event, '!', 'single-column'\n      [ type, name, parameters, meta, ] = event\n      send stamp hide copy event\n      send [ '(', 'single-column', parameters, ( copy meta ), ]\n      # send stamp hide [ ')', '!',       name, ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$consolidate_columns = ( S ) =>\n  within_multi_column   = no\n  within_single_column  = no\n  stack                 = []\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, name, parameters, meta, ] = event\n    #.......................................................................................................\n    if select event, '(', [ 'single-column', 'multi-column', ]\n      #.....................................................................................................\n      if within_single_column\n        extra_event = stack.pop()\n        send copy [ ')', 'single-column', extra_event[ 2 ], meta, ]\n        within_single_column = no\n      #.....................................................................................................\n      else if within_multi_column\n        extra_event = stack.pop()\n        send copy [ ')', 'multi-column', extra_event[ 2 ], meta, ]\n        within_multi_column = no\n    #.......................................................................................................\n    if select event, '(', 'multi-column'\n      send event\n      stack.push event\n      within_multi_column = yes\n    #.......................................................................................................\n    else if select event, '(', 'single-column'\n      send event\n      stack.push event\n      within_single_column = yes\n    #.......................................................................................................\n    else if select event, ')', 'multi-column'\n      send event\n      within_multi_column = no\n    #.......................................................................................................\n    else if select event, ')', 'single-column'\n      send event\n      within_single_column = no\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$slash = ( S ) =>\n  track   = MK.TS.MD_READER.TRACKER.new_tracker '(multi-column)'\n  remark  = MK.TS.MD_READER._get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_multi_column = track.within '(multi-column)'\n    track event\n    if select event, '!', 'slash'\n      [ type, name, text, meta, ] = event\n      send stamp event\n      if within_multi_column\n        send [ ')', 'multi-column', null, ( copy meta ), ]\n        ### TAINT consider to send MKTS macro ###\n        send [ 'tex', \"\\\\mktsEmptyLine\\n\" ]\n        send [ '(', 'multi-column', null, ( copy meta ), ]\n      else\n        send remark 'drop', \"`!slash` because not within `(multi-column)`\", ( copy meta )\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$multi_column = ( S ) =>\n  track         = MK.TS.MD_READER.TRACKER.new_tracker '(multi-column)'\n  remark        = MK.TS.MD_READER._get_remark()\n  column_count  = 1\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_multi_column = track.within '(multi-column)'\n    track event\n    #.......................................................................................................\n    if select event, [ '(', ')', ], 'multi-column'\n      send stamp event\n      [ type, name, parameters, meta, ] = event\n      column_count                      = parameters?[ 0 ] ? S.document.column_count\n      #.....................................................................................................\n      if type is '('\n        if within_multi_column\n          send remark 'drop', \"`(multi-column` because already within `(multi-column)`\", ( copy meta )\n        else\n          send track @_begin_multi_column S, column_count\n      #.....................................................................................................\n      else\n        if within_multi_column\n          send track @_end_multi_column S, column_count\n        else\n          send remark 'drop', \"`multi-column)` because not within `(multi-column)`\", ( copy meta )\n    #.......................................................................................................\n    else if select event, ')', 'document'\n      send track @_end_multi_column S, column_count if within_multi_column\n      send event\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$single_column = ( S ) =>\n  ### TAINT consider to implement command `change_column_count = ( send, n )` ###\n  track         = MK.TS.MD_READER.TRACKER.new_tracker '(multi-column)'\n  remark        = MK.TS.MD_READER._get_remark()\n  column_count  = 1\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_multi_column = track.within '(multi-column)'\n    track event\n    #.......................................................................................................\n    if select event, [ '(', ')', ], 'multi-column'\n      send event\n      [ type, name, parameters, meta, ] = event\n      column_count                      = parameters?[ 0 ] ? S.document.column_count\n    #.......................................................................................................\n    else if select event, [ '(', ')', ], 'single-column'\n      [ type, name, text, meta, ] = event\n      #.....................................................................................................\n      if type is '('\n        if within_multi_column\n          send remark 'insert', \"`multi-column)`\", copy meta\n          send track @_end_multi_column S, column_count\n          send stamp event\n        else\n          # send stamp event\n          send remark 'drop', \"`single-column` because not within `(multi-column)`\", copy meta\n      #.....................................................................................................\n      else\n        if within_multi_column\n          send stamp event\n          send remark 'insert', \"`(multi-column`\", copy meta\n          send track @_begin_multi_column S, column_count\n        else\n          send remark 'drop', \"`single-column` because not within `(multi-column)`\", copy meta\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n\n###\n\n<<(.>>@document.column_count = 3<<)>>\n\n\n<<!columns 1>>                            (single-column\n<<!columns 1>>                            (multi-column 1\n<<!columns>>                              (multi-column\n<<!columns 'push'>>\n<<!columns 'pop'>>\n<<!columns 'pop'>>\n\n\n\n\n###\n\n\n\n"]}