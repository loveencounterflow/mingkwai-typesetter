{"version":3,"sources":["HELPERS.coffee"],"names":[],"mappings":"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","file":"HELPERS.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/HELPERS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#-----------------------------------------------------------------------------------------------------------\nASYNC                     = require 'async'\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n\n# #-----------------------------------------------------------------------------------------------------------\n# @provide_tmp_folder = ( options ) ->\n#   njs_fs.mkdirSync options[ 'tmp-home' ] unless njs_fs.existsSync options[ 'tmp-home' ]\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @tmp_locator_for_extension = ( layout_info, extension ) ->\n#   tmp_home            = layout_info[ 'tmp-home' ]\n#   tex_locator         = layout_info[ 'tex-locator' ]\n#   ### TAINT should extension be sanitized? maybe just check for /^\\.?[-a-z0-9]$/? ###\n#   throw new Error \"need non-empty extension\" unless extension.length > 0\n#   extension           = \".#{extension}\" unless ( /^\\./ ).test extension\n#   return njs_path.join CND.swap_extension tex_locator, extension\n\n#-----------------------------------------------------------------------------------------------------------\n@new_layout_info = ( options, source_route ) ->\n  xelatex_command       = options[ 'xelatex-command' ]\n  source_home           = njs_path.resolve process.cwd(), source_route\n  source_name           = options[ 'main' ][ 'filename' ]\n  source_locator        = njs_path.join source_home, source_name\n  #.........................................................................................................\n  throw new Error \"unable to locate #{source_home}\"     unless njs_fs.existsSync source_home\n  throw new Error \"not a directory: #{source_home}\"     unless ( njs_fs.statSync source_home ).isDirectory()\n  throw new Error \"unable to locate #{source_locator}\"  unless njs_fs.existsSync source_locator\n  throw new Error \"not a file: #{source_locator}\"       unless ( njs_fs.statSync source_locator ).isFile()\n  #.........................................................................................................\n  # tex_locator           = njs_path.join tmp_home, CND.swap_extension source_name, '.tex'\n  job_name              = njs_path.basename source_home\n  aux_locator           = njs_path.join source_home, \"#{job_name}.aux\"\n  pdf_locator           = njs_path.join source_home, \"#{job_name}.pdf\"\n  mkscript_locator           = njs_path.join source_home, \"#{job_name}.mkscript\"\n  # tex_inputs_home       = njs_path.resolve __dirname, '..', 'tex-inputs'\n  master_name           = options[ 'master' ][ 'filename' ]\n  master_ext            = njs_path.extname master_name\n  master_locator        = njs_path.join source_home, master_name\n  content_name          = options[ 'content' ][ 'filename' ]\n  content_locator       = njs_path.join source_home, content_name\n  ### TAINT duplication: tex_inputs_home, texinputs_value ###\n  texinputs_value       = options[ 'texinputs' ][ 'value' ]\n  #.........................................................................................................\n  R =\n    'aux-locator':                aux_locator\n    'content-locator':            content_locator\n    'job-name':                   job_name\n    'master-locator':             master_locator\n    'master-name':                master_name\n    'pdf-locator':                pdf_locator\n    'mkscript-locator':           mkscript_locator\n    'source-home':                source_home\n    'source-locator':             source_locator\n    'source-name':                source_name\n    'source-route':               source_route\n    # 'tex-inputs-home':            tex_inputs_home\n    'tex-inputs-value':           texinputs_value\n    'xelatex-command':            xelatex_command\n    'xelatex-run-count':          0\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@write_pdf = ( layout_info, handler ) ->\n  #.........................................................................................................\n  job_name            = layout_info[ 'job-name'             ]\n  source_home         = layout_info[ 'source-home'          ]\n  xelatex_command     = layout_info[ 'xelatex-command'      ]\n  master_locator      = layout_info[ 'master-locator'       ]\n  aux_locator         = layout_info[ 'aux-locator'          ]\n  pdf_locator         = layout_info[ 'pdf-locator'          ]\n  last_digest         = null\n  last_digest         = CND.id_from_route aux_locator if njs_fs.existsSync aux_locator\n  digest              = null\n  count               = 0\n  texinputs_value     = layout_info[ 'tex-inputs-value' ]\n  parameters          = [ texinputs_value, source_home, job_name, master_locator, ]\n  error_lines         = []\n  urge \"#{xelatex_command}\"\n  whisper \"$#{idx + 1}: #{parameters[ idx ]}\" for idx in [ 0 ... parameters.length ]\n  log \"#{xelatex_command} #{parameters.join ' '}\"\n  #.........................................................................................................\n  pdf_from_tex = ( next ) =>\n    count += 1\n    urge \"run ##{count}\"\n    # CND.spawn xelatex_command, parameters, ( error, data ) =>\n    cp = ( require 'child_process' ).spawn xelatex_command, parameters\n    #.......................................................................................................\n    cp.stdout\n      .pipe D.$split()\n      .pipe D.$observe ( line ) =>\n        echo CND.grey line\n    #.......................................................................................................\n    cp.stderr\n      .pipe D.$split()\n      .pipe D.$observe ( line ) =>\n        error_lines.push line\n        echo CND.red line\n    #.......................................................................................................\n    cp.on 'close', ( error ) =>\n      error = undefined if error is 0\n      if error?\n        alert error\n        return handler error\n      if error_lines.length > 0\n        ### TAINT looks like we're getting empty lines on stderr? ###\n        message = ( line for line in error_lines when line.length > 0 ).join '\\n'\n        if message.length > 0\n          alert message\n          return handler message\n      digest = CND.id_from_route aux_locator\n      if digest is last_digest\n        echo ( CND.grey badge ), CND.lime \"done.\"\n        layout_info[ 'xelatex-run-count' ] = count\n        ### TAINT move pdf to layout_info[ 'source-home' ] ###\n        handler null\n      else\n        last_digest = digest\n        next()\n  #.........................................................................................................\n  ASYNC.forever pdf_from_tex\n\n"]}