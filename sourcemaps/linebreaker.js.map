{"version":3,"sources":["linebreaker.coffee"],"names":[],"mappings":"AAKA;AAAA,MAAA;;EAAA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC,GAAG,CAAC,IAAR,CAAa,GAAb;;EAC5B,KAAA,GAA4B;;EAE5B,QAAA,GAA4B,OAAA,CAAQ,IAAR;;EAU5B,IAAC,CAAA,WAAD,GAAe,SAAE,IAAF,EAAQ,QAAR;AACb,QAAA;IAAA,IAAA,GAAkB,IAAI,CAAC,OAAL,CAAa,KAAb,EAAoB,GAApB;IAClB,aAAA,GAAkB;IAClB,WAAA,+EAAgD;IAChD,IAAA,0EAAgD;IAChD,QAAA,8EAAgD;IAChD,IAAsD,QAAtD;AAAA,YAAU,IAAA,KAAA,CAAM,kCAAN,EAAV;;IACA,UAAA,gFAAgD;IAChD,OAAA,GAAqB,UAAH,GAAmB,OAAnB,GAAgC;IAElD,IAAG,IAAH;MACE,MAAA,GAAS,IAAI,CAAC,KAAL,CAAW,wCAAX;MACT,CAAA;;AAAM;aAAA,wCAAA;;cAA+B,KAAA,KAAW;yBAA1C;;AAAA;;WAFR;KAAA,MAAA;MAKE,YAAA,GAAsB,IAAA,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAA,CAAwB,IAAxB;MACtB,CAAA,GAAkB;AAElB,aAAM,UAAA,GAAa,YAAY,CAAC,SAAb,CAAA,CAAnB;QACI,sBAAA,QAAF,EAAY,sBAAA;QAEZ,IAAG,WAAA,IAAgB,uBAAnB;UAAwC,IAAA,GAAO,IAAM,2CAArD;SAAA,MAAA;UACwC,IAAA,GAAO,IAAoB,+BADnE;;QAEA,aAAA,GAAgB;QAChB,IAAG,UAAH;AACE;AAAA,eAAA,sCAAA;;gBAAsD,OAAO,CAAC,MAAR,GAAiB;cAAvE,CAAC,CAAC,IAAF,CAAO,OAAP;;AAAA,WADF;SAAA,MAAA;UAGE,CAAC,CAAC,IAAF,CAAO,IAAP,EAHF;;MANF,CARF;;AAmBA,WAAO;EA7BM;AAdf","file":"linebreaker.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'MKTS/LINEBREAKER'\n#...........................................................................................................\nHOTMETAL                  = require '..'\n# #...........................................................................................................\n# D                         = require 'pipedreams'\n# $                         = D.remit.bind D\n\n\n\n#===========================================================================================================\n# UNICODE LINE BREAKING\n#-----------------------------------------------------------------------------------------------------------\n@fragmentize = ( text, settings ) ->\n  text            = text.replace /\\n/g, ' '\n  last_position   = null\n  incremental     = settings?[ 'incremental'  ] ? yes\n  chrs            = settings?[ 'chrs'         ] ? no\n  extended        = settings?[ 'extended'     ] ? no\n  throw new Error \"setting `extended` not supported\" if extended\n  whitespace      = settings?[ 'whitespace'   ] ? no\n  matcher         = if whitespace then /(\\s+)/ else null\n  #.........................................................................................................\n  if chrs\n    shreds = text.split /// ( (?: [  \\ud800-\\udbff ] [ \\udc00-\\udfff ] ) | . ) ///\n    R = ( shred for shred in shreds when shred isnt '' )\n  #.........................................................................................................\n  else\n    line_breaker    = new ( require 'linebreak' ) text\n    R               = []\n    #.......................................................................................................\n    while breakpoint = line_breaker.nextBreak()\n      { position, required, } = breakpoint\n      #.....................................................................................................\n      if incremental and last_position? then  part = text[ last_position ... breakpoint.position ]\n      else                                    part = text[               ... breakpoint.position ]\n      last_position = position\n      if whitespace\n        R.push subpart for subpart in part.split matcher when subpart.length > 0\n      else\n        R.push part\n  #.......................................................................................................\n  return R\n\n# #===========================================================================================================\n# # STREAMING & PIPING\n# #-----------------------------------------------------------------------------------------------------------\n# @$break_lines = ( settings ) ->\n#   #.........................................................................................................\n#   return $ ( text, send ) =>\n#     send @HOTMETAL.break_lines text, settings\n\n"]}