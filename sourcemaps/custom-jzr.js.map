{"version":3,"sources":["custom-jzr.coffee"],"names":[],"mappings":"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","file":"custom-jzr.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'mkts/custom-jzr'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\n# ASYNC                     = require 'async'\n#...........................................................................................................\n# ƒ                         = CND.format_number.bind CND\n# HELPERS                   = require './helpers'\n# TEXLIVEPACKAGEINFO        = require './texlivepackageinfo'\n# options_route             = '../options.coffee'\n# { CACHE, OPTIONS, }       = require './options'\n# SEMVER                    = require 'semver'\n#...........................................................................................................\nXNCHR                     = require './xnchr'\n# MKTS                      = require './main'\n# MKTSCRIPT_WRITER          = require './mktscript-writer'\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nunstamp                   = MD_READER.unstamp.bind     MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\n# MACRO_ESCAPER             = require './macro-escaper'\n# LINEBREAKER               = require './linebreaker'\nHOLLERITH                 = require '../../hollerith'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$main = ( S ) =>\n  db_route        = njs_path.resolve __dirname, '../../jizura-datasources/data/leveldb-v2'\n  S.JZR          ?= {}\n  S.JZR.db       ?= HOLLERITH.new_db db_route, create: no\n  #.........................................................................................................\n  return D.TEE.from_pipeline [\n    @$fontlist                                    S\n    #.......................................................................................................\n    @$most_frequent.with_fncrs.$rewrite_events    S\n    @$dump_db                                     S\n    @$most_frequent.$read                         S\n    @$most_frequent.$assemble                     S\n    @$most_frequent.$details_from_glyphs          S\n    @$most_frequent.with_fncrs.$format            S\n    @$most_frequent.with_fncrs.$assemble          S\n    @$dump_db.$format                             S\n    ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$fontlist = ( S ) =>\n  kaishu_shortnames = [\n    'Fandolkairegular'\n    'Kai'\n    'Ukai'\n    'Epkaisho'\n    'Cwtexqkaimedium'\n    'Biaukai'\n    ]\n  kana_shortnames = [\n    'Babelstonehan'\n    'Cwtexqfangsongmedium'\n    'Cwtexqheibold'\n    'Cwtexqkaimedium'\n    'Cwtexqmingmedium'\n    'Cwtexqyuanmedium'\n    'Hanamina'\n    'Sunexta'\n    'Kai'\n    'Nanumgothic'\n    'Nanummyeongjo'\n    'Simsun'\n    'Fandolfangregular'\n    'Fandolheibold'\n    'Fandolheiregular'\n    'Fandolkairegular'\n    'Fandolsongbold'\n    'Fandolsongregular'\n    'Ipaexg'\n    'Ipaexm'\n    'Ipag'\n    'Ipagp'\n    'Ipam'\n    'Ipamp'\n    'Ipaexg'\n    'Ipaexm'\n    'Ipag'\n    'Ipagp'\n    'Ipam'\n    'Ipamp'\n    'Ukai'\n    'Uming'\n    'Droidsansfallbackfull'\n    'Droidsansjapanese'\n    'Fontsjapanesegothic'\n    'Fontsjapanesemincho'\n    'Takaopgothic'\n    'Sourcehansansbold'\n    'Sourcehansansextralight'\n    'Sourcehansansheavy'\n    'Sourcehansanslight'\n    'Sourcehansansmedium'\n    'Sourcehansansnormal'\n    'Sourcehansansregular'\n    ]\n  #.........................................................................................................\n  template = \"\"\"\n    ($shortname) {\\\\($texname){\\\\cjk\\\\($texname){}ぁあぃいぅうぇえぉおかがきぎく\n    ぐけげこごさざしじすずせぜそぞた\n    だちぢっつづてでとどなにぬねのは\n    ばぱひびぴふぶぷへべぺほぼぽまみ\n    むめもゃやゅゆょよらりるれろゎわ\n    ゐゑをんゔゕゖァアィイゥウェエォオカガキギク\n    グケゲコゴサザシジスズセゼソゾタ\n    ダチヂッツヅテデトドナニヌネノハ\n    バパヒビピフブプヘベペホボポマミ\n    ムメモャヤュユョヨラリルレロヮワ\n    ヰヱヲンヴヵヶヷヸヹヺ\n    本书使用的数字，符号一览表}\n    AaBbCcDdEeFfghijklmn}\n    \"\"\"\n  #.........................................................................................................\n  template = \"\"\"\n    This is {\\\\cjk\\\\($texname){}むず·かしい} so very {\\\\cjk\\\\($texname){}ムズ·カシイ} indeed.\n    \"\"\"\n  #.........................................................................................................\n  template = \"\"\"\n    XXX{\\\\($texname){}·}XXX\n    \"\"\"\n  #.........................................................................................................\n  template = \"\"\"\n    The character {\\\\cjk{}出} {\\\\($texname){}u{\\\\mktsFontfileEbgaramondtwelveregular{}·}cjk{\\\\mktsFontfileEbgaramondtwelveregular{}·}51fa} means '{\\\\mktsStyleItalic{}go out, send out, stand, produce}'.\n    \"\"\"\n  #.........................................................................................................\n  template = \"\"\"\n    {\\\\($texname){}出 、出。出〃出〄出々出〆出〇出〈出〉出《出》出「出」出}\\\\\\\\\n    \\\\> {\\\\($texname){}出『出』出【出】出〒出〓出〔出〕出〖出〗出〘出〙出〚出}\n    \"\"\"\n  #.........................................................................................................\n  template = \"\"\"\n    {\\\\($texname){}abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ}\n    \"\"\"\n  #.........................................................................................................\n  template = \"\"\"\n    {\\\\($texname){\\\\cjk\\\\($texname){}本书使用的数字，符号一览表書覽} AaBbCcDdEeFfghijklmnopqrstuvwxyz}\n    \"\"\"\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '!', 'JZR.fontlist'\n      send stamp event\n      #.....................................................................................................\n      send [ 'tex', \"\\\\begin{tabbing}\\n\" ]\n      send [ 'tex', \"\\\\phantom{XXXXXXXXXXXXXXXXXXXXXXXXX} \\\\= \\\\phantom{XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX} \\\\\\\\\\n\" ]\n      #.....................................................................................................\n      for { texname, } in S.options[ 'fonts' ][ 'files' ]\n        shortname = texname.replace /^mktsFontfile/, ''\n        # continue unless shortname in kana_shortnames\n        raw       = template\n        raw       = raw.replace /\\(\\$texname\\)/g,    texname\n        raw       = raw.replace /\\(\\$shortname\\)/g,  shortname\n        # send [ '.', 'text', \"#{shortname}\\\\\\\\\\n\", ]\n        send [ 'tex', \"#{shortname} \\\\> #{raw} \\\\\\\\\\n\", ]\n      #.....................................................................................................\n      send [ 'tex', \"\\\\end{tabbing}\\n\" ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$most_frequent             = {}\n@$most_frequent.with_fncrs  = {}\n\n#-----------------------------------------------------------------------------------------------------------\n@$most_frequent.with_fncrs.$rewrite_events = ( S ) =>\n  return $ ( event, send ) =>\n    if select event, '!', 'JZR.most_frequent.with_fncrs'\n      [ _, _, parameters, meta ]    = event\n      meta[ 'jzr' ]?=                 {}\n      meta[ 'jzr' ][ 'group-name' ] = 'glyphs-with-fncrs'\n      send [ '!', 'JZR.most_frequent', parameters, meta, ]\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$most_frequent.$read = ( S ) =>\n  HOLLERITH_DEMO  = require '../../hollerith/lib/demo'\n  defaults        =\n    n:            100\n    group_name:   'glyphs'\n  #.........................................................................................................\n  return D.remit_async_spread ( event, send ) =>\n    return send.done event unless select event, '!', 'JZR.most_frequent'\n    [ type, name, [ n ], meta, ]  = event\n    n                            ?= defaults.n\n    group_name                    = meta[ 'jzr' ]?[ 'group-name' ] ? defaults.group_name\n    #.......................................................................................................\n    step ( resume ) =>\n      #.....................................................................................................\n      try\n        glyphs = yield HOLLERITH_DEMO.read_sample S.JZR.db, n, resume\n      #.....................................................................................................\n      catch error\n        warn error\n        return send.error error\n      #.....................................................................................................\n      send stamp event\n      glyphs = Object.keys glyphs\n      send [ '(', group_name, null, ( copy meta ), ]\n      for glyph in glyphs\n        send [ '.', 'glyph', glyph, ( copy meta ), ]\n      send [ ')', group_name, null, ( copy meta ), ]\n      send.done()\n\n#-----------------------------------------------------------------------------------------------------------\n@$most_frequent.$assemble = ( S ) =>\n  track = MD_READER.TRACKER.new_tracker '(glyphs)'\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_glyphs = track.within '(glyphs)'\n    track event\n    #.......................................................................................................\n    if select event, '(', 'glyphs'\n      send stamp event\n    #.......................................................................................................\n    else if within_glyphs and select event, '.', 'glyph'\n      # glyphs = ( ( if idx % 40 is 0 then \"#{glyph}\\n\" else glyph ) for glyph, idx in glyphs )\n      # glyphs = glyphs. join ''\n      [ _, _, glyph, meta, ] = event\n      send [ '.', 'text', glyph, ( copy meta ), ]\n    #.......................................................................................................\n    else if select event, ')', 'glyphs'\n      send stamp event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$most_frequent.$details_from_glyphs = ( S ) =>\n  # track     = MD_READER.TRACKER.new_tracker '(glyphs-with-fncrs)'\n  HOLLERITH = require '../../hollerith'\n  #.........................................................................................................\n  return D.remit_async_spread ( event, send ) =>\n    # within_glyphs = track.within '(glyphs-with-fncrs)'\n    # track event\n    #.......................................................................................................\n    if select event, '.', 'glyph'\n      [ _, _, glyph, meta, ]  = event\n      prefix                  = [ 'spo', glyph, ] # 'cp/sfncr'\n      HOLLERITH.read_phrases S.JZR.db, { prefix, }, ( error, phrases ) =>\n        details = { glyph, }\n        for phrase in phrases\n          [ _, _, prd, obj, ] = phrase\n          details[ prd ] = obj\n        send [ '.', 'details', details, ( copy meta ), ]\n        send.done()\n    #.......................................................................................................\n    else\n      send.done event\n\n#-----------------------------------------------------------------------------------------------------------\n@$most_frequent.with_fncrs.$format = ( S ) =>\n  track         = MD_READER.TRACKER.new_tracker '(glyphs-with-fncrs)'\n  this_glyph    = null\n  reading_keys  = [ 'reading/py', 'reading/hg', 'reading/ka', 'reading/hi', ]\n  has_readings  = ( x ) -> ( CND.isa_list x ) and ( x.length > 0 )\n  has_gloss     = ( x ) -> ( CND.isa_text x ) and ( x.length > 0 )\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_glyphs   = track.within '(glyphs-with-fncrs)'\n    track event\n    #.......................................................................................................\n    if within_glyphs and select event, '.', 'details'\n      [ _, _, details, meta, ]  = event\n      #.....................................................................................................\n      for prd in reading_keys\n        #...................................................................................................\n        if has_readings ( readings = details[ prd ] )\n          if prd in [ 'reading/ka', 'reading/hi', ]\n            readings = ( reading.replace /-/g, '⋯' for reading in readings )\n          details[ prd ] = readings.join ', \\n'\n      #.....................................................................................................\n      if has_gloss ( gloss = details[ 'reading/gloss' ] )\n        details[ 'reading/gloss' ]  = gloss.replace /;/g, ','\n      #.....................................................................................................\n      send event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$most_frequent.with_fncrs.$assemble = ( S ) =>\n  track       = MD_READER.TRACKER.new_tracker '(glyphs-with-fncrs)'\n  this_glyph  = null\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_glyphs   = track.within '(glyphs-with-fncrs)'\n    track event\n    #.......................................................................................................\n    if select event, '(', 'glyphs-with-fncrs'\n      [ _, _, this_glyph, _, ] = event\n      send stamp event\n      send [ 'tex', '{\\\\setlength\\\\parskip{0mm}\\n', ]\n    #.......................................................................................................\n    else if select event, ')', 'glyphs-with-fncrs'\n      this_glyph = null\n      send stamp event\n      send [ 'tex', '}\\n\\n']\n    #.......................................................................................................\n    else if within_glyphs and select event, '.', 'details'\n      [ _, _, details, meta, ] = event\n      send [ 'tex', \"\\\\begin{tabular}{ | @{} p{20mm} @{} | @{} l @{} | @{} p{1mm} @{} | @{} p{60mm} @{} | }\\n\", ]\n      # send [ 'tex', \"\\\\begin{tabular}{ | @{} l @{} | @{} p{1mm} @{} | @{} p{60mm} @{} | }\\n\", ]\n      #.....................................................................................................\n      # GUIDES\n      #.....................................................................................................\n      value = details[ 'guide/kwic/v3/sortcode' ]\n      # if value? and value.length > 0\n      value = value[ 0 ]\n      # [ [ '1293f---', '1217f---', null ], '女', [ '子' ], [] ]\n      [ _, infix, suffix, prefix, ] = value\n      unless prefix.length is 0\n        throw new Error \"expected empty prefix, got #{glyph} #{rpr value}\"\n      # send [ 'tex', \"{\\\\mktsStyleGuides{}\", ]\n      value = infix + suffix.join ''\n      send [ '.', 'text', value, ( copy meta ), ]\n      # send [ 'tex', \"}\", ]\n      #.....................................................................................................\n      send [ 'tex', \" & \", ]\n      #.....................................................................................................\n      # MIDASHI\n      #.....................................................................................................\n      glyph = details[ 'glyph' ]\n      send [ 'tex', \"{\\\\mktsStyleMidashi{}\\\\sbSmash{\", ]\n      send [ '.', 'text', \"#{glyph}\", ( copy meta ), ]\n      send [ 'tex', \"}}\", ]\n      #.....................................................................................................\n      send [ 'tex', \" & \", ]\n      #.....................................................................................................\n      # STRUT\n      #.....................................................................................................\n      send [ 'tex', \"{\\\\color{white} | |}\", ]\n      #.....................................................................................................\n      send [ 'tex', \" & \", ]\n      #.....................................................................................................\n      value = details[ 'formula' ]\n      if value? and value.length > 0\n        value = value[ 0 ]\n        # send [ 'tex', \"{\\\\mktsStyleFormula{}\", ]\n        send [ '.', 'text', value, ( copy meta ), ]\n        # send [ 'tex', \"} \", ]\n      #.....................................................................................................\n      value = details[ 'cp/fncr' ]\n      value = value.replace /-/g, '·'\n      send [ 'tex', \"{\\\\mktsStyleFncr{}\", ]\n      send [ '.', 'text', value, ( copy meta ), ]\n      send [ 'tex', \"}\\n\", ]\n      #.....................................................................................................\n      count = 0\n      for key in [ 'reading/py', 'reading/hg', 'reading/ka', 'reading/hi', 'reading/gloss', ]\n        value     = details[ key ]\n        continue unless value?\n        value_txt = if CND.isa_text value then value else rpr value\n        text      = \"#{value_txt}\"\n        send [ '.', 'text', '; \\n', ( copy meta ), ] unless count is 0\n        send [ 'tex', \"{\\\\mktsStyleGloss{}\", ]  if key is 'reading/gloss'\n        send [ '.', 'text', text, ( copy meta ), ]\n        send [ 'tex', \"}\", ]                    if key is 'reading/gloss'\n        count += +1\n      send [ '.', 'text', '.', ( copy meta ), ] unless count is 0\n      #.....................................................................................................\n      if ( value = details[ 'variant' ] )?\n        value = value.join ''\n        send [ '.', 'text', \" #{value}\", ( copy meta ), ]\n      #.....................................................................................................\n      send [ 'tex', \"\\\\\\\\\\n\\\\hline\\n\", ]\n      send [ 'tex', \"\\\\end{tabular}\\n\", ]\n      send [ '.', 'p', null, ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$dump_db = ( S ) =>\n  return $ ( event, send ) =>\n    if select event, '!', 'JZR.dump_db'\n      [ _, _, parameters, meta ]    = event\n      [ settings ] = parameters\n      # send [ '.', 'text', ( rpr settings ), ( copy meta ), ]\n      if ( glyphs = settings[ 'glyphs' ] )?\n        glyphs  = XNCHR.chrs_from_text glyphs if CND.isa_text glyphs\n        tasks   = []\n        send [ '(', 'dump-db', glyphs, ( copy meta ), ]\n        send [ '.', 'glyph', glyph, ( copy meta ), ] for glyph in glyphs\n        send [ ')', 'dump-db', glyphs, ( copy meta ), ]\n      else\n        send [ '.', 'warning', \"expected setting 'glyphs' in call to `JZR.dump_db`\", ( copy meta ), ]\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$dump_db.$format = ( S ) =>\n  track     = MD_READER.TRACKER.new_tracker '(dump-db)'\n  excludes  = [\n    'guide/kwic/v1/lineup/wrapped/infix'\n    'guide/kwic/v1/lineup/wrapped/prefix'\n    'guide/kwic/v1/lineup/wrapped/single'\n    'guide/kwic/v1/lineup/wrapped/suffix'\n    'guide/kwic/v1/sortcode'\n    'guide/kwic/v2/lineup/wrapped/single'\n    'guide/kwic/v2/sortcode'\n    ]\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_dumpdb = track.within '(dump-db)'\n    track event\n    #.......................................................................................................\n    if within_dumpdb and select event, '.', 'details'\n      [ _, _, details, meta, ]  = event\n      send stamp event\n      { glyph } = details\n      delete details[ 'glyph' ]\n      last_idx  = ( Object.keys details ).length - 1\n      idx       = -1\n      #.....................................................................................................\n      # send [ '(', 'h', 3, ( copy meta ), ]\n      send [ '.', 'p', null, ( copy meta ), ]\n      send [ '.', 'text', \"Details for Glyph #{glyph} #{details[ 'cp/fncr' ]}\", ( copy meta ), ]\n      send [ '.', 'p', null, ( copy meta ), ]\n      #.....................................................................................................\n      for predicate, value of details\n        idx += +1\n        continue if predicate in excludes\n        value_txt = JSON.stringify value, null, ' '\n        send [ 'tex', \"\\\\begin{tabular}{ | p{30mm} | p{129mm} | }\\n\", ]\n        send [ 'tex', \"\\\\hline\\n\", ] if idx is 0\n        send [ 'tex', \"{\\\\mktsStyleFontUrl{}\", ]\n        send [ '.', 'text', \"#{predicate}\", ( copy meta ), ]\n        send [ 'tex', \"}\", ]\n        send [ 'tex', \" & \", ( copy meta ), ]\n        send [ '.', 'text', \"#{value_txt}\", ( copy meta, 'typofix': 'escape-ncrs' ), ]\n        send [ 'tex', \"\\\\\\\\\\n\", ( copy meta ), ]\n        send [ 'tex', \"\\\\hline\\n\", ] if idx is last_idx\n        send [ 'tex', \"\\\\end{tabular}\\n\", ]\n      #.....................................................................................................\n      send [ '.', 'p', null, ( copy meta ), ]\n    #.......................................................................................................\n    else if select event, '(', 'dump-db'\n      send stamp event\n    #.......................................................................................................\n    else if select event, ')', 'dump-db'\n      send stamp event\n    #.......................................................................................................\n    else\n      send event\n\n\n\n\n\n\n\n\n\n\n\n"]}