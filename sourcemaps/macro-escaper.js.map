{"version":3,"sources":["macro-escaper.coffee"],"names":[],"mappings":"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","file":"macro-escaper.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\n# njs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/MACROS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#-----------------------------------------------------------------------------------------------------------\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n# $async                    = D.remit_async.bind D\n#...........................................................................................................\n# Markdown_parser           = require 'markdown-it'\n# # Html_parser               = ( require 'htmlparser2' ).Parser\n# new_md_inline_plugin      = require 'markdown-it-regexp'\n#...........................................................................................................\n# HELPERS                   = require './HELPERS'\n#...........................................................................................................\n# misfit                    = Symbol 'misfit'\nMKTS                      = require './main'\n# hide                      = MKTS.hide.bind        MKTS\n# copy                      = MKTS.MD_READER.copy.bind        MKTS\n# stamp                     = MKTS.stamp.bind       MKTS\n# select                    = MKTS.MD_READER.select.bind      MKTS\n# is_hidden                 = MKTS.is_hidden.bind   MKTS\n# is_stamped                = MKTS.is_stamped.bind  MKTS\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\n@initialize_state = ( state ) =>\n  state[ 'MACRO_ESCAPER' ] =\n    registry:   []\n  return state\n\n#-----------------------------------------------------------------------------------------------------------\n@_match_first = ( patterns, text ) =>\n  for pattern in patterns\n    return R if ( R = text.match pattern )?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_register_content = ( S, kind, markup, raw, parsed = null ) =>\n  registry  = S[ 'MACRO_ESCAPER' ][ 'registry' ]\n  idx     = registry.length\n  key     = \"#{kind}#{idx}\"\n  registry.push { key, markup, raw, parsed, }\n  return key\n\n#-----------------------------------------------------------------------------------------------------------\n@_retrieve_entry = ( S, id ) =>\n  throw new Error \"unknown ID #{rpr id}\" unless ( R = S[ 'MACRO_ESCAPER' ][ 'registry' ][ id ] )?\n  return R\n\n#===========================================================================================================\n# PATTERNS\n#-----------------------------------------------------------------------------------------------------------\n@PATTERNS = {}\n\n#-----------------------------------------------------------------------------------------------------------\n@html_comment_patterns = [\n  ///                           # HTML comments...\n    ( ^ | [^\\\\] )               # may be escaped with a backslash (NB: unlike as in HTML proper);\n    <!--                        # the start with less-than, exclamation mark, double hyphen;\n    ( [ \\s\\S ]*? )              # then: anything, not-greedy, until we hit upon\n    -->                         # a double-slash, then greater-than.\n    ///g                        # (NB: end-of-comment cannot be escaped, because HTML).\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@action_patterns = [\n  ///                           # A silent or vocal action macro...\n                                #\n                                # Start Tag\n                                # =========\n  ( ^ | [^ \\\\ ] )               # starts either at the first chr or a chr other than backslash\n  <<\\(                          # then: two left pointy brackets, then: left round bracket,\n    ( [ . : ] )                 # then: a dot or a colon;\n    (\n      (?:                       # then:\n        \\\\>                |    #   or: an escaped right pointy bracket (RPB)\n        [^ > ]             |    #   or: anything but a RPB\n        > (?! > )               #   or: a RPB not followed by yet another RPB\n      )*                        # repeated any number of times\n    )\n    >>                          # then: two RPBs...\n                                #\n                                # Content\n                                # =========\n                                # Empty content.\n                                #\n                                # Stop Tag\n                                # =========\n  () <<                         # (then: an empty group; see below), then: two left pointy brackets,\n    ( (?: \\2 \\3 )? )            # then: optionally, whatever appeared in the start tag,\n    \\)>>                        # then: right round bracket, then: two RPBs.\n  ///g\n  ,                             #...........................................................................\n  ///                           # Alternatively (non-empty content):\n                                #\n                                # Start Tag\n                                # =========\n  ( ^ | [^ \\\\ ] )               # starts either at the first chr or a chr other than backslash\n  <<\\(                          # then: two left pointy brackets, then: left round bracket,\n    ( [ . : ] )                 # then: a dot or a colon;\n    (\n      (?:                       # then:\n        \\\\>                |    #   or: an escaped right pointy bracket (RPB)\n        [^ > ]             |    #   or: anything but a RPB\n        > (?! > )               #   or: a RPB not followed by yet another RPB\n      )*                        # repeated any number of times\n    )\n    >>                          # then: two RPBs...\n                                #\n                                # Content\n                                # =========\n    (\n      (?:                       # ...followed by content, which is:\n        \\\\<                |    #   or: an escaped left pointy bracket (LPB)\n        [^ < ]             |    #   or: anything but a LPB\n        < (?! < )               #   or: a LPB not followed by yet another LPB\n        )*                      # repeated any number of times\n      [^ \\\\ ]                   # then: a character other than a backslash,\n      )\n                                #\n                                # Stop Tag\n                                # =========\n  <<                            # then: two left pointy brackets,\n    ( (?: \\2 \\3 )? )            # then: optionally, whatever appeared in the start tag,\n    \\)>>                        # then: right round bracket, then: two RPBs.\n  ///g\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@region_patterns = [\n  ///                           # A region macro tag...\n                                #\n                                # Start Tag\n                                # =========\n  ( ^ | [^ \\\\ ] )               # starts either at the first chr or a chr other than backslash\n  <<                            # then: two left pointy brackets\n  ( \\( )                        # then: left round bracket,\n    (                           #\n      (?:                       # then:\n        \\\\>                |    #   or: an escaped right pointy bracket (RPB)\n        [^ > ]             |    #   or: anything but a RPB\n        > (?! > )               #   or: a RPB not followed by yet another RPB\n      )*                        # repeated any number of times\n    )\n    ()                          # then: empty group for no markup here\n    >>                          # then: two RPBs.\n  ///g\n  ,\n  ///                           # Stop Tag\n                                # ========\n                                #\n  ( ^ | [^ \\\\ ] )               # starts either at the first chr or a chr other than backslash\n  <<                            # then: two left pointy brackets\n    ()                          # then: empty group for no markup here\n    ( |                         #\n      [^ . : \\\\ ]\n      (?:                       # then:\n        \\\\>                |    #   or: an escaped right pointy bracket (RPB)\n        [^ > ]             |    #   or: anything but a RPB\n        > (?! > )               #   or: a RPB not followed by yet another RPB\n      )*                        # repeated any number of times\n    )\n    ( \\) )                      # a right round bracket;\n    >>                          # then: two RPBs.\n  ///g\n  ]\n\n# debug '234652', @action_patterns\n# debug \"abc<<(:js>>4 + 3<<:js)>>def\".match @action_patterns[ 0 ]\n# process.exit()\n\n#-----------------------------------------------------------------------------------------------------------\n@bracketed_raw_patterns = [\n  ///                           # A bracketed raw macro\n  ( ^ | [^ \\\\ ] )               # starts either at the first chr or a chr other than backslash\n  <<(<)                         # then: three left pointy brackets,\n    (\n      (?:                       # then:\n        \\\\>                |    #   or: an escaped right pointy bracket (RPB)\n        [^ > ]             |    #   or: anything but a RPB\n        >{1,2} (?! > )          #   or: one or two RPBs not followed by yet another RPB\n      )*                        # repeated any number of times\n    )\n    >>>                         # then: three RPBs.\n  ///g\n  ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @raw_heredoc_pattern  = ///\n#   ( ^ | [^\\\\] ) <<! raw: ( [^\\s>]* )>> ( .*? ) \\2\n#   ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@command_and_value_patterns = [\n  ///                           # A command macro\n  ( ^ | [^ \\\\ ] )               # starts either at the first chr or a chr other than backslash\n  <<                            # then: two left pointy brackets,\n    ( [ ! $ ] )                 # then: an exclamation mark or a dollar sign,\n    (\n      (?:                       # then:\n        \\\\>                |    #   or: an escaped right pointy bracket (RPB)\n        [^ > ]             |    #   or: anything but a RPB\n        > (?! > )               #   or: a RPB not followed by yet another RPB\n      )*                        # repeated any number of times\n    )\n    >>                          # then: two RPBs.\n  ///g\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n### NB The end command macro looks like any other command except we can detect it with a much simpler\nRegEx; we want to do that so we can, as a first processing step, remove it and any material that appears\nafter it, thereby inhibiting any processing of those portions. ###\n@end_command_patterns = [\n  ///                           # Then end command macro\n  ( ^ |                         # starts either at the first chr\n    ^ [ \\s\\S ]+? [^ \\\\ ] )      # or a minimal number of chrs whose last one is not a backslash\n  <<!end>>                      # then: the `<<!end>>` literal.\n  ///                           # NB that this pattern is not global.\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@illegal_patterns = [\n  ///                           # After applying all other macro patterns, treat as error: pattern that\n  ( ^ | [^ \\\\ ] )               # starts either at the first chr or a chr other than backslash\n  ( << | >> )                   # then: either two left or two right pointy brackets.\n  ///g\n  ]\n\n#===========================================================================================================\n# ESCAPING\n#-----------------------------------------------------------------------------------------------------------\n@escape = ( S, text ) =>\n  # debug '©II6XI', rpr text\n  [ R, discard_count, ] = @escape.truncate_text_at_end_command_macro S, text\n  whisper \"detected <<!end>> macro; discarding approx. #{discard_count} characters\" if discard_count > 0\n  R = @escape.escape_chrs               S, R\n  R = @escape.html_comments             S, R\n  R = @escape.bracketed_raw_macros      S, R\n  R = @escape.action_macros             S, R\n  R = @escape.region_macros             S, R\n  R = @escape.command_and_value_macros  S, R\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.truncate_text_at_end_command_macro = ( S, text ) =>\n  return [ text, 0, ] unless ( match = @_match_first @end_command_patterns, text )?\n  R = match[ 1 ]\n  # urge '©ΣΩΗΔΨ', rpr R\n  return [ R, text.length - R.length, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.escape_chrs = ( S, text ) =>\n  R = text\n  R = R.replace /\\x10/g, '\\x10A'\n  R = R.replace /\\x15/g, '\\x10X'\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.unescape_escape_chrs = ( S, text ) =>\n  R = text\n  R = R.replace /\\x10X/g, '\\x15'\n  R = R.replace /\\x10A/g, '\\x10'\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.html_comments = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  for pattern in @html_comment_patterns\n    R = R.replace pattern, ( _, previous_chr, content ) =>\n      key = @_register_content S, 'comment', null, content, content.trim()\n      return \"#{previous_chr}\\x15#{key}\\x13\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.bracketed_raw_macros = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  for pattern in @bracketed_raw_patterns\n    R = R.replace pattern, ( _, previous_chr, markup, content ) =>\n      id = @_register_content S, 'raw', markup, content\n      return \"#{previous_chr}\\x15#{id}\\x13\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.action_macros = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  for pattern in @action_patterns\n    R = R.replace pattern, ( _, previous_chr, markup, identifier, content, stopper ) =>\n      # debug '©ΛΨ actions', ( rpr text ), [ previous_chr, markup, identifier, content, stopper, ]\n      mode      = if markup is '.' then 'silent' else 'vocal'\n      language  = identifier\n      language  = 'coffee' if language is ''\n      ### TAINT not using arguments peoperly ###\n      id        = @_register_content S, 'action', [ mode, language, ], content\n      return \"#{previous_chr}\\x15#{id}\\x13\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.region_macros = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  for pattern in @region_patterns\n    R = R.replace pattern, ( _, previous_chr, start_markup, identifier, stop_markup ) =>\n      # debug '©ΛΨ regions', ( rpr text ), [ previous_chr, markup, identifier, content, stopper, ]\n      markup  = if start_markup.length is 0 then stop_markup else start_markup\n      id      = @_register_content S, 'region', markup, identifier\n      return \"#{previous_chr}\\x15#{id}\\x13\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.command_and_value_macros = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  for pattern in @command_and_value_patterns\n    R = R.replace pattern, ( _, previous_chr, markup, content ) =>\n      kind            = if markup is '!' then 'command' else 'value'\n      key             = @_register_content S, kind, markup, content, null\n      return \"#{previous_chr}\\x15#{key}\\x13\"\n  #.........................................................................................................\n  return R\n\n\n#===========================================================================================================\n# EXPANDING\n#-----------------------------------------------------------------------------------------------------------\n@raw_id_pattern = ///\n  \\x15 raw ( [ 0-9 ]+ ) \\x13\n  ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@html_comment_id_pattern = ///\n  \\x15 comment ( [ 0-9 ]+ ) \\x13\n  ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@action_id_pattern = ///\n  \\x15 action ( [ 0-9 ]+ ) \\x13\n  ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@region_id_pattern = ///\n  \\x15 region ( [ 0-9 ]+ ) \\x13\n  ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@command_and_value_id_pattern = ///\n  \\x15 (?: command | value ) ( [ 0-9 ]+ ) \\x13\n  ///g\n\n\n#===========================================================================================================\n# EXPANDERS\n#-----------------------------------------------------------------------------------------------------------\n@$expand = ( S ) ->\n  pipeline = [\n    @$expand_command_and_value_macros   S\n    @$expand_region_macros              S\n    @$expand_action_macros              S\n    @$expand_raw_macros                 S\n    @$expand_html_comments              S\n    @$expand_escape_chrs                S\n    @$expand_escape_illegals            S\n    ]\n  #.......................................................................................................\n  settings =\n    # inputs:\n    #   mktscript:        mktscript_in\n    # outputs:\n    #   mktscript:        mktscript_out\n    S:                S\n  #.......................................................................................................\n  return D.TEE.from_pipeline pipeline, settings\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand_html_comments = ( S ) =>\n  return @_get_expander S, @html_comment_id_pattern, ( meta, entry ) =>\n    content       = entry[ 'raw' ]\n    return [ '.', 'comment', content, ( MKTS.MD_READER.copy meta ), ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand_raw_macros  = ( S ) =>\n  return @_get_expander S, @raw_id_pattern, ( meta, entry ) =>\n    content       = entry[ 'raw' ]\n    return [ '.', 'raw', content, ( MKTS.MD_READER.copy meta ), ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand_action_macros  = ( S ) =>\n  return @_get_expander S, @action_id_pattern, ( meta, entry ) =>\n    [ mode\n      language ]  = entry[ 'markup' ]\n    content       = entry[ 'raw' ]\n    return [ '.', 'action', content, ( MKTS.MD_READER.copy meta, { mode, language, } ), ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand_region_macros = ( S ) =>\n  return @_get_expander S, @region_id_pattern, ( meta, entry ) =>\n    { raw\n      markup }    = entry\n    return [ markup, raw, null, ( MKTS.MD_READER.copy meta ), ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand_command_and_value_macros = ( S ) =>\n  return @_get_expander S, @command_and_value_id_pattern, ( meta, entry ) =>\n    { raw\n      markup }    = entry\n    macro_type    = if markup is '!' then 'command' else 'value'\n    return [ '.', macro_type, raw, ( MKTS.MD_READER.copy meta ), ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand_escape_chrs = ( S ) =>\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if MKTS.MD_READER.select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      send [ type, name, ( @escape.unescape_escape_chrs S, text ), meta, ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand_escape_illegals = ( S ) =>\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if MKTS.MD_READER.select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      debug '©38889', rpr text\n      #.....................................................................................................\n      for pattern in @illegal_patterns\n        stretches = []\n        #...................................................................................................\n        for raw_stretch, idx in text.split pattern\n          if ( idx % 3 ) is 1 then  stretches[ stretches.length - 1 ] += raw_stretch\n          else                      stretches.push raw_stretch\n        #...................................................................................................\n        is_plain  = no\n        for stretch in stretches\n          is_plain = not is_plain\n          unless is_plain\n            # debug '©10012', stretch\n            { line_nr }   = meta\n            error_message = \"illegal macro pattern on line #{line_nr}: #{rpr stretch}\"\n            send [ '.', 'warning', error_message, ( MKTS.MD_READER.copy meta ), ]\n          else\n            send [ type, name, stretch, ( MKTS.MD_READER.copy meta ), ] unless stretch.length is 0\n    #.......................................................................................................\n    else\n      send event\n\n\n#===========================================================================================================\n# GENERIC EXPANDER\n#-----------------------------------------------------------------------------------------------------------\n@_get_expander = ( S, pattern, method ) =>\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if MKTS.MD_READER.select event, '.', 'text'\n      is_plain                    = no\n      [ type, name, text, meta, ] = event\n      for stretch in text.split pattern\n        is_plain = not is_plain\n        unless is_plain\n          id                  = parseInt stretch, 10\n          entry               = @_retrieve_entry S, id\n          send method meta, entry\n        else\n          send [ type, name, stretch, ( MKTS.MD_READER.copy meta ), ] unless stretch.length is 0\n    #.......................................................................................................\n    else\n      send event\n\n\n\n\n\n"]}