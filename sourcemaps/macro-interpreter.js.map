{"version":3,"sources":["macro-interpreter.coffee"],"names":[],"mappings":"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","file":"macro-interpreter.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\n# njs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/MACROS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#-----------------------------------------------------------------------------------------------------------\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n# $async                    = D.remit_async.bind D\n#...........................................................................................................\n# Markdown_parser           = require 'markdown-it'\n# # Html_parser               = ( require 'htmlparser2' ).Parser\n# new_md_inline_plugin      = require 'markdown-it-regexp'\n#...........................................................................................................\n# HELPERS                   = require './HELPERS'\n#...........................................................................................................\n# misfit                    = Symbol 'misfit'\nMKTS                      = require './main'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$process_actions = ( S ) =>\n  copy  = MKTS.MD_READER.copy.bind  MKTS.MD_READER\n  stamp = MKTS.MD_READER.stamp.bind MKTS.MD_READER\n  hide  = MKTS.MD_READER.hide.bind  MKTS.MD_READER\n  #.........................................................................................................\n  CS                        = require 'coffee-script'\n  VM                        = require 'vm'\n  local_filename            = 'XXXXXXXXXXXXX'\n  S.local                   = { definitions: new Map(), }\n  sandbox =\n    urge:         CND.get_logger 'urge', local_filename\n    help:         CND.get_logger 'help', local_filename\n    __filename:   local_filename\n    define:       ( pod ) ->\n      for key, value of pod\n        S.local.definitions.set key, value\n  # sandbox[ '__sandbox' ] = sandbox\n  VM.createContext sandbox\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    # warn \"re-defining command #{rpr identifier}\" if S.definitions[ identifier ]?\n    # S.definitions[ identifier ] = []\n    #.......................................................................................................\n    if MKTS.MD_READER.select event, '.', 'action'\n      send stamp hide event\n      [ type, action, source, meta, ] = event\n      { mode, language, line_nr, }    = meta\n      #.....................................................................................................\n      switch language\n        when 'js'\n          js_source = source\n        when 'coffee'\n          js_source = CS.compile source, { bare: true, filename: local_filename, }\n        else\n          return send.error new Error \"unknown language #{rpr language} in action on line ##{line_nr}\"\n      #.....................................................................................................\n      try\n        value   = VM.runInContext js_source, sandbox, { filename: local_filename, }\n        errors  = no\n      #.....................................................................................................\n      catch error\n        errors  = yes\n        warn error[ 'message' ]\n        ### TAINT should resend because error message might need escaping ###\n        ### TAINT should preserve stack trace of error ###\n        debug '@294308', event\n        ### TAINT use method to assemble warning event ###\n        message = \"line #{line_nr}: #{error[ 'message' ]}\"\n        send [ '.', 'warning', message, ( copy meta, hidden: false, stamped: false, ), ]\n      #.....................................................................................................\n      unless errors\n        urge '4742', js_source\n        urge '4742', rpr value\n        debug '©YMF7F', sandbox\n        debug '©YMF7F', S.local.definitions\n        #.....................................................................................................\n        switch mode\n          when 'silent'\n            null\n          when 'vocal'\n            ### TAINT must resend to allow for TeX-escaping (or MD-escaping?) ###\n            ### TAINT send `tex` or `text`??? ###\n            value_rpr = if ( CND.isa_text value ) then value else rpr value\n            send [ '.', 'text', value_rpr, ( copy meta ), ]\n      #.....................................................................................................\n      else\n        send\n    #.......................................................................................................\n    else\n      send event\n\n# #-----------------------------------------------------------------------------------------------------------\n# @MKTX.COMMAND.$expansion = ( S ) =>\n#   remark = MD_READER._get_remark()\n#   #.........................................................................................................\n#   return $ ( event, send ) =>\n#     if MKTS.MD_READER.select event, '!'\n#       [ type, identifier, _, meta, ] = event\n#       if ( definition = S.local.definitions.get identifier )?\n#         # send stamp hide event\n#         send stamp hide [ '(', '!', identifier, ( copy meta ), ]\n#         # send copy sub_event for sub_event in definition\n#         # debug '@16', rpr definition\n#         send remark 'resend', \"expanding `#{identifier}`\", ( copy meta )\n#         S.resend definition # [ '.', 'text', definition, ( copy meta ), ]\n#         send stamp hide [ ')', '!', identifier, ( copy meta ), ]\n#       else\n#         send event\n#     #.......................................................................................................\n#     else\n#       send event\n"]}