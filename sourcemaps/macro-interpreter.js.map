{"version":3,"sources":["macro-interpreter.coffee"],"names":[],"mappings":"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","file":"macro-interpreter.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\n# njs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/MACRO-INTERPRETER'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#-----------------------------------------------------------------------------------------------------------\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n# $async                    = D.remit_async.bind D\n#...........................................................................................................\n# Markdown_parser           = require 'markdown-it'\n# # Html_parser               = ( require 'htmlparser2' ).Parser\n# new_md_inline_plugin      = require 'markdown-it-regexp'\n#...........................................................................................................\n# HELPERS                   = require './HELPERS'\n#...........................................................................................................\n# misfit                    = Symbol 'misfit'\nMKTS                      = require './main'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$process_actions = ( S ) =>\n  ### TAINT this is an essentially synchronous solution that will not work for async code ###\n  copy  = MKTS.MD_READER.copy.bind  MKTS.MD_READER\n  stamp = MKTS.MD_READER.stamp.bind MKTS.MD_READER\n  hide  = MKTS.MD_READER.hide.bind  MKTS.MD_READER\n  #.........................................................................................................\n  CS                        = require 'coffee-script'\n  VM                        = require 'vm'\n  local_filename            = 'XXXXXXXXXXXXX'\n  macro_output              = []\n  #.........................................................................................................\n  do =>\n    S.compiled          = {}\n    S.compiled.coffee   = {}\n    # S.document          =\n    #   column_count:       2\n    S.sandbox           =\n      'rpr':            CND.rpr\n      urge:             CND.get_logger 'urge', local_filename\n      help:             CND.get_logger 'help', local_filename\n      setImmediate:     setImmediate\n      # document:         S.document\n      # S:                S\n      echo:             ( P... ) -> macro_output.push CND.pen P...\n      mkts:\n        signature_reader: ( P... ) -> P\n        output:           macro_output\n        reserved_names:   []\n        __filename:       local_filename\n    S.sandbox[ 'here' ] = S.sandbox\n    for name of S.sandbox\n      S.sandbox.mkts.reserved_names.push name\n    VM.createContext S.sandbox\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if MKTS.MD_READER.select event, '.', 'action'\n      [ _, _, raw_source, meta, ]     = event\n      send stamp hide event\n      { mode, language, line_nr, }    = meta\n      error_message                   = null\n      #.....................................................................................................\n      switch language\n        when 'js'\n          js_source = raw_source\n        when 'coffee'\n          unless ( js_source = S.compiled.coffee[ raw_source ] )?\n            wrapped_source  = \"do =>\\n  \" + raw_source.replace /\\n/g, \"\\n  \"\n            try\n              js_source     = CS.compile wrapped_source, { bare: true, filename: local_filename, }\n            catch error\n              error_message = error[ 'message' ] ? rpr error\n            unless error_message?\n              S.compiled.coffee[ raw_source ] = js_source\n        else\n          error_message = \"unknown language #{rpr language}\"\n      #.....................................................................................................\n      try\n        action_value = VM.runInContext js_source, S.sandbox, { filename: local_filename, }\n      #.....................................................................................................\n      catch error\n        error_message = error[ 'message' ] ? rpr error\n      #.....................................................................................................\n      if error_message?\n        warn error_message\n        ### TAINT should preserve stack trace of error ###\n        ### TAINT use method to assemble warning event ###\n        ### TAINT write error log with full trace, insert reference (error nr) ###\n        error_message = \"action on line #{line_nr}: #{error_message}\"\n        send [ '.', 'warning', error_message, ( copy meta ), ]\n      #.....................................................................................................\n      else\n        ### TAINT join using empty string? spaces? newlines? ###\n        if macro_output.length > 0\n          macro_output_rpr    = macro_output.join ''\n          macro_output.length = 0\n          send [ '.', 'text', macro_output_rpr, ( copy meta ), ]\n        #...................................................................................................\n        switch mode\n          when 'silent'\n            null\n          when 'vocal'\n          else\n            ### TAINT send `tex` or `text`??? ###\n            action_value_rpr = if CND.isa_text action_value then action_value else rpr action_value\n            send [ '.', 'text', action_value_rpr, ( copy meta ), ]\n        action_value_rpr = if CND.isa_text action_value then action_value else rpr action_value\n        send [ '~', 'update', action_value_rpr, ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n\n        # # for sub_name, sub_value of S.sandbox\n        # #   continue if sub_name in S.sandbox.mkts.reserved_names\n        # #   S.sandbox.mkts.definitions[ sub_name ] = sub_value\n        # #.....................................................................................................\n        # do =>\n        #   # debug '©Y action: source:    ', rpr source\n        #   # debug '©Y action: js_source: ', rpr js_source\n        #   # debug '©Y action: language:  ', rpr language\n        #   # debug '©Y action: mode:      ', rpr mode\n        #   # debug '©Y action: S.sandbox: ', rpr S.sandbox\n        #   debug '©Y action: value:     ', rpr action_value\n        #   for name, value of S.sandbox\n        #     whisper \"#{name}: #{rpr value}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$process_values = ( S ) =>\n  copy  = MKTS.MD_READER.copy.bind  MKTS.MD_READER\n  stamp = MKTS.MD_READER.stamp.bind MKTS.MD_READER\n  hide  = MKTS.MD_READER.hide.bind  MKTS.MD_READER\n  #.........................................................................................................\n  throw new Error \"internal error: need S.sandbox, must use `$process_actions`\" unless S.sandbox?\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if MKTS.MD_READER.select event, '$'\n      [ _, identifier, _, meta, ]     = event\n      action_value                    = S.sandbox[ identifier ]\n      unless action_value is undefined\n        action_value_rpr = rpr action_value unless CND.isa_text action_value\n        send [ '.', 'text', action_value_rpr, ( copy meta ), ]\n      else\n        ### TAINT should preserve stack trace of error ###\n        ### TAINT use method to assemble warning event ###\n        ### TAINT write error log with full trace, insert reference (error nr) ###\n        { line_nr, }  = meta\n        error_message = \"value on line #{line_nr}: unknown identifier #{rpr identifier}\"\n        send [ '.', 'warning', error_message, ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$process_commands = ( S ) =>\n  copy  = MKTS.MD_READER.copy.bind  MKTS.MD_READER\n  stamp = MKTS.MD_READER.stamp.bind MKTS.MD_READER\n  hide  = MKTS.MD_READER.hide.bind  MKTS.MD_READER\n  #.........................................................................................................\n  throw new Error \"internal error: need S.sandbox, must use `$process_actions`\" unless S.sandbox?\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if MKTS.MD_READER.select event, '!'\n      [ _, call_signature, _, meta,     ] = event\n      [ _, identifier, parameters_txt,  ] = call_signature.match /^\\s*([^\\s]*)\\s*(.*)$/\n      { mode, language, line_nr, }        = meta\n      [ error_message, parameters, ]      = @_parameters_from_text S, line_nr, parameters_txt\n      return send [ '.', 'warning', error_message, meta, ] if error_message?\n      send [ '!', identifier, parameters, meta, ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$process_regions = ( S ) =>\n  copy      = MKTS.MD_READER.copy.bind    MKTS.MD_READER\n  stamp     = MKTS.MD_READER.stamp.bind   MKTS.MD_READER\n  hide      = MKTS.MD_READER.hide.bind    MKTS.MD_READER\n  select    = MKTS.MD_READER.select.bind  MKTS.MD_READER\n  #.........................................................................................................\n  throw new Error \"internal error: need S.sandbox, must use `$process_actions`\" unless S.sandbox?\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    ### TAINT code duplication ###\n    if select event, '('\n      [ _, call_signature, extra, meta, ] = event\n      [ _, identifier, parameters_txt,  ] = call_signature.match /^\\s*([^\\s]*)\\s*(.*)$/\n      #.....................................................................................................\n      ### Refuse to overwrite 3rd event parameter when already set. This is a makeshift solution that will\n      be removed when we implement a simplified and more unified event syntax. ###\n      if extra?\n        warn \"encountered start region event with parameters and extra\" if parameters_txt.length > 0\n        return send event\n      #.....................................................................................................\n      { mode, language, line_nr, }        = meta\n      [ error_message, parameters, ]      = @_parameters_from_text S, line_nr, parameters_txt\n      #.....................................................................................................\n      send [ '.', 'warning', error_message, meta, ] if error_message?\n      send [ '(', identifier, parameters, meta, ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$consolidate_regions = ( S ) =>\n  copy      = MKTS.MD_READER.copy.bind    MKTS.MD_READER\n  stamp     = MKTS.MD_READER.stamp.bind   MKTS.MD_READER\n  hide      = MKTS.MD_READER.hide.bind    MKTS.MD_READER\n  select    = MKTS.MD_READER.select.bind  MKTS.MD_READER\n  tag_stack = []\n  #.........................................................................................................\n  throw new Error \"internal error: need S.sandbox, must use `$process_actions`\" unless S.sandbox?\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    ### TAINT code duplication ###\n    debug '©18567', event\n    if select event, '('\n      [ _, call_signature, extra, meta, ] = event\n      [ _, identifier, parameters_txt,  ] = call_signature.match /^\\s*([^\\s]*)\\s*(.*)$/\n      #.....................................................................................................\n      ### Refuse to overwrite 3rd event parameter when already set. This is a makeshift solution that will\n      be removed when we implement a simplified and more unified event syntax. ###\n      if extra?\n        warn \"encountered start region event with parameters and extra\" if parameters_txt.length > 0\n        return send event\n      #.....................................................................................................\n      { mode, language, line_nr, }        = meta\n      [ error_message, parameters, ]      = @_parameters_from_text S, line_nr, parameters_txt\n      #.....................................................................................................\n      send [ '.', 'warning', error_message, meta, ] if error_message?\n      send [ '(', identifier, parameters, meta, ]\n      tag_stack.push identifier\n    #.......................................................................................................\n    else if select event, ')'\n      # debug '©01840', JSON.stringify event\n      # debug '©01840', select event, ')'\n      [ _, identifier, extra, meta, ] = event\n      #.....................................................................................................\n      if tag_stack.length < 1\n        warn '34-1', [ '.', 'warning', \"too many closing regions\", ( copy meta ), ]\n        return send [ '.', 'warning', \"too many closing regions\", ( copy meta ), ]\n      #.....................................................................................................\n      expected = tag_stack.pop()\n      #.....................................................................................................\n      if ( identifier.length > 0 ) and ( expected isnt identifier )\n        message = \"expected closing region #{rpr expected}, got #{rpr identifier}\"\n        warn '34-2', [ '.', 'warning', message, ( copy meta ), ]\n        send [ '.', 'warning', message, ( copy meta ), ]\n        send event if identifier is 'document'\n      #.....................................................................................................\n      identifier = expected\n      send [ ')', identifier, extra, ( copy meta ), ]\n      # send [ ')', 'document', extra, ( copy meta ), ]\n      urge '443', [ ')', identifier, extra, ( copy meta ), ]\n    #.......................................................................................................\n    else\n      # debug '©88225', JSON.stringify event\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$process_code_blocks = ( S ) =>\n  copy      = MKTS.MD_READER.copy.bind    MKTS.MD_READER\n  stamp     = MKTS.MD_READER.stamp.bind   MKTS.MD_READER\n  hide      = MKTS.MD_READER.hide.bind    MKTS.MD_READER\n  select    = MKTS.MD_READER.select.bind  MKTS.MD_READER\n  #.........................................................................................................\n  throw new Error \"internal error: need S.sandbox, must use `$process_actions`\" unless S.sandbox?\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    ### TAINT code duplication ###\n    if select event, [ '(', ')', ], 'code'\n      [ type, _, call_signature, meta, ]     = event\n      { line_nr, }                        = meta\n      [ _, identifier, parameters_txt,  ] = call_signature.match /^\\s*([^\\s]*)\\s*(.*)$/\n      #.....................................................................................................\n      [ error_message, parameters, ]      = @_parameters_from_text S, line_nr, parameters_txt\n      parameters.unshift identifier\n      #.....................................................................................................\n      send [ '.', 'warning', error_message, meta, ] if error_message?\n      send [ type, 'code', parameters, meta, ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@_parameters_from_text = ( S, line_nr, text ) =>\n  return [ null, [], ] if ( /^\\s*$/ ).test text\n  #.........................................................................................................\n  ### TAINT replicates some code from MACRO_INTERPRETER.process_actions ###\n  ### TAINT move to CND? COFFEESCRIPT? ###\n  CS              = require 'coffee-script'\n  VM              = require 'vm'\n  source          = \"@mkts.signature_reader #{text}\"\n  error_message   = null\n  #.........................................................................................................\n  throw new Error \"internal error: need S.sandbox, must use `$process_actions`\" unless S.sandbox?\n  #.....................................................................................................\n  try\n    js_source = CS.compile source, { bare: true, filename: 'parameter resolution', }\n  catch error\n    error_message = error[ 'message' ] ? rpr error\n  #.....................................................................................................\n  unless error_message?\n    try\n      R = VM.runInContext js_source, S.sandbox, { filename: 'parameter resolution', }\n    catch error\n      error_message = error[ 'message' ] ? rpr error\n  #.....................................................................................................\n  if error_message?\n    warn error_message\n    ### TAINT should preserve stack trace of error ###\n    ### TAINT use method to assemble warning event ###\n    ### TAINT write error log with full trace, insert reference (error nr) ###\n    return [ \"action on line #{line_nr}: #{error_message}\", null, ]\n    # return done [ '.', 'warning', error_message, ( copy meta ), ]\n  return [ null, R, ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @MKTX.COMMAND.$expansion = ( S ) =>\n#   remark = MD_READER._get_remark()\n#   #.........................................................................................................\n#   return $ ( event, send ) =>\n#     if MKTS.MD_READER.select event, '!'\n#       [ type, identifier, _, meta, ] = event\n#       if ( definition = S.local.definitions.get identifier )?\n#         # send stamp hide event\n#         send stamp hide [ '(', '!', identifier, ( copy meta ), ]\n#         # send copy sub_event for sub_event in definition\n#         # debug '@16', rpr definition\n#         send remark 'resend', \"expanding `#{identifier}`\", ( copy meta )\n#         S.resend definition # [ '.', 'text', definition, ( copy meta ), ]\n#         send stamp hide [ ')', '!', identifier, ( copy meta ), ]\n#       else\n#         send event\n#     #.......................................................................................................\n#     else\n#       send event\n"]}