{"version":3,"sources":["macro-interpreter.coffee"],"names":[],"mappings":"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","file":"macro-interpreter.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\n# njs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/MACROS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#-----------------------------------------------------------------------------------------------------------\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n# $async                    = D.remit_async.bind D\n#...........................................................................................................\n# Markdown_parser           = require 'markdown-it'\n# # Html_parser               = ( require 'htmlparser2' ).Parser\n# new_md_inline_plugin      = require 'markdown-it-regexp'\n#...........................................................................................................\n# HELPERS                   = require './HELPERS'\n#...........................................................................................................\n# misfit                    = Symbol 'misfit'\nMKTS                      = require './main'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$process_actions = ( S ) =>\n  copy  = MKTS.MD_READER.copy.bind  MKTS.MD_READER\n  stamp = MKTS.MD_READER.stamp.bind MKTS.MD_READER\n  hide  = MKTS.MD_READER.hide.bind  MKTS.MD_READER\n  #.........................................................................................................\n  CS                        = require 'coffee-script'\n  VM                        = require 'vm'\n  local_filename            = 'XXXXXXXXXXXXX'\n  do =>\n    sandbox                   =\n      'rpr':            CND.rpr\n      urge:             CND.get_logger 'urge', local_filename\n      help:             CND.get_logger 'help', local_filename\n      mkts:\n        reserved_names:   []\n        __filename:       local_filename\n    for name of sandbox\n      sandbox.mkts.reserved_names.push name\n    VM.createContext sandbox\n    S.sandbox = sandbox\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    # warn \"re-defining command #{rpr identifier}\" if S.definitions[ identifier ]?\n    # S.definitions[ identifier ] = []\n    #.......................................................................................................\n    if MKTS.MD_READER.select event, '.', 'action'\n      [ type, action, source, meta, ] = event\n      send stamp hide event\n      { mode, language, line_nr, }    = meta\n      error_message                   = null\n      #.....................................................................................................\n      switch language\n        when 'js'\n          js_source = source\n        when 'coffee'\n          try\n            js_source = CS.compile source, { bare: true, filename: local_filename, }\n          catch error\n            error_message = error[ 'message' ]\n        else\n          error_message = \"unknown language #{rpr language}\"\n      #.....................................................................................................\n      try\n        value = VM.runInContext js_source, S.sandbox, { filename: local_filename, }\n      #.....................................................................................................\n      catch error\n        error_message = error[ 'message' ]\n      #.....................................................................................................\n      if error_message?\n        warn error_message\n        # debug '@294308', event\n        ### TAINT should resend because error message might need escaping ###\n        ### TAINT should preserve stack trace of error ###\n        ### TAINT use method to assemble warning event ###\n        ### TAINT insert reference to error log ###\n        warning_message = \"action on line #{line_nr}: #{error_message}\"\n        send [ '.', 'warning', warning_message, ( copy meta ), ]\n      #.....................................................................................................\n      else\n        # for sub_name, sub_value of S.sandbox\n        #   continue if sub_name in S.sandbox.mkts.reserved_names\n        #   S.sandbox.mkts.definitions[ sub_name ] = sub_value\n        #.....................................................................................................\n        debug '©Y action: source:    ', rpr source\n        debug '©Y action: js_source: ', rpr js_source\n        debug '©Y action: language:  ', rpr language\n        debug '©Y action: mode:      ', rpr mode\n        debug '©Y action: S.sandbox: ', rpr S.sandbox\n        debug '©Y action: value:     ', rpr value\n        #.....................................................................................................\n        switch mode\n          when 'silent'\n            null\n          when 'vocal'\n            ### TAINT send `tex` or `text`??? ###\n            value_rpr = if ( CND.isa_text value ) then value else rpr value\n            send [ '.', 'text', value_rpr, ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n\n# #-----------------------------------------------------------------------------------------------------------\n# @MKTX.COMMAND.$expansion = ( S ) =>\n#   remark = MD_READER._get_remark()\n#   #.........................................................................................................\n#   return $ ( event, send ) =>\n#     if MKTS.MD_READER.select event, '!'\n#       [ type, identifier, _, meta, ] = event\n#       if ( definition = S.local.definitions.get identifier )?\n#         # send stamp hide event\n#         send stamp hide [ '(', '!', identifier, ( copy meta ), ]\n#         # send copy sub_event for sub_event in definition\n#         # debug '@16', rpr definition\n#         send remark 'resend', \"expanding `#{identifier}`\", ( copy meta )\n#         S.resend definition # [ '.', 'text', definition, ( copy meta ), ]\n#         send stamp hide [ ')', '!', identifier, ( copy meta ), ]\n#       else\n#         send event\n#     #.......................................................................................................\n#     else\n#       send event\n"]}