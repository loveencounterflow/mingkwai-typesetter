{"version":3,"sources":["macro-interpreter.coffee"],"names":[],"mappings":"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","file":"macro-interpreter.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\n# njs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MK/TS/MACRO-INTERPRETER'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#-----------------------------------------------------------------------------------------------------------\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n# $async                    = D.remit_async.bind D\n#...........................................................................................................\n# Markdown_parser           = require 'markdown-it'\n# # Html_parser               = ( require 'htmlparser2' ).Parser\n# new_md_inline_plugin      = require 'markdown-it-regexp'\n#...........................................................................................................\n# HELPERS                   = require './HELPERS'\n#...........................................................................................................\n# misfit                    = Symbol 'misfit'\nMKTS                      = require './main'\n\n\n#===========================================================================================================\n# PREPARE SANDBOX\n#-----------------------------------------------------------------------------------------------------------\n@$prepare_sandbox = ( S ) =>\n  local_filename    = 'XXXXXXXXXXXXX'\n  copy              = MKTS.MD_READER.copy.bind  MKTS.MD_READER\n  stamp             = MKTS.MD_READER.stamp.bind MKTS.MD_READER\n  hide              = MKTS.MD_READER.hide.bind  MKTS.MD_READER\n  select            = MKTS.MD_READER.select.bind  MKTS.MD_READER\n  #.........................................................................................................\n  sandbox =\n    'rpr':            CND.rpr\n    urge:             CND.get_logger 'urge', local_filename\n    help:             CND.get_logger 'help', local_filename\n    setImmediate:     setImmediate\n    echo:             ( P... ) -> macro_output.push CND.pen P...\n    mkts:\n      signature_reader: ( P... ) -> P\n      output:           []\n      __filename:       local_filename\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if MKTS.MD_READER.select event, '~', 'start'\n      [ ..., meta, ] = event\n      send event\n      changeset = MKTS.DIFFPATCH.diff {}, sandbox\n      send [ '~', 'change', changeset, ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@_sandboxes = []\n\n#-----------------------------------------------------------------------------------------------------------\n@track_changes = ->\n  idx = @_sandboxes.length\n  @_sandboxes.push {}\n  return => @_sandboxes[ idx ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$capture_change_events = ( S ) =>\n  ### This stream transform should be added somewhere near the end of the output stream; it will alow\n  `~change` events—for example, those generated by plugin initializations—to be captured and made\n  accessisble to `@$process_actions`. ###\n  select = MKTS.MD_READER.select.bind  MKTS.MD_READER\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '~', 'change'\n      [ _, _, changeset, _, ] = event\n      for sandbox, idx in @_sandboxes\n        @_sandboxes[ idx ] = MK.TS.DIFFPATCH.patch changeset, sandbox\n      send event\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$process_actions = ( S ) =>\n  ### TAINT this is an essentially synchronous solution that will not work for async code ###\n  copy        = MKTS.MD_READER.copy.bind  MKTS.MD_READER\n  stamp       = MKTS.MD_READER.stamp.bind MKTS.MD_READER\n  hide        = MKTS.MD_READER.hide.bind  MKTS.MD_READER\n  select      = MKTS.MD_READER.select.bind  MKTS.MD_READER\n  get_sandbox = @track_changes()\n  #.........................................................................................................\n  CS                        = require 'coffee-script'\n  VM                        = require 'vm'\n  local_filename            = 'XXXXXXXXXXXXX'\n  macro_output              = []\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '.', 'action'\n      [ _, _, raw_source, meta, ]     = event\n      send stamp hide event\n      { mode, language, line_nr, }    = meta\n      error_message                   = null\n      sandbox                         = get_sandbox()\n      sandbox_backup                  = MK.TS.DIFFPATCH.snapshot sandbox\n      VM.createContext sandbox\n      #.....................................................................................................\n      switch language\n        when 'js'\n          js_source = raw_source\n        when 'coffee'\n          wrapped_source  = \"do =>\\n  \" + raw_source.replace /\\n/g, \"\\n  \"\n          try\n            js_source     = CS.compile wrapped_source, { bare: true, filename: local_filename, }\n          catch error\n            error_message = error[ 'message' ] ? rpr error\n        else\n          error_message = \"unknown language #{rpr language}\"\n      #.....................................................................................................\n      try\n        action_value = VM.runInContext js_source, sandbox, { filename: local_filename, }\n      #.....................................................................................................\n      catch error\n        error_message = error[ 'message' ] ? rpr error\n      #.....................................................................................................\n      if error_message?\n        warn error_message\n        ### TAINT should preserve stack trace of error ###\n        ### TAINT use method to assemble warning event ###\n        ### TAINT write error log with full trace, insert reference (error nr) ###\n        error_message = \"action on line #{line_nr}: #{error_message}\"\n        send [ '.', 'warning', error_message, ( copy meta ), ]\n      #.....................................................................................................\n      else\n        ### TAINT join using empty string? spaces? newlines? ###\n        if macro_output.length > 0\n          macro_output_rpr    = macro_output.join ''\n          macro_output.length = 0\n          send [ '.', 'text', macro_output_rpr, ( copy meta ), ]\n        #...................................................................................................\n        switch mode\n          when 'silent'\n            null\n          when 'vocal'\n          else\n            ### TAINT send `tex` or `text`??? ###\n            action_value_rpr = if CND.isa_text action_value then action_value else rpr action_value\n            send [ '.', 'text', action_value_rpr, ( copy meta ), ]\n        # action_value_rpr = if CND.isa_text action_value then action_value else rpr action_value\n        # send [ '~', 'update', action_value_rpr, ( copy meta ), ]\n        ### TAINT use more specific change event ('change sandbox')? ###\n        # debug '34821', sandbox.COLUMNS\n        changeset = MK.TS.DIFFPATCH.diff sandbox_backup, sandbox\n        send [ '~', 'change', changeset, ( copy meta ), ] if changeset.length > 0\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$process_values = ( S ) =>\n  copy        = MKTS.MD_READER.copy.bind  MKTS.MD_READER\n  stamp       = MKTS.MD_READER.stamp.bind MKTS.MD_READER\n  hide        = MKTS.MD_READER.hide.bind  MKTS.MD_READER\n  get_sandbox = @track_changes()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if MKTS.MD_READER.select event, '@'\n      [ _, identifier, _, meta, ] = event\n      sandbox                     = get_sandbox()\n      action_value                = sandbox\n      for sub_identifier in identifier.split '.'\n        action_value = action_value[ sub_identifier ]\n        if action_value is undefined\n          ### TAINT should preserve stack trace of error ###\n          ### TAINT use method to assemble warning event ###\n          ### TAINT write error log with full trace, insert reference (error nr) ###\n          { line_nr, }  = meta\n          error_message = \"value on line #{line_nr}: unknown identifier #{rpr identifier}\"\n          return send [ '.', 'warning', error_message, ( copy meta ), ]\n      action_value_rpr = rpr action_value unless CND.isa_text action_value\n      send [ '.', 'text', action_value_rpr, ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$process_commands = ( S ) =>\n  copy  = MKTS.MD_READER.copy.bind  MKTS.MD_READER\n  stamp = MKTS.MD_READER.stamp.bind MKTS.MD_READER\n  hide  = MKTS.MD_READER.hide.bind  MKTS.MD_READER\n  #.........................................................................................................\n  # throw new Error \"internal error: need S.SANDBOX, must use `$prepare_sandbox`\" unless S.SANDBOX?\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if MKTS.MD_READER.select event, '!'\n      [ _, call_signature, _, meta,     ] = event\n      [ _, identifier, parameters_txt,  ] = call_signature.match /^\\s*([^\\s]*)\\s*(.*)$/\n      { mode, language, line_nr, }        = meta\n      [ error_message, parameters, ]      = @_parameters_from_text S, line_nr, parameters_txt\n      return send [ '.', 'warning', error_message, meta, ] if error_message?\n      send [ '!', identifier, parameters, meta, ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$process_regions = ( S ) =>\n  copy      = MKTS.MD_READER.copy.bind    MKTS.MD_READER\n  stamp     = MKTS.MD_READER.stamp.bind   MKTS.MD_READER\n  hide      = MKTS.MD_READER.hide.bind    MKTS.MD_READER\n  select    = MKTS.MD_READER.select.bind  MKTS.MD_READER\n  #.........................................................................................................\n  # throw new Error \"internal error: need S.SANDBOX, must use `$prepare_sandbox`\" unless S.SANDBOX?\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    ### TAINT code duplication ###\n    if select event, '('\n      [ _, call_signature, extra, meta, ] = event\n      [ _, identifier, parameters_txt,  ] = call_signature.match /^\\s*([^\\s]*)\\s*(.*)$/\n      #.....................................................................................................\n      ### Refuse to overwrite 3rd event parameter when already set. This is a makeshift solution that will\n      be removed when we implement a simplified and more unified event syntax. ###\n      if extra?\n        warn \"encountered start region event with parameters and extra\" if parameters_txt.length > 0\n        return send event\n      #.....................................................................................................\n      { mode, language, line_nr, }        = meta\n      [ error_message, parameters, ]      = @_parameters_from_text S, line_nr, parameters_txt\n      #.....................................................................................................\n      send [ '.', 'warning', error_message, meta, ] if error_message?\n      send [ '(', identifier, parameters, meta, ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$consolidate_regions = ( S ) =>\n  copy      = MKTS.MD_READER.copy.bind    MKTS.MD_READER\n  stamp     = MKTS.MD_READER.stamp.bind   MKTS.MD_READER\n  hide      = MKTS.MD_READER.hide.bind    MKTS.MD_READER\n  select    = MKTS.MD_READER.select.bind  MKTS.MD_READER\n  tag_stack = []\n  #.........................................................................................................\n  # throw new Error \"internal error: need S.SANDBOX, must use `$prepare_sandbox`\" unless S.SANDBOX?\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    ### TAINT code duplication ###\n    if select event, '('\n      [ _, call_signature, extra, meta, ] = event\n      [ _, identifier, parameters_txt,  ] = call_signature.match /^\\s*([^\\s]*)\\s*(.*)$/\n      #.....................................................................................................\n      ### Refuse to overwrite 3rd event parameter when already set. This is a makeshift solution that will\n      be removed when we implement a simplified and more unified event syntax. ###\n      if extra? # and extra.length > 0\n        warn \"encountered start region event with parameters and extra\" if parameters_txt.length > 0\n        tag_stack.push identifier\n        return send event\n      #.....................................................................................................\n      { line_nr, }                    = meta\n      [ error_message, parameters, ]  = @_parameters_from_text S, line_nr, parameters_txt\n      #.....................................................................................................\n      send [ '.', 'warning', error_message, meta, ] if error_message?\n      send [ '(', identifier, parameters, meta, ]\n      tag_stack.push identifier\n    #.......................................................................................................\n    else if select event, ')'\n      [ _, identifier, extra, meta, ] = event\n      #.....................................................................................................\n      if tag_stack.length < 1\n        return send [ '.', 'warning', \"too many closing regions\", ( copy meta ), ]\n      #.....................................................................................................\n      expected = tag_stack.pop()\n      #.....................................................................................................\n      if ( identifier.length > 0 ) and ( expected isnt identifier )\n        message = \"expected closing region #{rpr expected}, got #{rpr identifier}\"\n        send [ '.', 'warning', message, ( copy meta ), ]\n        send event if identifier is 'document'\n      #.....................................................................................................\n      identifier = expected\n      send [ ')', identifier, extra, ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$process_code_blocks = ( S ) =>\n  copy      = MKTS.MD_READER.copy.bind    MKTS.MD_READER\n  stamp     = MKTS.MD_READER.stamp.bind   MKTS.MD_READER\n  hide      = MKTS.MD_READER.hide.bind    MKTS.MD_READER\n  select    = MKTS.MD_READER.select.bind  MKTS.MD_READER\n  #.........................................................................................................\n  # throw new Error \"internal error: need S.SANDBOX, must use `$prepare_sandbox`\" unless S.SANDBOX?\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    ### TAINT code duplication ###\n    # debug '0123', event\n    if select event, [ '(', ')', ], 'code'\n      [ type, _, call_signature, meta, ]  = event\n      { line_nr, }                        = meta\n      [ _, identifier, parameters_txt,  ] = call_signature.match /^\\s*([^\\s]*)\\s*(.*)$/\n      #.....................................................................................................\n      [ error_message, parameters, ]      = @_parameters_from_text S, line_nr, parameters_txt\n      parameters.unshift identifier\n      #.....................................................................................................\n      send [ '.', 'warning', error_message, meta, ] if error_message?\n      send [ type, 'code', parameters, meta, ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@_parameters_from_text = ( S, line_nr, text ) =>\n  return [ null, [], ] if ( /^\\s*$/ ).test text\n  #.........................................................................................................\n  ### TAINT replicates some code from MACRO_INTERPRETER.process_actions ###\n  ### TAINT move to CND? COFFEESCRIPT? ###\n  CS              = require 'coffee-script'\n  VM              = require 'vm'\n  source          = \"mkts.signature_reader #{text}\"\n  error_message   = null\n  #.........................................................................................................\n  warn \"using makeshift solution for sandbox in `_parameters_from_text`\"\n  sandbox =\n    mkts:\n      signature_reader: ( P... ) -> P\n  VM.createContext sandbox\n  #.....................................................................................................\n  try\n    js_source = CS.compile source, { bare: true, filename: 'parameter resolution', }\n  catch error\n    error_message = error[ 'message' ] ? rpr error\n  #.....................................................................................................\n  unless error_message?\n    try\n      R = VM.runInContext js_source, sandbox, { filename: 'parameter resolution', }\n    catch error\n      error_message = error[ 'message' ] ? rpr error\n  #.....................................................................................................\n  if error_message?\n    warn error_message\n    ### TAINT should preserve stack trace of error ###\n    ### TAINT use method to assemble warning event ###\n    ### TAINT write error log with full trace, insert reference (error nr) ###\n    return [ \"action on line #{line_nr}: #{error_message}\", null, ]\n    # return done [ '.', 'warning', error_message, ( copy meta ), ]\n  return [ null, R, ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @MKTX.COMMAND.$expansion = ( S ) =>\n#   remark = MD_READER._get_remark()\n#   #.........................................................................................................\n#   return $ ( event, send ) =>\n#     if MKTS.MD_READER.select event, '!'\n#       [ type, identifier, _, meta, ] = event\n#       if ( definition = S.local.definitions.get identifier )?\n#         # send stamp hide event\n#         send stamp hide [ '(', '!', identifier, ( copy meta ), ]\n#         # send copy sub_event for sub_event in definition\n#         # debug '@16', rpr definition\n#         send remark 'resend', \"expanding `#{identifier}`\", ( copy meta )\n#         S.resend definition # [ '.', 'text', definition, ( copy meta ), ]\n#         send stamp hide [ ')', '!', identifier, ( copy meta ), ]\n#       else\n#         send event\n#     #.......................................................................................................\n#     else\n#       send event\n"]}