{"version":3,"sources":["mktscript-writer.coffee"],"names":[],"mappings":"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","file":"mktscript-writer.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/mktscript-writer'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#-----------------------------------------------------------------------------------------------------------\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n# $async                    = D.remit_async.bind D\n#...........................................................................................................\nMarkdown_parser           = require 'markdown-it'\n# Html_parser               = ( require 'htmlparser2' ).Parser\nnew_md_inline_plugin      = require 'markdown-it-regexp'\n#...........................................................................................................\n# HELPERS                   = require './helpers'\n# @MACROS                   = require './macros'\n#...........................................................................................................\nmisfit                    = Symbol 'misfit'\nMKTS                      = require './main'\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$show_mktsmd_events = ( S ) ->\n#   unknown_events    = []\n#   indentation       = ''\n#   tag_stack         = []\n#   return D.$observe ( event, has_ended ) =>\n#     if event?\n#       [ type, name, text, meta, ] = event\n#       if type is '?'\n#         unknown_events.push name unless name in unknown_events\n#         warn JSON.stringify event\n#       else\n#         color = CND.blue\n#         #...................................................................................................\n#         if is_hidden event\n#           color = CND.brown\n#         else\n#           switch type\n#             # when '('  then color = CND.yellow\n#             when '('  then color = CND.lime\n#             when ')'  then color = CND.olive\n#             when '!'  then color = CND.indigo\n#             when '#'  then color = CND.plum\n#             when '.'\n#               switch name\n#                 when 'text' then color = CND.BLUE\n#                 # when 'code' then color = CND.orange\n#         #...................................................................................................\n#         text = if text? then ( color rpr text ) else ''\n#         switch type\n#           #.................................................................................................\n#           when 'text'\n#             log indentation + ( color type ) + ' ' + rpr name\n#           #.................................................................................................\n#           when 'tex'\n#             if S.show_tex_events ? no\n#               log indentation + ( color type ) + ( color name ) + ' ' + text\n#           #.................................................................................................\n#           when '#'\n#             [ _, kind, message, _, ]  = event\n#             my_badge                  = \"(#{meta[ 'badge' ]})\"\n#             color = switch kind\n#               when 'insert' then  'lime'\n#               when 'drop'   then  'orange'\n#               when 'warn'   then  'RED'\n#               when 'info'   then  'BLUE'\n#               else                'grey'\n#             log ( CND[ color ] '#' + kind ), ( CND.white message ), ( CND.grey my_badge )\n#           #.................................................................................................\n#           else\n#             log indentation + ( color type ) + ( color name ) + ' ' + text\n#         #...................................................................................................\n#         unless is_hidden event\n#           switch type\n#             #.................................................................................................\n#             when '(', ')'\n#               switch type\n#                 when '('\n#                   tag_stack.push [ type, name, ]\n#                 when ')'\n#                   if tag_stack.length > 0\n#                     [ topmost_type, topmost_name, ] = tag_stack.pop()\n#                     unless topmost_name is name\n#                       warn \"encountered <<#{name}#{type}>> when <<#{topmost_name})>> was expected\"\n#                   else\n#                     warn \"level below zero\"\n#               indentation = ( new Array tag_stack.length ).join '  '\n#     #.......................................................................................................\n#     if has_ended\n#       if tag_stack.length > 0\n#         warn \"unclosed tags: #{tag_stack.join ', '}\"\n#       if unknown_events.length > 0\n#         warn \"unknown events: #{unknown_events.sort().join ', '}\"\n#     return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_mktsmd_events = ( S ) ->\n  return D.$observe ( event, has_ended ) =>\n    if event?\n      if select event, 'tex', null, yes\n        null\n      else\n        [ type, name, text, meta, ] = event\n        if is_hidden event\n          line_color = CND.grey\n        else if select event, '.', 'warning'\n          line_color = CND.red\n        else if select event, '.', 'text'\n          line_color = CND.blue\n        else\n          line_color = CND.white\n        log line_color type, name, ( if text? then rpr text else '' )\n    #.......................................................................................................\n    if has_ended\n      null\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$produce_mktscript = ( S ) ->\n  indentation       = ''\n  tag_stack         = []\n  #.........................................................................................................\n  return $ ( event, send, end ) ->\n    if event?\n      # debug '©Yo4cR', rpr event\n      [ type, name, text, meta, ] = event\n      unless type in [ 'tex', 'text', ]\n        { line_nr, } = meta\n        if line_nr?\n          anchor = \"#{line_nr} █ \"\n        else\n          anchor = \"\"\n        #.....................................................................................................\n        # send JSON.stringify event\n        text_rpr = ''\n        if text?\n          ### TAINT we have to adopt a new event format; for now, the `text` attribute is misnamed,\n          as it is really a `data` attribute ###\n          if CND.isa_text text\n            ### TAINT doesn't recognize escaped backslash ###\n            text_rpr = ' ' + ( rpr text ).replace /\\\\n/g, '\\n'\n          else if ( Object.keys text ).length > 0\n            text_rpr = ' ' + JSON.stringify text\n        send \"#{anchor}#{type}#{name}#{text_rpr}\"\n        send '\\n'\n        # switch type\n        #   when '?'\n        #     send \"\\n#{anchor}#{type}#{name}\\n\"\n        #   when '('\n        #     send \"#{anchor}#{type}#{name}\"\n        #   when ')', '!'\n        #     send \"#{type}\\n\"\n        #   when '('\n        #     send \"#{type}#{name}\"\n        #   when ')'\n        #     send \"#{type}\"\n        #   when '.'\n        #     switch name\n        #       when 'hr'\n        #         send \"\\n#{anchor}#{type}#{name}\\n\"\n        #       when 'p'\n        #         send \"¶\\n\"\n        #       when 'text'\n        #         ### TAINT doesn't recognize escaped backslash ###\n        #         text_rpr = ( rpr text ).replace /\\\\n/g, '\\n'\n        #         send text_rpr\n        #       else\n        #         send \"\\n#{anchor}IGNORED: #{rpr event}\"\n        #   else\n        #     send \"\\n#{anchor}IGNORED: #{rpr event}\"\n    if end?\n      send \"# EOF\"\n      end()\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@mkts_events_from_md = ( source, settings, handler ) ->\n  switch arity = arguments.length\n    when 2\n      handler   = settings\n      settings  = {}\n    when 3 then null\n    else throw new Error \"expected 2 or 3 arguments, got #{arity}\"\n  bare          = settings[ 'bare' ] ? no\n  md_readstream = MKTS.MD_READER.create_md_read_tee source\n  { input\n    output }    = md_readstream.tee\n  Z             = []\n  output.pipe $ ( event, send ) =>\n    # debug '©G3QXt', event\n    Z.push event unless bare and select event, [ '(', ')', ], 'document'\n  output.on 'end', -> handler null, Z\n  input.resume()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@mktscript_from_md = ( md_source, settings, handler ) ->\n  ### TAINT code duplication ###\n  switch arity = arguments.length\n    when 2\n      handler   = settings\n      settings  = {}\n    when 3 then null\n    else throw new Error \"expected 2 or 3 arguments, got #{arity}\"\n  #.........................................................................................................\n  source_route        = settings[ 'source-route' ] ? '<STRING>'\n  md_readstream       = MKTS.MD_READER.create_md_read_tee md_source\n  { input\n    output }          = md_readstream.tee\n  f                   = => input.resume()\n  #.........................................................................................................\n  output\n    .pipe @$produce_mktscript md_readstream.tee[ 'S' ]\n    # .pipe D.$show '>>>>>>>>>>>>>>'\n    .pipe do =>\n      Z = []\n      return $ ( event, send, end ) =>\n        Z.push event if event?\n        if end?\n          handler null, Z.join ''\n          end()\n  #.........................................................................................................\n  D.run f, @_handle_error\n  return null\n"]}