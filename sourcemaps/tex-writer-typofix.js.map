{"version":3,"sources":["tex-writer-typofix.coffee"],"names":[],"mappings":"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","file":"tex-writer-typofix.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\n# njs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'mkts/tex-writer-typofix'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nXNCHR                     = require './xnchr'\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_tex_escape_replacements = [\n  [ /// \\x01        ///g,  '\\x01\\x02',              ]\n  [ /// \\x5c        ///g,  '\\x01\\x01',              ]\n  [ ///  \\{         ///g,  '\\\\{',                   ]\n  [ ///  \\}         ///g,  '\\\\}',                   ]\n  [ ///  \\$         ///g,  '\\\\$',                   ]\n  [ ///  \\#         ///g,  '\\\\#',                   ]\n  [ ///  %          ///g,  '\\\\%',                   ]\n  [ ///  _          ///g,  '\\\\_',                   ]\n  [ ///  \\^         ///g,  '\\\\textasciicircum{}',   ]\n  [ ///  ~          ///g,  '\\\\textasciitilde{}',    ]\n  [ ///  &          ///g,  '\\\\&',                   ]\n  [ /// \\x01\\x01    ///g,  '\\\\textbackslash{}',     ]\n  [ /// \\x01\\x02    ///g,  '\\x01',                  ]\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@escape_for_tex = ( text ) =>\n  R = text\n  for [ pattern, replacement, ], idx in @_tex_escape_replacements\n    R = R.replace pattern, replacement\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$fix_typography_for_tex = ( S ) =>\n  return $ ( event, send ) =>\n    if select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      meta[ 'raw' ] = text\n      text          = @fix_typography_for_tex text, S.options\n      send [ type, name, text, meta, ]\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@is_cjk_rsg = ( rsg, options ) => rsg in options[ 'tex' ][ 'cjk-rsgs' ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_get_cjk_interchr_glue = ( options ) => options[ 'tex' ]?[ 'cjk-interchr-glue' ] ? '\\ue080'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@fix_typography_for_tex = ( text, options, send = null ) =>\n  ### An improved version of `XELATEX.tag_from_chr` ###\n  ### TAINT should accept settings, fall back to `require`d `options.coffee` ###\n  glyph_styles                  = options[ 'tex' ]?[ 'glyph-styles'             ] ? {}\n  ### Legacy mode: force one command per non-latin character. This is OK for Chinese texts,\n  but a bad idea for all other scripts; in the future, MKTS's TeX formatting commands like\n  `\\cn{}` will be rewritten to make this setting superfluous. ###\n  advance_each_chr              = options[ 'tex' ]?[ 'advance-each-chr'         ] ? no\n  tex_command_by_rsgs           = options[ 'tex' ]?[ 'tex-command-by-rsgs'      ]\n  last_command                  = null\n  R                             = []\n  chunk                         = []\n  last_rsg                      = null\n  remark                        = if send? then @_get_remark() else null\n  this_is_cjk                   = no\n  last_was_cjk                  = no\n  this_is_whitespace            = no\n  last_was_whitespace           = no\n  whitespace_cache              = []\n  replacement                   = null\n  has_cjk_glue                  = no\n  #.........................................................................................................\n  unless tex_command_by_rsgs?\n    throw new Error \"need setting 'tex-command-by-rsgs'\"\n  #.........................................................................................................\n  advance_whitespace = =>\n    chunk.splice chunk.length, 0, whitespace_cache...\n    whitespace_cache.length = 0\n  #.........................................................................................................\n  advance = =>\n    if chunk.length > 0\n      # debug '©zDJqU', last_command, JSON.stringify chunk.join '.'\n      R.push chunk.join ''\n      R.push \"}\" unless last_command in [ null, 'latin', 'cn', ]\n    chunk.length = 0\n    return null\n  #.........................................................................................................\n  for chr in XNCHR.chrs_from_text text\n    ### Treat whitespace specially ###\n    if ( this_is_whitespace = chr in [ '\\x20', '\\n', '\\r', '\\t', ] )\n      whitespace_cache.push chr\n      continue\n    #.......................................................................................................\n    { chr\n      uchr\n      fncr\n      rsg   }   = XNCHR.analyze chr\n    #.......................................................................................................\n    switch rsg\n      when 'jzr-fig'  then chr = uchr\n      when 'u-pua'    then rsg = 'jzr-fig'\n      when 'u-latn'   then chr = @escape_for_tex chr\n    #.......................................................................................................\n    this_is_cjk = @is_cjk_rsg rsg, options\n    if ( not last_was_cjk ) and ( this_is_cjk )\n      advance_whitespace()\n      # advance()\n      chunk.push \"{\\\\cjk{}\"\n    else if ( last_was_cjk ) and ( not this_is_cjk )\n      chunk.push \"}\"\n      advance_whitespace()\n    else if whitespace_cache.length > 0\n      advance_whitespace()\n    last_was_cjk = this_is_cjk\n    #.......................................................................................................\n    ### TAINT if chr is a TeX active ASCII chr like `$`, `#`, then it will be escaped at this point\n    and no more match entries in `glyph_styles` ###\n    # debug '©53938-1', chr, rsg, tex_command_by_rsgs[ rsg ]\n    if ( replacement = glyph_styles[ chr ] )?\n      advance()\n      ### TAINT duplication from below: ###\n      command   = tex_command_by_rsgs[ rsg ] ? null\n      rpl       = []\n      rpl.push '\\\\cjkgGlue' unless has_cjk_glue\n      rpl.push '{'\n      rpl_push  = replacement[ 'push'   ] ? null\n      rpl_raise = replacement[ 'raise'  ] ? null\n      rpl_chr   = replacement[ 'glyph'  ] ? chr\n      rpl_cmd   = replacement[ 'cmd'    ] ? command\n      rpl_cmd   = null if rpl_cmd is 'cn'\n      if      rpl_push? and rpl_raise?  then rpl.push \"\\\\tfPushRaise{#{rpl_push}}{#{rpl_raise}}\"\n      else if rpl_push?                 then rpl.push \"\\\\tfPush{#{rpl_push}}\"\n      else if               rpl_raise?  then rpl.push \"\\\\tfRaise{#{rpl_raise}}\"\n      if rpl_cmd?                       then rpl.push \"\\\\#{rpl_cmd}{}\"\n      rpl.push rpl_chr\n      rpl.push '\\\\cjkgGlue}'\n      R.push rpl.join ''\n      has_cjk_glue  = yes\n      last_command  = null\n      continue\n    #.......................................................................................................\n    else\n      has_cjk_glue = no\n    #.......................................................................................................\n    unless ( command = tex_command_by_rsgs[ rsg ] )?\n      command = tex_command_by_rsgs[ 'fallback' ] ? null\n      message = \"unknown RSG #{rpr rsg}: #{fncr} #{chr} (using fallback #{rpr command})\"\n      if send? then send remark 'warn', message, {}\n      else          warn message\n    #.......................................................................................................\n    unless command?\n      advance()\n      chunk.push chr\n      continue\n    #.......................................................................................................\n    # debug '©53938-2', chr, rsg, tex_command_by_rsgs[ rsg ]\n    if advance_each_chr or last_command isnt command\n      advance()\n      last_command = command\n      ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n      unless command in [ 'latin', 'cn', ]\n        # command = 'cn'\n        chunk.push \"{\\\\#{command}{}\"\n      # chunk.push \"{\\\\#{command}{}\" unless command is 'latin'\n      ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n    #.......................................................................................................\n    chunk.push chr\n  #.........................................................................................................\n  chunk.push \"}\" if this_is_cjk\n  advance_whitespace() if whitespace_cache.length > 0\n  advance()\n  return R.join ''\n\n"]}