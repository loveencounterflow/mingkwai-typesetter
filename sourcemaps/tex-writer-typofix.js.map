{"version":3,"sources":["tex-writer-typofix.coffee"],"names":[],"mappings":"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","file":"tex-writer-typofix.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\n# njs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'mkts/tex-writer-typofix'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nXNCHR                     = require './xnchr'\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_tex_escape_replacements = [\n  [ /// \\x01        ///g,  '\\x01\\x02',              ]\n  [ /// \\x5c        ///g,  '\\x01\\x01',              ]\n  [ ///  \\{         ///g,  '\\\\{',                   ]\n  [ ///  \\}         ///g,  '\\\\}',                   ]\n  [ ///  \\$         ///g,  '\\\\$',                   ]\n  [ ///  \\#         ///g,  '\\\\#',                   ]\n  [ ///  %          ///g,  '\\\\%',                   ]\n  [ ///  _          ///g,  '\\\\_',                   ]\n  [ ///  \\^         ///g,  '\\\\textasciicircum{}',   ]\n  [ ///  ~          ///g,  '\\\\textasciitilde{}',    ]\n  [ ///  &          ///g,  '\\\\&',                   ]\n  [ /// \\x01\\x01    ///g,  '\\\\textbackslash{}',     ]\n  [ /// \\x01\\x02    ///g,  '\\x01',                  ]\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@escape_for_tex = ( text ) =>\n  R = text\n  for [ pattern, replacement, ], idx in @_tex_escape_replacements\n    R = R.replace pattern, replacement\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$fix_typography_for_tex = ( S ) =>\n  return $ ( event, send ) =>\n    if select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      meta[ 'raw' ] = text\n      text          = @fix_typography_for_tex text, S.options\n      send [ type, name, text, meta, ]\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@is_cjk_rsg = ( rsg, options ) => rsg in options[ 'tex' ][ 'cjk-rsgs' ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_get_cjk_interchr_glue = ( options ) => options[ 'tex' ]?[ 'cjk-interchr-glue' ] ? '\\ue080'\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @fix_typography_for_tex = ( text, options, send = null ) =>\n#   ### An improved version of `XELATEX.tag_from_chr` ###\n#   ### TAINT should accept settings, fall back to `require`d `options.coffee` ###\n#   glyph_styles                  = options[ 'tex' ]?[ 'glyph-styles'             ] ? {}\n#   ### Legacy mode: force one command per non-latin character. This is OK for Chinese texts,\n#   but a bad idea for all other scripts; in the future, MKTS's TeX formatting commands like\n#   `\\cn{}` will be rewritten to make this setting superfluous. ###\n#   advance_each_chr              = options[ 'tex' ]?[ 'advance-each-chr'         ] ? no\n#   tex_command_by_rsgs           = options[ 'tex' ]?[ 'tex-command-by-rsgs'      ]\n#   last_command                  = null\n#   R                             = []\n#   chunk                         = []\n#   last_rsg                      = null\n#   remark                        = if send? then @_get_remark() else null\n#   this_is_cjk                   = no\n#   last_was_cjk                  = no\n#   this_is_whitespace            = no\n#   last_was_whitespace           = no\n#   whitespace_cache              = []\n#   replacement                   = null\n#   has_cjk_glue                  = no\n#   #.........................................................................................................\n#   unless tex_command_by_rsgs?\n#     throw new Error \"need setting 'tex-command-by-rsgs'\"\n#   #.........................................................................................................\n#   advance_whitespace = =>\n#     chunk.splice chunk.length, 0, whitespace_cache...\n#     debug '©92451', 'advance_whitespace', chunk\n#     whitespace_cache.length = 0\n#   #.........................................................................................................\n#   advance = =>\n#     if chunk.length > 0\n#       # debug '©zDJqU', last_command, JSON.stringify chunk.join '.'\n#       R.push chunk.join ''\n#       R.push \"}\" unless last_command in [ null, 'latin', 'cn', ]\n#     chunk.length = 0\n#     return null\n#   #.........................................................................................................\n#   for chr in XNCHR.chrs_from_text text\n#     ### Treat whitespace specially ###\n#     if ( this_is_whitespace = chr in [ '\\x20', '\\n', '\\r', '\\t', ] )\n#       whitespace_cache.push chr\n#       continue\n#     #.......................................................................................................\n#     { chr\n#       uchr\n#       fncr\n#       rsg   }   = XNCHR.analyze chr\n#     #.......................................................................................................\n#     switch rsg\n#       when 'jzr-fig'  then chr = uchr\n#       when 'u-pua'    then rsg = 'jzr-fig'\n#       when 'u-latn'   then chr = @escape_for_tex chr\n#     #.......................................................................................................\n#     this_is_cjk = @is_cjk_rsg rsg, options\n#     if ( not last_was_cjk ) and ( this_is_cjk )\n#       advance_whitespace()\n#       # advance()\n#       chunk.push \"{\\\\cjk{}\"\n#       has_cjk_glue = yes\n#     else if ( last_was_cjk ) and ( not this_is_cjk )\n#       chunk.push \"}\"\n#       has_cjk_glue = yes # implicitly true\n#       advance_whitespace()\n#     else if whitespace_cache.length > 0\n#       advance_whitespace()\n#     last_was_cjk = this_is_cjk\n#     #.......................................................................................................\n#     ### TAINT if chr is a TeX active ASCII chr like `$`, `#`, then it will be escaped at this point\n#     and no more match entries in `glyph_styles` ###\n#     # debug '©53938-1', chr, rsg, tex_command_by_rsgs[ rsg ]\n#     if ( replacement = glyph_styles[ chr ] )?\n#       # debug '©44340', rpr chr\n#       # debug '©44340', chunk\n#       advance()\n#       ### TAINT duplication from below: ###\n#       command   = tex_command_by_rsgs[ rsg ] ? null\n#       rpl       = []\n#       # rpl.push '\\\\cjkgGlue' unless has_cjk_glue\n#       rpl.push '{'\n#       rpl_push  = replacement[ 'push'   ] ? null\n#       rpl_raise = replacement[ 'raise'  ] ? null\n#       rpl_chr   = replacement[ 'glyph'  ] ? chr\n#       rpl_cmd   = replacement[ 'cmd'    ] ? command\n#       rpl_cmd   = null if rpl_cmd is 'cn'\n#       if      rpl_push? and rpl_raise?  then rpl.push \"\\\\tfPushRaise{#{rpl_push}}{#{rpl_raise}}\"\n#       else if rpl_push?                 then rpl.push \"\\\\tfPush{#{rpl_push}}\"\n#       else if               rpl_raise?  then rpl.push \"\\\\tfRaise{#{rpl_raise}}\"\n#       if rpl_cmd?                       then rpl.push \"\\\\#{rpl_cmd}{}\"\n#       rpl.push rpl_chr\n#       R.push rpl.join ''\n#       has_cjk_glue  = yes\n#       last_command  = null\n#       continue\n#     #.......................................................................................................\n#     else\n#       has_cjk_glue = no\n#     #.......................................................................................................\n#     unless ( command = tex_command_by_rsgs[ rsg ] )?\n#       command = tex_command_by_rsgs[ 'fallback' ] ? null\n#       message = \"unknown RSG #{rpr rsg}: #{fncr} #{chr} (using fallback #{rpr command})\"\n#       if send? then send remark 'warn', message, {}\n#       else          warn message\n#     #.......................................................................................................\n#     unless command?\n#       advance()\n#       chunk.push chr\n#       continue\n#     #.......................................................................................................\n#     # debug '©53938-2', chr, rsg, tex_command_by_rsgs[ rsg ]\n#     debug '©46011', ( rpr chr ), command, R\n#     if advance_each_chr or last_command isnt command\n#       advance()\n#       last_command = command\n#       ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n#       unless command in [ 'latin', 'cn', ]\n#         chunk.push \"{\\\\#{command}{}\"\n#       ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n#     #.......................................................................................................\n#     chunk.push chr\n#   #.........................................................................................................\n#   advance_whitespace() if whitespace_cache.length > 0\n#   chunk.push \"}\" if this_is_cjk\n#     # if has_cjk_glue then  chunk.push \"}\"\n#     # else                  chunk.push \"\\\\cjkgGlue}\"\n#   advance()\n#   return R.join ''\n\n#-----------------------------------------------------------------------------------------------------------\n@_analyze_chr = ( S, chr ) ->\n    #.......................................................................................................\n    R = XNCHR.analyze chr\n    #.......................................................................................................\n    switch R.rsg\n      when 'jzr-fig'  then R.chr = R.uchr\n      when 'u-pua'    then R.rsg = 'jzr-fig'\n      when 'u-latn'   then R.chr = @escape_for_tex chr\n    #.......................................................................................................\n    ### OBS `chr` has still the value this method was called with, so styling should work even for `u-latn`\n    characters ###\n    R.styled_chr    = @_style_chr S, R.rsg, chr\n    R.is_cjk        = R.rsg in S.cjk_rsgs\n    R.is_whitespace = chr   in S.whitespace\n    return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_style_chr = ( S, rsg, chr ) ->\n  rsg_command         = S.tex_command_by_rsgs[ rsg ]\n  rsg_command         = null if rsg_command in [ 'latin', 'cn', ]\n  style               = S.glyph_styles[ chr ]\n  #.........................................................................................................\n  return null if ( not rsg_command? ) and ( not style? )\n  #.........................................................................................................\n  if style?\n    R         = []\n    R.push \"\\\\cjkgGlue{\"\n    rpl_push  = style[ 'push'   ] ? null\n    rpl_raise = style[ 'raise'  ] ? null\n    rpl_chr   = style[ 'glyph'  ] ? chr\n    rpl_cmd   = style[ 'cmd'    ] ? rsg_command\n    rpl_cmd   = null if rpl_cmd is 'cn'\n    if      rpl_push? and rpl_raise?  then R.push \"\\\\tfPushRaise{#{rpl_push}}{#{rpl_raise}}\"\n    else if rpl_push?                 then R.push \"\\\\tfPush{#{rpl_push}}\"\n    else if               rpl_raise?  then R.push \"\\\\tfRaise{#{rpl_raise}}\"\n    if rpl_cmd?                       then R.push \"\\\\#{rpl_cmd}{}\"\n    R.push rpl_chr\n    R.push \"\\\\cjkgGlue}\"\n    R = R.join ''\n  #.........................................................................................................\n  else\n    ### TAINT does not collect glyphs with same RSG ###\n    ### TAINT glue necessary? ###\n    R = \"{\\\\#{rsg_command}{}#{chr}}\"\n    # return \"\\\\cjkgGlue{\\\\#{rsg_command}#{chr}\\\\cjkgGlue}\"\n    # if S.last_rsg_command is rsg_command\n    #   R = chr\n    # else\n    #   if S.last_rsg_command?\n    #     R = \"}{\\\\#{rsg_command}{}#{chr}}\"\n    # else\n    #   R = chr\n  #.........................................................................................................\n  S.last_rsg_command = rsg_command\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_move_whitespace = ( S ) ->\n  S.collector.splice S.collector.length, 0, S.ws_collector...\n  S.ws_collector.length = 0\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_push = ( S, chr, postpone_ws = no ) ->\n  @_move_whitespace S unless postpone_ws\n  S.collector.push chr if chr?\n  @_move_whitespace S if     postpone_ws\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_push_whitespace = ( S, chr ) ->\n  S.ws_collector.push chr\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@fix_typography_for_tex = ( text, options, send = null ) =>\n  # last_rsg_command                  = null\n  # R                             = []\n  # chunk                         = []\n  # last_rsg                      = null\n  # remark                        = if send? then @_get_remark() else null\n  # this_is_whitespace            = no\n  # last_was_whitespace           = no\n  # whitespace_cache              = []\n  # replacement                   = null\n  # has_cjk_glue                  = no\n  S =\n    cjk_rsgs:                     options[ 'tex' ]?[ 'cjk-rsgs' ] ? null\n    glyph_styles:                 options[ 'tex' ]?[ 'glyph-styles'             ] ? {}\n    tex_command_by_rsgs:          options[ 'tex' ]?[ 'tex-command-by-rsgs'      ]\n    ws_collector:                 []\n    collector:                    []\n    whitespace:                   '\\x20\\n\\r\\t'\n    this_is_cjk:                  no\n    last_was_cjk:                 no\n    last_rsg_command:             null\n    R:                            null\n  #.........................................................................................................\n  throw new Error \"need setting 'tex-command-by-rsgs'\" unless S.tex_command_by_rsgs?\n  throw new Error \"need setting 'cjk-rsgs'\" unless S.cjk_rsgs?\n  #.........................................................................................................\n  for chr in XNCHR.chrs_from_text text\n    A = @_analyze_chr S, chr\n    #.......................................................................................................\n    ### Whitespace is ambiguous; it is treated as CJK when coming between two unambiguous CJK characters and\n    as non-CJK otherwise; to decide between these cases, we have to wait for the next non-whitespace\n    character: ###\n    if A.is_whitespace\n      @_push_whitespace S, chr\n      continue\n    #.......................................................................................................\n    S.last_was_cjk  = S.this_is_cjk\n    S.this_is_cjk   = A.is_cjk\n    #.......................................................................................................\n    ### In case we're entering a region of CJK characters, we have to start a group and issue a `\\cjk`\n    command; before we do that, any cached whitespace will be moved into the result. If we're leaving a\n    CJK region, the group must be closed first and followed by any cached whitespace: ###\n    if ( not S.last_was_cjk ) and ( S.this_is_cjk )\n      @_push S, \"{\\\\cjk{}\"\n    else if ( S.last_was_cjk ) and ( not S.this_is_cjk )\n      @_push S, \"}\", yes\n    #.......................................................................................................\n    if A.styled_chr?\n      # @_push \"\\\\cjkGlue\" if S.this_is_cjk\n      @_push S, A.styled_chr\n    else\n      @_push S, A.chr\n  #.........................................................................................................\n  ### TAINT here we should keep state across text chunks to decide on cases like\n  `國 **b** 國` vs `國 **國** 國` ###\n  @_push S\n  @_push S, '}' if S.this_is_cjk\n  return S.collector.join ''\n\n\n\n\n\n\n\n\n\n"]}