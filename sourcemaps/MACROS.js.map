{"version":3,"sources":["MACROS.coffee"],"names":[],"mappings":"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","file":"MACROS.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\n# njs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/MACROS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#-----------------------------------------------------------------------------------------------------------\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n# $async                    = D.remit_async.bind D\n#...........................................................................................................\n# Markdown_parser           = require 'markdown-it'\n# # Html_parser               = ( require 'htmlparser2' ).Parser\n# new_md_inline_plugin      = require 'markdown-it-regexp'\n#...........................................................................................................\n# HELPERS                   = require './HELPERS'\n#...........................................................................................................\n# misfit                    = Symbol 'misfit'\nMKTS                      = require './MKTS'\n# hide                      = MKTS.hide.bind        MKTS\n# copy                      = MKTS.copy.bind        MKTS\n# stamp                     = MKTS.stamp.bind       MKTS\n# select                    = MKTS.select.bind      MKTS\n# is_hidden                 = MKTS.is_hidden.bind   MKTS\n# is_stamped                = MKTS.is_stamped.bind  MKTS\n\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\n@initialize_state = ( state ) =>\n  state[ 'MACROS' ] =\n    registry:   []\n  return state\n\n#-----------------------------------------------------------------------------------------------------------\n@_match_first = ( patterns, text ) =>\n  for pattern in patterns\n    return R if ( R = text.match pattern )?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_register_content = ( S, kind, markup, raw, parsed = null ) =>\n  registry  = S[ 'MACROS' ][ 'registry' ]\n  idx     = registry.length\n  key     = \"#{kind}#{idx}\"\n  registry.push { key, markup, raw, parsed, }\n  return key\n\n#-----------------------------------------------------------------------------------------------------------\n@_retrieve_entry = ( S, id ) =>\n  throw new Error \"unknown ID #{rpr id}\" unless ( R = S[ 'MACROS' ][ 'registry' ][ id ] )?\n  return R\n\n#===========================================================================================================\n# PATTERNS\n#-----------------------------------------------------------------------------------------------------------\n@PATTERNS = {}\n\n#-----------------------------------------------------------------------------------------------------------\n@html_comment_patterns = [\n  ///                           # HTML comments...\n    ( ^ | [^\\\\] )               # may be escaped with a backslash (NB: unlike as in HTML proper);\n    <!--                        # the start with less-than, exclamation mark, double hyphen;\n    ( [ \\s\\S ]*? )              # then: anything, not-greedy, until we hit upon\n    -->                         # a double-slash, then greater-than.\n    ///g                        # (NB: end-of-comment cannot be escaped, because HTML).\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@action_patterns = [\n  ///                           # A silent or vocal action macro...\n                                #\n                                # Start Tag\n                                # =========\n  ( ^ | [^ \\\\ ] )               # starts either at the first chr or a chr other than backslash\n  <<\\(                          # then: two left pointy brackets, then: left round bracket,\n    ( [ . : ]                   # then: a dot or a colon;\n      (?:                       # then:\n        \\\\>                |    #   or: an escaped right pointy bracket (RPB)\n        [^ > ]             |    #   or: anything but a RPB\n        > (?! > )               #   or: a RPB not followed by yet another RPB\n      )*                        # repeated any number of times\n    )\n    >>                          # then: two RPBs...\n                                #\n                                # Content\n                                # =========\n    (\n      (?:                       # ...followed by content, which is:\n        \\\\<                |    #   or: an escaped left pointy bracket (LPB)\n        [^ < ]             |    #   or: anything but a LPB\n        < (?! < )               #   or: a LPB not followed by yet another LPB\n      )*                        # repeated any number of times\n      )\n                                #\n                                # Stop Tag\n                                # =========\n  <<                            # then: two left pointy brackets,\n    ( \\2 ? )                    # then: optionally, whatever appeared in the start tag,\n    \\)>>                        # then: right round bracket, then: two RPBs.\n  ///g\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@region_patterns = [\n  ///                           # A region macro...\n                                #\n                                # Start Tag\n                                # =========\n  ( ^ | [^ \\\\ ] )               # starts either at the first chr or a chr other than backslash\n  <<\\(                          # then: two left pointy brackets, then: left round bracket,\n    (                           #\n      (?:                       # then:\n        \\\\>                |    #   or: an escaped right pointy bracket (RPB)\n        [^ > ]             |    #   or: anything but a RPB\n        > (?! > )               #   or: a RPB not followed by yet another RPB\n      )*                        # repeated any number of times\n    )\n    >>                          # then: two RPBs...\n                                #\n                                # Content\n                                # =========\n    (\n      (?:                       # ...followed by content, which is:\n        \\\\<                |    #   or: an escaped left pointy bracket (LPB)\n        [^ < ]             |    #   or: anything but a LPB\n        < (?! < )               #   or: a LPB not followed by yet another LPB\n      )*                        # repeated any number of times\n      )\n                                #\n                                # Stop Tag\n                                # =========\n  <<                            # then: two left pointy brackets,\n    ( \\2 ? )                    # then: optionally, whatever appeared in the start tag,\n    \\)>>                        # then: right round bracket, then: two RPBs.\n  ///g\n  ]\n\n# debug '234652', @action_patterns\n# debug \"abc<<(:js>>4 + 3<<:js)>>def\".match @action_patterns[ 0 ]\n# process.exit()\n\n#-----------------------------------------------------------------------------------------------------------\n@bracketed_raw_patterns = [\n  ///                           # A bracketed raw macro\n  ( ^ | [^ \\\\ ] )               # starts either at the first chr or a chr other than backslash\n  <<(<)                         # then: three left pointy brackets,\n    (\n      (?:                       # then:\n        \\\\>                |    #   or: an escaped right pointy bracket (RPB)\n        [^ > ]             |    #   or: anything but a RPB\n        >{1,2} (?! > )          #   or: one or two RPBs not followed by yet another RPB\n      )*                        # repeated any number of times\n    )\n    >>>                         # then: three RPBs.\n  ///g\n  ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @raw_heredoc_pattern  = ///\n#   ( ^ | [^\\\\] ) <<! raw: ( [^\\s>]* )>> ( .*? ) \\2\n#   ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@command_and_value_patterns = [\n  ///                           # A command macro\n  ( ^ | [^ \\\\ ] )               # starts either at the first chr or a chr other than backslash\n  <<                            # then: two left pointy brackets,\n    ( [ ! $ ] )                 # then: an exclamation mark or a dollar sign,\n    (\n      (?:                       # then:\n        \\\\>                |    #   or: an escaped right pointy bracket (RPB)\n        [^ > ]             |    #   or: anything but a RPB\n        > (?! > )               #   or: a RPB not followed by yet another RPB\n      )*                        # repeated any number of times\n    )\n    >>                          # then: two RPBs.\n  ///g\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n### NB The end command macro looks like any other command except we can detect it with a much simpler\nRegEx; we want to do that so we can, as a first processing step, remove it and any material that appears\nafter it, thereby inhibiting any processing of those portions. ###\n@end_command_patterns = [\n  ///                           # Then end command macro\n  ( ^ |                         # starts either at the first chr\n    ^ [ \\s\\S ]+ [^ \\\\ ] )       # or a number of chrs whose last one is not a backslash\n  <<!end>>                      # then: the `<<!end>>` literal.\n  ///                           # NB that this pattern is not global.\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@illegal_patterns = [\n  ///                           # After applying all other macro patterns, treat as error: pattern that\n  ( ^ | [^ \\\\ ] )               # starts either at the first chr or a chr other than backslash\n  ( << | >> )                   # then: either two left or two right pointy brackets\n  ( [ \\s\\S ] { 0, 10 } )        # followed by any characters (matched for diagnostic messages).\n                                # In other words, you must not have two consecutive unescaped left pointy\n                                # brackets in the MD source, even where those LPBs do not form a macro\n                                # pattern.\n  ///g\n  ]\n\n#===========================================================================================================\n# ESCAPING\n#-----------------------------------------------------------------------------------------------------------\n@escape = ( S, text ) =>\n  # debug '©II6XI', rpr text\n  [ R, discard_count, ] = @escape.truncate_text_at_end_command_macro S, text\n  whisper \"detected <<!end>> macro; discarding approx. #{discard_count} characters\" if discard_count > 0\n  R = @escape.escape_chrs              S, R\n  R = @escape.html_comments            S, R\n  R = @escape.bracketed_raw_macros     S, R\n  R = @escape.action_macros            S, R\n  R = @escape.region_macros            S, R\n  R = @escape.command_and_value_macros S, R\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.truncate_text_at_end_command_macro = ( S, text ) =>\n  return [ text, 0, ] unless ( match = @_match_first @end_command_patterns, text )?\n  R = match[ 1 ]\n  return [ R, text.length - R.length, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.escape_chrs = ( S, text ) =>\n  R = text\n  R = R.replace /\\x10/g, '\\x10A'\n  R = R.replace /\\x15/g, '\\x10X'\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.unescape_escape_chrs = ( S, text ) =>\n  R = text\n  R = R.replace /\\x10X/g, '\\x15'\n  R = R.replace /\\x10A/g, '\\x10'\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.html_comments = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  for pattern in @html_comment_patterns\n    R = R.replace pattern, ( _, previous_chr, content ) =>\n      key = @_register_content S, 'comment', null, content, content.trim()\n      return \"#{previous_chr}\\x15#{key}\\x13\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.bracketed_raw_macros = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  for pattern in @bracketed_raw_patterns\n    R = R.replace pattern, ( _, previous_chr, markup, content ) =>\n      id = @_register_content S, 'raw', markup, content\n      return \"#{previous_chr}\\x15#{id}\\x13\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.action_macros = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  for pattern in @action_patterns\n    R = R.replace pattern, ( _, previous_chr, starter, content, stopper ) =>\n      mode      = starter[ 0 ]\n      mode      = if mode is '.' then 'silent' else 'vocal'\n      language  = starter[ 1 .. ]\n      language  = 'coffee' if language is ''\n      ### TAINT not using arguments peoperly ###\n      id        = @_register_content S, 'action', [ mode, language, ], content\n      return \"#{previous_chr}\\x15#{id}\\x13\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.region_macros = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  for pattern in @region_patterns\n    R = R.replace pattern, ( _, previous_chr, starter, content, stopper ) =>\n      ### TAINT not using arguments peoperly ###\n      starter_rpr = \"<<(#{starter}>>\"\n      stopper_rpr = \"<<#{stopper})>>\"\n      starter_id  = @_register_content S, 'region', '(', starter\n      stopper_id  = @_register_content S, 'region', ')', starter\n      return \"#{previous_chr}\\x15#{starter_id}\\x13#{content}\\x15#{stopper_id}\\x13\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@escape.command_and_value_macros = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  for pattern in @command_and_value_patterns\n    R = R.replace pattern, ( _, previous_chr, markup, content ) =>\n      kind            = if markup is '!' then 'command' else 'value'\n      key             = @_register_content S, kind, markup, content, null\n      return \"#{previous_chr}\\x15#{key}\\x13\"\n  #.........................................................................................................\n  return R\n\n\n#===========================================================================================================\n# EXPANDING\n#-----------------------------------------------------------------------------------------------------------\n@raw_id_pattern = ///\n  \\x15 raw ( [ 0-9 ]+ ) \\x13\n  ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@html_comment_id_pattern = ///\n  \\x15 comment ( [ 0-9 ]+ ) \\x13\n  ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@command_and_value_id_pattern = ///\n  \\x15 (?: command | value ) ( [ 0-9 ]+ ) \\x13\n  ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@action_id_pattern = ///\n  \\x15 action ( [ 0-9 ]+ ) \\x13\n  ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@region_id_pattern = ///\n  \\x15 region ( [ 0-9 ]+ ) \\x13\n  ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand_html_comments = ( S ) =>\n  ### TAINT code duplication ###\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if MKTS.select event, '.', 'text'\n      is_plain                    = no\n      [ type, name, text, meta, ] = event\n      for stretch in text.split @html_comment_id_pattern\n        is_plain = not is_plain\n        unless is_plain\n          id                  = parseInt stretch, 10\n          entry               = @_retrieve_entry S, id\n          content             = entry[ 'raw' ]\n          send [ '.', 'comment', content, ( MKTS.copy meta ), ]\n        else\n          send [ type, name, stretch, ( MKTS.copy meta ), ] unless stretch.length is 0\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand_action_macros  = ( S ) =>\n  ### TAINT code duplication ###\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if MKTS.select event, '.', 'text'\n      is_plain                    = no\n      [ type, name, text, meta, ] = event\n      for stretch in text.split @action_id_pattern\n        is_plain = not is_plain\n        unless is_plain\n          id                  = parseInt stretch, 10\n          entry               = @_retrieve_entry S, id\n          [ mode, language, ] = entry[ 'markup' ]\n          content             = entry[ 'raw' ]\n          send [ '.', 'action', content, ( MKTS.copy meta, { mode, language, } ), ]\n        else\n          send [ type, name, stretch, ( MKTS.copy meta ), ] unless stretch.length is 0\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand_raw_macros  = ( S ) =>\n  ### TAINT code duplication ###\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if MKTS.select event, '.', 'text'\n      is_plain                    = no\n      [ type, name, text, meta, ] = event\n      for stretch in text.split @raw_id_pattern\n        is_plain = not is_plain\n        unless is_plain\n          id                  = parseInt stretch, 10\n          entry               = @_retrieve_entry S, id\n          content             = entry[ 'raw' ]\n          send [ '.', 'raw', content, ( MKTS.copy meta ), ]\n        else\n          send [ type, name, stretch, ( MKTS.copy meta ), ] unless stretch.length is 0\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand_command_and_value_macros = ( S ) =>\n  ### TAINT code duplication ###\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if MKTS.select event, '.', 'text'\n      is_plain                    = no\n      [ type, name, text, meta, ] = event\n      for stretch in text.split @command_and_value_id_pattern\n        is_plain = not is_plain\n        unless is_plain\n          id                  = parseInt stretch, 10\n          entry               = @_retrieve_entry S, id\n          { raw\n            markup}           = entry\n          macro_type          = if markup is '!' then 'command' else 'value'\n          send [ '.', macro_type, raw, ( MKTS.copy meta ), ]\n        else\n          send [ type, name, stretch, ( MKTS.copy meta ), ] unless stretch.length is 0\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$expand_region_macros = ( S ) =>\n  ### TAINT code duplication ###\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if MKTS.select event, '.', 'text'\n      is_plain                    = no\n      [ type, name, text, meta, ] = event\n      for stretch in text.split @region_id_pattern\n        is_plain = not is_plain\n        unless is_plain\n          id                  = parseInt stretch, 10\n          entry               = @_retrieve_entry S, id\n          { raw\n            markup}           = entry\n          send [ markup, raw, null, ( MKTS.copy meta ), ]\n        else\n          send [ type, name, stretch, ( MKTS.copy meta ), ] unless stretch.length is 0\n    #.......................................................................................................\n    else\n      send event\n\n"]}