{"version":3,"sources":["TEXLIVEPACKAGEINFO.coffee"],"names":[],"mappings":"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","file":"TEXLIVEPACKAGEINFO.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\n# njs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/TEXLIVEPACKAGEINFO'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n# #...........................................................................................................\n# suspend                   = require 'coffeenode-suspend'\n# step                      = suspend.step\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n#...........................................................................................................\n{ CACHE, OPTIONS, }       = require './OPTIONS'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@read_texlive_package_version = ( options, package_name, handler ) ->\n  key     = \"texlive-package-versions/#{package_name}\"\n  method  = ( done ) => @_read_texlive_package_version package_name, done\n  CACHE.get options, key, method, yes, handler\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_read_texlive_package_version = ( package_name, handler ) ->\n  ### Given a `package_name` and a `handler`, try to retrieve that package's info as reported by the TeX\n  Live Manager command line tool (using `tlmgr info ${package_name}`), extract the `cat-version` entry and\n  normalize it so it matches the [Semantic Versioning specs](http://semver.org/). If no version is found,\n  the `handler` will be called with a `null` value instead of a string; however, if a version *is* found but\n  does *not* match the SemVer specs after normalization, the `handler` will be called with an error.\n\n  Normalization steps include removing leading `v`s, trailing letters, and leading zeroes. ###\n  leading_zero_pattern  = /^0+(?!$)/\n  semver_pattern        = /^([0-9]+)\\.([0-9]+)\\.?([0-9]*)$/\n  @read_texlive_package_info package_name, ( error, package_info ) =>\n    return handler error if error?\n    #.......................................................................................................\n    unless ( version = o_version = package_info[ 'cat-version' ] )?\n      warn \"unable to detect version for package #{rpr package_name}\"\n      return handler null, null\n      # return handler new Error \"unable to detect version for package #{rpr package_name}\"\n    #.......................................................................................................\n    version = version.replace /[^0-9]+$/, ''\n    version = version.replace /^v/, ''\n    #.......................................................................................................\n    unless ( match = version.match semver_pattern )?\n      return handler new Error \"unable to parse version #{rpr o_version} of package #{rpr name}\"\n    #.......................................................................................................\n    [ _, major, minor, patch, ] = match\n    ### thx to http://stackoverflow.com/a/2800839/256361 ###\n    major = major.replace leading_zero_pattern, ''\n    minor = minor.replace leading_zero_pattern, ''\n    patch = patch.replace leading_zero_pattern, ''\n    major = if major.length > 0 then major else '0'\n    minor = if minor.length > 0 then minor else '0'\n    patch = if patch.length > 0 then patch else '0'\n    #.......................................................................................................\n    handler null, \"#{major}.#{minor}.#{patch}\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@read_texlive_package_info = ( package_name, handler ) ->\n  command     = 'tlmgr'\n  parameters  = [ 'info', package_name, ]\n  input       = D.spawn_and_read_lines command, parameters\n  Z           = {}\n  pattern     = /^([^:]+):(.*)$/\n  #.........................................................................................................\n  input\n    #.......................................................................................................\n    .pipe $ ( line, send ) =>\n      return if line.length is 0\n      match = line.match pattern\n      return send.error new Error \"unexpected line: #{rpr line}\" unless match?\n      [ _, name, value, ] = match\n      name                = name.trim()\n      value               = value.trim()\n      Z[ name ]           = value\n    #.......................................................................................................\n    .pipe D.$on_end -> handler null, Z\n  #.........................................................................................................\n  return null\n"]}