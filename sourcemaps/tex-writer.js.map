{"version":3,"sources":["tex-writer.coffee"],"names":[],"mappings":"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","file":"tex-writer.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MK/TS/TEX-WRITER'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nASYNC                     = require 'async'\n#...........................................................................................................\nƒ                         = CND.format_number.bind CND\nHELPERS                   = require './helpers'\nTEXLIVEPACKAGEINFO        = require './texlivepackageinfo'\noptions_route             = '../options.coffee'\n{ CACHE, OPTIONS, }       = require './options'\nSEMVER                    = require 'semver'\n#...........................................................................................................\nXNCHR                     = require './xnchr'\nMKTS                      = require './main'\nMKTSCRIPT_WRITER          = require './mktscript-writer'\nMD_READER                 = require './md-reader'\nhide                      = MD_READER.hide.bind        MD_READER\ncopy                      = MD_READER.copy.bind        MD_READER\nstamp                     = MD_READER.stamp.bind       MD_READER\nunstamp                   = MD_READER.unstamp.bind     MD_READER\nselect                    = MD_READER.select.bind      MD_READER\nis_hidden                 = MD_READER.is_hidden.bind   MD_READER\nis_stamped                = MD_READER.is_stamped.bind  MD_READER\nMACRO_ESCAPER             = require './macro-escaper'\nMACRO_INTERPRETER         = require './macro-interpreter'\nLINEBREAKER               = require './linebreaker'\n@COLUMNS                  = require './tex-writer-columns'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n### TAINT experimental, should become part of `PIPEDREAMS` to facilitate automated assembly of pipelines\nbased on registered precedences using `CND.TSORT` ###\nbefore = ( names..., method ) ->\n  return method\n\n#-----------------------------------------------------------------------------------------------------------\nafter = ( names..., method ) ->\n  return method\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@compile_options = ->\n  ### TAINT this method should go to OPTIONS ###\n  options_locator                   = require.resolve njs_path.resolve __dirname, options_route\n  # debug '©zNzKn', options_locator\n  options_home                      = njs_path.dirname options_locator\n  @options                          = OPTIONS.from_locator options_locator\n  @options[ 'home' ]                = options_home\n  @options[ 'locator' ]             = options_locator\n  cache_route                       = @options[ 'cache' ][ 'route' ]\n  @options[ 'cache' ][ 'locator' ]  = cache_locator = njs_path.resolve options_home, cache_route\n  @options[ 'xelatex-command' ]     = njs_path.resolve options_home, @options[ 'xelatex-command' ]\n  #.........................................................................................................\n  unless njs_fs.existsSync cache_locator\n    @options[ 'cache' ][ '%self' ] = {}\n    CACHE.save @options\n  #.........................................................................................................\n  @options[ 'cache' ][ '%self' ]    = require cache_locator\n  #.........................................................................................................\n  if ( texinputs_routes = @options[ 'texinputs' ]?[ 'routes' ] )?\n    locators = []\n    for route in texinputs_routes\n      has_single_slash  = ( /\\/$/   ).test route\n      has_double_slash  = ( /\\/\\/$/ ).test route\n      locator           = njs_path.resolve options_home, route\n      if      has_double_slash then locator += '//'\n      else if has_single_slash then locator += '/'\n      locators.push locator\n    ### TAINT duplication: tex_inputs_home, texinputs_value ###\n    ### TAINT path separator depends on OS ###\n    @options[ 'texinputs' ][ 'value' ] = locators.join ':'\n  # @options[ 'locators' ] = {}\n  # for key, route of @options[ 'routes' ]\n  #   @options[ 'locators' ][ key ] = njs_path.resolve options_home, route\n  #.........................................................................................................\n  # debug '©ed8gv', JSON.stringify @options, null, '  '\n  CACHE.update @options\n#...........................................................................................................\n@compile_options()\n\n#-----------------------------------------------------------------------------------------------------------\n@write_mkts_master = ( layout_info, handler ) ->\n  step ( resume ) =>\n    lines             = []\n    write             = lines.push.bind lines\n    master_locator    = layout_info[ 'master-locator'  ]\n    content_locator   = layout_info[ 'content-locator' ]\n    help \"writing #{master_locator}\"\n    #-------------------------------------------------------------------------------------------------------\n    write \"\"\n    write \"% #{master_locator}\"\n    write \"% do not edit this file\"\n    write \"% generated from #{@options[ 'locator' ]}\"\n    write \"% on #{new Date()}\"\n    write \"\"\n    write \"\\\\documentclass[a4paper,twoside]{book}\"\n    write \"\"\n    #-------------------------------------------------------------------------------------------------------\n    # DEFS\n    #.......................................................................................................\n    defs = @options[ 'defs' ]\n    write \"\"\n    write \"% DEFS\"\n    if defs?\n      write \"\\\\def\\\\#{name}{#{value}}\" for name, value of defs\n    #-------------------------------------------------------------------------------------------------------\n    # NEWCOMMANDS\n    #.......................................................................................................\n    newcommands = @options[ 'newcommands' ]\n    write \"\"\n    write \"% NEWCOMMANDS\"\n    if newcommands?\n      for name, value of newcommands\n        warn \"implicitly converting newcommand value for #{name}\"\n        value = njs_path.resolve __dirname, '..', value\n        write \"\\\\newcommand{\\\\#{name}}{%\\n#{value}%\\n}\"\n    #-------------------------------------------------------------------------------------------------------\n    # PACKAGES\n    #.......................................................................................................\n    write \"\"\n    write \"% PACKAGES\"\n    # write \"\\\\usepackage{mkts2015-main}\"\n    # write \"\\\\usepackage{mkts2015-fonts}\"\n    # write \"\\\\usepackage{mkts2015-article}\"\n    write \"\\\\usepackage{mkts2015-consolidated}\"\n\n\n    #-------------------------------------------------------------------------------------------------------\n    # FONTS\n    #......................................................................................................\n    fontspec_version  = yield TEXLIVEPACKAGEINFO.read_texlive_package_version @options, 'fontspec', resume\n    use_new_syntax    = SEMVER.satisfies fontspec_version, '>=2.4.0'\n    fonts_home        = @options[ 'fonts' ][ 'home' ]\n    #.......................................................................................................\n    write \"\"\n    write \"% FONTS\"\n    write \"% assuming fontspec@#{fontspec_version}\"\n    write \"\\\\usepackage{fontspec}\"\n    #.......................................................................................................\n    for { texname, home, filename, } in @options[ 'fonts' ][ 'files' ]\n      home ?= fonts_home\n      if use_new_syntax\n        ### TAINT should properly escape values ###\n        write \"\\\\newfontface{\\\\#{texname}}{#{filename}}[Path=#{home}/]\"\n        # write \"\\\\newcommand{\\\\#{texname}}{\"\n        # write \"\\\\typeout{\\\\trmWhite{redefining #{texname}}}\"\n        # write \"\\\\newfontface{\\\\#{texname}XXX}{#{filename}}[Path=#{home}/]\"\n        # write \"\\\\renewcommand{\\\\#{texname}}{\\\\#{texname}XXX}\"\n        # write \"}\"\n      else\n        write \"\\\\newfontface\\\\#{texname}[Path=#{home}/]{#{filename}}\"\n    write \"\"\n    #-------------------------------------------------------------------------------------------------------\n    # STYLES\n    #......................................................................................................\n    write \"\"\n    write \"% STYLES\"\n    if ( styles = @options[ 'styles' ] )?\n      write \"\\\\newcommand{\\\\#{name}}{%\\n#{value}%\\n}\" for name, value of styles\n    #-------------------------------------------------------------------------------------------------------\n    main_font_name = @options[ 'fonts' ][ 'main' ]\n    throw new Error \"need entry options/fonts/name\" unless main_font_name?\n    write \"\"\n    write \"% CONTENT\"\n    write \"\\\\begin{document}\\\\null\\\\mktsStyleNormal\"\n    #-------------------------------------------------------------------------------------------------------\n    # INCLUDES\n    #.......................................................................................................\n    write \"\"\n    write \"\\\\input{#{content_locator}}\"\n    write \"\"\n    #-------------------------------------------------------------------------------------------------------\n    write \"\\\\end{document}\"\n    #-------------------------------------------------------------------------------------------------------\n    text = lines.join '\\n'\n    # whisper text\n    njs_fs.writeFile master_locator, text, handler\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@MKTX =\n  TEX:        require './tex-writer-typofix'\n  DOCUMENT:   {}\n  COMMAND:    {}\n  REGION:     {}\n  BLOCK:      {}\n  INLINE:     {}\n  MIXED:      {}\n  CLEANUP:    {}\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.COMMAND.$new_page = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    return send event unless select event, '!', 'new-page'\n    send stamp event\n    [ type, name, text, meta, ] = event\n    send [ 'tex', \"\\\\null\\\\newpage{}\", ]\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.COMMAND.$comment = ( S ) =>\n  remark = MD_READER._get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    return send event unless select event, '.', 'comment'\n    [ type, name, text, meta, ] = event\n    send remark 'drop', \"`.comment`: #{rpr text}\", copy meta\n\n#-----------------------------------------------------------------------------------------------------------\n@$document = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '(', 'document'\n      send stamp event\n      send [ 'tex', \"\\n% begin of MD document\\n\", ]\n    #.......................................................................................................\n    else if select event, ')', 'document'\n      send [ 'tex', \"\\n% end of MD document\\n\", ]\n      send stamp event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION.$code = ( S ) =>\n  ### TAINT code duplication with `REGION.$keep_lines` possible ###\n  track = MD_READER.TRACKER.new_tracker '(code)'\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_code = track.within '(code)'\n    track event\n    #.......................................................................................................\n    if select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      if within_code\n        text = text.replace /\\u0020/g, '\\u00a0'\n      send [ type, name, text, meta, ]\n    #.......................................................................................................\n    else if select event, [ '(', ')', ], 'code'\n      [ type, name, parameters, meta, ] = event\n      [ language, settings, ]           = parameters\n      keeplines_parameters              = if settings? then [ settings, ] else []\n      #.....................................................................................................\n      if type is '('\n        send stamp event\n        send [ '(', 'keep-lines', keeplines_parameters, ( copy meta ), ]\n        send [ 'tex', \"\\n\\n{\\\\mktsStyleCode{}\", ] unless language is 'keep-lines'\n      else\n        send [ 'tex', \"}\\n\\n\", ] unless language is 'keep-lines'\n        send [ ')', 'keep-lines', keeplines_parameters, ( copy meta ), ]\n        send stamp event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION.$keep_lines = ( S ) =>\n  track           = MD_READER.TRACKER.new_tracker '(keep-lines)'\n  last_was_empty  = no\n  squish          = no\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_keep_lines = track.within '(keep-lines)'\n    track event\n    #.......................................................................................................\n    if within_keep_lines and select event, '.', 'text'\n      # send stamp event\n      [ type, name, text, meta, ] = event\n      ### TAINT other replacements possible; use API ###\n      ### TAINT U+00A0 (nbsp) might be too wide ###\n      # text = text.replace /\\n\\n/g, \"{\\\\mktsTightParagraphs\\\\null\\\\par\\n\"\n      text    = text.replace /\\u0020/g, '\\u00a0'\n      text    = text.replace /^\\n/,     ''\n      chunks  = text.split /(\\n)/g\n      for chunk in chunks\n        if chunk is '\\n'\n          if last_was_empty then send [ 'tex', \"\\\\null\\\\par\\n\", ]\n          else                   send [ 'tex',       \"\\\\par\\n\", ]\n        else\n          unless last_was_empty = chunk.length is 0\n            send [ '.', 'text', chunk, ( copy meta ), ]\n    #.......................................................................................................\n    else if select event, '(', 'keep-lines'\n      send stamp event\n      [ type, name, parameters, meta, ] = event\n      unless squish = parameters?[ 0 ]?[ 'squish' ] ? no\n        send [ 'tex', \"\\\\null\\\\par\", ]\n      send [ 'tex', \"{\\\\mktsTightParagraphs{}\", ]\n    #.......................................................................................................\n    else if select event, ')', 'keep-lines'\n      send stamp event\n      send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\nbefore '@MKTX.BLOCK.$heading', '@MKTX.COMMAND.$toc', \\\n@MKTX.REGION.$toc = ( S ) =>\n  track   = MD_READER.TRACKER.new_tracker '(toc)'\n  buffer  = null\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_toc = track.within '(toc)'\n    track event\n    #.......................................................................................................\n    if select event, '(', 'toc'\n      send stamp event\n      [ type, name, text, meta, ] = event\n      buffer = [ '!', name, text, meta, ]\n    #.......................................................................................................\n    else if select event, ')', 'toc'\n      send stamp event\n      if buffer?\n        send buffer\n        buffer = null\n    #.......................................................................................................\n    else if within_toc and select event, '.', 'comma'\n      if buffer?\n        send buffer\n        buffer = null\n    #.......................................................................................................\n    else if within_toc and select event, [ '(', ')', ], 'h'\n      [ type, name, text, meta, ] = event\n      meta[ 'toc' ] = 'omit'\n      send event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$heading = ( S ) =>\n  ### TAINT make numbering style configurable ###\n  ### TAINT generalize for more than 3 levels ###\n  h_nrs             = [ 1, 1, 1, ]\n  h_idx             = -1\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '(', 'h'\n      [ type, name, level, meta, ] = event\n      h_idx                += +1\n      h_key                 = \"h-#{h_idx}\"\n      meta[ 'h' ]          ?= {}\n      meta[ 'h' ][ 'idx' ]  = h_idx\n      meta[ 'h' ][ 'key' ]  = h_key\n      #.....................................................................................................\n      send [ 'tex', \"\\n\", ]\n      send stamp event\n      #.....................................................................................................\n      switch level\n        when 1\n          send [ '!', 'columns', [ 1, ], ( copy meta, { toc: 'omit' }, ), ]\n          send [ 'tex', \"{\\\\mktsHOne{}\", ]\n          send [ 'tex', \"\\\\zlabel{#{h_key}}\", { toc: 'omit' }, ]\n        when 2\n          send [ '!', 'columns', [ 1, ], ( copy meta, { toc: 'omit' }, ), ]\n          send [ 'tex', \"{\\\\mktsHTwo{}\", ]\n          send [ 'tex', \"\\\\zlabel{#{h_key}}\", { toc: 'omit' }, ]\n        when 3\n          send [ '!', 'columns', [ 1, ], ( copy meta, { toc: 'omit' }, ), ]\n          send [ 'tex', \"{\\\\mktsHThree{}\", ]\n          send [ 'tex', \"\\\\zlabel{#{h_key}}\", { toc: 'omit' }, ]\n        else return send [ '.', 'warning', \"heading level #{level} not implemented\", ( copy meta ), ]\n    #.......................................................................................................\n    else if select event, ')', 'h'\n      [ type, name, level, meta, ] = event\n      #.....................................................................................................\n      switch level\n        when 1\n          send [ 'tex', \"\\\\mktsHOneBeg}%\\n\",          ]\n          send [ '!', 'columns', [ 'pop', ], ( copy meta, { toc: 'omit' }, ), ]\n        when 2\n          send [ 'tex', \"\\\\mktsHTwoBeg}%\\n\",          ]\n          send [ '!', 'columns', [ 'pop', ], ( copy meta, { toc: 'omit' } ), ]\n        when 3\n          send [ 'tex', \"\\\\mktsHThreeBeg}%\\n\",        ]\n          send [ '!', 'columns', [ 'pop', ], ( copy meta, { toc: 'omit' } ), ]\n        else return send [ '.', 'warning', \"heading level #{level} not implemented\", ( copy meta ), ]\n      #.....................................................................................................\n      send stamp event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\nbefore '@MKTX.COMMAND.$toc', after '@MKTX.BLOCK.$heading', \\\n@MKTX.MIXED.$collect_headings_for_toc = ( S ) =>\n  within_heading  = no\n  this_heading    = null\n  headings        = []\n  buffer          = []\n  remark          = MD_READER._get_remark()\n  #.........................................................................................................\n  new_heading = ( level, meta ) ->\n    R =\n      level:    level\n      idx:      meta[ 'h' ][ 'idx' ]\n      key:      meta[ 'h' ][ 'key' ]\n      events:   []\n    return R\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    # debug '8624', event\n    [ type, name, text, meta, ] = event\n    #.......................................................................................................\n    if select event, '~', [ 'flush', 'stop', ]\n      send remark name, \"releasing #{buffer.length} events\", ( copy meta, )\n      send sub_event for sub_event in buffer\n      buffer.length = 0\n      send event\n    #.......................................................................................................\n    else if select event, '(', 'document'\n      send event\n    #.......................................................................................................\n    else if select event, ')', 'document'\n      # debug '2139', unstamp [ '.', 'toc-headings', headings, meta, ]\n      send unstamp [ '.', 'toc-headings', headings, meta, ]\n      send sub_event for sub_event in buffer\n      buffer.length = 0\n      send event\n    #.......................................................................................................\n    else if meta? and ( meta[ 'toc' ] isnt 'omit' ) and select event, '(', 'h'\n      ### TAINT use library method to test event category ###\n      level                           = text\n      within_heading                  = yes\n      this_heading                    = new_heading level, meta\n      headings.push this_heading\n      buffer.push event\n    #.......................................................................................................\n    else if select event, ')', 'h'\n      within_heading                  = no\n      this_heading                    = null\n      buffer.push event\n    #.......................................................................................................\n    else if within_heading\n      ### TAINT use library method to determine event category ###\n      unless event[ event.length - 1 ][ 'toc' ] is 'omit'\n        if event.length is 4\n          this_heading[ 'events' ].push [ type, name, text, ( copy meta ), ]\n        else\n          this_heading[ 'events' ].push event\n      unless event[ event.length - 1 ][ 'toc' ] is 'only'\n        buffer.push event\n    #.......................................................................................................\n    else\n      buffer.push event\n\n#-----------------------------------------------------------------------------------------------------------\nafter '@MKTX.REGION.$toc', '@MKTX.MIXED.$collect_headings_for_toc', \\\n@MKTX.COMMAND.$toc = ( S ) =>\n  headings = null\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    ### TAINT use library method to test event category ###\n    if select event, '.', 'toc-headings'\n      [ _, _, headings, _, ] = event\n      send stamp event\n    #.......................................................................................................\n    else if select event, '!', 'toc'\n      send stamp event\n      #.....................................................................................................\n      unless headings?\n        return send [ '.', 'warning', \"expecting toc-headings event before this\", ( copy meta ), ]\n      #.....................................................................................................\n      [ type, name, text, meta, ] = event\n      send [ 'tex', '{\\\\mktsToc%\\n', ]\n      # send [ '!', 'mark', 'toc', ( copy meta ), ]\n      for heading in headings\n        { level, events, key, } = heading\n        last_idx                = events.length - 1\n        for h_event, idx in events\n          # debug '23432', h_event\n          ### TAINT use library method to determine event category ###\n          h_event = unstamp h_event if h_event.length is 4\n          send [ 'tex', \"{\\\\mktsStyleNormal \\\\dotfill \\\\zpageref{#{key}}}\", ] if idx is last_idx\n          # send [ 'tex', \" \\\\dotfill \\\\zpageref{#{key}}\", ] if idx is last_idx\n          send h_event\n      send [ 'tex', '\\\\mktsTocBeg}%\\n', ]\n      # headings.length = 0\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$yadda = ( S ) =>\n  generate_yadda  = require 'lorem-ipsum'\n  cache           = []\n  settings        =\n    count:                1                       # Number of words, sentences, or paragraphs to generate.\n    # units:                'sentences'             # Generate words, sentences, or paragraphs.\n    units:                'paragraphs'            # Generate words, sentences, or paragraphs.\n    sentenceLowerBound:   5                       # Minimum words per sentence.\n    sentenceUpperBound:   15                      # Maximum words per sentence.\n    paragraphLowerBound:  3                       # Minimum sentences per paragraph.\n    paragraphUpperBound:  7                       # Maximum sentences per paragraph.\n    format:               'plain'                 # Plain text or html\n    # words:                ['ad', 'dolor', ... ]   # Custom word dictionary. Uses dictionary.words (in lib/dictionary.js) by default.\n    random:               CND.get_rnd 42, 3       # A PRNG function. Uses Math.random by default\n    suffix:               '\\n'                    # The character to insert between paragraphs. Defaults to default EOL for your OS.\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '!', 'yadda'\n      [ type, name, parameters, meta, ] = event\n      debug parameters\n      [ yadda_idx, ]                    = parameters\n      yadda_idx                        ?= cache.length\n      cache.push generate_yadda settings while cache.length - 1 < yadda_idx\n      yadda = cache[ yadda_idx ]\n      # yadda = @MKTX.TEX.fix_typography_for_tex yadda, S.options\n      send stamp event\n      send [ 'tex', yadda, ]\n      send [ '.', 'p', null, ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$paragraph = ( S ) =>\n  ### TAINT should unify the two observers ###\n  track = MD_READER.TRACKER.new_tracker '(code)', '(keep-lines)'\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_code       = track.within '(code)'\n    within_keep_lines = track.within '(keep-lines)'\n    track event\n    #.......................................................................................................\n    if select event, '.', 'p'\n      [ type, name, text, meta, ] = event\n      if within_code or within_keep_lines\n        send stamp event\n        send [ 'tex', '\\n\\n' ]\n      else\n        send stamp event\n        send @MKTX.BLOCK._end_paragraph()\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK._end_paragraph = =>\n  ### TAINT use command from sty ###\n  ### TAINT make configurable ###\n  # return [ 'tex', '\\\\mktsShowpar\\\\par\\n' ]\n  return [ 'tex', '\\n\\n' ]\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$unordered_list = ( S ) =>\n  tex_by_md_markup =\n    '*':          '$\\\\star$'\n    'fallback':   '—'\n  item_markup_tex = null\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '(', 'ul'\n      [ type, name, text, meta, ] = event\n      { markup } = meta\n      ### TAINT won't work in nested lists ###\n      ### TAINT make configurable ###\n      item_markup_tex = tex_by_md_markup[ markup ] ? tex_by_md_markup[ 'fallback' ]\n      send stamp event\n      send [ 'tex', '\\\\begin{itemize}' ]\n    #.......................................................................................................\n    else if select event, '(', 'li'\n      send stamp event\n      send [ 'tex', \"\\\\item[#{item_markup_tex}] \" ]\n    #.......................................................................................................\n    else if select event, ')', 'li'\n      send stamp event\n      send [ 'tex', '\\n' ]\n    #.......................................................................................................\n    else if select event, ')', 'ul'\n      send stamp event\n      send [ 'tex', '\\\\end{itemize}' ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n# before '@MKTX.REGION.$single_column', '@MKTX.REGION.$multi_column', \\\n@MKTX.BLOCK.$hr = ( S ) =>\n  plain_rule  = [ 'tex', \"\\\\mktsRulePlain{}\", ]\n  swell_rule  = [ 'tex', \"\\\\mktsRuleSwell{}\", ]\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '.', 'hr'\n      [ type, name, text, meta, ] = event\n      switch chr = text[ 0 ]\n        when '-'\n          send stamp copy event\n          send plain_rule\n        when '*'\n          send stamp copy event\n          send swell_rule\n        when '='\n          send stamp hide copy event\n          send [ '!', 'slash', [], ( copy meta ), ]\n        when '#'\n          send stamp hide copy event\n          send [ '!', 'slash', [ swell_rule, ], ( copy meta ), ]\n        else\n          send stamp hide copy event\n          send remark 'drop', \"`[hr] because markup unknown #{rpr text}\", copy meta\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$code_span = ( S ) =>\n  track = MD_READER.TRACKER.new_tracker '(code-span)'\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_code_span = track.within '(code-span)'\n    track event\n    #.......................................................................................................\n    if select event, '(', 'code-span'\n      send stamp event\n      send [ 'tex', '{\\\\mktsStyleCode{}', ]\n    #.......................................................................................................\n    else if select event, ')', 'code-span'\n      send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else if within_code_span\n      [ type, name, text, meta, ] = event\n      if text?\n        fragments = LINEBREAKER.fragmentize text\n        # text      = fragments.join \"\\\\g\\\\allowbreak{}\"\n        text      = fragments.join \"\\\\allowbreak{}\"\n      send [ type, name, text, meta, ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$image = ( S ) =>\n  track       = MD_READER.TRACKER.new_tracker '(image)'\n  event_cache = []\n  alt_cache   = []\n  src         = null\n  alt         = null\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_image = track.within '(image)'\n    track event\n    [ type, name, text, meta, ] = event\n    #.......................................................................................................\n    if select event, '(', 'image'\n      send stamp event\n      src                         = njs_path.resolve S.layout_info[ 'source-home' ], meta[ 'src' ]\n    #.......................................................................................................\n    else if select event, ')', 'image'\n      alt = alt_cache.join ''\n      send [ 'tex', '\\\\begin{figure}%\\n', ]\n      ### TAINT escape `src`? ###\n      send [ 'tex', \"\\\\includegraphics[width=0.5\\\\textwidth]{#{src}}%\\n\", ]\n      send [ 'tex', \"\\\\caption[#{alt}]{%\\n\", ]\n      send cached_event for cached_event in event_cache\n      send [ 'tex', '}%\\n', ]\n      send [ 'tex', '\\\\end{figure}%\\n', ]\n      src               = null\n      alt_cache.length  = 0\n    #.......................................................................................................\n    else if within_image\n      event_cache.push event\n      alt_cache.push text if select event, '.', 'text'\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.MIXED.$raw = ( S ) =>\n  remark = MD_READER._get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '.', 'raw'\n      [ type, name, text, meta, ] = event\n      send stamp hide copy event\n      send remark 'convert', \"raw to TeX\", copy meta\n      text = MACRO_ESCAPER.escape.unescape_escape_chrs S, text\n      # debug '9382', [ 'tex', text, ]\n      send [ 'tex', text, ]\n      # send stamp event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.MIXED.$table = ( S ) =>\n  track   = MD_READER.TRACKER.new_tracker '(table)', '(th)'\n  remark  = MD_READER._get_remark()\n  buffer  = null\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, name, text, meta, ] = event\n    within_table                = track.within '(table)'\n    within_th                   = track.within '(th)'\n    track event\n    #.......................................................................................................\n    if within_th and select event, '.', 'text'\n      send [ '(', 'strong', null, ( copy meta ), ]\n      send stamp event\n      send [ ')', 'strong', null, ( copy meta ), ]\n    #.......................................................................................................\n    else if select event, ')', 'tr'\n      buffer = null\n      send stamp hide copy event\n      send [ 'tex', \"\\\\\\\\\\n\", ]\n    #.......................................................................................................\n    else\n      send buffer if buffer\n      buffer = null\n      #.....................................................................................................\n      if select event, '(', 'table'\n        # debug '©36643', event\n        send stamp hide copy event\n        col_styles  = []\n        for alignment in meta[ 'table' ][ 'alignments' ]\n          switch alignment\n            when 'left'   then col_styles.push 'l'\n            when 'center' then col_styles.push 'c'\n            when 'right'  then col_styles.push 'r'\n            else               col_styles.push 'l'\n        col_styles  = '| ' + ( col_styles.join ' | ' ) + ' |'\n        # send [ 'tex', \"\\\\begin{tabular}[pos]{table spec}\", ]\n        send [ 'tex', \"\\n\\n\\\\begin{tabular}[pos]{ #{col_styles} }\\n\", ]\n      #.....................................................................................................\n      else if select event, ')', 'table'\n        send stamp hide copy event\n        send [ 'tex', \"\\\\end{tabular}\\n\\n\", ]\n      #.....................................................................................................\n      else if select event, '(', 'tbody'\n        send stamp hide copy event\n      #.....................................................................................................\n      else if select event, ')', 'tbody'\n        send [ 'tex', \"\\\\hline\\n\", ]\n        send stamp hide copy event\n      #.....................................................................................................\n      else if select event, '(', 'td'\n        send stamp hide copy event\n      #.....................................................................................................\n      else if select event, ')', 'td'\n        send stamp hide copy event\n        buffer = [ 'tex', \" & \", ]\n      #.....................................................................................................\n      else if select event, '(', 'th'\n        send stamp hide copy event\n      #.....................................................................................................\n      else if select event, ')', 'th'\n        send stamp hide copy event\n        buffer = [ 'tex', \" & \", ]\n      #.....................................................................................................\n      else if select event, '(', 'thead'\n        send [ 'tex', \"\\\\hline\\n\", ]\n        send stamp hide copy event\n      #.....................................................................................................\n      else if select event, ')', 'thead'\n        send stamp hide copy event\n        send [ 'tex', \"\\n\\\\hline\\n\", ]\n      #.....................................................................................................\n      else if select event, '(', 'tr'\n        send stamp hide copy event\n      #.....................................................................................................\n      else\n        send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.MIXED.$footnote = ( S ) =>\n  ### TAINT should move this to initialization ###\n  throw new Error \"`S.footnotes` already defined\" if S.footnotes?\n  S.footnotes =\n    # 'style':      'classic'\n    'style':      'on-demand'\n    'by-idx':     []\n  #.........................................................................................................\n  return switch style = S.footnotes[ 'style' ]\n    when 'classic'    then @MKTX.MIXED._$footnote_classic    S\n    when 'on-demand'  then @MKTX.MIXED._$footnote_on_demand  S\n    else throw new Error \"unknown footnote style #{rpr style}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.MIXED._$footnote_classic = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '(', 'footnote'\n      send stamp event\n      send [ 'tex', \"\\\\footnote{\", ]\n    #.......................................................................................................\n    else if select event, ')', 'footnote'\n      send stamp event\n      send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.MIXED._$footnote_on_demand = ( S ) =>\n  ### TAINT TeX codes used here should be made configurable ###\n  cache             = S.footnotes[ 'by-idx' ]\n  current_fn_idx    = -1\n  current_fn_cache  = -1\n  first_fn_idx      = 0\n  last_fn_idx       = -1\n  track             = MD_READER.TRACKER.new_tracker '(footnote)'\n  remark            = MD_READER._get_remark()\n  last_was_footnote = no\n  #.........................................................................................................\n  insert_footnotes = ( send, meta ) =>\n    if last_fn_idx >= first_fn_idx\n      # send [ '!', 'mark', '42', ( copy meta ), ]\n      # send [ '.', 'p', null, ( copy meta ), ]\n      send [ 'tex', \"\\n\\n\", ]\n      send [ 'tex', \"\\\\begin{mktsEnNotes}\", ]\n      for fn_idx in [ first_fn_idx .. last_fn_idx ]\n        fn_nr           = fn_idx + 1\n        fn_cache        = cache[ fn_idx ]\n        cache[ fn_idx ] = null\n        # send [ 'tex', \"(#{fn_nr})\\\\,\", ]\n        send [ 'tex', \"{\\\\mktsEnStyleMarkNotes\\\\mktsEnMarkBefore#{fn_nr}\\\\mktsEnMarkAfter{}}\", ]\n        send fn_event for fn_event in fn_cache\n      send [ 'tex', \"\\\\end{mktsEnNotes}\\n\\n\", ]\n      first_fn_idx  = last_fn_idx  + 1\n      last_fn_idx   = first_fn_idx - 1\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, name, text, meta, ] = event\n    within_footnote             = track.within '(footnote)'\n    track event\n    #.......................................................................................................\n    if select event, '(', 'footnote'\n      send stamp event\n      current_fn_cache        = []\n      current_fn_idx         += +1\n      last_fn_idx             = current_fn_idx\n      fn_nr                   = current_fn_idx + 1\n      cache[ current_fn_idx ] = current_fn_cache\n      fn_separator            = if last_was_footnote then ',' else ''\n      # send [ 'tex', \"\\\\mktsEnStyleMark{#{fn_separator}#{fn_nr}}\" ]\n      send [ 'tex', \"{\\\\mktsEnStyleMarkMain{}#{fn_separator}#{fn_nr}}\" ]\n    #.......................................................................................................\n    else if select event, ')', 'footnote'\n      send stamp event\n      current_fn_cache  = null\n      last_was_footnote = yes\n    #.......................................................................................................\n    else if within_footnote\n      current_fn_cache.push event\n      send remark 'caching', \"event within footnote\", event\n    #.......................................................................................................\n    else if select event, '!', 'footnotes'\n      send stamp event\n      insert_footnotes send, meta\n    #.......................................................................................................\n    else if select event, ')', 'document'\n      insert_footnotes send, meta\n      send event\n    #.......................................................................................................\n    else\n      last_was_footnote = no\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.MIXED.$footnote.$remove_extra_paragraphs = ( S ) =>\n  last_event  = null\n  #.........................................................................................................\n  return $ ( event, send, end ) =>\n    if event?\n      #.....................................................................................................\n      if select event, ')', 'footnote'\n        send last_event if last_event? and not select last_event, '.', 'p'\n        last_event = event\n      #.....................................................................................................\n      else\n        send last_event if last_event?\n        last_event = event\n    #.......................................................................................................\n    if end?\n      send last_event if last_event?\n      end()\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$translate_i_and_b = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, [ '(', ')', ], [ 'i', 'b', ]\n      [ type, name, text, meta, ] = event\n      new_name = if name is 'i' then 'em' else 'strong'\n      send [ type, new_name, text, meta, ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$mark = ( S ) =>\n  mark_idx = 0\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '!', 'mark'\n      [ type, name, text, meta, ] = event\n      send stamp event\n      unless text?\n        mark_idx += +1\n        text      = \"a-#{mark_idx}\"\n      # text = @MKTX.TEX.fix_typography_for_tex text, S.options\n      send [ 'tex', \"\\\\mktsMark{#{text}}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$em_and_strong = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, [ '(', ')', ], [ 'em', 'strong', ]\n      send stamp event\n      [ type, name, text, meta, ] = event\n      if type is '('\n        if name is 'em'\n          send [ 'tex', '{\\\\mktsStyleItalic{}', ]\n          ### TAINT must not be sent when in vertical mode ###\n          # send [ 'tex', '\\\\/', ]\n        else\n          send [ 'tex', '{\\\\mktsStyleBold{}', ]\n      else\n        send [ 'tex', '\\\\/', ] if name is 'em'\n        send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$link = ( S ) =>\n  cache     = []\n  last_href = null\n  track     = MD_READER.TRACKER.new_tracker '(link)'\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_link = track.within '(link)'\n    track event\n    [ type, name, text, meta, ] = event\n    #.......................................................................................................\n    if select event, '(', 'link'\n      send stamp event\n      last_href = text\n    #.......................................................................................................\n    else if select event, ')', 'link'\n      # debug '©97721', event\n      send stamp event\n      for cached_event in cache\n        send cached_event\n      # last_href = @MKTX.TEX.fix_typography_for_tex last_href, S.options\n      send [ '(', 'footnote', null,       ( copy meta ), ]\n      send [ '(', 'url',      null,       ( copy meta ), ]\n      send [ '.', 'text',     last_href,  ( copy meta ), ]\n      send [ '.', 'p',        null,       ( copy meta ), ]\n      send [ ')', 'url',      null,       ( copy meta ), ]\n      send [ ')', 'footnote', null,       ( copy meta ), ]\n      cache.length  = 0\n      last_href     = null\n    #.......................................................................................................\n    else if within_link\n      cache.push event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$url = ( S ) =>\n  track = MD_READER.TRACKER.new_tracker '(url)'\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_url = track.within '(url)'\n    track event\n    [ type, name, text, meta, ] = event\n    #.......................................................................................................\n    if select event, '(', 'url'\n      send stamp event\n      send [ 'tex', \"{\\\\mktsStyleUrl{}\", ]\n    #.......................................................................................................\n    else if select event, ')', 'url'\n      send stamp event\n      send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else if within_url and select event, '.', 'text'\n      # text = ( LINEBREAKER.fragmentize text ).join \" \\u200b\"\n      fragments = LINEBREAKER.fragmentize text\n      last_idx  = fragments.length - 1\n      for fragment, idx in fragments\n        unless idx is last_idx\n          if      fragment.endsWith '//' then fragment = fragment[ .. fragment.length - 3 ] + \"\\\\g/\\\\g/\"\n          else if fragment.endsWith '/'  then fragment = fragment[ .. fragment.length - 2 ] + \"\\\\g/\"\n        fragments[ idx ] = fragment\n      text = fragments.join \"\\\\g\\\\allowbreak{}\"\n      send [ type, name, text, meta, ]\n    #.......................................................................................................\n    else\n      send event\n\n\n#===========================================================================================================\n# CLEANUP\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.CLEANUP.$remove_empty_texts = ( S ) ->\n  remark = MD_READER._get_remark()\n  return $ ( event, send ) =>\n    if select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      if text is ''\n        ### remain silent to make output an easier read ###\n        null\n        send remark 'drop', \"empty text\", copy meta\n      else\n        send event\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.CLEANUP.$consolidate_texts = ( S ) ->\n  # remark      = MD_READER._get_remark()\n  collector   = []\n  first_meta  = null\n  return $ ( event, send ) =>\n    if select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      first_meta                 ?= meta\n      collector.push text\n    else\n      # debug '83726', collector\n      if collector.length > 0\n        send [ '.', 'text', ( collector.join '' ), ( copy first_meta ), ]\n        first_meta        = null\n        collector.length  = 0\n      send event\n\n# #-----------------------------------------------------------------------------------------------------------\n# @MKTX.CLEANUP.$drop_empty_p_tags = ( S ) =>\n#   ### TAINT emptyness of  `p` tags ist tested for by counting intermittend `text` events; however, a\n#   paragraph could conceivably also consist of e.g. a single image. ###\n#   text_count  = 0\n#   remark      = MD_READER._get_remark()\n#   #.........................................................................................................\n#   warn \"not using `$drop_empty_p_tags` at the moment\"\n#   return $ ( event, send ) =>\n#     send event\n  # #.........................................................................................................\n  # return $ ( event, send ) =>\n  #   #.......................................................................................................\n  #   ### TAINT bogus selector ###\n  #   if select event, [ ')', ]\n  #     text_count = 0\n  #     send event\n  #   #.......................................................................................................\n  #   else if select event, '.', 'text'\n  #     text_count += +1\n  #     send event\n  #   #.......................................................................................................\n  #   else if select event, '.', 'p'\n  #     if text_count > 0\n  #       send event\n  #     else\n  #       [ _, _, _, meta, ] = event\n  #       send remark 'drop', \"empty `.p`\", copy meta\n  #     text_count = 0\n  #   #.......................................................................................................\n  #   else\n  #     send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION.$correct_p_tags_before_regions = ( S ) =>\n  last_was_p              = no\n  last_was_begin_document = no\n  remark                  = MD_READER._get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    # debug '©MwBAv', event\n    #.......................................................................................................\n    if select event, 'tex'\n      send event\n    #.......................................................................................................\n    else if select event, '(', 'document'\n      # debug '©---1', last_was_begin_document\n      # debug '©---2', last_was_p\n      last_was_p              = no\n      last_was_begin_document = yes\n      send event\n    #.......................................................................................................\n    else if select event, '.', 'p'\n      # debug '©---3', last_was_begin_document\n      # debug '©---4', last_was_p\n      last_was_p              = yes\n      last_was_begin_document = no\n      send event\n    #.......................................................................................................\n    else if select event, [ '(', ]\n      # debug '©---5', last_was_begin_document\n      # debug '©---6', last_was_p\n      if ( not last_was_begin_document ) and ( not last_was_p )\n        [ ..., meta, ] = event\n        # send stamp [ '#', 'insert', my_badge, \"inserting `.p` tag\", ( copy meta ), ]\n        send remark 'insert', \"`.p` because region or block opens\", copy meta\n        send [ '.', 'p', null, ( copy meta ), ]\n      send event\n      last_was_p              = no\n      last_was_begin_document = no\n    #.......................................................................................................\n    else\n      last_was_p              = no\n      last_was_begin_document = no\n      send event\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.$show_unhandled_tags = ( S ) =>\n  return $ ( event, send ) =>\n    ### TAINT selection could be simpler, less repetitive ###\n    [ type, name, text, meta, ] = event\n    if ( type is 'tex' ) or select event, '.', [ 'text', 'raw', ]\n      send event\n    else if ( not is_stamped event ) and ( type isnt '~' ) and ( not select event, '.', 'warning' )\n      # debug '©04210', JSON.stringify event\n      # if text?\n      #   if ( CND.isa_pod text )\n      #     if ( Object.keys text ).length is 0\n      #       text = ''\n      #     else\n      #       text = rpr text\n      # else\n      #   text = ''\n      # if type in [ '.', '!', ] or type in MKTS.MD_READER.FENCES.left\n      #   first             = type\n      #   last              = name\n      # else\n      #   first             = name\n      #   last              = type\n      # event_txt         = first + last + ' ' + text\n      event_txt = \"unhandled event: #{JSON.stringify event, null, ' '}\"\n      warn event_txt\n      send [ '.', 'warning', event_txt, ( copy meta ), ]\n      # send stamp hide copy event\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.$show_warnings = ( S ) =>\n  # pre               = '█'\n  # post              = '█'\n  return $ ( event, send ) =>\n    ### TAINT this makes clear why we should not use '.' as type here; `warning` is a meta-event, not\n    primarily a formatting instruction ###\n    if select event, '.', 'warning'\n      [ type, name, text, meta, ] = event\n      message                     = @MKTX.TEX.fix_typography_for_tex text, S.options\n      # message                     = text\n      ### TAINT use location data ###\n      send [ 'tex', \"\\\\begin{mktsEnvWarning}#{message}\\\\end{mktsEnvWarning}\" ]\n    else\n      send event\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$filter_tex = ( S ) ->\n  ### TAINT reduce number of event types, shapes to simplify this ###\n  return $ ( event, send ) =>\n    [ type, name, text, meta, ] = event\n    if type is 'tex'\n      send event[ 1 ]\n    else if select event, '.', [ 'text', 'raw', ]\n      send event[ 2 ]\n    else unless ( type is '~' ) or ( is_stamped event )\n      warn \"unhandled event: #{JSON.stringify event}\"\n      send.error new Error \"unhandled events not allowed at this point; got #{JSON.stringify event}\"\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@create_tex_write_tee = ( S ) ->\n  ### TAINT get state via return value of MKTS.create_mdreadstream ###\n  ### TAINT make execution of `$produce_mktscript` a matter of settings ###\n  #.......................................................................................................\n  readstream    = D.create_throughstream()\n  writestream   = D.create_throughstream()\n  mktscript_in  = D.create_throughstream()\n  mktscript_out = D.create_throughstream()\n  #.......................................................................................................\n  ### TAINT need a file to write MKTScript text events to; must still send on incoming events ###\n  # mktscript_in\n  #   .pipe MKTSCRIPT_WRITER.$produce_mktscript             S\n  #   .pipe mktscript_out\n  # mktscript_tee = D.TEE.from_readwritestreams mktscript_in, mktscript_out\n  #.......................................................................................................\n  pipeline    = ( ( plugin.$main S ) for plugin in MK.TS.plugins )\n  # plugins_tee = D.TEE.from_pipeline pipeline\n  plugins_tee = D.combine pipeline\n  #.......................................................................................................\n  readstream\n    .pipe plugins_tee\n    .pipe MACRO_ESCAPER.$expand.$remove_backslashes         S\n    .pipe @$document                                        S\n    #.......................................................................................................\n    .pipe @MKTX.INLINE.$link                                S\n    .pipe @MKTX.MIXED.$footnote                             S\n    .pipe @MKTX.MIXED.$footnote.$remove_extra_paragraphs    S\n    .pipe @MKTX.COMMAND.$new_page                           S\n    .pipe @MKTX.COMMAND.$comment                            S\n    .pipe @MKTX.MIXED.$table                                S\n    .pipe @MKTX.BLOCK.$hr                                   S\n    .pipe @MKTX.REGION.$code                                S\n    .pipe @MKTX.REGION.$keep_lines                          S\n    .pipe @MKTX.REGION.$toc                                 S\n    .pipe @MKTX.BLOCK.$heading                              S\n    .pipe @MKTX.MIXED.$collect_headings_for_toc             S\n    .pipe @MKTX.COMMAND.$toc                                S\n    .pipe @MKTX.BLOCK.$unordered_list                       S\n    .pipe @MKTX.INLINE.$code_span                           S\n    .pipe @MKTX.INLINE.$url                                 S\n    .pipe @MKTX.INLINE.$translate_i_and_b                   S\n    .pipe @MKTX.INLINE.$em_and_strong                       S\n    .pipe @MKTX.INLINE.$image                               S\n    .pipe @MKTX.BLOCK.$yadda                                S\n    .pipe @MKTX.BLOCK.$paragraph                            S\n    .pipe @MKTX.MIXED.$raw                                  S\n    .pipe @COLUMNS.$main                                    S\n    #.......................................................................................................\n    .pipe MACRO_INTERPRETER.$capture_change_events          S\n    .pipe @MKTX.CLEANUP.$remove_empty_texts                 S\n    .pipe @MKTX.CLEANUP.$consolidate_texts                  S\n    .pipe @MKTX.TEX.$fix_typography_for_tex                 S\n    .pipe MKTSCRIPT_WRITER.$show_mktsmd_events              S\n    .pipe @MKTX.INLINE.$mark                                S\n    .pipe @MKTX.$show_unhandled_tags                        S\n    .pipe @MKTX.$show_warnings                              S\n    .pipe @$filter_tex                                      S\n    .pipe MD_READER.$show_illegal_chrs                      S\n    .pipe writestream\n  #.......................................................................................................\n  settings =\n    # inputs:\n    #   mktscript:        mktscript_in\n    # outputs:\n    #   mktscript:        mktscript_out\n    S:                S\n  #.......................................................................................................\n  R                           = D.TEE.from_readwritestreams readstream, writestream, settings\n  S[ 'tees' ]                ?= {}\n  S[ 'tees' ][ 'tex-writer' ] = R\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_handle_error = ( error ) =>\n  alert error[ 'message' ]\n  stack = error[ 'stack' ] ? \"(no stacktrace available)\"\n  whisper '\\n' + ( stack.split '\\n' )[ .. 10 ].join '\\n'\n  whisper '...'\n  process.exit 1\n\n\n#===========================================================================================================\n# PDF FROM MD\n#-----------------------------------------------------------------------------------------------------------\n@pdf_from_md = ( source_route, handler ) ->\n  ### TAINT code duplication ###\n  ### TAIN only works with docs in the filesystem, not with literal texts ###\n  #---------------------------------------------------------------------------------------------------------\n  f = => step ( resume ) =>\n    handler                ?= ->\n    layout_info             = HELPERS.new_layout_info @options, source_route\n    yield @write_mkts_master layout_info, resume\n    source_locator          = layout_info[ 'source-locator'  ]\n    content_locator         = layout_info[ 'content-locator' ]\n    file_output             = njs_fs.createWriteStream content_locator\n    #.......................................................................................................\n    mkscript_locator        = layout_info[ 'mkscript-locator' ]\n    mkscript_output         = njs_fs.createWriteStream mkscript_locator\n    #.......................................................................................................\n    file_output.on 'close', =>\n      HELPERS.write_pdf layout_info, ( error ) =>\n        throw error if error?\n        handler null if handler?\n    #.......................................................................................................\n    S =\n      options:              @options\n      layout_info:          layout_info\n    #.......................................................................................................\n    ### TAINT should read MD source stream ###\n    md_source               = njs_fs.readFileSync source_locator, encoding: 'utf-8'\n    md_readstream           = MD_READER.create_md_read_tee S, md_source\n    tex_writestream         = @create_tex_write_tee S\n    md_input                =  md_readstream.tee[ 'input'  ]\n    md_output               =  md_readstream.tee[ 'output' ]\n    tex_input               = tex_writestream.tee[ 'input'  ]\n    tex_output              = tex_writestream.tee[ 'output' ]\n    #.......................................................................................................\n    S.resend                = md_readstream.tee[ 'S' ].resend\n    #.......................................................................................................\n    md_output\n      .pipe tex_input\n    tex_output\n      # .pipe $ ( event, send, end ) =>\n      #   if event?\n      #     send event\n      #   if end?\n      #     end() # setTimeout end, 1000\n      .pipe file_output\n    #.......................................................................................................\n    md_input.resume()\n  #---------------------------------------------------------------------------------------------------------\n  D.run f, @_handle_error\n\n\n#===========================================================================================================\n# TEX FROM MD\n#-----------------------------------------------------------------------------------------------------------\n@tex_from_md = ( md_source, settings, handler ) ->\n  ### TAINT code duplication ###\n  switch arity = arguments.length\n    when 2\n      handler   = settings\n      settings  = {}\n    when 3 then null\n    else throw new Error \"expected 2 or 3 arguments, got #{arity}\"\n  #.........................................................................................................\n  $collect_and_call = ( handler ) =>\n    Z = []\n    return $ ( event, send, end ) =>\n      Z.push event if event?\n      if end?\n        handler null, Z.join ''\n        end()\n  #.........................................................................................................\n  source_route        = settings[ 'source-route' ] ? '<STRING>'\n  layout_info         = HELPERS.new_layout_info @options, source_route, false\n  #.........................................................................................................\n  S =\n    options:              @options\n    layout_info:          layout_info\n  #.........................................................................................................\n  md_readstream       = MD_READER.create_md_read_tee md_source\n  tex_writestream     = @create_tex_write_tee S\n  md_input            =   md_readstream.tee[ 'input'  ]\n  md_output           =   md_readstream.tee[ 'output' ]\n  tex_input           = tex_writestream.tee[ 'input'  ]\n  tex_output          = tex_writestream.tee[ 'output' ]\n  #.........................................................................................................\n  S.resend            = md_readstream.tee[ 'S' ].resend\n  #.........................................................................................................\n  md_output\n    .pipe tex_input\n  tex_output\n    # .pipe D.$join()\n    .pipe $collect_and_call handler\n  #.........................................................................................................\n  D.run ( => md_input.resume() ), @_handle_error\n  return null\n\n\n\n############################################################################################################\nunless module.parent?\n  # @pdf_from_md 'texts/A-Permuted-Index-of-Chinese-Characters/index.md'\n  @pdf_from_md 'texts/demo'\n\n  # debug '©nL12s', MKTS.as_tex_text '亻龵helo さしすサシス 臺灣國語Ⓒ, Ⓙ, Ⓣ𠀤𠁥&jzr#e202;'\n  # debug '©nL12s', MKTS.as_tex_text 'helo さし'\n  # event = [ '(', 'single-column', ]\n  # event = [ ')', 'single-column', ]\n  # event = [ '(', 'new-page', ]\n  # debug '©Gpn1J', select event, [ '(', ')'], [ 'single-column', 'new-page', ]\n\n"]}