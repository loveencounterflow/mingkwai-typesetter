{"version":3,"sources":["mkts-typesetter-interim.coffee"],"names":[],"mappings":"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","file":"mkts-typesetter-interim.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/MKTS-interim'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nASYNC                     = require 'async'\n#...........................................................................................................\nƒ                         = CND.format_number.bind CND\nHELPERS                   = require './HELPERS'\n# options                   = require './options'\nTEXLIVEPACKAGEINFO        = require './TEXLIVEPACKAGEINFO'\noptions_route             = '../options.coffee'\n{ CACHE, OPTIONS, }       = require './OPTIONS'\nSEMVER                    = require 'semver'\n#...........................................................................................................\nXNCHR                     = require './XNCHR'\nMKTS                      = require './MKTS'\nhide                      = MKTS.hide.bind        MKTS\ncopy                      = MKTS.copy.bind        MKTS\nstamp                     = MKTS.stamp.bind       MKTS\nselect                    = MKTS.select.bind      MKTS\nis_hidden                 = MKTS.is_hidden.bind   MKTS\nis_stamped                = MKTS.is_stamped.bind  MKTS\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@compile_options = ->\n  ### TAINT this method should go to OPTIONS ###\n  options_locator                   = require.resolve njs_path.resolve __dirname, options_route\n  # debug '©zNzKn', options_locator\n  options_home                      = njs_path.dirname options_locator\n  @options                          = OPTIONS.from_locator options_locator\n  @options[ 'home' ]                = options_home\n  @options[ 'locator' ]             = options_locator\n  cache_route                       = @options[ 'cache' ][ 'route' ]\n  @options[ 'cache' ][ 'locator' ]  = cache_locator = njs_path.resolve options_home, cache_route\n  @options[ 'xelatex-command' ]     = njs_path.resolve options_home, @options[ 'xelatex-command' ]\n  #.........................................................................................................\n  unless njs_fs.existsSync cache_locator\n    @options[ 'cache' ][ '%self' ] = {}\n    CACHE.save @options\n  #.........................................................................................................\n  @options[ 'cache' ][ '%self' ]    = require cache_locator\n  #.........................................................................................................\n  if ( texinputs_routes = @options[ 'texinputs' ]?[ 'routes' ] )?\n    locators = []\n    for route in texinputs_routes\n      has_single_slash  = ( /\\/$/   ).test route\n      has_double_slash  = ( /\\/\\/$/ ).test route\n      locator           = njs_path.resolve options_home, route\n      if      has_double_slash then locator += '//'\n      else if has_single_slash then locator += '/'\n      locators.push locator\n    ### TAINT duplication: tex_inputs_home, texinputs_value ###\n    ### TAINT path separator depends on OS ###\n    @options[ 'texinputs' ][ 'value' ] = locators.join ':'\n  # @options[ 'locators' ] = {}\n  # for key, route of @options[ 'routes' ]\n  #   @options[ 'locators' ][ key ] = njs_path.resolve options_home, route\n  #.........................................................................................................\n  # debug '©ed8gv', JSON.stringify @options, null, '  '\n  CACHE.update @options\n#...........................................................................................................\n@compile_options()\n\n#-----------------------------------------------------------------------------------------------------------\n@write_mkts_master = ( layout_info, handler ) ->\n  step ( resume ) =>\n    lines             = []\n    write             = lines.push.bind lines\n    master_locator    = layout_info[ 'master-locator'  ]\n    content_locator   = layout_info[ 'content-locator' ]\n    help \"writing #{master_locator}\"\n    #-------------------------------------------------------------------------------------------------------\n    write \"\"\n    write \"% #{master_locator}\"\n    write \"% do not edit this file\"\n    write \"% generated from #{@options[ 'locator' ]}\"\n    write \"% on #{new Date()}\"\n    write \"\"\n    write \"\\\\documentclass[a4paper,twoside]{book}\"\n    write \"\"\n    #-------------------------------------------------------------------------------------------------------\n    # DEFS\n    #.......................................................................................................\n    defs = @options[ 'defs' ]\n    write \"\"\n    write \"% DEFS\"\n    if defs?\n      write \"\\\\def\\\\#{name}{#{value}}\" for name, value of defs\n    #-------------------------------------------------------------------------------------------------------\n    # NEWCOMMANDS\n    #.......................................................................................................\n    newcommands = @options[ 'newcommands' ]\n    write \"\"\n    write \"% NEWCOMMANDS\"\n    if newcommands?\n      for name, value of newcommands\n        warn \"implicitly converting newcommand value for #{name}\"\n        value = njs_path.resolve __dirname, '..', value\n        write \"\\\\newcommand{\\\\#{name}}{%\\n#{value}%\\n}\"\n    #-------------------------------------------------------------------------------------------------------\n    # PACKAGES\n    #.......................................................................................................\n    write \"\"\n    write \"% PACKAGES\"\n    # write \"\\\\usepackage{mkts2015-main}\"\n    # write \"\\\\usepackage{mkts2015-fonts}\"\n    # write \"\\\\usepackage{mkts2015-article}\"\n    write \"\\\\usepackage{mkts2015-consolidated}\"\n\n\n    #-------------------------------------------------------------------------------------------------------\n    # FONTS\n    #......................................................................................................\n    fontspec_version  = yield TEXLIVEPACKAGEINFO.read_texlive_package_version @options, 'fontspec', resume\n    use_new_syntax    = SEMVER.satisfies fontspec_version, '>=2.4.0'\n    fonts_home        = @options[ 'fonts' ][ 'home' ]\n    #.......................................................................................................\n    write \"\"\n    write \"% FONTS\"\n    write \"% assuming fontspec@#{fontspec_version}\"\n    write \"\\\\usepackage{fontspec}\"\n    #.......................................................................................................\n    for { texname, home, filename, } in @options[ 'fonts' ][ 'files' ]\n      home ?= fonts_home\n      if use_new_syntax\n        ### TAINT should properly escape values ###\n        write \"\\\\newfontface{\\\\#{texname}}{#{filename}}[Path=#{home}/]\"\n        # write \"\\\\newcommand{\\\\#{texname}}{\"\n        # write \"\\\\typeout{\\\\trmWhite{redefining #{texname}}}\"\n        # write \"\\\\newfontface{\\\\#{texname}XXX}{#{filename}}[Path=#{home}/]\"\n        # write \"\\\\renewcommand{\\\\#{texname}}{\\\\#{texname}XXX}\"\n        # write \"}\"\n      else\n        write \"\\\\newfontface\\\\#{texname}[Path=#{home}/]{#{filename}}\"\n    write \"\"\n    #-------------------------------------------------------------------------------------------------------\n    # STYLES\n    #......................................................................................................\n    write \"\"\n    write \"% STYLES\"\n    if ( styles = @options[ 'styles' ] )?\n      write \"\\\\newcommand{\\\\#{name}}{%\\n#{value}%\\n}\" for name, value of styles\n    #-------------------------------------------------------------------------------------------------------\n    main_font_name = @options[ 'fonts' ][ 'main' ]\n    throw new Error \"need entry options/fonts/name\" unless main_font_name?\n    write \"\"\n    write \"% CONTENT\"\n    write \"\\\\begin{document}#{main_font_name}\"\n    #-------------------------------------------------------------------------------------------------------\n    # INCLUDES\n    #.......................................................................................................\n    write \"\"\n    write \"\\\\input{#{content_locator}}\"\n    write \"\"\n    #-------------------------------------------------------------------------------------------------------\n    write \"\\\\end{document}\"\n    #-------------------------------------------------------------------------------------------------------\n    text = lines.join '\\n'\n    # whisper text\n    njs_fs.writeFile master_locator, text, handler\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@MKTX =\n  TEX:        {}\n  DOCUMENT:   {}\n  COMMAND:    {}\n  REGION:     {}\n  BLOCK:      {}\n  INLINE:     {}\n  MIXED:      {}\n  CLEANUP:    {}\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.TEX._tex_escape_replacements = [\n  [ /// \\x01        ///g,  '\\x01\\x02',              ]\n  [ /// \\x5c        ///g,  '\\x01\\x01',              ]\n  [ ///  \\{         ///g,  '\\\\{',                   ]\n  [ ///  \\}         ///g,  '\\\\}',                   ]\n  [ ///  \\$         ///g,  '\\\\$',                   ]\n  [ ///  \\#         ///g,  '\\\\#',                   ]\n  [ ///  %          ///g,  '\\\\%',                   ]\n  [ ///  _          ///g,  '\\\\_',                   ]\n  [ ///  \\^         ///g,  '\\\\textasciicircum{}',   ]\n  [ ///  ~          ///g,  '\\\\textasciitilde{}',    ]\n  [ ///  &          ///g,  '\\\\&',                   ]\n  [ /// \\x01\\x01    ///g,  '\\\\textbackslash{}',     ]\n  [ /// \\x01\\x02    ///g,  '\\x01',                  ]\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.TEX.escape_for_tex = ( text ) =>\n  R = text\n  for [ pattern, replacement, ], idx in @MKTX.TEX._tex_escape_replacements\n    R = R.replace pattern, replacement\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.TEX.$fix_typography_for_tex = ( S ) =>\n  return $ ( event, send ) =>\n    if select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      meta[ 'raw' ] = text\n      text          = @MKTX.TEX.fix_typography_for_tex text, S.options\n      send [ type, name, text, meta, ]\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.TEX.is_cjk_rsg = ( rsg, options ) => rsg in options[ 'tex' ][ 'cjk-rsgs' ]\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.TEX._get_cjk_interchr_glue = ( options ) => options[ 'tex' ]?[ 'cjk-interchr-glue' ] ? '\\ue080'\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.TEX.fix_typography_for_tex = ( text, options, send = null ) =>\n  ### An improved version of `XELATEX.tag_from_chr` ###\n  ### TAINT should accept settings, fall back to `require`d `options.coffee` ###\n  glyph_styles          = options[ 'tex' ]?[ 'glyph-styles'             ] ? {}\n  ### Legacy mode: force one command per non-latin character. This is OK for Chinese texts,\n  but a bad idea for all other scripts; in the future, MKTS's TeX formatting commands like\n  `\\cn{}` will be rewritten to make this setting superfluous. ###\n  advance_each_chr      = options[ 'tex' ]?[ 'advance-each-chr'         ] ? no\n  tex_command_by_rsgs   = options[ 'tex' ]?[ 'tex-command-by-rsgs'      ]\n  cjk_interchr_glue     = @MKTX.TEX._get_cjk_interchr_glue options\n  last_command          = null\n  R                     = []\n  chunk                 = []\n  last_rsg              = null\n  remark                = if send? then @_get_remark() else null\n  this_is_cjk           = no\n  last_was_cjk          = no\n  is_latin_whitespace   = null\n  #.........................................................................................................\n  unless tex_command_by_rsgs?\n    throw new Error \"need setting 'tex-command-by-rsgs'\"\n  #.........................................................................................................\n  advance = =>\n    if chunk.length > 0\n      # debug '©zDJqU', last_command, JSON.stringify chunk.join '.'\n      R.push chunk.join ''\n      R.push \"}\" unless last_command in [ null, 'latin', ]\n    chunk.length = 0\n    return null\n  #.........................................................................................................\n  for chr in XNCHR.chrs_from_text text\n    ### Treat whitespace specially ###\n    ### TAINT better to check against /^\\s$/ ??? ###\n    if ( is_latin_whitespace = chr in [ '\\x20', '\\n', '\\r', '\\t', ] )\n      command = last_command\n    else\n      { chr\n        uchr\n        fncr\n        rsg   }   = XNCHR.analyze chr\n      #.......................................................................................................\n      switch rsg\n        when 'jzr-fig'  then chr = uchr\n        when 'u-pua'    then rsg = 'jzr-fig'\n        when 'u-latn'   then chr = @MKTX.TEX.escape_for_tex chr\n      #.......................................................................................................\n      this_is_cjk = @MKTX.TEX.is_cjk_rsg rsg, options\n      if last_was_cjk and this_is_cjk\n        ### Avoid to put second glue between glue and CJK character: ###\n        chunk.push cjk_interchr_glue unless chr is cjk_interchr_glue\n      last_was_cjk = this_is_cjk\n      #.......................................................................................................\n      ### TAINT if chr is a TeX active ASCII chr like `$`, `#`, then it will be escaped at this point\n      and no more match entries in `glyph_styles` ###\n      if ( replacement = glyph_styles[ chr ] )?\n        advance()\n        R.push replacement\n        last_command = null\n        continue\n      #.......................................................................................................\n      unless ( command = tex_command_by_rsgs[ rsg ] )?\n        command = tex_command_by_rsgs[ 'fallback' ] ? null\n        message = \"unknown RSG #{rpr rsg}: #{fncr} #{chr} (using fallback #{rpr command})\"\n        if send? then send remark 'warn', message, {}\n        else          warn message\n    #.......................................................................................................\n    unless command?\n      advance()\n      chunk.push chr\n      continue\n    #.......................................................................................................\n    if advance_each_chr or last_command isnt command\n      advance()\n      last_command = command\n      ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n      unless command is 'latin'\n        command = 'cn'\n        chunk.push \"{\\\\#{command}{}\"\n      # chunk.push \"{\\\\#{command}{}\" unless command is 'latin'\n      ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n    #.......................................................................................................\n    chunk.push chr\n  #.........................................................................................................\n  advance()\n  return R.join ''\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.COMMAND.$do = ( S ) =>\n  CS                        = require 'coffee-script'\n  VM                        = require 'vm'\n  local_filename            = 'XXXXXXXXXXXXX'\n  S.local                   = { definitions: new Map(), }\n  sandbox =\n    urge:         CND.get_logger 'urge', local_filename\n    help:         CND.get_logger 'help', local_filename\n    __filename:   local_filename\n    define:       ( pod ) ->\n      for key, value of pod\n        S.local.definitions.set key, value\n  # sandbox[ '__sandbox' ] = sandbox\n  VM.createContext sandbox\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '!', 'do'\n      [ type, action, cs_source, meta, ] = event\n      # warn \"re-defining command #{rpr identifier}\" if S.definitions[ identifier ]?\n      # S.definitions[ identifier ] = []\n      js_source = CS.compile cs_source, { bare: true, filename: local_filename, }\n      urge '4742', js_source\n      VM.runInContext js_source, sandbox, { filename: local_filename, }\n      # debug '©YMF7F', sandbox\n      # debug '©YMF7F', S.local.definitions\n      send stamp hide event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.COMMAND.$expansion = ( S ) =>\n  remark = MKTS._get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '!'\n      [ type, identifier, _, meta, ] = event\n      if ( definition = S.local.definitions.get identifier )?\n        # send stamp hide event\n        send stamp hide [ '(', '!', identifier, ( copy meta ), ]\n        # send copy sub_event for sub_event in definition\n        # debug '@16', rpr definition\n        send remark 'resend', \"expanding `#{identifier}`\", ( copy meta )\n        S.resend definition # [ '.', 'text', definition, ( copy meta ), ]\n        send stamp hide [ ')', '!', identifier, ( copy meta ), ]\n      else\n        send event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.COMMAND.$new_page = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    return send event unless select event, '!', 'new-page'\n    send stamp event\n    send [ 'tex', \"\\\\null\\\\newpage{}\", ]\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.COMMAND.$comment = ( S ) =>\n  remark = MKTS._get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    return send event unless select event, '.', 'comment'\n    [ type, name, text, meta, ] = event\n    send remark 'drop', \"`.comment`: #{rpr text}\", copy meta\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.DOCUMENT.$begin= ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '(', 'document'\n      send stamp event\n      send [ 'tex', \"\\n% begin of MD document\\n\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.DOCUMENT.$end = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, ')', 'document'\n      send stamp event\n      send [ 'tex', \"\\n% end of MD document\\n\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION._begin_multi_column = =>\n  ### TAINT Column count must come from layout / options / MKTS-MD command ###\n  return [ 'tex', '\\\\begin{multicols}{2}' ]\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION._end_multi_column = =>\n  return [ 'tex', '\\\\end{multicols}' ]\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.COMMAND.$multi_column = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    if select event, '!', 'multi-column'\n      [ type, name, text, meta, ] = event\n      send stamp hide [ '(', '!', name, ( copy meta ), ]\n      send [ '(', 'multi-column', text, ( copy meta ), ]\n      send stamp hide [ ')', '!', name, ( copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION.$multi_column = ( S ) =>\n  track   = MKTS.TRACKER.new_tracker '{multi-column}'\n  remark  = MKTS._get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_multi_column = track.within '{multi-column}'\n    track event\n    if select event, [ '(', ')', ], 'multi-column'\n      send stamp event\n      [ type, name, text, meta, ] = event\n      #.....................................................................................................\n      if type is '('\n        if within_multi_column\n          send remark 'drop', \"`(multi-column` because already within `(multi-column)`\", ( copy meta )\n        else\n          send track @MKTX.REGION._begin_multi_column()\n      #.....................................................................................................\n      else\n        if within_multi_column\n          send track @MKTX.REGION._end_multi_column()\n        else\n          send remark 'drop', \"`multi-column)` because not within `(multi-column)`\", ( copy meta )\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION.$single_column = ( S ) =>\n  ### TAINT consider to implement command `change_column_count = ( send, n )` ###\n  track   = MKTS.TRACKER.new_tracker '{multi-column}'\n  remark  = MKTS._get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_multi_column = track.within '{multi-column}'\n    track event\n    #.......................................................................................................\n    if select event, [ '(', ')', ], 'single-column'\n      [ type, name, text, meta, ] = event\n      #.....................................................................................................\n      if type is '('\n        if within_multi_column\n          send remark 'insert', \"`multi-column}`\", copy meta\n          send track @MKTX.REGION._end_multi_column()\n          send stamp event\n        else\n          # send stamp event\n          send remark 'drop', \"`single-column` because not within `{multi-column}`\", copy meta\n      #.....................................................................................................\n      else\n        if within_multi_column\n          send stamp event\n          send remark 'insert', \"`{multi-column`\", copy meta\n          send track @MKTX.REGION._begin_multi_column()\n        else\n          send remark 'drop', \"`single-column` because not within `{multi-column}`\", copy meta\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION.$keep_lines = ( S ) =>\n  track = MKTS.TRACKER.new_tracker '{keep-lines}'\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_keep_lines = track.within '{keep-lines}'\n    track event\n    #.......................................................................................................\n    if select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      ### TAINT other replacements possible; use API ###\n      ### TAINT U+00A0 (nbsp) might be too wide ###\n      text = text.replace /\\u0020/g, '\\u00a0' if within_keep_lines\n      send [ type, name, text, meta, ]\n    #.......................................................................................................\n    else if select event, [ '(', ')', ], 'keep-lines'\n      send stamp event\n      [ type, name, text, meta, ] = event\n      #.....................................................................................................\n      if type is '('\n        track.enter '{keep-lines}'\n        send [ 'tex', \"\\\\begingroup\\\\mktsObeyAllLines{}\", ]\n      else\n        send [ 'tex', \"\\\\endgroup{}\", ]\n        track.leave '{keep-lines}'\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION.$code = ( S ) =>\n  ### TAINT code duplication with `REGION.$keep_lines` possible ###\n  track = MKTS.TRACKER.new_tracker '{code}'\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_code = track.within '{code}'\n    track event\n    #.......................................................................................................\n    if select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      if within_code\n        text = text.replace /\\u0020/g, '\\u00a0'\n      send [ type, name, text, meta, ]\n    #.......................................................................................................\n    else if select event, [ '(', ')', ], 'code'\n      send stamp event\n      [ type, name, text, meta, ] = event\n      #.....................................................................................................\n      if type is '('\n        send [ 'tex', \"\\\\begingroup\\\\mktsObeyAllLines\\\\mktsStyleCode{}\", ]\n      else\n        send [ 'tex', \"\\\\endgroup{}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$heading = ( S ) =>\n  restart_multicols = no\n  track             = MKTS.TRACKER.new_tracker '{multi-column}'\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_multi_column = track.within '{multi-column}'\n    track event\n    #.......................................................................................................\n    if select event, [ '(', ')', ], [ 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', ]\n      # debug '@rg19TQ', event\n      send stamp event\n      [ type, name, text, meta, ] = event\n      #.....................................................................................................\n      # OPEN\n      #.....................................................................................................\n      if type is '('\n        #...................................................................................................\n        if within_multi_column and ( name in [ 'h1', 'h2', ] )\n          send track @MKTX.REGION._end_multi_column meta\n          restart_multicols = yes\n        #...................................................................................................\n        send [ 'tex', \"\\n\", ]\n        #...................................................................................................\n        switch name\n          when 'h1' then  send [ 'tex', \"\\\\chapter{\", ]\n          when 'h2' then  send [ 'tex', \"\\\\section{\", ]\n          else            send [ 'tex', \"\\\\subsection{\", ]\n      #.....................................................................................................\n      # CLOSE\n      #.....................................................................................................\n      else\n        ### Placing the closing brace on a new line seems to improve line breaking ###\n        send [ 'tex', \"\\n\", ]\n        send [ 'tex', \"}\", ]\n        send [ 'tex', \"\\n\", ]\n        if restart_multicols\n          send track @MKTX.REGION._begin_multi_column meta\n          restart_multicols = no\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$paragraph = ( S ) =>\n  ### TAINT should unify the two observers ###\n  track = MKTS.TRACKER.new_tracker '{code}', '{keep-lines}'\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_code       = track.within '{code}'\n    within_keep_lines = track.within '{keep-lines}'\n    track event\n    #.......................................................................................................\n    if select event, '.', 'p'\n      [ type, name, text, meta, ] = event\n      if within_code or within_keep_lines\n        send stamp event\n        send [ 'tex', '\\n\\n' ]\n      else\n        send stamp event\n        send @MKTX.BLOCK._end_paragraph()\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK._end_paragraph = =>\n  ### TAINT use command from sty ###\n  ### TAINT make configurable ###\n  return [ 'tex', '\\\\mktsShowpar\\\\par\\n' ]\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$unordered_list = ( S ) =>\n  tex_by_md_markup =\n    '*':          '$\\\\star$'\n    'fallback':   '—'\n  item_markup_tex = null\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '(', 'ul'\n      [ type, name, text, meta, ] = event\n      { markup } = meta\n      ### TAINT won't work in nested lists ###\n      ### TAINT make configurable ###\n      item_markup_tex = tex_by_md_markup[ markup ] ? tex_by_md_markup[ 'fallback' ]\n      send stamp event\n      send [ 'tex', '\\\\begin{itemize}' ]\n    #.......................................................................................................\n    else if select event, '(', 'li'\n      send stamp event\n      send [ 'tex', \"\\\\item[#{item_markup_tex}] \" ]\n    #.......................................................................................................\n    else if select event, ')', 'li'\n      send stamp event\n      send [ 'tex', '\\n' ]\n    #.......................................................................................................\n    else if select event, ')', 'ul'\n      send stamp event\n      send [ 'tex', '\\\\end{itemize}' ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$hr = ( S ) =>\n  remark = MKTS._get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '.', 'hr'\n      send stamp event\n      [ type, name, text, meta, ] = event\n      switch chr = text[ 0 ]\n        when '-' then send [ 'tex', '\\n--------------\\n' ]\n        when '*' then send [ 'tex', '\\n**************\\n' ]\n        else send remark 'drop', \"`[hr] because markup unknown #{rpr text}\", copy meta\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$code_span = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, [ '(', ')', ], 'code-span'\n      send stamp event\n      [ type, name, text, meta, ] = event\n      if type is '('\n        send [ 'tex', '{\\\\mktsStyleCode{}', ]\n      else\n        send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.MIXED.$raw = ( S ) =>\n  remark = MKTS._get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '.', 'raw'\n      [ type, name, text, meta, ] = event\n      send stamp hide event\n      send remark 'convert', \"raw to TeX\", copy meta\n      send [ 'tex', text, ]\n      # send stamp event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.MIXED.$footnote = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '(', 'footnote'\n      send stamp event\n      [ type, name, id, meta, ] = event\n      send [ 'tex', \"\\\\footnote{\", ]\n    #.......................................................................................................\n    else if select event, ')', 'footnote'\n      send stamp event\n      send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.MIXED.$remove_footnote_extra_paragraphs = ( S ) =>\n  last_event  = null\n  #.........................................................................................................\n  return $ ( event, send, end ) =>\n    if event?\n      #.......................................................................................................\n      if select event, ')', 'footnote'\n        send last_event if last_event? and not select last_event, '.', 'p'\n        last_event = event\n      #.......................................................................................................\n      else\n        send last_event if last_event?\n        last_event = event\n    #.......................................................................................................\n    if end?\n      send last_event if last_event?\n      end()\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$translate_i_and_b = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, [ '(', ')', ], [ 'i', 'b', ]\n      [ type, name, text, meta, ] = event\n      new_name = if name is 'i' then 'em' else 'strong'\n      send [ type, new_name, text, meta, ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$em_and_strong = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, [ '(', ')', ], [ 'em', 'strong', ]\n      send stamp event\n      [ type, name, text, meta, ] = event\n      if type is '('\n        if name is 'em'\n          send [ 'tex', '{\\\\mktsStyleItalic{}', ]\n          ### TAINT must not be sent when in vertical mode ###\n          # send [ 'tex', '\\\\/', ]\n        else\n          send [ 'tex', '{\\\\mktsStyleBold{}', ]\n      else\n        send [ 'tex', '\\\\/', ] if name is 'em'\n        send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n\n#===========================================================================================================\n# CLEANUP\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.CLEANUP.$remove_empty_texts = ( S ) ->\n  remark = MKTS._get_remark()\n  return $ ( event, send ) =>\n    if select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      if text is ''\n        ### remain silent to make output an easier read ###\n        null\n        # send remark 'drop', \"empty text\", copy meta\n      else\n        send event\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.CLEANUP.$remove_empty_p_tags = ( S ) =>\n  text_count  = 0\n  remark      = MKTS._get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, [ ')', ]\n      text_count = 0\n      send event\n    #.......................................................................................................\n    else if select event, '.', 'text'\n      text_count += +1\n      send event\n    #.......................................................................................................\n    else if select event, '.', 'p'\n      if text_count > 0\n        send event\n      else\n        [ _, _, _, meta, ] = event\n        send remark 'drop', \"`.p` because it's empty\", copy meta\n      text_count = 0\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION.$correct_p_tags_before_regions = ( S ) =>\n  last_was_p              = no\n  last_was_begin_document = no\n  remark                  = MKTS._get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    # debug '©MwBAv', event\n    #.......................................................................................................\n    if select event, 'tex'\n      send event\n    #.......................................................................................................\n    else if select event, '(', 'document'\n      # debug '©---1', last_was_begin_document\n      # debug '©---2', last_was_p\n      last_was_p              = no\n      last_was_begin_document = yes\n      send event\n    #.......................................................................................................\n    else if select event, '.', 'p'\n      # debug '©---3', last_was_begin_document\n      # debug '©---4', last_was_p\n      last_was_p              = yes\n      last_was_begin_document = no\n      send event\n    #.......................................................................................................\n    else if select event, [ '(', ]\n      # debug '©---5', last_was_begin_document\n      # debug '©---6', last_was_p\n      if ( not last_was_begin_document ) and ( not last_was_p )\n        [ ..., meta, ] = event\n        # send stamp [ '#', 'insert', my_badge, \"inserting `.p` tag\", ( copy meta ), ]\n        send remark 'insert', \"`.p` because region or block opens\", copy meta\n        send [ '.', 'p', null, ( copy meta ), ]\n      send event\n      last_was_p              = no\n      last_was_begin_document = no\n    #.......................................................................................................\n    else\n      last_was_p              = no\n      last_was_begin_document = no\n      send event\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.$show_unhandled_tags = ( S ) =>\n  return $ ( event, send ) =>\n    ### TAINT selection could be simpler, less repetitive ###\n    if event[ 0 ] in [ 'tex', 'text', ]\n      send event\n    else if select event, '.', 'text'\n      send event\n    else unless is_stamped event\n      [ type, name, text, meta, ] = event\n      if text?\n        if ( CND.isa_pod text )\n          if ( Object.keys text ).length is 0\n            text = ''\n          else\n            text = rpr text\n      else\n        text = ''\n      if type in [ '.', '!', ] or type in MKTS.FENCES.left\n        first             = type\n        last              = name\n        pre               = '█'\n        post              = ''\n      else\n        first             = name\n        last              = type\n        pre               = ''\n        post              = '█'\n      event_txt         = first + last + ' ' + text\n      event_tex         = @MKTX.TEX.fix_typography_for_tex event_txt, S.options\n      ### TAINT use mkts command ###\n      send [ 'tex', \"\"\"{\\\\mktsStyleBold\\\\color{violet}{%\n        \\\\mktsStyleSymbol#{pre}}#{event_tex}{\\\\mktsStyleSymbol#{post}}}\"\"\" ]\n      send event\n    else\n      send event\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$filter_tex = ( S ) ->\n  return $ ( event, send ) =>\n    if select event, 'tex'                        then send event[ 1 ]\n    else if select event, '.', [ 'text', 'raw', ] then send event[ 2 ]\n    else warn \"unhandled event: #{JSON.stringify event}\" unless is_stamped event\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@create_tex_write_tee = ( S ) ->\n  ### TAINT get state via return value of MKTS.create_mdreadstream ###\n  ### TAINT make execution of `$produce_mktscript` a matter of settings ###\n  #.......................................................................................................\n  readstream    = D.create_throughstream()\n  writestream   = D.create_throughstream()\n  # mktscript_in  = D.create_throughstream()\n  # mktscript_out = D.create_throughstream()\n  #.......................................................................................................\n  # mktscript_in\n  #   .pipe MKTS.$produce_mktscript                         S\n  #   .pipe mktscript_out\n  #.......................................................................................................\n  readstream\n    .pipe @MKTX.TEX.$fix_typography_for_tex               S\n    .pipe @MKTX.DOCUMENT.$begin                           S\n    .pipe @MKTX.DOCUMENT.$end                             S\n    .pipe @MKTX.MIXED.$raw                                S\n    .pipe @MKTX.MIXED.$footnote                           S\n    .pipe @MKTX.MIXED.$remove_footnote_extra_paragraphs   S\n    .pipe @MKTX.COMMAND.$do                               S\n    .pipe @MKTX.COMMAND.$expansion                        S\n    .pipe @MKTX.COMMAND.$new_page                         S\n    .pipe @MKTX.COMMAND.$comment                          S\n    # .pipe @MKTX.REGION.$correct_p_tags_before_regions     S\n    .pipe @MKTX.COMMAND.$multi_column                     S\n    .pipe @MKTX.REGION.$multi_column                      S\n    .pipe @MKTX.REGION.$single_column                     S\n    .pipe @MKTX.REGION.$keep_lines                        S\n    .pipe @MKTX.REGION.$code                              S\n    .pipe @MKTX.BLOCK.$heading                            S\n    .pipe @MKTX.BLOCK.$hr                                 S\n    .pipe @MKTX.BLOCK.$unordered_list                     S\n    .pipe @MKTX.INLINE.$code_span                         S\n    .pipe @MKTX.INLINE.$translate_i_and_b                 S\n    .pipe @MKTX.INLINE.$em_and_strong                     S\n    .pipe @MKTX.BLOCK.$paragraph                          S\n    .pipe @MKTX.CLEANUP.$remove_empty_texts               S\n    .pipe MKTS.$show_mktsmd_events                        S\n    # .pipe mktscript_in\n    .pipe @MKTX.$show_unhandled_tags                      S\n    .pipe @$filter_tex                                    S\n    .pipe MKTS.$show_illegal_chrs                         S\n    .pipe writestream\n  #.......................................................................................................\n  settings =\n    # inputs:\n    #   mktscript:        mktscript_in\n    # outputs:\n    #   mktscript:        mktscript_out\n    S:                S\n  #.......................................................................................................\n  return D.TEE.from_readwritestreams readstream, writestream, settings\n\n#-----------------------------------------------------------------------------------------------------------\n@_handle_error = ( error ) =>\n  alert error[ 'message' ]\n  stack = error[ 'stack' ] ? \"(no stacktrace available)\"\n  whisper '\\n' + ( stack.split '\\n' )[ .. 10 ].join '\\n'\n  whisper '...'\n  process.exit 1\n\n\n#===========================================================================================================\n# PDF FROM MD\n#-----------------------------------------------------------------------------------------------------------\n@pdf_from_md = ( source_route, handler ) ->\n  ### TAINT code duplication ###\n  ### TAIN only works with docs in the filesystem, not with literal texts ###\n  #---------------------------------------------------------------------------------------------------------\n  f = => step ( resume ) =>\n    handler                ?= ->\n    layout_info             = HELPERS.new_layout_info @options, source_route\n    yield @write_mkts_master layout_info, resume\n    source_locator          = layout_info[ 'source-locator'  ]\n    content_locator         = layout_info[ 'content-locator' ]\n    file_output             = njs_fs.createWriteStream content_locator\n    #.......................................................................................................\n    mkscript_locator        = layout_info[ 'mkscript-locator' ]\n    mkscript_output         = njs_fs.createWriteStream mkscript_locator\n    #.......................................................................................................\n    file_output.on 'close', =>\n      HELPERS.write_pdf layout_info, ( error ) =>\n        throw error if error?\n        handler null if handler?\n    #.......................................................................................................\n    S =\n      options:              @options\n      layout_info:          layout_info\n    #.......................................................................................................\n    ### TAINT should read MD source stream ###\n    md_source               = njs_fs.readFileSync source_locator, encoding: 'utf-8'\n    md_tee                  = MKTS.create_md_read_tee md_source\n    tex_tee                 = @create_tex_write_tee S\n    md_input                =  md_tee[ 'input'  ]\n    md_output               =  md_tee[ 'output' ]\n    tex_input               = tex_tee[ 'input'  ]\n    tex_output              = tex_tee[ 'output' ]\n    #.......................................................................................................\n    S.resend = md_tee[ 'S' ].resend\n    #.......................................................................................................\n    md_output\n      .pipe tex_input\n    tex_output\n      # .pipe $ ( event, send, end ) =>\n      #   if event?\n      #     send event\n      #   if end?\n      #     end() # setTimeout end, 1000\n      .pipe file_output\n    #.......................................................................................................\n    md_input.resume()\n  #---------------------------------------------------------------------------------------------------------\n  D.run f, @_handle_error\n\n\n#===========================================================================================================\n# TEX FROM MD\n#-----------------------------------------------------------------------------------------------------------\n@tex_from_md = ( md_source, settings, handler ) ->\n  ### TAINT code duplication ###\n  switch arity = arguments.length\n    when 2\n      handler   = settings\n      settings  = {}\n    when 3 then null\n    else throw new Error \"expected 2 or 3 arguments, got #{arity}\"\n  #.........................................................................................................\n  $collect_and_call = ( handler ) =>\n    Z = []\n    return $ ( event, send, end ) =>\n      Z.push event if event?\n      if end?\n        handler null, Z.join ''\n        end()\n  #.........................................................................................................\n  source_route        = settings[ 'source-route' ] ? '<STRING>'\n  layout_info         = HELPERS.new_layout_info @options, source_route, false\n  #.........................................................................................................\n  S =\n    options:              @options\n    layout_info:          layout_info\n  #.........................................................................................................\n  md_tee              = MKTS.create_md_read_tee md_source\n  tex_tee             = @create_tex_write_tee S\n  md_input            =  md_tee[ 'input'  ]\n  md_output           =  md_tee[ 'output' ]\n  tex_input           = tex_tee[ 'input'  ]\n  tex_output          = tex_tee[ 'output' ]\n  #.........................................................................................................\n  S.resend = md_tee[ 'S' ].resend\n  #.........................................................................................................\n  md_output\n    .pipe tex_input\n  tex_output\n    # .pipe D.$join()\n    .pipe $collect_and_call handler\n  #.........................................................................................................\n  D.run ( => md_input.resume() ), @_handle_error\n  return null\n\n\n\n############################################################################################################\nunless module.parent?\n  # @pdf_from_md 'texts/A-Permuted-Index-of-Chinese-Characters/index.md'\n  @pdf_from_md 'texts/demo'\n\n  # debug '©nL12s', MKTS.as_tex_text '亻龵helo さしすサシス 臺灣國語Ⓒ, Ⓙ, Ⓣ𠀤𠁥&jzr#e202;'\n  # debug '©nL12s', MKTS.as_tex_text 'helo さし'\n  # event = [ '(', 'single-column', ]\n  # event = [ ')', 'single-column', ]\n  # event = [ '(', 'new-page', ]\n  # debug '©Gpn1J', select event, [ '(', ')'], [ 'single-column', 'new-page', ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}