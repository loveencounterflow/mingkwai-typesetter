{"version":3,"sources":["md-reader.coffee"],"names":[],"mappings":"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","file":"md-reader.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS/MD-READER'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#-----------------------------------------------------------------------------------------------------------\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n# $async                    = D.remit_async.bind D\n#...........................................................................................................\nMarkdown_parser           = require 'markdown-it'\n# Html_parser               = ( require 'htmlparser2' ).Parser\nnew_md_inline_plugin      = require 'markdown-it-regexp'\n#...........................................................................................................\nHELPERS                   = require './helpers'\n#...........................................................................................................\nmisfit                    = Symbol 'misfit'\nMKTS                      = require './main'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_badge = ( delta = 0 ) ->\n  ### Experimental, to be used with remarks when things got omitted or inserted. ###\n  caller_info = CND.get_caller_info delta + 2\n  # filename    = njs_path.basename caller_info[ 'route' ]\n  # line_nr     = caller_info[ 'line-nr' ]\n  method_name = caller_info[ 'function-name' ] ? caller_info[ 'method-name' ]\n  method_name = method_name.replace /^__dirname\\./, ''\n  # return \"#{filename}/#{method_name}\"\n  return method_name\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_remark = ( delta = 0 ) ->\n  my_badge = @_get_badge delta + 1\n  return ( kind, message, meta ) =>\n    return @stamp [ '#', kind, message, ( @copy meta, { badge: my_badge, } ), ]\n  # send stamp [ '#', 'insert', my_badge, \"inserting `p` tag\", ( copy meta ), ]\n\n\n\n#===========================================================================================================\n# MD / HTML PARSING\n#-----------------------------------------------------------------------------------------------------------\n@_new_markdown_parser = ->\n  #.........................................................................................................\n  ### https://markdown-it.github.io/markdown-it/#MarkdownIt.new ###\n  # feature_set = 'commonmark'\n  feature_set = 'zero'\n  #.........................................................................................................\n  settings    =\n    html:           yes,            # Enable HTML tags in source\n    xhtmlOut:       no,             # Use '/' to close single tags (<br />)\n    breaks:         no,             # Convert '\\n' in paragraphs into <br>\n    langPrefix:     'language-',    # CSS language prefix for fenced blocks\n    linkify:        yes,            # Autoconvert URL-like text to links\n    typographer:    yes,\n    quotes:         '“”‘’'\n    # quotes:         '\"\"\\'\\''\n    # quotes:         '\"\"`\\''\n    # quotes:         [ '<<', '>>', '!!!', '???', ]\n    # quotes:   ['«\\xa0', '\\xa0»', '‹\\xa0', '\\xa0›'] # French\n  #.........................................................................................................\n  R = new Markdown_parser feature_set, settings\n  # R = new Markdown_parser settings\n  R\n    .enable 'text'\n    # .enable 'newline'\n    .enable 'escape'\n    .enable 'backticks'\n    .enable 'strikethrough'\n    .enable 'emphasis'\n    .enable 'link'\n    .enable 'image'\n    .enable 'autolink'\n    .enable 'html_inline'\n    .enable 'entity'\n    # .enable 'code'\n    .enable 'fence'\n    .enable 'blockquote'\n    .enable 'hr'\n    .enable 'list'\n    .enable 'reference'\n    .enable 'heading'\n    # .enable 'lheading'\n    .enable 'html_block'\n    .enable 'table'\n    .enable 'paragraph'\n    .enable 'normalize'\n    .enable 'block'\n    .enable 'inline'\n    # .enable 'linkify'\n    .enable 'replacements'\n    .enable 'smartquotes'\n  #.......................................................................................................\n  R.use require 'markdown-it-footnote'\n  # R.use require 'markdown-it-mark'\n  # R.use require 'markdown-it-sub'\n  # R.use require 'markdown-it-sup'\n  #.......................................................................................................\n  # ### sample plugin ###\n  # user_pattern  = /@(\\w+)/\n  # user_handler  = ( match, utils ) ->\n  #   url = 'http://example.org/u/' + match[ 1 ]\n  #   return '<a href=\"' + utils.escape(url) + '\">' + utils.escape(match[1]) + '</a>'\n  # user_plugin = new_md_inline_plugin user_pattern, user_handler\n  # R.use user_plugin\n  #.......................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nget_parse_html_methods = ->\n  PARSE5      = require 'parse5'\n  get_message = ( source ) -> \"expected single opening node, got #{rpr source}\"\n  R           = {}\n  #.........................................................................................................\n  R[ '_parse_html_open_tag' ] = ( source ) ->\n    tree    = PARSE5.parseFragment source\n    throw new Error get_message source unless ( cns = tree[ 'childNodes' ] ).length is 1\n    cn = cns[ 0 ]\n    throw new Error get_message source unless cn[ 'childNodes' ]?.length is 0\n    return [ 'begin', cn[ 'tagName' ], cn[ 'attrs' ][ 0 ] ? {}, ]\n  #.........................................................................................................\n  R[ '_parse_html_block' ] = ( source ) ->\n    tree    = PARSE5.parseFragment source\n    debug '@88817', tree\n    return null\n  #.........................................................................................................\n  return R\n#...........................................................................................................\nparse_methods = get_parse_html_methods()\n@_parse_html_open_tag = parse_methods[ '_parse_html_open_tag' ]\n@_parse_html_block    = parse_methods[ '_parse_html_block'    ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_parse_html_tag = ( source ) ->\n  if ( match = source.match @_parse_html_tag.close_tag_pattern )?\n    return [ 'end', match[ 1 ], ]\n  if ( match = source.match @_parse_html_tag.comment_pattern )?\n    return [ 'comment', 'comment', match[ 1 ], ]\n  return @_parse_html_open_tag source\n@_parse_html_tag.close_tag_pattern   = /^<\\/([^>]+)>$/\n@_parse_html_tag.comment_pattern     = /^<!--([\\s\\S]*)-->$/\n\n\n#===========================================================================================================\n# FENCES\n#-----------------------------------------------------------------------------------------------------------\n@FENCES = {}\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT moving to parentheses-only syntax; note that most of the `FENCES` submodule can then go ###\n@FENCES.left    = [ '(', ]\n@FENCES.right   = [ ')', ]\n@FENCES.pairs   =\n  '(':  ')'\n  ')':  '('\n\n#-----------------------------------------------------------------------------------------------------------\n@FENCES._get_opposite = ( fence, fallback ) =>\n  unless ( R = @FENCES.pairs[ fence ] )?\n    return fallback unless fallback is undefined\n    throw new Error \"unknown fence: #{rpr fence}\"\n  return R\n\n#===========================================================================================================\n# TRACKER\n#-----------------------------------------------------------------------------------------------------------\n@TRACKER = {}\n\n#-----------------------------------------------------------------------------------------------------------\ntracker_pattern = /// ^\n    ( [     .!$(  ]? )\n    ( [^ \\s .!$() ]* )\n    ( [         ) ]? )\n    $ ///\n\n#-----------------------------------------------------------------------------------------------------------\n@FENCES.parse = ( pattern, settings ) =>\n  left_fence  = null\n  name        = null\n  right_fence = null\n  symmetric   = settings?[ 'symmetric' ] ? yes\n  #.........................................................................................................\n  if ( not pattern? ) or pattern.length is 0\n    throw new Error \"pattern must be non-empty, got #{rpr pattern}\"\n  #.........................................................................................................\n  match = pattern.match @TRACKER._tracker_pattern\n  throw new Error \"not a valid pattern: #{rpr pattern}\" unless match?\n  #.........................................................................................................\n  [ _, left_fence, name, right_fence, ] = match\n  left_fence  = null if  left_fence.length is 0\n  name        = null if        name.length is 0\n  right_fence = null if right_fence.length is 0\n  #.........................................................................................................\n  if left_fence is '.'\n    ### Can not have a right fence if left fence is a dot ###\n    if right_fence?\n      throw new Error \"fence '.' can not have right fence, got #{rpr pattern}\"\n  #.........................................................................................................\n  else\n    ### Except for dot fence, must always have no fence or both fences in case `symmetric` is set ###\n    if symmetric\n      if ( left_fence? and not right_fence? ) or ( right_fence? and not left_fence? )\n        throw new Error \"unmatched fence in #{rpr pattern}\"\n  #.........................................................................................................\n  if left_fence? and left_fence isnt '.'\n    ### Complain about unknown left fences ###\n    unless left_fence in @FENCES.left\n      throw new Error \"illegal left_fence in pattern #{rpr pattern}\"\n    if right_fence?\n      ### Complain about non-matching fences ###\n      unless ( @FENCES._get_opposite left_fence, null ) is right_fence\n        throw new Error \"fences don't match in pattern #{rpr pattern}\"\n  if right_fence?\n    ### Complain about unknown right fences ###\n    unless right_fence in @FENCES.right\n      throw new Error \"illegal right_fence in pattern #{rpr pattern}\"\n  #.........................................................................................................\n  return [ left_fence, name, right_fence, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@TRACKER._tracker_pattern = tracker_pattern\n\n#-----------------------------------------------------------------------------------------------------------\n@TRACKER.new_tracker = ( patterns... ) =>\n  _MKTS = @\n  #.........................................................................................................\n  self = ( event ) ->\n    # CND.dir self\n    # debug '@763', \"tracking event #{rpr event}\"\n    for pattern, state of self._states\n      { parts } = state\n      continue unless _MKTS.select event, parts...\n      [ [ left_fence, right_fence, ], pattern_name, ] = parts\n      [ type, event_name, ]                           = event\n      if type is left_fence\n        # debug '@1', pattern, yes\n        self._enter state\n      else\n        # debug '@2', pattern, no\n        self._leave state\n        ### TAINT shouldn't throw error but issue warning remark ###\n        throw new Error \"too many right fences: #{rpr event}\" if state[ 'count' ] < 0\n    return event\n  #.........................................................................................................\n  self._states = {}\n  #.........................................................................................................\n  self._get_state = ( pattern ) ->\n    throw new Error \"untracked pattern #{rpr pattern}\" unless ( R = self._states[ pattern ] )?\n    return R\n  #.........................................................................................................\n  self.within = ( patterns... ) ->\n    for pattern in patterns\n      return true if self._within pattern\n    return false\n  self._within  = ( pattern ) -> ( self._get_state pattern )[ 'count' ] > 0\n  #.........................................................................................................\n  self.enter    = ( pattern ) -> self._enter self._get_state pattern\n  self.leave    = ( pattern ) -> self._leave self._get_state pattern\n  self._enter   = ( state   ) -> state[ 'count' ] += +1\n  ### TAINT should validate count when leaving ###\n  self._leave   = ( state   ) -> state[ 'count' ] += -1\n  #.........................................................................................................\n  do ->\n    for pattern in patterns\n      [ left_fence, pattern_name, right_fence, ]  = _MKTS.FENCES.parse pattern\n      state =\n        parts:    [ [ left_fence, right_fence, ], pattern_name, ]\n        count:    0\n      self._states[ pattern ] = state\n  #.........................................................................................................\n  return self\n\n\n#===========================================================================================================\n# _PRE (PREPROCESSING)\n#-----------------------------------------------------------------------------------------------------------\n@_PRE = {}\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$flatten_inline_tokens = ( S ) =>\n  return $ ( token, send ) ->\n    if ( type = token[ 'type' ] ) is 'inline'\n      send sub_token for sub_token in token[ 'children' ]\n    else\n      send token\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$flatten_image_tokens = ( S ) =>\n  return $ ( token, send ) ->\n    if ( type = token[ 'type' ] ) is 'image'\n      src = null\n      for [ attribute_name, attribute_value, ] in token[ 'attrs' ]\n        if attribute_name is 'src'\n          src = attribute_value\n          break\n      send { type: 'image_open',  src, map: token[ 'map' ], }\n      send sub_token for sub_token in token[ 'children' ]\n      send { type: 'image_close', src, map: token[ 'map' ], }\n    else\n      send token\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$reinject_html_blocks = ( S ) =>\n  ### re-inject HTML blocks ###\n  md_parser   = @_new_markdown_parser()\n  return $ ( token, send ) =>\n    { type, map, } = token\n    if type is 'html_block'\n      ### TAINT `map` location data is borked with this method ###\n      ### add extraneous text content; this causes the parser to parse the HTML block as a paragraph\n      with some inline HTML: ###\n      XXX_source  = \"XXX\" + token[ 'content' ]\n      ### for `environment` see https://markdown-it.github.io/markdown-it/#MarkdownIt.parse ###\n      ### TAINT what to do with useful data appearing in `environment`? ###\n      environment = {}\n      tokens      = md_parser.parse XXX_source, environment\n      ### remove extraneous text content: ###\n      removed     = tokens[ 1 ]?[ 'children' ]?.splice 0, 1\n      unless removed[ 0 ]?[ 'content' ] is \"XXX\"\n        throw new Error \"should never happen (1)\"\n      S.confluence.write token for token in tokens\n    else\n      send token\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$rewrite_markdownit_tokens = ( S ) =>\n  unknown_tokens        = []\n  is_first              = yes\n  last_map              = [ 0, 0, ]\n  _send                 = null\n  remark                = @_get_remark()\n  within_footnote_block = false\n  end_token             = Symbol.for 'end'\n  last_link_href        = null\n  #.........................................................................................................\n  send_unknown = ( token, meta ) =>\n    { type, } = token\n    _send [ '?', type, token[ 'content' ], meta, ]\n    unknown_tokens.push type unless type in unknown_tokens\n  #.........................................................................................................\n  # return $ ( token, send, end ) =>\n  return $ ( token, send ) =>\n    _send = send\n    #.......................................................................................................\n    if token is end_token\n      # whisper \"encountered `end` token\"\n      if unknown_tokens.length > 0\n        send remark 'warn', \"unknown tokens: #{unknown_tokens.sort().join ', '}\", {}\n      if is_first\n        is_first = no\n        send [ '(', 'document', null, {}, ]\n        send [ '.', 'command', 'empty-document', {}, ]\n      # debug '©76885', [ ')', 'document', null, {}, ]\n      send [ ')', 'document', null, {}, ]\n      setImmediate =>\n        # whisper \"ending input stream\"\n        send.end()\n      # setTimeout ( => send.end() ), 1000\n    else if CND.isa_list token\n      ### TAINT this clause shouldn't be here; we should target resends (which could be source texts\n      or MKTS events) to appropriate insertion points in the stream ###\n      ### pass through re-injected MKTS events ###\n      send token\n    else\n      { type\n        map\n        markup }      = token\n      map            ?= last_map\n      line_nr         = ( map[ 0 ] ? 0 ) + 1\n      col_nr          = ( map[ 1 ] ? 0 ) + 1\n      #.....................................................................................................\n      meta = {\n        line_nr\n        col_nr\n        markup\n        }\n      if is_first\n        is_first = no\n        send [ '(', 'document', null, meta, ]\n      # #.....................................................................................................\n      # if type in [\n      #   'footnote_ref',\n      #   'footnote_open', 'footnote_close',\n      #   'footnote_anchor',\n      #   'footnote_block_open', 'footnote_block_close', ]\n      #   whisper '@a20g', token[ 'type' ]\n      #.....................................................................................................\n      if type is 'footnote_block_open'  then within_footnote_block = yes\n      #.....................................................................................................\n      if within_footnote_block or not S.has_ended\n        # urge '@a20g', token[ 'type' ]#, within_footnote_block\n        switch type\n          # blocks\n          when 'paragraph_open'     then null\n          when 'paragraph_close'    then send [ '.', 'p',             null,                         meta, ]\n          when 'bullet_list_open'   then send [ '(', 'ul',            null,                         meta, ]\n          when 'bullet_list_close'  then send [ ')', 'ul',            null,                         meta, ]\n          when 'list_item_open'     then send [ '(', 'li',            null,                         meta, ]\n          when 'list_item_close'    then send [ ')', 'li',            null,                         meta, ]\n          # inlines\n          when 'strong_open'        then send [ '(', 'strong',        null,                         meta, ]\n          when 'strong_close'       then send [ ')', 'strong',        null,                         meta, ]\n          when 'em_open'            then send [ '(', 'em',            null,                         meta, ]\n          when 'em_close'           then send [ ')', 'em',            null,                         meta, ]\n          # singles\n          when 'text'               then send [ '.', 'text',          token[ 'content' ],           meta, ]\n          when 'hr'                 then send [ '.', 'hr',            token[ 'markup' ],            meta, ]\n          #.................................................................................................\n          # specials\n          #.................................................................................................\n          when 'heading_open'\n            h_level = parseInt token[ 'tag' ][ 1 ], 10\n            send [ '(', 'h', h_level, meta, ]\n          #.................................................................................................\n          when 'heading_close'\n            h_level = parseInt token[ 'tag' ][ 1 ], 10\n            send [ ')', 'h', h_level, meta, ]\n          #.................................................................................................\n          when 'link_open'\n            ### NB markdown-it does not support nested link markup a la `xxx [333 [444](555) 666](777)`;\n            as such, we have only to recall the most recent link target when the linking span is closed. ###\n            for [ attribute_name, attribute_value, ] in token[ 'attrs' ]\n              if attribute_name is 'href'\n                last_link_href = attribute_value\n                break\n            send [ '(', 'link', last_link_href, meta, ]\n          #  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n          when 'link_close'\n            send [ ')', 'link', last_link_href, meta, ]\n            last_link_href = null\n          #.................................................................................................\n          when 'image_open'\n            meta[ 'src' ] = token[ 'src' ]\n            send [ '(', 'image', null, meta, ]\n          #  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n          when 'image_close'\n            meta[ 'src' ] = token[ 'src' ]\n            send [ ')', 'image', null, meta, ]\n          #.................................................................................................\n          when 'code_inline'\n            text_meta             = ( @copy meta )\n            text_meta[ 'markup' ] = ''\n            send [ '(', 'code-span',  null,                       meta,   ]\n            send [ '.', 'text',       token[ 'content' ],    text_meta,   ]\n            send [ ')', 'code-span',  null,               ( @copy meta ),  ]\n          #.................................................................................................\n          when 'footnote_ref'\n            id = token[ 'meta' ][ 'id' ]\n            send [ '.', 'footnote-ref', id, meta, ]\n          #  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n          when 'footnote_open'\n            id = token[ 'meta' ][ 'id' ]\n            send [ '(', 'footnote-def', id, meta, ]\n          #  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n          when 'footnote_close'\n            send [ ')', 'footnote-def', null, meta, ]\n          #  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n          when 'footnote_anchor'\n            null\n            # send remark 'drop', \"footnote anchor is dispensable\", ( @copy meta )\n          #  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n          when 'footnote_block_open', 'footnote_block_close'\n            null\n            # send remark 'drop', \"footnote block processed\", ( @copy meta )\n          #.................................................................................................\n          when 'table_open', 'table_close', 'tbody_open', 'tbody_close', 'td_open', 'td_close', 'th_open', \\\n            'th_close', 'thead_open', 'thead_close', 'tr_open', 'tr_close'\n              # debug '982342', token\n              if type is 'th_open' and token[ 'attrs' ]?\n                for [ attribute_name, attribute_value, ] in token[ 'attrs' ]\n                  if attribute_name is 'style'\n                    ( meta[ 'table' ]?= {} )[ 'style' ] = attribute_value\n                    break\n              [ tag, position, ] = type.split '_'\n              send [ ( if position is 'open' then '(' else ')' ), tag, null, meta, ]\n          #.................................................................................................\n          when 'html_block'\n            throw new Error \"should never happen (2)\"\n          #.................................................................................................\n          when 'fence'\n            switch token[ 'tag' ]\n              when 'code'\n                language_name = token[ 'info' ]\n                language_name = 'text' if language_name.length is 0\n                send [ '(', 'code', language_name,              meta,    ]\n                send [ '.', 'text', token[ 'content' ], ( @copy meta ),  ]\n                send [ ')', 'code', language_name,      ( @copy meta ),  ]\n              else send_unknown token, meta\n          #.................................................................................................\n          when 'html_inline'\n            [ position, name, extra, ] = @_parse_html_tag token[ 'content' ]\n            switch position\n              when 'comment'\n                send [ '.', 'comment', extra.trim(), meta, ]\n              when 'begin'\n                unless name is 'p'\n                  send [ '(', name, extra, meta, ]\n              when 'end'\n                if name is 'p' then send [ '.', name, null, meta, ]\n                else                send [ ')', name, null, meta, ]\n              else throw new Error \"unknown HTML tag position #{rpr position}\"\n          #.................................................................................................\n          else\n            # debug '@26.05', token\n            send_unknown token, meta\n        #...................................................................................................\n        last_map = map\n      #.....................................................................................................\n      if type is 'footnote_block_close' then within_footnote_block = no\n    # #.......................................................................................................\n    # if end?\n    #   if unknown_tokens.length > 0\n    #     send remark 'warn', \"unknown tokens: #{unknown_tokens.sort().join ', '}\", {}\n    #   send [ ')', 'document', null, {}, ]\n    #   # setImmediate => end()\n    #   setTimeout ( => end() ), 1000\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$process_end_command = ( S ) =>\n  S.has_ended   = no\n  remark        = @_get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    # [ type, name, text, meta, ] = event\n    if @select event, '!', 'end'\n      if not S.has_ended\n        [ _, _, _, meta, ]    = event\n        { line_nr, }          = meta\n        ### TAINT consider to re-send `document>` ###\n        send @stamp event\n        send remark 'info', \"encountered `<<!end>>` on line ##{line_nr}\", @copy meta\n        S.has_ended = yes\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$consolidate_tables  = ( S ) =>\n  ### TAINT assumes unnested tables without merged cells ###\n  track         = @TRACKER.new_tracker '(table)'\n  collector     = []\n  collecting    = no\n  col_count     = 0\n  alignments    = null\n  description   = null\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, name, text, meta, ] = event\n    within_table                = track.within '(table)'\n    track event\n    #.......................................................................................................\n    if @select event, '(', 'table'\n      return send [ '.', 'warning', \"detected nested tables\", ( @copy meta ), ] if collecting\n      collecting        = yes\n      alignments        = []\n      description       = {}\n      meta[ 'table' ]  ?= description\n      collector.push event\n    #.......................................................................................................\n    else if collecting\n      #.....................................................................................................\n      if @select event, '(', [ 'td', 'th', ]\n        collector.push event\n        col_count += +1\n        ### TAINT relying on very specific format detail here; need `{ style: 'text-align:xxx' }` ###\n        style = meta[ 'table' ]?[ 'style' ] ? 'text-align:left'\n        [ style_name, style_value, ] = style.split ':'\n        if style_name is 'text-align' then  alignments.push style_value\n        else                                alignments.push 'left'\n      #.....................................................................................................\n      else if @select event, ')', 'tr'\n        description[ 'col_count'  ] = col_count\n        description[ 'alignments' ] = alignments\n        send past_event for past_event in collector\n        send event\n        collector.length  = 0\n        col_count         = 0\n        collecting        = no\n        alignments        = null\n        table_meta        = null\n      #.....................................................................................................\n      else\n        collector.push event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$consolidate_footnotes  = ( S ) =>\n  track                   = @TRACKER.new_tracker '(footnote-def)'\n  collector               = []\n  idx_by_ids              = new Map()\n  current_footnote_events = []\n  current_footnote_id     = null\n  within_footnote_def     = no\n  #.........................................................................................................\n  return $ ( event, send, end ) =>\n    if event?\n      within_footnote_def = track.within '(footnote-def)'\n      track event\n      #.....................................................................................................\n      if @select event, '.', 'footnote-ref'\n        [ type, name, id, meta, ] = event\n        collector.push [ [ '(', 'footnote', id, ( @copy meta ), ], ]\n        idx_by_ids.set id, collector.length\n        collector.push []\n        collector.push [ [ ')', 'footnote', id, ( @copy meta ), ], ]\n      #.....................................................................................................\n      else if @select event, '(', 'footnote-def'\n        [ type, name, id, meta, ] = event\n        current_footnote_id       = id\n      #.....................................................................................................\n      else if @select event, ')', 'footnote-def'\n        current_footnote_id       = null\n      #.....................................................................................................\n      else\n        if within_footnote_def\n          target_idx = idx_by_ids.get current_footnote_id\n          unless target_idx\n            message = \"unknown footnote ID #{rpr current_footnote_id}\"\n            # send.error new Error message\n            send [ '.', 'warning', message, ( @copy meta ? {} ), ]\n          else\n            collector[ target_idx ].push event\n        else\n          collector.push [ event, ]\n    #.......................................................................................................\n    if end?\n      for events in collector\n        for event in events\n          send event\n      end()\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$close_dangling_open_tags = ( S ) =>\n  tag_stack = []\n  remark    = @_get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, name, text, meta, ] = event\n    #.......................................................................................................\n    if @select event, '(', 'document'\n      null\n    #.......................................................................................................\n    else if @select event, ')', 'document'\n      while tag_stack.length > 0\n        sub_event                                   = tag_stack.pop()\n        [ sub_type, sub_name, sub_text, sub_meta, ] = sub_event\n        sub_type = ')'\n        send remark 'resend', \"`#{sub_name}#{sub_type}`\", @copy meta\n        S.resend [ sub_type, sub_name, sub_text, ( @copy sub_meta ), ]\n    #.......................................................................................................\n    else if @select event, '('\n      tag_stack.push [ type, name, null, meta, ]\n      # debug '©18623', tag_stack\n    #.......................................................................................................\n    else if @select event, ')'\n      ### TAINT should check matching pairs ###\n      tag_stack.pop()\n    #.......................................................................................................\n    send event\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$extra_hr = ( S ) =>\n  pattern = /// ^ ( \\#{3,} | ={3,} ) $ ///gm\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if @select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      is_plain = no\n      for stretch in text.split pattern\n        if is_plain = not is_plain\n          send [ '.', 'text', stretch, ( @copy meta ), ]\n        else\n          send [ '.', 'hr', stretch, ( @copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@select = ( event, type, name, hidden = no ) ->\n  ### TAINT should use the same syntax as accepted by `FENCES.parse` ###\n  ### check for arity as it's easy to write `select event, '(', ')', 'latex'` when what you meant\n  was `select event, [ '(', ')', ], 'latex'` ###\n  return false if ( not hidden ) and @is_hidden event\n  if ( arity = arguments.length ) > 4\n    throw new Error \"expected at most 3 arguments, got #{arity}\"\n  if type?\n    switch type_of_type = CND.type_of type\n      when 'text' then return false unless event[ 0 ] is type\n      when 'list' then return false unless event[ 0 ] in type\n      else throw new Error \"expected text or list, got a #{type_of_type}\"\n  if name?\n    switch type_of_name = CND.type_of name\n      when 'text' then return false unless event[ 1 ] is name\n      when 'list' then return false unless event[ 1 ] in name\n      else throw new Error \"expected text or list, got a #{type_of_name}\"\n  return true\n\n\n#===========================================================================================================\n# STAMPING & HIDING\n#-----------------------------------------------------------------------------------------------------------\n@stamp = ( event ) ->\n  ### 'Stamping' an event means to mark it as 'processed'; hence, downstream transformers can choose to\n  ignore events that have already been marked upstream, or, inversely choose to look out for events\n  that have not yet found a representation in the target document. **NB** that stamping and hiding an\n  event will place a copy of the `meta` event element into the event. ###\n  event[ 3 ] = @copy event[ 3 ], { stamped: yes, }\n  return event\n\n#-----------------------------------------------------------------------------------------------------------\n@unstamp = ( event ) ->\n  event[ 3 ] = @copy event[ 3 ], { stamped: no, }\n  return event\n\n#-----------------------------------------------------------------------------------------------------------\n@is_stamped   = ( event ) -> event[ 3 ]?[ 'stamped' ] is true\n@is_unstamped = ( event ) -> not @is_stamped event\n\n#-----------------------------------------------------------------------------------------------------------\n@hide = ( event ) ->\n  ### 'Stamping' an event means to mark it as 'processed'; hence, downstream transformers can choose to\n  ignore events that have already been marked upstream, or, inversely choose to look out for events\n  that have not yet found a representation in the target document. **NB** that stamping and hiding an\n  event will place a copy of the `meta` event element into the event. ###\n  event[ 3 ] = @copy event[ 3 ], { hidden: yes, }\n  return event\n\n#-----------------------------------------------------------------------------------------------------------\n@is_hidden = ( event ) -> event[ 3 ]?[ 'hidden' ] is true\n\n#-----------------------------------------------------------------------------------------------------------\n@copy = ( x, updates... ) ->\n  ### (Hopefully) fast semi-deep copying for events (i.e. lists with a possible `meta` object on\n  index 3) and plain objects. The value returned will be a shallow copy in the case of objects and\n  lists, but if a list has a value at index 3, that object will also be copied. Not guaranteed to\n  work for general values. ###\n  if ( isa_list = CND.isa_list x ) then R = []\n  else if         CND.isa_pod  x   then R = {}\n  else throw new Error \"unable to copy a #{CND.type_of x}\"\n  R       = Object.assign R, x, updates...\n  R[ 3 ]  = Object.assign {}, meta if isa_list and ( meta = R[ 3 ] )?\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_split_lines_with_nl = ( text ) -> ( line for line in text.split /(.*\\n)/ when line.length > 0 )\n\n#-----------------------------------------------------------------------------------------------------------\n@_flush_text_collector = ( send, collector, meta ) ->\n  if collector.length > 0\n    send [ '.', 'text', ( collector.join '' ), meta, ]\n    collector.length = 0\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_illegal_chrs = ( S ) ->\n  ### TAINT if these characters are illegal, we don't have to escape them when tunneling macros ###\n  ### TAINT must send MKTS events, not TeX to keep method general ###\n  return $ ( old_text, send ) ->\n    new_text = old_text.replace /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\ufffd-\\uffff]/g, ( $0 ) ->\n      cid_hex = ( $0.codePointAt 0 ).toString 16\n      pre     = '█'\n      post    = '█'\n      ### TAINT use mkts command ###\n      warn \"detected illegal character U+#{cid_hex}\" # if old_text isnt new_text\n      return \"\"\"{\\\\mktsStyleBold\\\\color{red}{%\n        \\\\mktsStyleSymbol#{pre}}U+#{cid_hex}{\\\\mktsStyleSymbol#{post}}}\"\"\"\n    send new_text\n\n#-----------------------------------------------------------------------------------------------------------\n@new_resender = ( S, stream ) ->\n  ### TAINT re-parsing new source text should be handled by regular stream transform at an appropriate\n  stream entry point ###\n  ### TAINT new parser not needed, can reuse 'main' parser ###\n  md_parser = @_new_markdown_parser()\n  return ( md_source ) =>\n    ### TAINT must handle data in environment ###\n    if CND.isa_text md_source\n      md_source   = MKTS.MACRO_ESCAPER.escape S, md_source\n      environment = {}\n      tokens      = md_parser.parse md_source, environment\n      # tokens      = md_parser.parse md_source, S.environment\n      #.......................................................................................................\n      ### TAINT intermediate solution ###\n      if ( keys = Object.keys environment ).length > 0\n        warn \"ignoring keys from sub-parsing environment: #{rpr keys}\"\n      #.......................................................................................................\n      if tokens.length > 0\n        ### Omit `paragraph_open` as first and `paragraph_close` as last token: ###\n        first_idx   = 0\n        last_idx    = tokens.length - 1\n        first_idx   = if tokens[ first_idx ][ 'type' ] is 'paragraph_open'  then first_idx + 1 else first_idx\n        last_idx    = if tokens[  last_idx ][ 'type' ] is 'paragraph_close' then  last_idx - 1 else  last_idx\n        # ( debug '©9fdeD', \"resending\", tokens[ idx ] ) for idx in [ first_idx .. last_idx ]\n        stream.write tokens[ idx ] for idx in [ first_idx .. last_idx ]\n    else\n      stream.write md_source\n\n\n#===========================================================================================================\n# STREAM CREATION\n#-----------------------------------------------------------------------------------------------------------\n@create_md_read_tee = ( S, md_source ) ->\n  switch arity = arguments.length\n    when 1\n      md_source = S\n      #.....................................................................................................\n      ### for `environment` see https://markdown-it.github.io/markdown-it/#MarkdownIt.parse ###\n      S =\n        # confluence:           confluence\n        environment:  {}\n    when 2\n      S.environment = {}\n    else\n      throw new Error \"expected 1 or 2 arguments, got #{arity}\"\n  #.........................................................................................................\n  ### TAINT `settings`, `S` and fitting should be the same object ###\n  settings =\n    S:                S\n  #.........................................................................................................\n  ### TAINT rewrite to use D.TEE.from_pipeline, don't use readstream, writestream ###\n  readstream    = D.create_throughstream()\n  writestream   = D.create_throughstream()\n  # confluence  = D.create_throughstream()\n  R             = D.TEE.from_readwritestreams readstream, writestream, settings\n  { input }     = R.tee\n  input.pause()\n  #.........................................................................................................\n  S.resend      = @new_resender S, readstream\n  S.confluence  = readstream\n  # S.confluence = input\n  #.........................................................................................................\n  readstream\n    # .pipe D.$observe ( event ) -> alert event\n    .pipe @_PRE.$flatten_inline_tokens                S\n    .pipe @_PRE.$flatten_image_tokens                 S\n    .pipe @_PRE.$reinject_html_blocks                 S\n    # .pipe D.$observe ( event ) => debug '©1', rpr event\n    .pipe @_PRE.$rewrite_markdownit_tokens            S\n    .pipe MKTS.MACRO_ESCAPER.$expand                  S\n    .pipe @_PRE.$process_end_command                  S\n    .pipe @_PRE.$consolidate_tables                   S\n    .pipe @_PRE.$consolidate_footnotes                S\n    .pipe @_PRE.$extra_hr                             S\n    .pipe MKTS.MACRO_INTERPRETER.$process_actions     S\n    .pipe MKTS.MACRO_INTERPRETER.$process_values      S\n    .pipe MKTS.MACRO_INTERPRETER.$process_commands    S\n    .pipe MKTS.MACRO_INTERPRETER.$process_regions     S\n    .pipe @_PRE.$close_dangling_open_tags             S\n    # .pipe D.$show '47594-B'\n    .pipe writestream\n  #.........................................................................................................\n  # readstream.on     'end', -> debug '©tdfA4', \"readstream ended\"\n  # writestream.on    'end', -> debug '©sId1V', \"writestream ended\"\n  # input.on          'end', -> debug '©1sbYv', \"input ended\"\n  # R[ 'output' ].on  'end', -> debug '©zSMOc', \"output ended\"\n  #.........................................................................................................\n  input.on 'resume', =>\n    md_parser   = @_new_markdown_parser()\n    MKTS.MACRO_ESCAPER.initialize_state S\n    md_source   = MKTS.MACRO_ESCAPER.escape S, md_source\n    tokens      = md_parser.parse md_source, S.environment\n    # debug '©78531', rpr tokens\n    for token in tokens\n      input.write token\n    input.write Symbol.for 'end'\n  #.........................................................................................................\n  return R\n\n\n"]}