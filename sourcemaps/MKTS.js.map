{"version":3,"sources":["MKTS.coffee"],"names":[],"mappings":"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","file":"MKTS.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/MKTS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#-----------------------------------------------------------------------------------------------------------\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n# $async                    = D.remit_async.bind D\n#...........................................................................................................\nMarkdown_parser           = require 'markdown-it'\n# Html_parser               = ( require 'htmlparser2' ).Parser\nnew_md_inline_plugin      = require 'markdown-it-regexp'\n#...........................................................................................................\nHELPERS                   = require './HELPERS'\n#...........................................................................................................\nmisfit                    = Symbol 'misfit'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_badge = ( delta = 0 ) ->\n  ### Experimental, to be used with remarks when things got omitted or inserted. ###\n  caller_info = CND.get_caller_info delta + 2\n  # filename    = njs_path.basename caller_info[ 'route' ]\n  # line_nr     = caller_info[ 'line-nr' ]\n  method_name = caller_info[ 'function-name' ] ? caller_info[ 'method-name' ]\n  method_name = method_name.replace /^__dirname\\./, ''\n  # return \"#{filename}/#{method_name}\"\n  return method_name\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_remark = ( delta = 0 ) ->\n  my_badge = @_get_badge delta + 1\n  return ( kind, message, meta ) =>\n    return @stamp [ '#', kind, message, ( @copy meta, { badge: my_badge, } ), ]\n  # send stamp [ '#', 'insert', my_badge, \"inserting `p` tag\", ( copy meta ), ]\n\n\n\n#===========================================================================================================\n# MD / HTML PARSING\n#-----------------------------------------------------------------------------------------------------------\n@_new_markdown_parser = ->\n  #.........................................................................................................\n  ### https://markdown-it.github.io/markdown-it/#MarkdownIt.new ###\n  # feature_set = 'commonmark'\n  feature_set = 'zero'\n  #.........................................................................................................\n  settings    =\n    html:           yes,            # Enable HTML tags in source\n    xhtmlOut:       no,             # Use '/' to close single tags (<br />)\n    breaks:         no,             # Convert '\\n' in paragraphs into <br>\n    langPrefix:     'language-',    # CSS language prefix for fenced blocks\n    linkify:        yes,            # Autoconvert URL-like text to links\n    typographer:    yes,\n    quotes:         '“”‘’'\n    # quotes:         '\"\"\\'\\''\n    # quotes:         '\"\"`\\''\n    # quotes:         [ '<<', '>>', '!!!', '???', ]\n    # quotes:   ['«\\xa0', '\\xa0»', '‹\\xa0', '\\xa0›'] # French\n  #.........................................................................................................\n  R = new Markdown_parser feature_set, settings\n  # R = new Markdown_parser settings\n  R\n    .enable 'text'\n    # .enable 'newline'\n    .enable 'escape'\n    .enable 'backticks'\n    .enable 'strikethrough'\n    .enable 'emphasis'\n    .enable 'link'\n    .enable 'image'\n    .enable 'autolink'\n    .enable 'html_inline'\n    .enable 'entity'\n    # .enable 'code'\n    .enable 'fence'\n    .enable 'blockquote'\n    .enable 'hr'\n    .enable 'list'\n    .enable 'reference'\n    .enable 'heading'\n    .enable 'lheading'\n    .enable 'html_block'\n    .enable 'table'\n    .enable 'paragraph'\n    .enable 'normalize'\n    .enable 'block'\n    .enable 'inline'\n    .enable 'linkify'\n    .enable 'replacements'\n    .enable 'smartquotes'\n  #.......................................................................................................\n  R.use require 'markdown-it-footnote'\n  # R.use require 'markdown-it-mark'\n  # R.use require 'markdown-it-sub'\n  # R.use require 'markdown-it-sup'\n  #.......................................................................................................\n  # ### sample plugin ###\n  # user_pattern  = /@(\\w+)/\n  # user_handler  = ( match, utils ) ->\n  #   url = 'http://example.org/u/' + match[ 1 ]\n  #   return '<a href=\"' + utils.escape(url) + '\">' + utils.escape(match[1]) + '</a>'\n  # user_plugin = new_md_inline_plugin user_pattern, user_handler\n  # R.use user_plugin\n  #.......................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nget_parse_html_methods = ->\n  Parser      = ( require 'parse5' ).Parser\n  parser      = new Parser()\n  get_message = ( source ) -> \"expected single opening node, got #{rpr source}\"\n  R           = {}\n  #.........................................................................................................\n  R[ '_parse_html_open_tag' ] = ( source ) ->\n    tree    = parser.parseFragment source\n    throw new Error get_message source unless ( cns = tree[ 'childNodes' ] ).length is 1\n    cn = cns[ 0 ]\n    throw new Error get_message source unless cn[ 'childNodes' ]?.length is 0\n    return [ 'begin', cn[ 'tagName' ], cn[ 'attrs' ][ 0 ] ? {}, ]\n  #.........................................................................................................\n  R[ '_parse_html_block' ] = ( source ) ->\n    tree    = parser.parseFragment source\n    debug '@88817', tree\n    return null\n  #.........................................................................................................\n  return R\n#...........................................................................................................\nparse_methods = get_parse_html_methods()\n@_parse_html_open_tag = parse_methods[ '_parse_html_open_tag' ]\n@_parse_html_block    = parse_methods[ '_parse_html_block'    ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_parse_html_tag = ( source ) ->\n  if ( match = source.match @_parse_html_tag.close_tag_pattern )?\n    return [ 'end', match[ 1 ], ]\n  if ( match = source.match @_parse_html_tag.comment_pattern )?\n    return [ 'comment', 'comment', match[ 1 ], ]\n  return @_parse_html_open_tag source\n@_parse_html_tag.close_tag_pattern   = /^<\\/([^>]+)>$/\n@_parse_html_tag.comment_pattern     = /^<!--([\\s\\S]*)-->$/\n\n\n#===========================================================================================================\n# FENCES\n#-----------------------------------------------------------------------------------------------------------\n@FENCES = {}\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT moving to parentheses-only syntax; note that most of the `FENCES` submodule can then go ###\n@FENCES.xleft   = [ '(', ]\n@FENCES.xright  = [ ')', ]\n@FENCES.left    = [ '(', ]\n@FENCES.right   = [ ')', ]\n@FENCES.xpairs  =\n  '(':  ')'\n  ')':  '('\n\n#-----------------------------------------------------------------------------------------------------------\n@FENCES._get_opposite = ( fence, fallback ) =>\n  unless ( R = @FENCES.xpairs[ fence ] )?\n    return fallback unless fallback is undefined\n    throw new Error \"unknown fence: #{rpr fence}\"\n  return R\n\n#===========================================================================================================\n# TRACKER\n#-----------------------------------------------------------------------------------------------------------\n@TRACKER = {}\n\n#-----------------------------------------------------------------------------------------------------------\ntracker_pattern = /// ^\n    ( [     .!$(  ]? )\n    ( [^ \\s .!$() ]* )\n    ( [         ) ]? )\n    $ ///\n\n#-----------------------------------------------------------------------------------------------------------\n@FENCES.parse = ( pattern, settings ) =>\n  left_fence  = null\n  name        = null\n  right_fence = null\n  symmetric   = settings?[ 'symmetric' ] ? yes\n  #.........................................................................................................\n  if ( not pattern? ) or pattern.length is 0\n    throw new Error \"pattern must be non-empty, got #{rpr pattern}\"\n  #.........................................................................................................\n  match = pattern.match @TRACKER._tracker_pattern\n  throw new Error \"not a valid pattern: #{rpr pattern}\" unless match?\n  #.........................................................................................................\n  [ _, left_fence, name, right_fence, ] = match\n  left_fence  = null if  left_fence.length is 0\n  name        = null if        name.length is 0\n  right_fence = null if right_fence.length is 0\n  #.........................................................................................................\n  if left_fence is '.'\n    ### Can not have a right fence if left fence is a dot ###\n    if right_fence?\n      throw new Error \"fence '.' can not have right fence, got #{rpr pattern}\"\n  #.........................................................................................................\n  else\n    ### Except for dot fence, must always have no fence or both fences in case `symmetric` is set ###\n    if symmetric\n      if ( left_fence? and not right_fence? ) or ( right_fence? and not left_fence? )\n        throw new Error \"unmatched fence in #{rpr pattern}\"\n  #.........................................................................................................\n  if left_fence? and left_fence isnt '.'\n    ### Complain about unknown left fences ###\n    unless left_fence in @FENCES.xleft\n      throw new Error \"illegal left_fence in pattern #{rpr pattern}\"\n    if right_fence?\n      ### Complain about non-matching fences ###\n      unless ( @FENCES._get_opposite left_fence, null ) is right_fence\n        throw new Error \"fences don't match in pattern #{rpr pattern}\"\n  if right_fence?\n    ### Complain about unknown right fences ###\n    unless right_fence in @FENCES.xright\n      throw new Error \"illegal right_fence in pattern #{rpr pattern}\"\n  #.........................................................................................................\n  return [ left_fence, name, right_fence, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@TRACKER._tracker_pattern = tracker_pattern\n\n#-----------------------------------------------------------------------------------------------------------\n@TRACKER.new_tracker = ( patterns... ) =>\n  _MKTS = @\n  #.........................................................................................................\n  self = ( event ) ->\n    # CND.dir self\n    # debug '@763', \"tracking event #{rpr event}\"\n    for pattern, state of self._states\n      { parts } = state\n      continue unless _MKTS.select event, parts...\n      [ [ left_fence, right_fence, ], pattern_name, ] = parts\n      [ type, event_name, ]                           = event\n      if type is left_fence\n        # debug '@1', pattern, yes\n        self._enter state\n      else\n        # debug '@2', pattern, no\n        self._leave state\n        ### TAINT shouldn't throw error but issue warning remark ###\n        throw new Error \"too many right fences: #{rpr event}\" if state[ 'count' ] < 0\n    return event\n  #.........................................................................................................\n  self._states = {}\n  #.........................................................................................................\n  self._get_state = ( pattern ) ->\n    throw new Error \"untracked pattern #{rpr pattern}\" unless ( R = self._states[ pattern ] )?\n    return R\n  #.........................................................................................................\n  self.within = ( patterns... ) ->\n    for pattern in patterns\n      return true if self._within pattern\n    return false\n  self._within  = ( pattern ) -> ( self._get_state pattern )[ 'count' ] > 0\n  #.........................................................................................................\n  self.enter    = ( pattern ) -> self._enter self._get_state pattern\n  self.leave    = ( pattern ) -> self._leave self._get_state pattern\n  self._enter   = ( state   ) -> state[ 'count' ] += +1\n  ### TAINT should validate count when leaving ###\n  self._leave   = ( state   ) -> state[ 'count' ] += -1\n  #.........................................................................................................\n  do ->\n    for pattern in patterns\n      [ left_fence, pattern_name, right_fence, ]  = _MKTS.FENCES.parse pattern\n      state =\n        parts:    [ [ left_fence, right_fence, ], pattern_name, ]\n        count:    0\n      self._states[ pattern ] = state\n  #.........................................................................................................\n  return self\n\n\n#===========================================================================================================\n# _PRE (PREPROCESSING)\n#-----------------------------------------------------------------------------------------------------------\n@_PRE = {}\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$flatten_tokens = ( S ) =>\n  return $ ( token, send ) ->\n    switch ( type = token[ 'type' ] )\n      when 'inline' then send sub_token for sub_token in token[ 'children' ]\n      else send token\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$reinject_html_blocks = ( S ) =>\n  ### re-inject HTML blocks ###\n  md_parser   = @_new_markdown_parser()\n  return $ ( token, send ) =>\n    { type, map, } = token\n    if type is 'html_block'\n      ### TAINT `map` location data is borked with this method ###\n      ### add extraneous text content; this causes the parser to parse the HTML block as a paragraph\n      with some inline HTML: ###\n      XXX_source  = \"XXX\" + token[ 'content' ]\n      ### for `environment` see https://markdown-it.github.io/markdown-it/#MarkdownIt.parse ###\n      ### TAINT what to do with useful data appearing in `environment`? ###\n      environment = {}\n      tokens      = md_parser.parse XXX_source, environment\n      ### remove extraneous text content: ###\n      removed     = tokens[ 1 ]?[ 'children' ]?.splice 0, 1\n      unless removed[ 0 ]?[ 'content' ] is \"XXX\"\n        throw new Error \"should never happen\"\n      S.confluence.write token for token in tokens\n    else\n      send token\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$rewrite_markdownit_tokens = ( S ) =>\n  unknown_tokens        = []\n  is_first              = yes\n  last_map              = [ 0, 0, ]\n  _send                 = null\n  remark                = @_get_remark()\n  within_footnote_block = false\n  end_token             = Symbol.for 'end'\n  #.........................................................................................................\n  send_unknown = ( token, meta ) =>\n    { type, } = token\n    _send [ '?', type, token[ 'content' ], meta, ]\n    unknown_tokens.push type unless type in unknown_tokens\n  #.........................................................................................................\n  # return $ ( token, send, end ) =>\n  return $ ( token, send ) =>\n    _send = send\n    #.......................................................................................................\n    if token is end_token\n      # whisper \"encountered `end` token\"\n      if unknown_tokens.length > 0\n        send remark 'warn', \"unknown tokens: #{unknown_tokens.sort().join ', '}\", {}\n      send [ ')', 'document', null, {}, ]\n      setImmediate =>\n        whisper \"ending input stream\"\n        send.end()\n      # setTimeout ( => send.end() ), 1000\n    else if CND.isa_list token\n      ### TAINT this clause shouldn't be here; we should target resends (which could be source texts\n      or MKTS events) to appropriate insertion points in the stream ###\n      ### pass through re-injected MKTS events ###\n      send token\n    else\n      { type\n        map\n        markup }      = token\n      map            ?= last_map\n      line_nr         = ( map[ 0 ] ? 0 ) + 1\n      col_nr          = ( map[ 1 ] ? 0 ) + 1\n      #.....................................................................................................\n      meta = {\n        line_nr\n        col_nr\n        markup\n        }\n      if is_first\n        is_first = no\n        send [ '(', 'document', null, meta, ]\n      # #.....................................................................................................\n      # if type in [\n      #   'footnote_ref',\n      #   'footnote_open', 'footnote_close',\n      #   'footnote_anchor',\n      #   'footnote_block_open', 'footnote_block_close', ]\n      #   whisper '@a20g', token[ 'type' ]\n      #.....................................................................................................\n      if type is 'footnote_block_open'  then within_footnote_block = yes\n      #.....................................................................................................\n      if within_footnote_block or not S.has_ended\n        # urge '@a20g', token[ 'type' ], within_footnote_block\n        switch type\n          # blocks\n          when 'heading_open'       then send [ '(', token[ 'tag' ],  null,               meta, ]\n          when 'heading_close'      then send [ ')', token[ 'tag' ],  null,               meta, ]\n          when 'paragraph_open'     then null\n          when 'paragraph_close'    then send [ '.', 'p',             null,               meta, ]\n          when 'bullet_list_open'   then send [ '(', 'ul',            null,               meta, ]\n          when 'bullet_list_close'  then send [ ')', 'ul',            null,               meta, ]\n          when 'list_item_open'     then send [ '(', 'li',            null,               meta, ]\n          when 'list_item_close'    then send [ ')', 'li',            null,               meta, ]\n          # inlines\n          when 'strong_open'        then send [ '(', 'strong',        null,               meta, ]\n          when 'strong_close'       then send [ ')', 'strong',        null,               meta, ]\n          when 'em_open'            then send [ '(', 'em',            null,               meta, ]\n          when 'em_close'           then send [ ')', 'em',            null,               meta, ]\n          # singles\n          when 'text'               then send [ '.', 'text',          token[ 'content' ], meta, ]\n          when 'hr'                 then send [ '.', 'hr',            token[ 'markup' ],  meta, ]\n          #.................................................................................................\n          # specials\n          when 'code_inline'\n            send [ '(', 'code', null,                        meta,    ]\n            send [ '.', 'text', token[ 'content' ], ( @copy meta ),  ]\n            send [ ')', 'code', null,               ( @copy meta ),  ]\n          #.................................................................................................\n          when 'footnote_ref'\n            id = token[ 'meta' ][ 'id' ]\n            send [ '.', 'footnote-ref', id, meta, ]\n          #  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n          when 'footnote_open'\n            id = token[ 'meta' ][ 'id' ]\n            send [ '(', 'footnote-def', id, meta, ]\n          #  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n          when 'footnote_close'\n            send [ ')', 'footnote-def', null, meta, ]\n          #  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n          when 'footnote_anchor'\n            null\n            # send remark 'drop', \"footnote anchor is dispensable\", ( @copy meta )\n          #  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n          when 'footnote_block_open', 'footnote_block_close'\n            null\n            # send remark 'drop', \"footnote block processed\", ( @copy meta )\n          #.................................................................................................\n          when 'html_block'\n            throw new Error \"should never happen\"\n          #.................................................................................................\n          when 'fence'\n            switch token[ 'tag' ]\n              when 'code'\n                language_name = token[ 'info' ]\n                language_name = 'text' if language_name.length is 0\n                send [ '(', 'code', language_name,               meta,    ]\n                send [ '.', 'text', token[ 'content' ], ( @copy meta ),  ]\n                send [ ')', 'code', language_name,      ( @copy meta ),  ]\n              else send_unknown token, meta\n          #.................................................................................................\n          when 'html_inline'\n            [ position, name, extra, ] = @_parse_html_tag token[ 'content' ]\n            switch position\n              when 'comment'\n                send [ '.', 'comment', extra.trim(), meta, ]\n              when 'begin'\n                unless name is 'p'\n                  send [ '(', name, extra, meta, ]\n              when 'end'\n                if name is 'p' then send [ '.', name, null, meta, ]\n                else                send [ ')', name, null, meta, ]\n              else throw new Error \"unknown HTML tag position #{rpr position}\"\n          #.................................................................................................\n          else\n            debug '@26.05', token\n            send_unknown token, meta\n        #...................................................................................................\n        last_map = map\n      #.....................................................................................................\n      if type is 'footnote_block_close' then within_footnote_block = no\n    # #.......................................................................................................\n    # if end?\n    #   if unknown_tokens.length > 0\n    #     send remark 'warn', \"unknown tokens: #{unknown_tokens.sort().join ', '}\", {}\n    #   send [ ')', 'document', null, {}, ]\n    #   # setImmediate => end()\n    #   setTimeout ( => end() ), 1000\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$process_end_command = ( S ) =>\n  S.has_ended   = no\n  remark        = @_get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    # [ type, name, text, meta, ] = event\n    if @select event, '!', 'end'\n      if not S.has_ended\n        [ _, _, _, meta, ]    = event\n        { line_nr, }          = meta\n        ### TAINT consider to re-send `document>` ###\n        send @stamp event\n        send remark 'info', \"encountered `<<!end>>` on line ##{line_nr}\", @copy meta\n        S.has_ended = yes\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$consolidate_footnotes  = ( S ) =>\n  track                   = @TRACKER.new_tracker '(footnote-def)'\n  collector               = []\n  idx_by_ids              = new Map()\n  current_footnote_events = []\n  current_footnote_id     = null\n  within_footnote_def     = no\n  #.........................................................................................................\n  return $ ( event, send, end ) =>\n    if event?\n      within_footnote_def = track.within '(footnote-def)'\n      track event\n      #.....................................................................................................\n      if @select event, '.', 'footnote-ref'\n        [ type, name, id, meta, ] = event\n        collector.push [ [ '(', 'footnote', id, ( @copy meta ), ], ]\n        idx_by_ids.set id, collector.length\n        collector.push []\n        collector.push [ [ ')', 'footnote', id, ( @copy meta ), ], ]\n      #.....................................................................................................\n      else if @select event, '(', 'footnote-def'\n        [ type, name, id, meta, ] = event\n        current_footnote_id       = id\n      #.....................................................................................................\n      else if @select event, ')', 'footnote-def'\n        current_footnote_id       = null\n      #.....................................................................................................\n      else\n        if within_footnote_def\n          target_idx = idx_by_ids.get current_footnote_id\n          unless target_idx\n            send.error new Error \"unknown footnote ID #{rpr current_footnote_id}\"\n          else\n            collector[ target_idx ].push event\n        else\n          collector.push [ event, ]\n    #.......................................................................................................\n    if end?\n      for events in collector\n        for event in events\n          send event\n      end()\n\n#-----------------------------------------------------------------------------------------------------------\n@_PRE.$close_dangling_open_tags = ( S ) =>\n  tag_stack = []\n  remark    = @_get_remark()\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, name, text, meta, ] = event\n    # debug '©nLnB5', event\n    if name is 'document'\n      if type is ')'\n        while tag_stack.length > 0\n          sub_event                                   = tag_stack.pop()\n          [ sub_type, sub_name, sub_text, sub_meta, ] = sub_event\n          switch sub_type\n            when '(' then sub_type = ')'\n            when '(' then sub_type = ')'\n            when '(' then sub_type = ')'\n          send remark 'resend', \"`#{sub_name}#{sub_type}`\", @copy meta\n          S.resend [ sub_type, sub_name, sub_text, ( @copy sub_meta ), ]\n    else if @select event, '('\n      tag_stack.push [ type, name, null, meta, ]\n    else if @select event, ')'\n      ### TAINT should check matching pairs ###\n      tag_stack.pop()\n    #.......................................................................................................\n    send event\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@select = ( event, type, name ) ->\n  ### TAINT should use the same syntax as accepted by `FENCES.parse` ###\n  ### check for arity as it's easy to write `select event, '(', ')', 'latex'` when what you meant\n  was `select event, [ '(', ')', ], 'latex'` ###\n  return false if @is_hidden event\n  if ( arity = arguments.length ) > 3\n    throw new Error \"expected at most 3 arguments, got #{arity}\"\n  if type?\n    switch type_of_type = CND.type_of type\n      when 'text' then return false unless event[ 0 ] is type\n      when 'list' then return false unless event[ 0 ] in type\n      else throw new Error \"expected text or list, got a #{type_of_type}\"\n  if name?\n    switch type_of_name = CND.type_of name\n      when 'text' then return false unless event[ 1 ] is name\n      when 'list' then return false unless event[ 1 ] in name\n      else throw new Error \"expected text or list, got a #{type_of_name}\"\n  return true\n\n\n#===========================================================================================================\n# STAMPING & HIDING\n#-----------------------------------------------------------------------------------------------------------\n@stamp = ( event ) ->\n  ### 'Stamping' an event means to mark it as 'processed'; hence, downstream transformers can choose to\n  ignore events that have already been marked upstream, or, inversely choose to look out for events\n  that have not yet found a representation in the target document. ###\n  event[ 3 ][ 'stamped' ] = yes\n  return event\n\n#-----------------------------------------------------------------------------------------------------------\n@is_stamped   = ( event ) -> event[ 3 ]?[ 'stamped' ] is true\n@is_unstamped = ( event ) -> not @is_stamped event\n\n#-----------------------------------------------------------------------------------------------------------\n@hide = ( event ) ->\n  ### 'Stamping' an event means to mark it as 'processed'; hence, downstream transformers can choose to\n  ignore events that have already been marked upstream, or, inversely choose to look out for events\n  that have not yet found a representation in the target document. ###\n  event[ 3 ][ 'hidden' ] = yes\n  return event\n\n#-----------------------------------------------------------------------------------------------------------\n@is_hidden = ( event ) -> event[ 3 ]?[ 'hidden' ] is true\n\n#-----------------------------------------------------------------------------------------------------------\n@copy = ( x, updates... ) ->\n  ### (Hopefully) fast semi-deep copying for events (i.e. lists with a possible `meta` object on\n  index 3) and plain objects. The value returned will be a shallow copy in the case of objects and\n  lists, but if a list has a value at index 3, that object will also be copied. Not guaranteed to\n  work for general values. ###\n  if ( isa_list = CND.isa_list x ) then R = []\n  else if         CND.isa_pod  x   then R = {}\n  else throw new Error \"unable to copy a #{CND.type_of x}\"\n  R       = Object.assign R, x, updates...\n  R[ 3 ]  = Object.assign {}, meta if isa_list and ( meta = R[ 3 ] )?\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_split_lines_with_nl = ( text ) -> ( line for line in text.split /(.*\\n)/ when line.length > 0 )\n\n#-----------------------------------------------------------------------------------------------------------\n@_flush_text_collector = ( send, collector, meta ) ->\n  if collector.length > 0\n    send [ '.', 'text', ( collector.join '' ), meta, ]\n    collector.length = 0\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_illegal_chrs = ( S ) ->\n  return $ ( old_text, send ) ->\n    new_text = old_text.replace /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\ufffd-\\uffff]/g, ( $0 ) ->\n      cid_hex = ( $0.codePointAt 0 ).toString 16\n      pre     = '█'\n      post    = '█'\n      ### TAINT use mkts command ###\n      warn \"detected illegal character U+#{cid_hex}\" # if old_text isnt new_text\n      return \"\"\"{\\\\mktsStyleBold\\\\color{red}{%\n        \\\\mktsStyleSymbol#{pre}}U+#{cid_hex}{\\\\mktsStyleSymbol#{post}}}\"\"\"\n    send new_text\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_mktsmd_events = ( S ) ->\n  unknown_events    = []\n  indentation       = ''\n  tag_stack         = []\n  return D.$observe ( event, has_ended ) =>\n    if event?\n      [ type, name, text, meta, ] = event\n      if type is '?'\n        unknown_events.push name unless name in unknown_events\n        warn JSON.stringify event\n      else\n        color = CND.blue\n        #...................................................................................................\n        if @is_hidden event\n          color = CND.brown\n        else\n          switch type\n            # when '('  then color = CND.yellow\n            when '('  then color = CND.lime\n            when ')'  then color = CND.olive\n            when '!'  then color = CND.indigo\n            when '#'  then color = CND.plum\n            when '.'\n              switch name\n                when 'text' then color = CND.BLUE\n                # when 'code' then color = CND.orange\n        #...................................................................................................\n        text = if text? then ( color rpr text ) else ''\n        switch type\n          #.................................................................................................\n          when 'text'\n            log indentation + ( color type ) + ' ' + rpr name\n          #.................................................................................................\n          when 'tex'\n            if S.show_tex_events ? no\n              log indentation + ( color type ) + ( color name ) + ' ' + text\n          #.................................................................................................\n          when '#'\n            [ _, kind, message, _, ]  = event\n            my_badge                  = \"(#{meta[ 'badge' ]})\"\n            color = switch kind\n              when 'insert' then  'lime'\n              when 'drop'   then  'orange'\n              when 'warn'   then  'RED'\n              when 'info'   then  'BLUE'\n              else                'grey'\n            log ( CND[ color ] '#' + kind ), ( CND.white message ), ( CND.grey my_badge )\n          #.................................................................................................\n          else\n            log indentation + ( color type ) + ( color name ) + ' ' + text\n        #...................................................................................................\n        unless @is_hidden event\n          switch type\n            #.................................................................................................\n            when '(', ')'\n              switch type\n                when '('\n                  tag_stack.push [ type, name, ]\n                when ')'\n                  if tag_stack.length > 0\n                    [ topmost_type, topmost_name, ] = tag_stack.pop()\n                    unless topmost_name is name\n                      warn \"encountered <<#{name}#{type}>> when <<#{topmost_name})>> was expected\"\n                  else\n                    warn \"level below zero\"\n              indentation = ( new Array tag_stack.length ).join '  '\n    #.......................................................................................................\n    if has_ended\n      if tag_stack.length > 0\n        warn \"unclosed tags: #{tag_stack.join ', '}\"\n      if unknown_events.length > 0\n        warn \"unknown events: #{unknown_events.sort().join ', '}\"\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$produce_mktscript = ( S ) ->\n  indentation       = ''\n  tag_stack         = []\n  #.........................................................................................................\n  return $ ( event, send, end ) ->\n    if event?\n      # debug '©Yo4cR', rpr event\n      [ type, name, text, meta, ] = event\n      unless type in [ 'tex', 'text', ]\n        { line_nr, } = meta\n        if line_nr?\n          anchor = \"#{line_nr} █ \"\n        else\n          anchor = \"\"\n        #.....................................................................................................\n        # send JSON.stringify event\n        text_rpr = ''\n        if text?\n          ### TAINT we have to adopt a new event format; for now, the `text` attribute is misnamed,\n          as it is really a `data` attribute ###\n          if CND.isa_text text\n            ### TAINT doesn't recognize escaped backslash ###\n            text_rpr = ' ' + ( rpr text ).replace /\\\\n/g, '\\n'\n          else if ( Object.keys text ).length > 0\n            text_rpr = ' ' + JSON.stringify text\n        send \"#{anchor}#{type}#{name}#{text_rpr}\"\n        send '\\n'\n        # switch type\n        #   when '?'\n        #     send \"\\n#{anchor}#{type}#{name}\\n\"\n        #   when '('\n        #     send \"#{anchor}#{type}#{name}\"\n        #   when ')', '!'\n        #     send \"#{type}\\n\"\n        #   when '('\n        #     send \"#{type}#{name}\"\n        #   when ')'\n        #     send \"#{type}\"\n        #   when '.'\n        #     switch name\n        #       when 'hr'\n        #         send \"\\n#{anchor}#{type}#{name}\\n\"\n        #       when 'p'\n        #         send \"¶\\n\"\n        #       when 'text'\n        #         ### TAINT doesn't recognize escaped backslash ###\n        #         text_rpr = ( rpr text ).replace /\\\\n/g, '\\n'\n        #         send text_rpr\n        #       else\n        #         send \"\\n#{anchor}IGNORED: #{rpr event}\"\n        #   else\n        #     send \"\\n#{anchor}IGNORED: #{rpr event}\"\n    if end?\n      send \"# EOF\"\n      end()\n    return null\n\n\n#===========================================================================================================\n# _ESC (RAW / ACTION / COMMAND ESCAPING)\n#-----------------------------------------------------------------------------------------------------------\n@_ESC = {}\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.initialize = ( state ) =>\n  state[ '_ESC' ] =\n    registry:   []\n  return state\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.html_comment_pattern = /// ( ^ | [^\\\\] ) <!-- ( [ \\s\\S ]*? ) --> ///g\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_ESC.action_patterns = [\n#   /// (?: ( ^ | [^\\\\] ) <<\\( ( [.:] ) >> (                  ) << \\) >> ) ///g\n#   /// (?: ( ^ | [^\\\\] ) <<\\( ( [.:] ) >> ( [ \\s\\S ]*? [^\\\\] ) << \\) >> ) ///g\n#   ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_ESC.raw_bracketed_patterns = [\n#   /// (?: ( ^ | [^\\\\] ) <<< (                  ) >>> ) ///g\n#   /// (?: ( ^ | [^\\\\] ) <<< ( [ \\s\\S ]*? [^\\\\] ) >>> ) ///g\n#   ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.action_patterns = [ ///   # A silent or vocal action macro...\n                                #\n                                # Start Tag\n                                # =========\n  ( ^ | [^ \\\\ ] )               # starts either at the first chr or a chr other than backslash\n  <<\\(                          # then: two left pointy brackets, then: left round bracket,\n    ( [ . : ]                   # then: a dot or a colon;\n      (?:                       # then:\n        \\\\>                |    #   or: an escaped right pointy bracket (RPB)\n        [^ > ]             |    #   or: anything but a RPB\n        > (?! > )               #   or: a RPB not followed by yet another RPB\n      )*                        # repeated any number of times\n    )\n    >>                          # then: two RPBs...\n                                #\n                                # Content\n                                # =========\n    (\n      (?:                       # ...followed by content, which is:\n        \\\\<                |    #   or: an escaped left pointy bracket (LPB)\n        [^ < ]             |    #   or: anything but a LPB\n        < (?! < )               #   or: a LPB not followed by yet another LPB\n      )*                        # repeated any number of times\n      )\n                                #\n                                # Stop Tag\n                                # =========\n  <<                            # then: two left pointy brackets,\n    ( \\2 ? )                    # then: optionally, whatever appeared in the start tag,\n    \\)>>                        # then: right round bracket, then: two RPBs.\n  ///g ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.region_patterns = [ ///   # A region macro...\n                                #\n                                # Start Tag\n                                # =========\n  ( ^ | [^ \\\\ ] )               # starts either at the first chr or a chr other than backslash\n  <<\\(                          # then: two left pointy brackets, then: left round bracket,\n    (                           #\n      (?:                       # then:\n        \\\\>                |    #   or: an escaped right pointy bracket (RPB)\n        [^ > ]             |    #   or: anything but a RPB\n        > (?! > )               #   or: a RPB not followed by yet another RPB\n      )*                        # repeated any number of times\n    )\n    >>                          # then: two RPBs...\n                                #\n                                # Content\n                                # =========\n    (\n      (?:                       # ...followed by content, which is:\n        \\\\<                |    #   or: an escaped left pointy bracket (LPB)\n        [^ < ]             |    #   or: anything but a LPB\n        < (?! < )               #   or: a LPB not followed by yet another LPB\n      )*                        # repeated any number of times\n      )\n                                #\n                                # Stop Tag\n                                # =========\n  <<                            # then: two left pointy brackets,\n    ( \\2 ? )                    # then: optionally, whatever appeared in the start tag,\n    \\)>>                        # then: right round bracket, then: two RPBs.\n  ///g ]\n\n# debug '234652', @_ESC.action_patterns\n# debug \"abc<<(:js>>4 + 3<<:js)>>def\".match @_ESC.action_patterns[ 0 ]\n# process.exit()\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.bracketed_raw_patterns = [ ///  # A bracketed raw macro\n  ( ^ | [^ \\\\ ] )               # starts either at the first chr or a chr other than backslash\n  <<(<)                         # then: three left pointy brackets,\n    (\n      (?:                       # then:\n        \\\\>                |    #   or: an escaped right pointy bracket (RPB)\n        [^ > ]             |    #   or: anything but a RPB\n        >{1,2} (?! > )          #   or: one or two RPBs not followed by yet another RPB\n      )*                        # repeated any number of times\n    )\n    >>>                         # then: three RPBs.\n  ///g ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_ESC.raw_heredoc_pattern  = ///\n#   ( ^ | [^\\\\] ) <<! raw: ( [^\\s>]* )>> ( .*? ) \\2\n#   ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.command_and_value_patterns = [ ///  # A command macro\n  ( ^ | [^ \\\\ ] )               # starts either at the first chr or a chr other than backslash\n  <<                            # then: two left pointy brackets,\n    ( [ ! $ ] )                 # then: an exclamation mark or a dollar sign,\n    (\n      (?:                       # then:\n        \\\\>                |    #   or: an escaped right pointy bracket (RPB)\n        [^ > ]             |    #   or: anything but a RPB\n        > (?! > )               #   or: a RPB not followed by yet another RPB\n      )*                        # repeated any number of times\n    )\n    >>                          # then: two RPBs.\n  ///g ]\n\n#-----------------------------------------------------------------------------------------------------------\n### NB The end command macro looks like any other command except we can detect it with a much simpler\nRegEx; we want to do that so we can, as a first processing step, remove it and any material that appears\nafter it, thereby inhibiting any processing of those portions. ###\n@_ESC.end_command_patterns = [ ///  # Then end command macro\n  ( ^ |                         # starts either at the first chr\n    ^ [ \\s\\S ]+ [^ \\\\ ] )       # or a number of chrs whose last one is not a backslash\n  <<!end>>                      # then: the `<<!end>>` literal.\n  /// ]                         # NB that this pattern is not global.\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.illegal_patterns = [ ///  # After applying all other macro patterns, treat as error: pattern that\n  ( ^ | [^ \\\\ ] )               # starts either at the first chr or a chr other than backslash\n  ( << | >> )                   # then: either two left or two right pointy brackets\n  ( [ \\s\\S ] { 0, 10 } )        # followed by any characters (matched for diagnostic messages).\n                                # In other words, you must not have two consecutive unescaped left pointy\n                                # brackets in the MD source, even where those LPBs do not form a macro\n                                # pattern.\n  ///g ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.raw_id_pattern       = ///\n  \\x15 raw ( [ 0-9 ]+ ) \\x13\n  ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.html_comment_id_pattern = ///\n  \\x15 comment ( [ 0-9 ]+ ) \\x13\n  ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.do_id_pattern   = ///\n  \\x15 do ( [ 0-9 ]+ ) \\x13\n  ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.action_id_pattern   = ///\n  \\x15 action ( [ 0-9 ]+ ) \\x13\n  ///g\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.match_first = ( patterns, text ) =>\n  for pattern in patterns\n    return R if ( R = text.match pattern )?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.truncate_text_at_end_command_macro = ( S, text ) =>\n  return [ text, 0, ] unless ( match = @_ESC.match_first @_ESC.end_command_patterns, text )?\n  R = match[ 1 ]\n  return [ R, text.length - R.length, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.escape_html_comments = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  R = R.replace @_ESC.html_comment_pattern, ( _, previous_chr, content ) =>\n    key = @_ESC.register_content S, 'comment', null, content, content.trim()\n    return \"#{previous_chr}\\x15#{key}\\x13\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.escape_bracketed_raw_macros = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  for pattern in @_ESC.bracketed_raw_patterns\n    R = R.replace pattern, ( _, previous_chr, markup, content ) =>\n      id = @_ESC.register_content S, 'raw', markup, content\n      return \"#{previous_chr}\\x15#{id}\\x13\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.escape_action_macros = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  for pattern in @_ESC.action_patterns\n    R = R.replace pattern, ( _, previous_chr, starter, content, stopper ) =>\n      mode      = starter[ 0 ]\n      mode      = if mode is '.' then 'silent' else 'vocal'\n      language  = starter[ 1 .. ]\n      language  = 'coffee' if language is ''\n      ### TAINT not using arguments peoperly ###\n      id        = @_ESC.register_content S, 'action', [ mode, language, ], content\n      return \"#{previous_chr}\\x15#{id}\\x13\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.escape_region_macros = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  for pattern in @_ESC.region_patterns\n    R = R.replace pattern, ( _, previous_chr, starter, content, stopper ) =>\n      ### TAINT not using arguments peoperly ###\n      starter_rpr = \"<<(#{starter}>>\"\n      stopper_rpr = \"<<#{stopper})>>\"\n      starter_id  = @_ESC.register_content S, 'region', starter, starter_rpr\n      stopper_id  = @_ESC.register_content S, 'region', starter, stopper_rpr\n      return \"#{previous_chr}\\x15#{starter_id}\\x13#{content}\\x15#{stopper_id}\\x13\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.escape_command_and_value_macros = ( S, text ) =>\n  R = text\n  #.........................................................................................................\n  for pattern in @_ESC.command_and_value_patterns\n    R = R.replace pattern, ( _, previous_chr, markup, content ) =>\n      kind            = if markup is '!' then 'command' else 'value'\n      parsed_content  = '???'\n      key             = @_ESC.register_content S, kind, markup, content, parsed_content\n      return \"#{previous_chr}\\x15#{key}\\x13\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.escape_macros = ( S, text ) =>\n  # debug '©II6XI', rpr text\n  [ R, discard_count, ] = @_ESC.truncate_text_at_end_command_macro S, text\n  whisper \"detected <<!end>> macro; discarding approx. #{discard_count} characters\" if discard_count > 0\n  R = @_ESC.escape_escape_chrs              S, R\n  R = @_ESC.escape_html_comments            S, R\n  R = @_ESC.escape_bracketed_raw_macros     S, R\n  R = @_ESC.escape_action_macros            S, R\n  R = @_ESC.escape_region_macros            S, R\n  R = @_ESC.escape_command_and_value_macros S, R\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.register_content = ( S, kind, markup, raw, parsed = null ) =>\n  registry  = S[ '_ESC' ][ 'registry' ]\n  idx     = registry.length\n  key     = \"#{kind}#{idx}\"\n  registry.push { key, markup, raw, parsed, }\n  return key\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.retrieve_entry = ( S, id ) =>\n  throw new Error \"unknown ID #{rpr id}\" unless ( R = S[ '_ESC' ][ 'registry' ][ id ] )?\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.expand_html_comments = ( S, text ) =>\n  is_plain = no\n  for stretch, idx in R = text.split @_ESC.html_comment_id_pattern\n    is_plain = not is_plain\n    if is_plain\n      null\n    else\n      id        = parseInt stretch, 10\n      entry     = @_ESC.retrieve_entry S, id\n      R[ idx ]  = entry[ 'raw' ]\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.$expand_html_comments = ( S ) =>\n  ### TAINT code duplication ###\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    ### TAINT wrong selector ###\n    if @select event, '.', [ 'text', 'code', ]\n      is_comment                  = yes\n      [ type, name, text, meta, ] = event\n      for stretch in text.split @_ESC.html_comment_id_pattern\n        is_comment = not is_comment\n        if is_comment\n          id      = parseInt stretch, 10\n          entry   = @_ESC.retrieve_entry S, id\n          content = entry[ 'raw' ]\n          send [ '.', 'comment', content, ( @copy meta ), ]\n        else\n          send [ type, name, stretch, ( @copy meta ), ] unless stretch.length is 0\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.$expand_actions = ( S ) =>\n  ### TAINT code duplication ###\n  track = @TRACKER.new_tracker '(code)', '{code}'\n  return $ ( event, send ) =>\n    within_code = track.within '(code)', '{code}'\n    track event\n    #.......................................................................................................\n    ### TAINT wrong selector ###\n    if @select event, '.', [ 'text', 'code', 'comment', ]\n      is_command                  = yes\n      [ type, name, text, meta, ] = event\n      for stretch in text.split @_ESC.action_id_pattern\n        is_command = not is_command\n        if is_command\n          id      = parseInt stretch, 10\n          entry   = @_ESC.retrieve_entry S, id\n          if within_code\n            content = entry[ 'raw' ]\n            send [ '.', 'text', content, ( @copy meta ), ]\n          else\n            content = entry[ 'parsed' ]\n            ### should never happen: ###\n            throw new Error \"not registered correctly: #{rpr stretch}\"  unless CND.isa_list content\n            [ left_fence, action_name, right_fence, ] = content\n            fence = left_fence ? right_fence\n            send [ fence, action_name, null, ( @copy meta ), ]\n        else\n          send [ type, name, stretch, ( @copy meta ), ] unless stretch.length is 0\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.$expand_raw_spans  = ( S ) =>\n  ### TAINT code duplication ###\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    ### TAINT wrong selector ###\n    if @select event, '.', [ 'text', 'code', 'comment', ]\n      is_raw                      = yes\n      [ type, name, text, meta, ] = event\n      for stretch in text.split @_ESC.raw_id_pattern\n        is_raw = not is_raw\n        if is_raw\n          id      = parseInt stretch, 10\n          entry   = @_ESC.retrieve_entry S, id\n          content = entry[ 'raw' ]\n          send [ '.', 'raw', content, ( @copy meta ), ]\n        else\n          send [ type, name, stretch, ( @copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.$expand_do_spans  = ( S ) =>\n  ### TAINT code duplication ###\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    ### TAINT wrong selector ###\n    if @select event, '.', [ 'text', 'code', 'comment', ]\n      is_do                       = yes\n      [ type, name, text, meta, ] = event\n      for stretch in text.split @_ESC.do_id_pattern\n        is_do = not is_do\n        if is_do\n          id      = parseInt stretch, 10\n          entry   = @_ESC.retrieve_entry S, id\n          content = entry[ 'raw' ]\n          send [ '!', 'do', content, ( @copy meta ), ]\n        else\n          send [ type, name, stretch, ( @copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.escape_escape_chrs = ( S, text ) =>\n  R = text\n  R = R.replace /\\x10/g, '\\x10A'\n  R = R.replace /\\x15/g, '\\x10X'\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_ESC.unescape_escape_chrs = ( S, text ) =>\n  R = text\n  R = R.replace /\\x10X/g, '\\x15'\n  R = R.replace /\\x10A/g, '\\x10'\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_resender = ( S, stream ) ->\n  ### TAINT re-parsing new source text should be handled by regular stream transform at an appropriate\n  stream entry point ###\n  ### TAINT new parser not needed, can reuse 'main' parser ###\n  md_parser = @_new_markdown_parser()\n  return ( md_source ) =>\n    ### TAINT must handle data in environment ###\n    if CND.isa_text md_source\n      md_source   = @_ESC.escape_macros S, md_source\n      environment = {}\n      tokens      = md_parser.parse md_source, environment\n      # tokens      = md_parser.parse md_source, S.environment\n      #.......................................................................................................\n      ### TAINT intermediate solution ###\n      if ( keys = Object.keys environment ).length > 0\n        warn \"ignoring keys from sub-parsing environment: #{rpr keys}\"\n      #.......................................................................................................\n      if tokens.length > 0\n        ### Omit `paragraph_open` as first and `paragraph_close` as last token: ###\n        first_idx   = 0\n        last_idx    = tokens.length - 1\n        first_idx   = if tokens[ first_idx ][ 'type' ] is 'paragraph_open'  then first_idx + 1 else first_idx\n        last_idx    = if tokens[  last_idx ][ 'type' ] is 'paragraph_close' then  last_idx - 1 else  last_idx\n        # ( debug '©9fdeD', \"resending\", tokens[ idx ] ) for idx in [ first_idx .. last_idx ]\n        stream.write tokens[ idx ] for idx in [ first_idx .. last_idx ]\n    else\n      stream.write md_source\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@mkts_events_from_md = ( source, settings, handler ) ->\n  switch arity = arguments.length\n    when 2\n      handler   = settings\n      settings  = {}\n    when 3 then null\n    else throw new Error \"expected 2 or 3 arguments, got #{arity}\"\n  bare        = settings[ 'bare' ] ? no\n  md_fitting  = @create_md_readfitting source\n  { input\n    output }  = md_fitting\n  Z           = []\n  output.pipe $ ( event, send ) =>\n    # debug '©G3QXt', event\n    Z.push event unless bare and @select event, [ '(', ')', ], 'document'\n  output.on 'end', -> handler null, Z\n  input.resume()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@mktscript_from_md = ( md_source, settings, handler ) ->\n  ### TAINT code duplication ###\n  switch arity = arguments.length\n    when 2\n      handler   = settings\n      settings  = {}\n    when 3 then null\n    else throw new Error \"expected 2 or 3 arguments, got #{arity}\"\n  #.........................................................................................................\n  source_route        = settings[ 'source-route' ] ? '<STRING>'\n  md_fitting          = @create_md_readfitting md_source\n  { input\n    output }          = md_fitting\n  f                   = => input.resume()\n  #.........................................................................................................\n  output\n    .pipe @$produce_mktscript md_fitting[ 'S' ]\n    # .pipe D.$show '>>>>>>>>>>>>>>'\n    .pipe do =>\n      Z = []\n      return $ ( event, send, end ) =>\n        Z.push event if event?\n        if end?\n          handler null, Z.join ''\n          end()\n  #.........................................................................................................\n  D.run f, @_handle_error\n  return null\n\n\n#===========================================================================================================\n# STREAM CREATION\n#-----------------------------------------------------------------------------------------------------------\n@create_md_readfitting = ( md_source, settings ) ->\n  throw new Error \"settings currently unsupported\" if settings?\n  #.........................................................................................................\n  ### for `environment` see https://markdown-it.github.io/markdown-it/#MarkdownIt.parse ###\n  S =\n    # confluence:           confluence\n    environment:          {}\n  #.........................................................................................................\n  ### TAINT `settings`, `S` and fitting should be the same object ###\n  settings =\n    S:                S\n  #.........................................................................................................\n  readstream    = D.create_throughstream()\n  writestream   = D.create_throughstream()\n  # confluence  = D.create_throughstream()\n  R             = D.create_fitting_from_readwritestreams readstream, writestream, settings\n  { input }     = R\n  #.........................................................................................................\n  S.resend = @new_resender S, readstream\n  S.confluence = readstream\n  # S.confluence = input\n  #.........................................................................................................\n  readstream\n    .pipe @_PRE.$flatten_tokens                 S\n    .pipe @_PRE.$reinject_html_blocks           S\n    .pipe @_PRE.$rewrite_markdownit_tokens      S\n    # .pipe D.$show '7686756'\n    .pipe @_ESC.$expand_html_comments           S\n    .pipe @_ESC.$expand_actions                 S\n    .pipe @_ESC.$expand_raw_spans               S\n    .pipe @_ESC.$expand_do_spans                S\n    .pipe @_PRE.$process_end_command            S\n    .pipe @_PRE.$close_dangling_open_tags       S\n    .pipe @_PRE.$consolidate_footnotes          S\n    .pipe writestream\n  #.........................................................................................................\n  # readstream.on     'end', -> debug '©tdfA4', \"readstream ended\"\n  # writestream.on    'end', -> debug '©sId1V', \"writestream ended\"\n  # input.on          'end', -> debug '©1sbYv', \"input ended\"\n  # R[ 'output' ].on  'end', -> debug '©zSMOc', \"output ended\"\n  #.........................................................................................................\n  input.pause()\n  input.on 'resume', =>\n    md_parser   = @_new_markdown_parser()\n    @_ESC.initialize S\n    ### TAINT consider to make `<<!end>>` special and detect it before parsing ###\n    md_source   = @_ESC.escape_macros S, md_source\n    tokens      = md_parser.parse md_source, S.environment\n    for token in tokens\n      input.write token\n    # whisper \"sending `end` token\"\n    input.write Symbol.for 'end'\n  #.........................................................................................................\n  return R\n\n\n"]}