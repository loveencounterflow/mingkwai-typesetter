{"version":3,"sources":["tests.coffee"],"names":[],"mappings":"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","file":"tests.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\n# eventually                = suspend.eventually\n### TAINT experimentally using `later` in place of `setImmediate` ###\nlater                     = suspend.immediately\n#...........................................................................................................\ntest                      = require 'guy-test'\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nMKTS                      = require './MKTS'\nMKTS_XXX                  = require './mkts-typesetter-interim'\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\nshow_events = ( probe, events ) ->\n  whisper probe\n  echo \"[\"\n  for event in events\n    echo \"    #{JSON.stringify event}\"\n  echo \"    ]\"\n\n#-----------------------------------------------------------------------------------------------------------\ncopy_regex_non_global = ( re ) ->\n  flags = ( if re.ignoreCase then 'i' else '' ) + \\\n          ( if re.multiline  then 'm' else '' ) +\n          ( if re.sticky     then 'y' else '' )\n  return new RegExp re.source, flags\n\n#-----------------------------------------------------------------------------------------------------------\nlist_from_mtach = ( match ) ->\n  return null unless match?\n  R = Array.from match\n  R.splice 0, 1\n  return R\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS._ESC.action_patterns[ 0 ] matches action macro\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [\"<<(.>><<)>>\",[\"\",\".\",\"\"]]\n    [\"<<(.>>xxx<<)>>\",null]\n    ]\n  re = copy_regex_non_global MKTS._ESC.action_patterns[ 0 ]\n  for [ probe, matcher, ] in probes_and_matchers\n    result = list_from_mtach probe.match re\n    help JSON.stringify [ probe, result, ]\n    T.eq result, matcher\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS._ESC.action_patterns[ 1 ] matches action macro\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [\"<<(.>><<)>>\",null]\n    [\"<<(.>>some code<<)>>\",[\"\",\".\",\"some code\"]]\n    ]\n  re = copy_regex_non_global MKTS._ESC.action_patterns[ 1 ]\n  for [ probe, matcher, ] in probes_and_matchers\n    result = list_from_mtach probe.match re\n    help JSON.stringify [ probe, result, ]\n    T.eq result, matcher\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS._ESC.raw_bracketed_patterns matches raw region\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [\"<<<...raw material...>>>\",null]\n    [\"<<(.>>some code<<)>>\",[\"\",\".\",\"some code\"]]\n    ]\n  re = copy_regex_non_global MKTS._ESC.raw_bracketed_patterns[ 1 ]\n  for [ probe, matcher, ] in probes_and_matchers\n    result = list_from_mtach probe.match re\n    help JSON.stringify [ probe, result, ]\n    T.eq result, matcher\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.FENCES.parse accepts dot patterns\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [ '.',     [ '.', null,   null, ], ]\n#     [ '.p',    [ '.', 'p',    null, ], ]\n#     [ '.text', [ '.', 'text', null, ], ]\n#     ]\n#   for [ probe, matcher, ] in probes_and_matchers\n#     # help ( rpr probe ), MKTS.FENCES.parse probe\n#     T.eq ( MKTS.FENCES.parse probe ), matcher\n#   done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.FENCES.parse accepts empty fenced patterns\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [ '<>', [ '<', null, '>', ], ]\n#     [ '{}', [ '{', null, '}', ], ]\n#     [ '[]', [ '[', null, ']', ], ]\n#     [ '()', [ '(', null, ')', ], ]\n#     ]\n#   for [ probe, matcher, ] in probes_and_matchers\n#     # help ( rpr probe ), MKTS.FENCES.parse probe\n#     T.eq ( MKTS.FENCES.parse probe ), matcher\n#   done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.FENCES.parse accepts unfenced named patterns\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [ 'document',       [ null, 'document',     null, ], ]\n#     [ 'singlecolumn',   [ null, 'singlecolumn', null, ], ]\n#     [ 'code',           [ null, 'code',         null, ], ]\n#     [ 'blockquote',     [ null, 'blockquote',   null, ], ]\n#     [ 'em',             [ null, 'em',           null, ], ]\n#     [ 'xxx',            [ null, 'xxx',          null, ], ]\n#     ]\n#   for [ probe, matcher, ] in probes_and_matchers\n#     # help ( rpr probe ), MKTS.FENCES.parse probe\n#     T.eq ( MKTS.FENCES.parse probe ), matcher\n#   done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.FENCES.parse accepts fenced named patterns\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [ '<document>',     [ '<', 'document',     '>', ], ]\n#     [ '{singlecolumn}', [ '{', 'singlecolumn', '}', ], ]\n#     [ '{code}',         [ '{', 'code',         '}', ], ]\n#     [ '[blockquote]',   [ '[', 'blockquote',   ']', ], ]\n#     [ '(em)',           [ '(', 'em',           ')', ], ]\n#     ]\n#   for [ probe, matcher, ] in probes_and_matchers\n#     # help ( rpr probe ), MKTS.FENCES.parse probe\n#     T.eq ( MKTS.FENCES.parse probe ), matcher\n#   done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.FENCES.parse rejects empty string\" ] = ( T, done ) ->\n#   T.throws \"pattern must be non-empty, got ''\", ( -> MKTS.FENCES.parse '' )\n#   done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.FENCES.parse rejects non-matching fences etc\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [ '(xxx}',  'fences don\\'t match in pattern \\'(xxx}\\'',          ]\n#     [ '.)',     'fence \\'.\\' can not have right fence, got \\'.)\\'',  ]\n#     [ '.p)',    'fence \\'.\\' can not have right fence, got \\'.p)\\'', ]\n#     [ '.[',     'fence \\'.\\' can not have right fence, got \\'.[\\'',  ]\n#     [ '<',      'unmatched fence in \\'<\\'',                          ]\n#     [ '{',      'unmatched fence in \\'{\\'',                          ]\n#     [ '[',      'unmatched fence in \\'[\\'',                          ]\n#     [ '(',      'unmatched fence in \\'(\\'',                          ]\n#     ]\n#   for [ probe, matcher, ] in probes_and_matchers\n#     T.throws matcher, ( -> MKTS.FENCES.parse probe )\n#   done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.FENCES.parse accepts non-matching fences when so configured\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [ '<document>',     [ '<', 'document',     '>', ], ]\n#     [ '{singlecolumn}', [ '{', 'singlecolumn', '}', ], ]\n#     [ '{code}',         [ '{', 'code',         '}', ], ]\n#     [ '[blockquote]',   [ '[', 'blockquote',   ']', ], ]\n#     [ '(em)',           [ '(', 'em',           ')', ], ]\n#     [ 'document>',      [ null, 'document',     '>', ], ]\n#     [ 'singlecolumn}',  [ null, 'singlecolumn', '}', ], ]\n#     [ 'code}',          [ null, 'code',         '}', ], ]\n#     [ 'blockquote]',    [ null, 'blockquote',   ']', ], ]\n#     [ 'em)',            [ null, 'em',           ')', ], ]\n#     [ '<document',      [ '<', 'document',     null, ], ]\n#     [ '{singlecolumn',  [ '{', 'singlecolumn', null, ], ]\n#     [ '{code',          [ '{', 'code',         null, ], ]\n#     [ '[blockquote',    [ '[', 'blockquote',   null, ], ]\n#     [ '(em',            [ '(', 'em',           null, ], ]\n#     ]\n#   for [ probe, matcher, ] in probes_and_matchers\n#     # help ( rpr probe ), MKTS.FENCES.parse probe\n#     T.eq ( MKTS.FENCES.parse probe, symmetric: no ), matcher\n#   done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.TRACKER.new_tracker (short comprehensive test)\" ] = ( T, done ) ->\n#   track = MKTS.TRACKER.new_tracker '(code)', '{multi-column}'\n#   probes_and_matchers = [\n#     [ [ '<', 'document',     ], [  no,  no, ], ]\n#     [ [ '{', 'multi-column', ], [  no, yes, ], ]\n#     [ [ '(', 'code',         ], [ yes, yes, ], ]\n#     [ [ '{', 'multi-column', ], [ yes, yes, ], ]\n#     [ [ '.', 'text',         ], [ yes, yes, ], ]\n#     [ [ '}', 'multi-column', ], [ yes, yes, ], ]\n#     [ [ ')', 'code',         ], [  no, yes, ], ]\n#     [ [ '}', 'multi-column', ], [  no,  no, ], ]\n#     [ [ '>', 'document',     ], [  no,  no, ], ]\n#     ]\n#   for [ probe, matcher, ] in probes_and_matchers\n#     track probe\n#     whisper probe\n#     help '(code):', ( track.within '(code)' ), '{multi-column}:', ( track.within '{multi-column}' )\n#     T.eq ( track.within '(code)'          ), matcher[ 0 ]\n#     T.eq ( track.within '{multi-column}'  ), matcher[ 1 ]\n#   done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.mkts_events_from_md (1)\" ] = ( T, done ) ->\n#   # settings  = bare: yes\n#   probe     = \"\"\"`<<($>>eval block<<$)>>`\"\"\"\n#   warn \"should merge texts\"\n#   matcher   = [\n#     [\"<\",\"document\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     [\"(\",\"code\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"text\",\"<<($>>\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"text\",\"eval block\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"text\",\"<<$)>>\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\")\",\"code\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"p\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     [\">\",\"document\",null,{}]\n#     ]\n#   step ( resume ) =>\n#     result = yield MKTS.mkts_events_from_md probe, resume\n#     show_events probe, result\n#     T.eq matcher, result\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.mkts_events_from_md (2)\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"`<<($>>eval block<<$)>>`\"\"\"\n#   warn \"should merge texts\"\n#   matcher   = [\n#     [\"(\",\"code\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"text\",\"<<($>>\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"text\",\"eval block\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"text\",\"<<$)>>\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\")\",\"code\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"p\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     ]\n#   step ( resume ) =>\n#     result = yield MKTS.mkts_events_from_md probe, settings, resume\n#     # show_events probe, result\n#     T.eq matcher, result\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.mkts_events_from_md (3)\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"`<<(\\\\$>>eval block<<\\\\$)>>`\"\"\"\n#   warn \"should merge texts\"\n#   matcher   = [\n#     [\"(\",\"code\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"text\",\"<<(\\\\$>>\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"text\",\"eval block\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"text\",\"<<\\\\$)>>\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\")\",\"code\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"p\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     ]\n#   step ( resume ) =>\n#     result = yield MKTS.mkts_events_from_md probe, settings, resume\n#     # show_events probe, result\n#     T.eq matcher, result\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.mkts_events_from_md (4)\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"<<!end>>\"\"\"\n#   warn \"match remark?\"\n#   matcher   = [\n#     [\"!\",\"end\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\",\"stamped\":true}]\n#     [\"#\",\"info\",\"encountered `<<!end>>` on line #1\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\",\"stamped\":true,\"badge\":\"$process_end_command\"}]\n#     ]\n#   step ( resume ) =>\n#     result = yield MKTS.mkts_events_from_md probe, settings, resume\n#     # show_events probe, result\n#     T.eq matcher, result\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.mkts_events_from_md (5)\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"<<!multi-column>>\"\"\"\n#   warn \"should not contain `.p`\"\n#   matcher   = [\n#     [\"!\",\"multi-column\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     [\".\",\"p\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     ]\n#   step ( resume ) =>\n#     result = yield MKTS.mkts_events_from_md probe, settings, resume\n#     # show_events probe, result\n#     T.eq matcher, result\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.mkts_events_from_md (6)\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"\n#     aaa\n#     <<(multi-column>>\n#     bbb\n#     <<multi-column)>>\n#     ccc\n#     \"\"\"\n#   warn \"missing `.p` inside `(multi-column)`\"\n#   matcher   = [\n#     [\".\",\"text\",\"aaa\\n\",{\"line_nr\":1,\"col_nr\":6,\"markup\":\"\"}]\n#     [\"(\",\"multi-column\",null,{\"line_nr\":1,\"col_nr\":6,\"markup\":\"\"}]\n#     [\".\",\"text\",\"\\nbbb\\n\",{\"line_nr\":1,\"col_nr\":6,\"markup\":\"\"}]\n#     [\")\",\"multi-column\",null,{\"line_nr\":1,\"col_nr\":6,\"markup\":\"\"}]\n#     [\".\",\"text\",\"\\nccc\",{\"line_nr\":1,\"col_nr\":6,\"markup\":\"\"}]\n#     [\".\",\"p\",null,{\"line_nr\":1,\"col_nr\":6,\"markup\":\"\"}]\n#     ]\n#   step ( resume ) =>\n#     result = yield MKTS.mkts_events_from_md probe, settings, resume\n#     # show_events probe, result\n#     T.eq matcher, result\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.mkts_events_from_md (7)\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"\n#     她說：「你好。」\n#     \"\"\"\n#   # warn \"missing `.p` inside `(multi-column)`\"\n#   matcher   = [\n#     [\".\",\"text\",\"她說：「你好。」\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     [\".\",\"p\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     ]\n#   step ( resume ) =>\n#     result = yield MKTS.mkts_events_from_md probe, settings, resume\n#     # show_events probe, result\n#     T.eq matcher, result\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.mkts_events_from_md (8)\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"\n#     A paragraph with *emphasis*.\n\n#     A paragraph with **bold text**.\n#     \"\"\"\n#   # warn \"missing `.p` inside `(multi-column)`\"\n#   matcher   = [\n#     [\".\",\"text\",\"A paragraph with \",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     [\"(\",\"em\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"*\"}]\n#     [\".\",\"text\",\"emphasis\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     [\")\",\"em\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"*\"}]\n#     [\".\",\"text\",\".\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     [\".\",\"p\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     [\".\",\"text\",\"A paragraph with \",{\"line_nr\":3,\"col_nr\":4,\"markup\":\"\"}]\n#     [\"(\",\"strong\",null,{\"line_nr\":3,\"col_nr\":4,\"markup\":\"**\"}]\n#     [\".\",\"text\",\"bold text\",{\"line_nr\":3,\"col_nr\":4,\"markup\":\"\"}]\n#     [\")\",\"strong\",null,{\"line_nr\":3,\"col_nr\":4,\"markup\":\"**\"}]\n#     [\".\",\"text\",\".\",{\"line_nr\":3,\"col_nr\":4,\"markup\":\"\"}]\n#     [\".\",\"p\",null,{\"line_nr\":3,\"col_nr\":4,\"markup\":\"\"}]\n#     ]\n#   step ( resume ) =>\n#     result = yield MKTS.mkts_events_from_md probe, settings, resume\n#     # show_events probe, result\n#     T.eq matcher, result\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.mkts_events_from_md: footnotes\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"\n#     Here is an inline footnote^[whose text appears at the point of insertion],\n#     followed by a referenced footnote[^1].\n\n#     [^1]: Referenced footnotes must use matching references.\n#     \"\"\"\n#   # warn \"missing `.p` inside `(multi-column)`\"\n#   matcher   = [\n#     [\".\",\"text\",\"Here is an inline footnote\",{\"line_nr\":1,\"col_nr\":3,\"markup\":\"\"}]\n#     [\"(\",\"footnote\",0,{\"line_nr\":1,\"col_nr\":3,\"markup\":\"\"}]\n#     [\".\",\"text\",\"whose text appears at the point of insertion\",{\"line_nr\":1,\"col_nr\":3,\"markup\":\"\"}]\n#     [\".\",\"p\",null,{\"line_nr\":1,\"col_nr\":3,\"markup\":\"\"}]\n#     [\")\",\"footnote\",0,{\"line_nr\":1,\"col_nr\":3,\"markup\":\"\"}]\n#     [\".\",\"text\",\",\\nfollowed by a referenced footnote\",{\"line_nr\":1,\"col_nr\":3,\"markup\":\"\"}]\n#     [\"(\",\"footnote\",1,{\"line_nr\":1,\"col_nr\":3,\"markup\":\"\"}]\n#     [\".\",\"text\",\"Referenced footnotes must use matching references.\",{\"line_nr\":4,\"col_nr\":5,\"markup\":\"\"}]\n#     [\".\",\"p\",null,{\"line_nr\":4,\"col_nr\":5,\"markup\":\"\"}]\n#     [\")\",\"footnote\",1,{\"line_nr\":1,\"col_nr\":3,\"markup\":\"\"}]\n#     [\".\",\"text\",\".\",{\"line_nr\":1,\"col_nr\":3,\"markup\":\"\"}]\n#     [\".\",\"p\",null,{\"line_nr\":1,\"col_nr\":3,\"markup\":\"\"}]\n#     ]\n#   step ( resume ) =>\n#     result = yield MKTS.mkts_events_from_md probe, settings, resume\n#     # show_events probe, result\n#     T.eq matcher, result\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS_XXX.tex_from_md (1)\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"\n#     A paragraph with *emphasis*.\n\n#     A paragraph with **bold text**.\n#     \"\"\"\n#   # warn \"missing `.p` inside `(multi-column)`\"\n#   matcher   = \"\"\"\n#     % begin of MD document\n#     A paragraph with {\\\\mktsStyleItalic{}emphasis\\\\/}.\\\\mktsShowpar\\\\par\n#     A paragraph with {\\\\mktsStyleBold{}bold text}.\\\\mktsShowpar\\\\par\n\n#     % end of MD document\n\n#     \"\"\"\n#   step ( resume ) =>\n#     result = yield MKTS_XXX.tex_from_md probe, settings, resume\n#     echo result\n#     T.eq matcher.trim(), result.trim()\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS_XXX.mktscript_from_md (1)\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"\n#     A paragraph with *emphasis*.\n\n#     A paragraph with **bold text**.\n\n#     Using <foo>HTML tags **inhibits** MD syntax</foo>.\n#     \"\"\"\n#   # warn \"missing `.p` inside `(multi-column)`\"\n#   matcher   = \"\"\"\n#     1 █ (document\n#     1 █ .text 'A paragraph with '\n#     1 █ (em\n#     1 █ .text 'emphasis'\n#     1 █ )em\n#     1 █ .text '.'\n#     1 █ .p\n#     3 █ .text 'A paragraph with '\n#     3 █ (strong\n#     3 █ .text 'bold text'\n#     3 █ )strong\n#     3 █ .text '.'\n#     3 █ .p\n#     5 █ .text 'Using '\n#     5 █ (foo\n#     5 █ .text 'HTML tags '\n#     5 █ (strong\n#     5 █ .text 'inhibits'\n#     5 █ )strong\n#     5 █ .text ' MD syntax'\n#     5 █ )foo\n#     5 █ .text '.'\n#     5 █ .p\n#     )document\n#     # EOF\n#     \"\"\"\n#   step ( resume ) =>\n#     result = yield MKTS.mktscript_from_md probe, settings, resume\n#     echo result\n#     T.eq matcher.trim(), result.trim()\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS_XXX.mktscript_from_md (2)\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"\n#     <<(multi-column>>\n\n#     <div>B</div>\n\n#     \"\"\"\n#   # warn \"missing `.p` inside `(multi-column)`\"\n#   matcher   = \"\"\"\n#     1 █ (document\n#     1 █ (multi-column\n#     1 █ .p\n#     1 █ (div\n#     1 █ .text 'B'\n#     1 █ )div\n#     1 █ .p\n#     #resend '`multi-column)`'\n#     1 █ )multi-column\n#     )document\n#     # EOF\n#     \"\"\"\n#   step ( resume ) =>\n#     result = yield MKTS.mktscript_from_md probe, settings, resume\n#     echo result\n#     T.eq matcher.trim(), result.trim()\n#     # T.fail \"not yet ready\"\n#     done()\n\n\n#===========================================================================================================\n# MAIN\n#-----------------------------------------------------------------------------------------------------------\n@_main = ( handler ) ->\n  test @, 'timeout': 2500\n\n\n############################################################################################################\nunless module.parent?\n  @_main()\n\n"]}