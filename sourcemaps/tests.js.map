{"version":3,"sources":["tests.coffee"],"names":[],"mappings":"AAOA;AAAA,MAAA;;EAAA,QAAA,GAA4B,OAAA,CAAQ,MAAR;;EAE5B,IAAA,GAA4B,QAAQ,CAAC;;EAErC,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAE5B,OAAA,GAA4B,OAAA,CAAQ,oBAAR;;EAC5B,IAAA,GAA4B,OAAO,CAAC;;EACpC,KAAA,GAA4B,OAAO,CAAC;;;AAEpC;;EACA,KAAA,GAA4B,OAAO,CAAC;;EAEpC,IAAA,GAA4B,OAAA,CAAQ,UAAR;;EAE5B,CAAA,GAA4B,OAAA,CAAQ,YAAR;;EAC5B,CAAA,GAA4B,CAAC,CAAC,KAAK,CAAC,IAAR,CAAa,CAAb;;EAC5B,MAAA,GAA4B,CAAC,CAAC,WAAW,CAAC,IAAd,CAAmB,CAAnB;;EAE5B,IAAA,GAA4B,OAAA,CAAQ,QAAR;;EAC5B,QAAA,GAA4B,OAAA,CAAQ,2BAAR;;EAM5B,WAAA,GAAc,SAAE,KAAF,EAAS,MAAT;AACZ,QAAA;IAAA,OAAA,CAAQ,KAAR;IACA,IAAA,CAAK,GAAL;AACA,SAAA,wCAAA;;MACE,IAAA,CAAK,MAAA,GAAM,CAAC,IAAI,CAAC,SAAL,CAAe,KAAf,CAAD,CAAX;AADF;WAEA,IAAA,CAAK,OAAL;EALY;;EAQd,qBAAA,GAAwB,SAAE,EAAF;AACtB,QAAA;IAAA,KAAA,GAAQ,CAAK,EAAE,CAAC,UAAN,GAAsB,GAAtB,GAA+B,EAAjC,CAAA,GACA,CAAK,EAAE,CAAC,SAAN,GAAsB,GAAtB,GAA+B,EAAjC,CADA,GAEA,CAAK,EAAE,CAAC,MAAN,GAAsB,GAAtB,GAA+B,EAAjC;AACR,WAAW,IAAA,MAAA,CAAO,EAAE,CAAC,MAAV,EAAkB,KAAlB;EAJW;;EAOxB,eAAA,GAAkB,SAAE,KAAF;AAChB,QAAA;IAAA,IAAmB,aAAnB;AAAA,aAAO,KAAP;;IACA,CAAA,GAAI,KAAK,CAAC,IAAN,CAAW,KAAX;IACJ,CAAC,CAAC,MAAF,CAAS,CAAT,EAAY,CAAZ;AACA,WAAO;EAJS;;EAOlB,WAAA,GAAc,SAAE,QAAF,EAAY,KAAZ;AACZ,QAAA;AAAA,SAAA,0CAAA;;MACE,IAAY,kCAAZ;AAAA,eAAO,EAAP;;AADF;AAEA,WAAO;EAHK;;EAMd,aAAA,GAAgB,SAAE,IAAF;;AACd;;;;;;;AAAA,QAAA;IAMA,CAAA,GAAI;IACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,uBAAV,EAAmC,SAAE,EAAF;AACrC,UAAA;MAAA,OAAA,GAAU,CAAE,EAAE,CAAC,WAAH,CAAe,CAAf,CAAF,CAAoB,CAAC,QAArB,CAA8B,EAA9B;MACV,IAA2B,OAAO,CAAC,MAAR,KAAkB,CAA7C;QAAA,OAAA,GAAU,GAAA,GAAM,QAAhB;;AACA,aAAO,KAAA,GAAM;IAHwB,CAAnC;IAIJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,IAAV,EAAgB,KAAhB;IACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,MAAV,EAAkB,KAAlB;IACJ,CAAA,GAAI,OAAA,GAAU,CAAV,GAAc;AAClB,WAAO;EAfO;;EAoBhB,IAAG,CAAA,uDAAA,CAAH,GAA+D,SAAE,CAAF,EAAK,IAAL;AAC7D,QAAA;IAAA,mBAAA,GAAsB,CACpB,CAAC,aAAD,EAAe,CAAC,EAAD,EAAI,GAAJ,EAAQ,EAAR,EAAW,EAAX,CAAf,CADoB,EAEpB,CAAC,gBAAD,EAAkB,CAAC,EAAD,EAAI,GAAJ,EAAQ,KAAR,EAAc,EAAd,CAAlB,CAFoB,EAGpB,CAAC,sBAAD,EAAwB,CAAC,EAAD,EAAI,GAAJ,EAAQ,WAAR,EAAoB,EAApB,CAAxB,CAHoB,EAIpB,CAAC,wBAAD,EAA0B,CAAC,GAAD,EAAK,GAAL,EAAS,OAAT,EAAiB,EAAjB,CAA1B,CAJoB,EAKpB,CAAC,aAAD,EAAe,CAAC,EAAD,EAAI,GAAJ,EAAQ,EAAR,EAAW,EAAX,CAAf,CALoB,EAMpB,CAAC,gBAAD,EAAkB,CAAC,EAAD,EAAI,GAAJ,EAAQ,KAAR,EAAc,EAAd,CAAlB,CANoB,EAOpB,CAAC,sBAAD,EAAwB,CAAC,EAAD,EAAI,GAAJ,EAAQ,WAAR,EAAoB,EAApB,CAAxB,CAPoB,EAQpB,CAAC,wBAAD,EAA0B,CAAC,GAAD,EAAK,GAAL,EAAS,OAAT,EAAiB,EAAjB,CAA1B,CARoB,EASpB,CAAC,mCAAD,EAAqC,CAAC,GAAD,EAAK,GAAL,EAAS,kBAAT,EAA4B,EAA5B,CAArC,CAToB,EAUpB,CAAC,mCAAD,EAAqC,CAAC,GAAD,EAAK,GAAL,EAAS,kBAAT,EAA4B,EAA5B,CAArC,CAVoB,EAWpB,CAAC,0BAAD,EAA4B,CAAC,GAAD,EAAK,KAAL,EAAW,OAAX,EAAmB,EAAnB,CAA5B,CAXoB,EAYpB,CAAC,0BAAD,EAA4B,CAAC,GAAD,EAAK,KAAL,EAAW,OAAX,EAAmB,EAAnB,CAA5B,CAZoB,EAapB,CAAC,6BAAD,EAA+B,CAAC,GAAD,EAAK,KAAL,EAAW,OAAX,EAAmB,KAAnB,CAA/B,CAboB,EAcpB,CAAC,6BAAD,EAA+B,CAAC,GAAD,EAAK,KAAL,EAAW,OAAX,EAAmB,KAAnB,CAA/B,CAdoB,EAepB,CAAC,2BAAD,EAA6B,IAA7B,CAfoB,EAgBpB,CAAC,2BAAD,EAA6B,IAA7B,CAhBoB;IAkBtB,QAAA;;AAAa;AAAA;WAAA,qCAAA;;qBAAA,qBAAA,CAAsB,OAAtB;AAAA;;;AACb,SAAA,qDAAA;oCAAM,gBAAO;MACX,MAAA,GAAS,eAAA,CAAgB,WAAA,CAAY,QAAZ,EAAsB,KAAtB,CAAhB;MACT,IAAA,CAAK,IAAI,CAAC,SAAL,CAAe,CAAE,KAAF,EAAS,MAAT,CAAf,CAAL;MACA,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa,OAAb;AAHF;WAIA,IAAA,CAAA;EAxB6D;;EA2B/D,IAAG,CAAA,sDAAA,CAAH,GAA8D,SAAE,CAAF,EAAK,IAAL;AAC5D,QAAA;IAAA,mBAAA,GAAsB,CACpB,CAAC,0BAAD,EAA4B,CAAC,EAAD,EAAI,GAAJ,EAAQ,oBAAR,CAA5B,CADoB,EAEpB,CAAC,sBAAD,EAAwB,IAAxB,CAFoB,EAGpB,CAAC,QAAD,EAAU,CAAC,EAAD,EAAI,GAAJ,EAAQ,EAAR,CAAV,CAHoB,EAIpB,CAAC,gCAAD,EAAkC,CAAC,GAAD,EAAK,GAAL,EAAS,aAAT,CAAlC,CAJoB,EAKpB,CAAC,8BAAD,EAAgC,CAAC,GAAD,EAAK,GAAL,EAAS,WAAT,CAAhC,CALoB,EAMpB,CAAC,0BAAD,EAA4B,IAA5B,CANoB,EAOpB,CAAC,0BAAD,EAA4B,IAA5B,CAPoB,EAQpB,CAAC,0BAAD,EAA4B,IAA5B,CARoB,EASpB,CAAC,0BAAD,EAA4B,IAA5B,CAToB;IAWtB,QAAA;;AAAa;AAAA;WAAA,qCAAA;;qBAAA,qBAAA,CAAsB,OAAtB;AAAA;;;AACb,SAAA,qDAAA;oCAAM,gBAAO;MACX,MAAA,GAAS,eAAA,CAAgB,WAAA,CAAY,QAAZ,EAAsB,KAAtB,CAAhB;MACT,IAAA,CAAK,IAAI,CAAC,SAAL,CAAe,CAAE,KAAF,EAAS,MAAT,CAAf,CAAL;MACA,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa,OAAb;AAHF;WAIA,IAAA,CAAA;EAjB4D;;EAoB9D,IAAG,CAAA,8DAAA,CAAH,GAAsE,SAAE,CAAF,EAAK,IAAL;AACpE,QAAA;IAAA,mBAAA,GAAsB,CACpB,CAAC,OAAD,EAAS,CAAC,EAAD,EAAI,GAAJ,EAAQ,EAAR,CAAT,CADoB,EAEpB,CAAC,WAAD,EAAa,CAAC,EAAD,EAAI,GAAJ,EAAQ,MAAR,CAAb,CAFoB,EAGpB,CAAC,iBAAD,EAAmB,CAAC,GAAD,EAAK,GAAL,EAAS,MAAT,CAAnB,CAHoB,EAIpB,CAAC,iBAAD,EAAmB,CAAC,GAAD,EAAK,GAAL,EAAS,MAAT,CAAnB,CAJoB,EAKpB,CAAC,oBAAD,EAAsB,CAAC,GAAD,EAAK,GAAL,EAAS,SAAT,CAAtB,CALoB,EAMpB,CAAC,mBAAD,EAAqB,CAAC,GAAD,EAAK,GAAL,EAAS,QAAT,CAArB,CANoB,EAOpB,CAAC,kBAAD,EAAoB,IAApB,CAPoB,EAQpB,CAAC,OAAD,EAAS,CAAC,EAAD,EAAI,GAAJ,EAAQ,EAAR,CAAT,CARoB,EASpB,CAAC,WAAD,EAAa,CAAC,EAAD,EAAI,GAAJ,EAAQ,MAAR,CAAb,CAToB,EAUpB,CAAC,iBAAD,EAAmB,CAAC,GAAD,EAAK,GAAL,EAAS,MAAT,CAAnB,CAVoB,EAWpB,CAAC,iBAAD,EAAmB,CAAC,GAAD,EAAK,GAAL,EAAS,MAAT,CAAnB,CAXoB,EAYpB,CAAC,oBAAD,EAAsB,CAAC,GAAD,EAAK,GAAL,EAAS,SAAT,CAAtB,CAZoB,EAapB,CAAC,mBAAD,EAAqB,CAAC,GAAD,EAAK,GAAL,EAAS,QAAT,CAArB,CAboB,EAcpB,CAAC,kBAAD,EAAoB,IAApB,CAdoB;IAgBtB,QAAA;;AAAa;AAAA;WAAA,qCAAA;;qBAAA,qBAAA,CAAsB,OAAtB;AAAA;;;AACb,SAAA,qDAAA;oCAAM,gBAAO;MACX,MAAA,GAAS,eAAA,CAAgB,WAAA,CAAY,QAAZ,EAAsB,KAAtB,CAAhB;MACT,IAAA,CAAK,IAAI,CAAC,SAAL,CAAe,CAAE,KAAF,EAAS,MAAT,CAAf,CAAL;MACA,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa,OAAb;AAHF;WAIA,IAAA,CAAA;EAtBoE;;EAyBtE,IAAG,CAAA,iEAAA,CAAH,GAAyE,SAAE,CAAF,EAAK,IAAL;AACvE,QAAA;IAAA,mBAAA,GAAsB,CACpB,CAAC,YAAD,EAAc,IAAd,CADoB,EAEpB,CAAC,iBAAD,EAAmB,IAAnB,CAFoB,EAGpB,CAAC,iBAAD,EAAmB,IAAnB,CAHoB,EAIpB,CAAC,eAAD,EAAiB,CAAC,GAAD,EAAK,IAAL,EAAU,QAAV,CAAjB,CAJoB;IAMtB,QAAA;;AAAa;AAAA;WAAA,qCAAA;;qBAAA,qBAAA,CAAsB,OAAtB;AAAA;;;AACb,SAAA,qDAAA;oCAAM,gBAAO;MACX,MAAA,GAAS,eAAA,CAAgB,WAAA,CAAY,QAAZ,EAAsB,KAAtB,CAAhB;MACT,IAAA,CAAK,IAAI,CAAC,SAAL,CAAe,CAAE,KAAF,EAAS,MAAT,CAAf,CAAL;MACA,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa,OAAb;AAHF;WAIA,IAAA,CAAA;EAZuE;;EAezE,IAAG,CAAA,4DAAA,CAAH,GAAoE,SAAE,CAAF,EAAK,IAAL;AAClE,QAAA;IAAA,mBAAA,GAAsB,CACpB,CAAC,wCAAD,EAA0C,CAAC,iBAAD,CAA1C,CADoB,EAEpB,CAAC,yBAAD,EAA2B,CAAC,iBAAD,CAA3B,CAFoB,EAGpB,CAAC,UAAD,EAAY,CAAC,EAAD,CAAZ,CAHoB,EAIpB,CAAC,EAAD,EAAI,IAAJ,CAJoB,EAKpB,CAAC,yBAAD,EAA2B,CAAC,EAAD,CAA3B,CALoB,EAMpB,CAAC,2BAAD,EAA6B,IAA7B,CANoB,EAOpB,CAAC,0CAAD,EAA4C,IAA5C,CAPoB,EAQpB,CAAC,0CAAD,EAA4C,IAA5C,CARoB;IAUtB,QAAA,GAAW,IAAI,CAAC,MAAM,CAAC;AACvB,SAAA,qDAAA;oCAAM,gBAAO;MACX,MAAA,GAAS,eAAA,CAAgB,WAAA,CAAY,QAAZ,EAAsB,KAAtB,CAAhB;MACT,IAAA,CAAK,IAAI,CAAC,SAAL,CAAe,CAAE,KAAF,EAAS,MAAT,CAAf,CAAL;MACA,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa,OAAb;AAHF;WAIA,IAAA,CAAA;EAhBkE;;EAmBpE,IAAG,CAAA,uDAAA,CAAH,GAA+D,SAAE,CAAF,EAAK,IAAL;AAC7D,QAAA;IAAA,mBAAA,GAAsB,CACpB,CAAC,wCAAD,EAA0C,CAAC,iBAAD,EAAmB,EAAnB,CAA1C,CADoB,EAEpB,CAAC,yBAAD,EAA2B,CAAC,iBAAD,EAAmB,CAAnB,CAA3B,CAFoB,EAGpB,CAAC,UAAD,EAAY,CAAC,EAAD,EAAI,CAAJ,CAAZ,CAHoB,EAIpB,CAAC,EAAD,EAAI,CAAC,EAAD,EAAI,CAAJ,CAAJ,CAJoB,EAKpB,CAAC,yBAAD,EAA2B,CAAC,EAAD,EAAI,EAAJ,CAA3B,CALoB,EAMpB,CAAC,2BAAD,EAA6B,CAAC,2BAAD,EAA6B,CAA7B,CAA7B,CANoB,EAOpB,CAAC,0CAAD,EAA4C,CAAC,0CAAD,EAA4C,CAA5C,CAA5C,CAPoB,EAQpB,CAAC,0CAAD,EAA4C,CAAC,0CAAD,EAA4C,CAA5C,CAA5C,CARoB;AAUtB,SAAA,qDAAA;oCAAM,gBAAO;MACX,MAAA,GAAS,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,kCAAnB,CAAsD,IAAtD,EAA4D,KAA5D;MACT,IAAA,CAAK,IAAI,CAAC,SAAL,CAAe,CAAE,KAAF,EAAS,MAAT,CAAf,CAAL;MACA,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa,OAAb;AAHF;WAIA,IAAA,CAAA;EAf6D;;EAkB/D,IAAG,CAAA,kCAAA,CAAH,GAA0C,SAAE,CAAF,EAAK,IAAL;AACxC,QAAA;IAAA,mBAAA,GAAsB;MACpB,CAAC,+BAAD,EAAiC,+BAAjC,EAAiE,EAAjE,CADoB,EAEpB;QAAC,iDAAD,EAAmD,mDAAnD,EAAuG;UAAC;YAAC,KAAA,EAAM,UAAP;YAAkB,QAAA,EAAS,IAA3B;YAAgC,KAAA,EAAM,aAAtC;YAAoD,QAAA,EAAS,WAA7D;WAAD;SAAvG;OAFoB,EAGpB,CAAC,mDAAD,EAAqD,mDAArD,EAAyG,EAAzG,CAHoB,EAIpB,CAAC,+BAAD,EAAiC,+BAAjC,EAAiE,EAAjE,CAJoB;;AAMtB,SAAA,qDAAA;oCAAM,gBAAO,uBAAc;MACzB,CAAA,GAAI,IAAI,CAAC,MAAM,CAAC,gBAAZ,CAA6B,EAA7B;MACJ,WAAA,GAAc,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,aAAnB,CAAiC,CAAjC,EAAoC,KAApC;MACd,IAAA,CAAK,IAAI,CAAC,SAAL,CAAe,CAAE,KAAF,EAAS,WAAT,EAAsB,CAAC,CAAC,MAAQ,CAAA,UAAA,CAAhC,CAAf,CAAL;MACA,CAAC,CAAC,EAAF,CAAK,WAAL,EAAkB,YAAlB;MACA,CAAC,CAAC,EAAF,CAAK,CAAC,CAAC,MAAQ,CAAA,UAAA,CAAf,EAA6B,gBAA7B;AALF;WAMA,IAAA,CAAA;EAbwC;;EAgB1C,IAAG,CAAA,yCAAA,CAAH,GAAiD,SAAE,CAAF,EAAK,IAAL;AAC/C,QAAA;IAAA,mBAAA,GAAsB;MACpB,CAAC,sCAAD,EAAwC,sCAAxC,EAA+E,EAA/E,CADoB,EAEpB;QAAC,+BAAD,EAAiC,yBAAjC,EAA2D;UAAC;YAAC,KAAA,EAAM,MAAP;YAAc,QAAA,EAAS,GAAvB;YAA2B,KAAA,EAAM,kBAAjC;YAAoD,QAAA,EAAS,IAA7D;WAAD;SAA3D;OAFoB,EAGpB,CAAC,iCAAD,EAAmC,iCAAnC,EAAqE,EAArE,CAHoB;;AAKtB,SAAA,qDAAA;oCAAM,gBAAO,uBAAc;MACzB,CAAA,GAAI,IAAI,CAAC,MAAM,CAAC,gBAAZ,CAA6B,EAA7B;MACJ,WAAA,GAAc,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,oBAAnB,CAAwC,CAAxC,EAA2C,KAA3C;MACd,IAAA,CAAK,IAAI,CAAC,SAAL,CAAe,CAAE,KAAF,EAAS,WAAT,EAAsB,CAAC,CAAC,MAAQ,CAAA,UAAA,CAAhC,CAAf,CAAL;MACA,CAAC,CAAC,EAAF,CAAK,WAAL,EAAkB,YAAlB;MACA,CAAC,CAAC,EAAF,CAAK,CAAC,CAAC,MAAQ,CAAA,UAAA,CAAf,EAA6B,gBAA7B;AALF;WAMA,IAAA,CAAA;EAZ+C;;EAejD,IAAG,CAAA,kCAAA,CAAH,GAA0C,SAAE,CAAF,EAAK,IAAL;AACxC,QAAA;IAAA,mBAAA,GAAsB;MACpB;QAAC,6CAAD,EAA+C,qEAA/C,EAAqH;UAAC;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,GAA1B;YAA8B,KAAA,EAAM,IAApC;YAAyC,QAAA,EAAS,IAAlD;WAAD,EAAyD;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,GAA1B;YAA8B,KAAA,EAAM,IAApC;YAAyC,QAAA,EAAS,IAAlD;WAAzD;SAArH;OADoB,EAEpB,CAAC,+CAAD,EAAiD,+CAAjD,EAAiG,EAAjG,CAFoB,EAGpB;QAAC,+CAAD,EAAiD,uEAAjD,EAAyH;UAAC;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,GAA1B;YAA8B,KAAA,EAAM,IAApC;YAAyC,QAAA,EAAS,IAAlD;WAAD,EAAyD;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,GAA1B;YAA8B,KAAA,EAAM,IAApC;YAAyC,QAAA,EAAS,IAAlD;WAAzD;SAAzH;OAHoB,EAIpB;QAAC,2CAAD,EAA6C,qEAA7C,EAAmH;UAAC;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,GAA1B;YAA8B,KAAA,EAAM,IAApC;YAAyC,QAAA,EAAS,IAAlD;WAAD,EAAyD;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,GAA1B;YAA8B,KAAA,EAAM,IAApC;YAAyC,QAAA,EAAS,IAAlD;WAAzD;SAAnH;OAJoB,EAKpB,CAAC,6CAAD,EAA+C,6CAA/C,EAA6F,EAA7F,CALoB,EAMpB;QAAC,6CAAD,EAA+C,uEAA/C,EAAuH;UAAC;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,GAA1B;YAA8B,KAAA,EAAM,IAApC;YAAyC,QAAA,EAAS,IAAlD;WAAD,EAAyD;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,GAA1B;YAA8B,KAAA,EAAM,IAApC;YAAyC,QAAA,EAAS,IAAlD;WAAzD;SAAvH;OANoB,EAOpB,CAAC,8CAAD,EAAgD,8CAAhD,EAA+F,EAA/F,CAPoB;;AAStB,SAAA,qDAAA;oCAAM,gBAAO,uBAAc;MACzB,CAAA,GAAI,IAAI,CAAC,MAAM,CAAC,gBAAZ,CAA6B,EAA7B;MACJ,WAAA,GAAc,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,aAAnB,CAAiC,CAAjC,EAAoC,KAApC;MACd,IAAA,CAAK,IAAI,CAAC,SAAL,CAAe,CAAE,KAAF,EAAS,WAAT,EAAsB,CAAC,CAAC,MAAQ,CAAA,UAAA,CAAhC,CAAf,CAAL;MACA,CAAC,CAAC,EAAF,CAAK,WAAL,EAAkB,YAAlB;MACA,CAAC,CAAC,EAAF,CAAK,CAAC,CAAC,MAAQ,CAAA,UAAA,CAAf,EAA6B,gBAA7B;AALF;WAMA,IAAA,CAAA;EAhBwC;;EAmB1C,IAAG,CAAA,kCAAA,CAAH,GAA0C,SAAE,CAAF,EAAK,IAAL;AACxC,QAAA;IAAA,mBAAA,GAAsB;MACpB;QAAC,aAAD,EAAe,qBAAf,EAAqC;UAAC;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,CAAC,QAAD,EAAU,QAAV,CAA1B;YAA8C,KAAA,EAAM,EAApD;YAAuD,QAAA,EAAS,IAAhE;WAAD;SAArC;OADoB,EAEpB;QAAC,gBAAD,EAAkB,qBAAlB,EAAwC;UAAC;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,CAAC,QAAD,EAAU,QAAV,CAA1B;YAA8C,KAAA,EAAM,KAApD;YAA0D,QAAA,EAAS,IAAnE;WAAD;SAAxC;OAFoB,EAGpB;QAAC,sBAAD,EAAwB,qBAAxB,EAA8C;UAAC;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,CAAC,QAAD,EAAU,QAAV,CAA1B;YAA8C,KAAA,EAAM,WAApD;YAAgE,QAAA,EAAS,IAAzE;WAAD;SAA9C;OAHoB,EAIpB;QAAC,wBAAD,EAA0B,2BAA1B,EAAsD;UAAC;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,CAAC,QAAD,EAAU,QAAV,CAA1B;YAA8C,KAAA,EAAM,OAApD;YAA4D,QAAA,EAAS,IAArE;WAAD;SAAtD;OAJoB,EAKpB;QAAC,aAAD,EAAe,qBAAf,EAAqC;UAAC;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,CAAC,OAAD,EAAS,QAAT,CAA1B;YAA6C,KAAA,EAAM,EAAnD;YAAsD,QAAA,EAAS,IAA/D;WAAD;SAArC;OALoB,EAMpB;QAAC,gBAAD,EAAkB,qBAAlB,EAAwC;UAAC;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,CAAC,OAAD,EAAS,QAAT,CAA1B;YAA6C,KAAA,EAAM,KAAnD;YAAyD,QAAA,EAAS,IAAlE;WAAD;SAAxC;OANoB,EAOpB;QAAC,sBAAD,EAAwB,qBAAxB,EAA8C;UAAC;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,CAAC,OAAD,EAAS,QAAT,CAA1B;YAA6C,KAAA,EAAM,WAAnD;YAA+D,QAAA,EAAS,IAAxE;WAAD;SAA9C;OAPoB,EAQpB;QAAC,wBAAD,EAA0B,2BAA1B,EAAsD;UAAC;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,CAAC,OAAD,EAAS,QAAT,CAA1B;YAA6C,KAAA,EAAM,OAAnD;YAA2D,QAAA,EAAS,IAApE;WAAD;SAAtD;OARoB,EASpB;QAAC,mCAAD,EAAqC,2BAArC,EAAiE;UAAC;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,CAAC,OAAD,EAAS,QAAT,CAA1B;YAA6C,KAAA,EAAM,kBAAnD;YAAsE,QAAA,EAAS,IAA/E;WAAD;SAAjE;OAToB,EAUpB;QAAC,mCAAD,EAAqC,2BAArC,EAAiE;UAAC;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,CAAC,OAAD,EAAS,QAAT,CAA1B;YAA6C,KAAA,EAAM,kBAAnD;YAAsE,QAAA,EAAS,IAA/E;WAAD;SAAjE;OAVoB,EAWpB;QAAC,0BAAD,EAA4B,2BAA5B,EAAwD;UAAC;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,CAAC,OAAD,EAAS,IAAT,CAA1B;YAAyC,KAAA,EAAM,OAA/C;YAAuD,QAAA,EAAS,IAAhE;WAAD;SAAxD;OAXoB,EAYpB;QAAC,0BAAD,EAA4B,2BAA5B,EAAwD;UAAC;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,CAAC,QAAD,EAAU,IAAV,CAA1B;YAA0C,KAAA,EAAM,OAAhD;YAAwD,QAAA,EAAS,IAAjE;WAAD;SAAxD;OAZoB,EAapB;QAAC,6BAAD,EAA+B,2BAA/B,EAA2D;UAAC;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,CAAC,OAAD,EAAS,IAAT,CAA1B;YAAyC,KAAA,EAAM,OAA/C;YAAuD,QAAA,EAAS,IAAhE;WAAD;SAA3D;OAboB,EAcpB;QAAC,6BAAD,EAA+B,2BAA/B,EAA2D;UAAC;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,CAAC,QAAD,EAAU,IAAV,CAA1B;YAA0C,KAAA,EAAM,OAAhD;YAAwD,QAAA,EAAS,IAAjE;WAAD;SAA3D;OAdoB,EAepB,CAAC,2BAAD,EAA6B,2BAA7B,EAAyD,EAAzD,CAfoB,EAgBpB,CAAC,2BAAD,EAA6B,2BAA7B,EAAyD,EAAzD,CAhBoB;;AAkBtB,SAAA,qDAAA;oCAAM,gBAAO,uBAAc;MACzB,CAAA,GAAI,IAAI,CAAC,MAAM,CAAC,gBAAZ,CAA6B,EAA7B;MACJ,WAAA,GAAc,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,aAAnB,CAAiC,CAAjC,EAAoC,KAApC;MACd,IAAA,CAAK,IAAI,CAAC,SAAL,CAAe,CAAE,KAAF,EAAS,WAAT,EAAsB,CAAC,CAAC,MAAQ,CAAA,UAAA,CAAhC,CAAf,CAAL;MACA,CAAC,CAAC,EAAF,CAAK,WAAL,EAAkB,YAAlB;MACA,CAAC,CAAC,EAAF,CAAK,CAAC,CAAC,MAAQ,CAAA,UAAA,CAAf,EAA6B,gBAA7B;AALF;WAMA,IAAA,CAAA;EAzBwC;;EA4B1C,IAAG,CAAA,6CAAA,CAAH,GAAqD,SAAE,CAAF,EAAK,IAAL;AACnD,QAAA;IAAA,mBAAA,GAAsB;MACpB;QAAC,wCAAD,EAA0C,oDAA1C,EAA+F;UAAC;YAAC,KAAA,EAAM,UAAP;YAAkB,QAAA,EAAS,GAA3B;YAA+B,KAAA,EAAM,KAArC;YAA2C,QAAA,EAAS,IAApD;WAAD;SAA/F;OADoB,EAEpB;QAAC,wCAAD,EAA0C,kDAA1C,EAA6F;UAAC;YAAC,KAAA,EAAM,QAAP;YAAgB,QAAA,EAAS,GAAzB;YAA6B,KAAA,EAAM,KAAnC;YAAyC,QAAA,EAAS,IAAlD;WAAD;SAA7F;OAFoB,EAGpB,CAAC,0CAAD,EAA4C,0CAA5C,EAAuF,EAAvF,CAHoB,EAIpB,CAAC,0CAAD,EAA4C,0CAA5C,EAAuF,EAAvF,CAJoB,EAKpB,CAAC,iDAAD,EAAmD,iDAAnD,EAAqG,EAArG,CALoB,EAMpB,CAAC,+BAAD,EAAiC,+BAAjC,EAAiE,EAAjE,CANoB;;AAQtB,SAAA,qDAAA;oCAAM,gBAAO,uBAAc;MACzB,CAAA,GAAI,IAAI,CAAC,MAAM,CAAC,gBAAZ,CAA6B,EAA7B;MACJ,WAAA,GAAc,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,wBAAnB,CAA4C,CAA5C,EAA+C,KAA/C;MACd,IAAA,CAAK,IAAI,CAAC,SAAL,CAAe,CAAE,KAAF,EAAS,WAAT,EAAsB,CAAC,CAAC,MAAQ,CAAA,UAAA,CAAhC,CAAf,CAAL;MACA,CAAC,CAAC,EAAF,CAAK,WAAL,EAAkB,YAAlB;MACA,CAAC,CAAC,EAAF,CAAK,CAAC,CAAC,MAAQ,CAAA,UAAA,CAAf,EAA6B,gBAA7B;AALF;WAMA,IAAA,CAAA;EAfmD;;EA+BrD,IAAG,CAAA,sBAAA,CAAH,GAA8B,SAAE,CAAF,EAAK,IAAL;AAC5B,QAAA;IAAA,mBAAA,GAAsB;MAAC;QACrB,yPADqB,EAanB,qNAbmB,EAuBnB;UACE;YAAC,KAAA,EAAM,UAAP;YAAkB,QAAA,EAAS,IAA3B;YAAgC,KAAA,EAAM,aAAtC;YAAoD,QAAA,EAAS,WAA7D;WADF,EAEE;YAAC,KAAA,EAAM,UAAP;YAAkB,QAAA,EAAS,IAA3B;YAAgC,KAAA,EAAM,aAAtC;YAAoD,QAAA,EAAS,WAA7D;WAFF,EAGE;YAAC,KAAA,EAAM,UAAP;YAAkB,QAAA,EAAS,IAA3B;YAAgC,KAAA,EAAM,WAAtC;YAAkD,QAAA,EAAS,WAA3D;WAHF,EAIE;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,CAAC,OAAD,EAAS,QAAT,CAA1B;YAA6C,KAAA,EAAM,WAAnD;YAA+D,QAAA,EAAS,IAAxE;WAJF,EAKE;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,GAA1B;YAA8B,KAAA,EAAM,gBAApC;YAAqD,QAAA,EAAS,IAA9D;WALF,EAME;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,GAA1B;YAA8B,KAAA,EAAM,gBAApC;YAAqD,QAAA,EAAS,IAA9D;WANF,EAOE;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,GAA1B;YAA8B,KAAA,EAAM,gBAApC;YAAqD,QAAA,EAAS,IAA9D;WAPF,EAQE;YAAC,KAAA,EAAM,SAAP;YAAiB,QAAA,EAAS,GAA1B;YAA8B,KAAA,EAAM,gBAApC;YAAqD,QAAA,EAAS,IAA9D;WARF;SAvBmB;OAAD;;AAkCtB,SAAA,qDAAA;oCAAM,gBAAO,uBAAc;MACzB,CAAA,GAAI,IAAI,CAAC,MAAM,CAAC,gBAAZ,CAA6B,EAA7B;MACJ,WAAA,GAAc,IAAI,CAAC,MAAM,CAAC,MAAZ,CAAmB,CAAnB,EAAsB,KAAtB;MAId,CAAC,CAAC,EAAF,CAAK,WAAL,EAA8B,YAA9B;MACA,CAAC,CAAC,EAAF,CAAK,CAAC,CAAC,MAAQ,CAAA,UAAA,CAAf,EAA8B,gBAA9B;AAPF;WAQA,IAAA,CAAA;EA3C4B;;EA8C9B,IAAG,CAAA,mCAAA,CAAH,GAA2C,SAAE,CAAF,EAAK,IAAL;AACzC,QAAA;IAAA,mBAAA,GAAsB,CAAC,CACrB,6PADqB,EAanB,CACE,CAAC,GAAD,EAAK,MAAL,EAAY,qCAAZ,EAAkD,EAAlD,CADF,EAEE,CAAC,GAAD,EAAK,SAAL,EAAe,eAAf,EAA+B,EAA/B,CAFF,EAGE,CAAC,GAAD,EAAK,MAAL,EAAY,gGAAZ,EAA6G,EAA7G,CAHF,EAIE,CAAC,GAAD,EAAK,SAAL,EAAe,eAAf,EAA+B,EAA/B,CAJF,EAKE,CAAC,GAAD,EAAK,MAAL,EAAY,YAAZ,EAAyB,EAAzB,CALF,EAME,CAAC,GAAD,EAAK,SAAL,EAAe,WAAf,EAA2B,EAA3B,CANF,EAOE,CAAC,GAAD,EAAK,MAAL,EAAY,8CAAZ,EAA2D,EAA3D,CAPF,CAbmB,CAAD;AAuBtB;SAAA,qDAAA;oCAAM,oBAAW;MACf,CAAA,GAAU,IAAI,CAAC,MAAM,CAAC,gBAAZ,CAA6B,EAA7B;MACV,KAAA,GAAU,IAAI,CAAC,MAAM,CAAC,MAAZ,CAAmB,CAAnB,EAAsB,SAAtB;MACV,KAAA,GAAU,CAAC,CAAC,gBAAF,CAAmB,KAAnB;MACV,MAAA,GAAU,KACR,CAAC,IADO,CACF,CAAA,CAAE,CAAA,SAAA,KAAA;eAAA,SAAE,IAAF,EAAQ,IAAR;iBACN,IAAA,CAAK,CAAE,GAAF,EAAO,MAAP,EAAe,IAAf,EAAqB,EAArB,CAAL;QADM;MAAA,CAAA,CAAA,CAAA,IAAA,CAAF,CADE;MAGV,CAAC,CAAC,cAAF,CAAiB,MAAjB,EAAyB,CAAE,CAAA,SAAA,KAAA;eAAA,SAAA;iBAAG,IAAI,CAAC,MAAM,CAAC,qBAAZ,CAAkC,CAAlC;QAAH;MAAA,CAAA,CAAA,CAAA,IAAA,CAAF,CAAzB,EAAqE,CAAA,SAAA,KAAA;eAAA,SAAE,KAAF,EAAS,MAAT;AACnE,cAAA;AAAA,eAAA,0CAAA;;YAAA,GAAA,CAAI,GAAG,CAAC,KAAJ,CAAU,IAAI,CAAC,SAAL,CAAe,KAAf,CAAV,CAAJ;AAAA;UACA,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa,OAAb;iBACA,IAAA,CAAA;QAHmE;MAAA,CAAA,CAAA,CAAA,IAAA,CAArE;mBAIA,KAAK,CAAC,MAAN,CAAA;AAXF;;EAxByC;;EAsC3C,IAAG,CAAA,mCAAA,CAAH,GAA2C,SAAE,CAAF,EAAK,IAAL;;AACzC;;;;;AAAA,QAAA;IAIA,mBAAA,GAAsB;MAAC;QACrB,0GADqB,EAMrB;UACE,CAAC,GAAD,EAAK,MAAL,EAAY,sCAAZ,EAAmD,EAAnD,CADF,EAEE;YAAC,GAAD,EAAK,QAAL,EAAc,cAAd,EAA6B;cAAC,MAAA,EAAO,OAAR;cAAgB,UAAA,EAAW,QAA3B;aAA7B;WAFF,EAGE,CAAC,GAAD,EAAK,MAAL,EAAY,KAAZ,EAAkB,EAAlB,CAHF,EAIE;YAAC,GAAD,EAAK,QAAL,EAAc,4BAAd,EAA2C;cAAC,MAAA,EAAO,QAAR;cAAiB,UAAA,EAAW,IAA5B;aAA3C;WAJF;SANqB;OAAD;;AAatB;SAAA,qDAAA;oCAAM,oBAAW;MACf,CAAA,GAAU,IAAI,CAAC,MAAM,CAAC,gBAAZ,CAA6B,EAA7B;MACV,KAAA,GAAU,IAAI,CAAC,MAAM,CAAC,MAAZ,CAAmB,CAAnB,EAAsB,SAAtB;MACV,KAAA,GAAU,CAAC,CAAC,gBAAF,CAAmB,KAAnB;MACV,MAAA,GAAU,KACR,CAAC,IADO,CACF,CAAA,CAAE,CAAA,SAAA,KAAA;eAAA,SAAE,IAAF,EAAQ,IAAR;iBACN,IAAA,CAAK,CAAE,GAAF,EAAO,MAAP,EAAe,IAAf,EAAqB,EAArB,CAAL;QADM;MAAA,CAAA,CAAA,CAAA,IAAA,CAAF,CADE;MAGV,CAAC,CAAC,cAAF,CAAiB,MAAjB,EAAyB,CAAE,CAAA,SAAA,KAAA;eAAA,SAAA;iBAAG,IAAI,CAAC,MAAM,CAAC,qBAAZ,CAAkC,CAAlC;QAAH;MAAA,CAAA,CAAA,CAAA,IAAA,CAAF,CAAzB,EAAqE,CAAA,SAAA,KAAA;eAAA,SAAE,KAAF,EAAS,MAAT;AACnE,cAAA;AAAA,eAAA,0CAAA;;YAAA,GAAA,CAAI,GAAG,CAAC,KAAJ,CAAU,IAAI,CAAC,SAAL,CAAe,KAAf,CAAV,CAAJ;AAAA;UACA,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa,OAAb;iBAEA,IAAA,CAAA;QAJmE;MAAA,CAAA,CAAA,CAAA,IAAA,CAArE;mBAKA,KAAK,CAAC,MAAN,CAAA;AAZF;;EAlByC;;EAiC3C,IAAG,CAAA,gCAAA,CAAH,GAAwC,SAAE,CAAF,EAAK,IAAL;AACtC,QAAA;IAAA,mBAAA,GAAsB,CAAC,CACrB,0EADqB,EAMrB,CACE,CAAC,GAAD,EAAK,MAAL,EAAY,qCAAZ,EAAkD,EAAlD,CADF,EAEE,CAAC,GAAD,EAAK,KAAL,EAAW,WAAX,EAAuB,EAAvB,CAFF,EAGE,CAAC,GAAD,EAAK,MAAL,EAAY,sCAAZ,EAAmD,EAAnD,CAHF,CANqB,CAAD;AAYtB;SAAA,qDAAA;oCAAM,oBAAW;MACf,CAAA,GAAU,IAAI,CAAC,MAAM,CAAC,gBAAZ,CAA6B,EAA7B;MACV,KAAA,GAAU,IAAI,CAAC,MAAM,CAAC,MAAZ,CAAmB,CAAnB,EAAsB,SAAtB;MACV,KAAA,GAAU,CAAC,CAAC,gBAAF,CAAmB,KAAnB;MACV,MAAA,GAAU,KACR,CAAC,IADO,CACF,CAAA,CAAE,CAAA,SAAA,KAAA;eAAA,SAAE,IAAF,EAAQ,IAAR;iBACN,IAAA,CAAK,CAAE,GAAF,EAAO,MAAP,EAAe,IAAf,EAAqB,EAArB,CAAL;QADM;MAAA,CAAA,CAAA,CAAA,IAAA,CAAF,CADE;MAGV,CAAC,CAAC,cAAF,CAAiB,MAAjB,EAAyB,CAAE,CAAA,SAAA,KAAA;eAAA,SAAA;iBAAG,IAAI,CAAC,MAAM,CAAC,kBAAZ,CAA+B,CAA/B;QAAH;MAAA,CAAA,CAAA,CAAA,IAAA,CAAF,CAAzB,EAAkE,CAAA,SAAA,KAAA;eAAA,SAAE,KAAF,EAAS,MAAT;AAChE,cAAA;AAAA,eAAA,0CAAA;;YAAA,GAAA,CAAI,GAAG,CAAC,KAAJ,CAAU,IAAI,CAAC,SAAL,CAAe,KAAf,CAAV,CAAJ;AAAA;UACA,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa,OAAb;iBAEA,IAAA,CAAA;QAJgE;MAAA,CAAA,CAAA,CAAA,IAAA,CAAlE;mBAKA,KAAK,CAAC,MAAN,CAAA;AAZF;;EAbsC;;EA4BxC,IAAG,CAAA,8CAAA,CAAH,GAAsD,SAAE,CAAF,EAAK,IAAL;AACpD,QAAA;IAAA,mBAAA,GAAsB,CAAC,CACrB,2EADqB,EAMrB,CACE,CAAC,GAAD,EAAK,MAAL,EAAY,iCAAZ,EAA8C,EAA9C,CADF,EAEE,CAAC,GAAD,EAAK,SAAL,EAAe,OAAf,EAAuB,EAAvB,CAFF,EAGE,CAAC,GAAD,EAAK,MAAL,EAAY,eAAZ,EAA4B,EAA5B,CAHF,EAIE,CAAC,GAAD,EAAK,OAAL,EAAa,QAAb,EAAsB,EAAtB,CAJF,EAKE,CAAC,GAAD,EAAK,MAAL,EAAY,UAAZ,EAAuB,EAAvB,CALF,CANqB,CAAD;AActB;SAAA,qDAAA;oCAAM,oBAAW;MACf,CAAA,GAAU,IAAI,CAAC,MAAM,CAAC,gBAAZ,CAA6B,EAA7B;MACV,KAAA,GAAU,IAAI,CAAC,MAAM,CAAC,MAAZ,CAAmB,CAAnB,EAAsB,SAAtB;MACV,KAAA,CAAM,QAAN,EAAgB,CAAhB;MACA,KAAA,GAAU,CAAC,CAAC,gBAAF,CAAmB,KAAnB;MACV,MAAA,GAAU,KACR,CAAC,IADO,CACF,CAAA,CAAE,CAAA,SAAA,KAAA;eAAA,SAAE,IAAF,EAAQ,IAAR;iBACN,IAAA,CAAK,CAAE,GAAF,EAAO,MAAP,EAAe,IAAf,EAAqB,EAArB,CAAL;QADM;MAAA,CAAA,CAAA,CAAA,IAAA,CAAF,CADE;MAGV,CAAC,CAAC,cAAF,CAAiB,MAAjB,EAAyB,CAAE,CAAA,SAAA,KAAA;eAAA,SAAA;iBAAG,IAAI,CAAC,MAAM,CAAC,gCAAZ,CAA6C,CAA7C;QAAH;MAAA,CAAA,CAAA,CAAA,IAAA,CAAF,CAAzB,EAAgF,CAAA,SAAA,KAAA;eAAA,SAAE,KAAF,EAAS,MAAT;AAC9E,cAAA;AAAA,eAAA,0CAAA;;YAAA,GAAA,CAAI,GAAG,CAAC,KAAJ,CAAU,IAAI,CAAC,SAAL,CAAe,KAAf,CAAV,CAAJ;AAAA;UACA,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa,OAAb;iBAEA,IAAA,CAAA;QAJ8E;MAAA,CAAA,CAAA,CAAA,IAAA,CAAhF;mBAKA,KAAK,CAAC,MAAN,CAAA;AAbF;;EAfoD;;EAgCtD,IAAG,CAAA,mCAAA,CAAH,GAA2C,SAAE,CAAF,EAAK,IAAL;AACzC,QAAA;IAAA,mBAAA,GAAsB,CAAC,CACrB,yPADqB,EAarB,CACE,CAAC,GAAD,EAAK,gBAAL,EAAsB,IAAtB,EAA2B,EAA3B,CADF,EAEE,CAAC,GAAD,EAAK,MAAL,EAAY,uDAAZ,EAAoE,EAApE,CAFF,EAGE,CAAC,GAAD,EAAK,gBAAL,EAAsB,IAAtB,EAA2B,EAA3B,CAHF,EAIE,CAAC,GAAD,EAAK,MAAL,EAAY,IAAZ,EAAiB,EAAjB,CAJF,EAKE,CAAC,GAAD,EAAK,gBAAL,EAAsB,IAAtB,EAA2B,EAA3B,CALF,EAME,CAAC,GAAD,EAAK,MAAL,EAAY,gHAAZ,EAA6H,EAA7H,CANF,EAOE,CAAC,GAAD,EAAK,gBAAL,EAAsB,IAAtB,EAA2B,EAA3B,CAPF,EAQE,CAAC,GAAD,EAAK,MAAL,EAAY,IAAZ,EAAiB,EAAjB,CARF,CAbqB,CAAD;AAwBtB;SAAA,qDAAA;oCAAM,oBAAW;MACf,CAAA,GAAU,IAAI,CAAC,MAAM,CAAC,gBAAZ,CAA6B,EAA7B;MACV,KAAA,GAAU,IAAI,CAAC,MAAM,CAAC,MAAZ,CAAmB,CAAnB,EAAsB,SAAtB;MACV,KAAA,GAAU,CAAC,CAAC,gBAAF,CAAmB,KAAnB;MACV,MAAA,GAAU,KACR,CAAC,IADO,CACF,CAAA,CAAE,CAAA,SAAA,KAAA;eAAA,SAAE,IAAF,EAAQ,IAAR;iBACN,IAAA,CAAK,CAAE,GAAF,EAAO,MAAP,EAAe,IAAf,EAAqB,EAArB,CAAL;QADM;MAAA,CAAA,CAAA,CAAA,IAAA,CAAF,CADE;MAGV,CAAC,CAAC,cAAF,CAAiB,MAAjB,EAAyB,CAAE,CAAA,SAAA,KAAA;eAAA,SAAA;iBAAG,IAAI,CAAC,MAAM,CAAC,qBAAZ,CAAkC,CAAlC;QAAH;MAAA,CAAA,CAAA,CAAA,IAAA,CAAF,CAAzB,EAAqE,CAAA,SAAA,KAAA;eAAA,SAAE,KAAF,EAAS,MAAT;AACnE,cAAA;AAAA,eAAA,0CAAA;;YAAA,GAAA,CAAI,GAAG,CAAC,KAAJ,CAAU,IAAI,CAAC,SAAL,CAAe,KAAf,CAAV,CAAJ;AAAA;UACA,CAAC,CAAC,EAAF,CAAK,MAAL,EAAa,OAAb;iBAEA,IAAA,CAAA;QAJmE;MAAA,CAAA,CAAA,CAAA,IAAA,CAArE;mBAKA,KAAK,CAAC,MAAN,CAAA;AAZF;;EAzByC;;EAqc3C,IAAC,CAAA,KAAD,GAAS,SAAE,OAAF;WACP,IAAA,CAAK,IAAL,EAAQ;MAAA,SAAA,EAAW,IAAX;KAAR;EADO;;EAKT,IAAO,qBAAP;IACE,IAAC,CAAA,KAAD,CAAA,EADF;;AAz7BA","file":"tests.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\n# eventually                = suspend.eventually\n### TAINT experimentally using `later` in place of `setImmediate` ###\nlater                     = suspend.immediately\n#...........................................................................................................\ntest                      = require 'guy-test'\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nMKTS                      = require './MKTS'\nMKTS_XXX                  = require './mkts-typesetter-interim'\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\nshow_events = ( probe, events ) ->\n  whisper probe\n  echo \"[\"\n  for event in events\n    echo \"    #{JSON.stringify event}\"\n  echo \"    ]\"\n\n#-----------------------------------------------------------------------------------------------------------\ncopy_regex_non_global = ( re ) ->\n  flags = ( if re.ignoreCase then 'i' else '' ) + \\\n          ( if re.multiline  then 'm' else '' ) +\n          ( if re.sticky     then 'y' else '' )\n  return new RegExp re.source, flags\n\n#-----------------------------------------------------------------------------------------------------------\nlist_from_match = ( match ) ->\n  return null unless match?\n  R = Array.from match\n  R.splice 0, 1\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nmatch_first = ( patterns, probe ) ->\n  for pattern in patterns\n    return R if ( R = probe.match pattern )?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nnice_text_rpr = ( text ) ->\n  ### Ad-hoc method to print out text in a readable, CoffeeScript-compatible, triple-quoted way. Line breaks\n  (`\\\\n`) will be shown as line breaks, so texts should not be as spaghettified as they appear with\n  JSON.stringify (the last line break of a string is, however, always shown in its symbolic form so it\n  won't get swallowed by the CoffeeScript parser). Code points below U+0020 (space) are shown as\n  `\\\\x00`-style escapes, taken up less space than `\\u0000` escapes while keeping things explicit. All\n  double quotes will be prepended with a backslash. ###\n  R = text\n  R = R.replace /[\\x00-\\x09\\x0b-\\x19]/g, ( $0 ) ->\n    cid_hex = ( $0.codePointAt 0 ).toString 16\n    cid_hex = '0' + cid_hex if cid_hex.length is 1\n    return \"\\\\x#{cid_hex}\"\n  R = R.replace /\"/g, '\\\\\"'\n  R = R.replace /\\n$/g, '\\\\n'\n  R = '\\n\"\"\"' + R + '\"\"\"'\n  return R\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.MACROS.action_patterns[ 0 ] matches action macro\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [\"<<(.>><<)>>\",[\"\",\".\",\"\",\"\"]]\n    [\"<<(.>>xxx<<)>>\",[\"\",\".\",\"xxx\",\"\"]]\n    [\"<<(.>>some code<<)>>\",[\"\",\".\",\"some code\",\"\"]]\n    [\"abc<<(.>>4 + 3<<)>>def\",[\"c\",\".\",\"4 + 3\",\"\"]]\n    [\"<<(:>><<)>>\",[\"\",\":\",\"\",\"\"]]\n    [\"<<(:>>xxx<<)>>\",[\"\",\":\",\"xxx\",\"\"]]\n    [\"<<(:>>some code<<)>>\",[\"\",\":\",\"some code\",\"\"]]\n    [\"abc<<(:>>4 + 3<<)>>def\",[\"c\",\":\",\"4 + 3\",\"\"]]\n    [\"abc<<(:>>bitfield \\\\>> 1 <<)>>def\",[\"c\",\":\",\"bitfield \\\\>> 1 \",\"\"]]\n    [\"abc<<(:>>bitfield >\\\\> 1 <<)>>def\",[\"c\",\":\",\"bitfield >\\\\> 1 \",\"\"]]\n    [\"abc<<(:js>>4 + 3<<)>>def\",[\"c\",\":js\",\"4 + 3\",\"\"]]\n    [\"abc<<(.js>>4 + 3<<)>>def\",[\"c\",\".js\",\"4 + 3\",\"\"]]\n    [\"abc<<(:js>>4 + 3<<:js)>>def\",[\"c\",\":js\",\"4 + 3\",\":js\"]]\n    [\"abc<<(.js>>4 + 3<<.js)>>def\",[\"c\",\".js\",\"4 + 3\",\".js\"]]\n    [\"abc<<(:js>>4 + 3<<:)>>def\",null]\n    [\"abc<<(.js>>4 + 3<<.)>>def\",null]\n    ]\n  patterns = ( copy_regex_non_global pattern for pattern in MKTS.MACROS.action_patterns )\n  for [ probe, matcher, ] in probes_and_matchers\n    result = list_from_match match_first patterns, probe\n    help JSON.stringify [ probe, result, ]\n    T.eq result, matcher\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.MACROS.bracketed_raw_patterns matches raw macro\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [\"<<<...raw material...>>>\",[\"\",\"<\",\"...raw material...\"]]\n    [\"<<(.>>some code<<)>>\",null]\n    [\"<<<>>>\",[\"\",\"<\",\"\"]]\n    [\"abcdef<<<\\\\XeLaTeX{}>>>ghijklm\",[\"f\",\"<\",\"\\\\XeLaTeX{}\"]]\n    [\"abcdef<<<123\\\\>>>0>>>ghijklm\",[\"f\",\"<\",\"123\\\\>>>0\"]]\n    [\"abcdef\\\\<<<123>>>ghijklm\",null]\n    [\"abcdef<\\\\<<123>>>ghijklm\",null]\n    [\"abcdef<<\\\\<123>>>ghijklm\",null]\n    [\"abcdef<<<123>>\\\\>ghijklm\",null]\n    ]\n  patterns = ( copy_regex_non_global pattern for pattern in MKTS.MACROS.bracketed_raw_patterns )\n  for [ probe, matcher, ] in probes_and_matchers\n    result = list_from_match match_first patterns, probe\n    help JSON.stringify [ probe, result, ]\n    T.eq result, matcher\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.MACROS.command_and_value_patterns matches command macro\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [\"<<!>>\",[\"\",\"!\",\"\"]]\n    [\"<<!name>>\",[\"\",\"!\",\"name\"]]\n    [\"abc<<!name>>def\",[\"c\",\"!\",\"name\"]]\n    [\"abc<<!n>me>>def\",[\"c\",\"!\",\"n>me\"]]\n    [\"abc<<!n>\\\\>me>>def\",[\"c\",\"!\",\"n>\\\\>me\"]]\n    [\"abc<<!n\\\\>me>>def\",[\"c\",\"!\",\"n\\\\>me\"]]\n    [\"abc\\\\<<!nme>>def\",null]\n    [\"<<$>>\",[\"\",\"$\",\"\"]]\n    [\"<<$name>>\",[\"\",\"$\",\"name\"]]\n    [\"abc<<$name>>def\",[\"c\",\"$\",\"name\"]]\n    [\"abc<<$n>me>>def\",[\"c\",\"$\",\"n>me\"]]\n    [\"abc<<$n>\\\\>me>>def\",[\"c\",\"$\",\"n>\\\\>me\"]]\n    [\"abc<<$n\\\\>me>>def\",[\"c\",\"$\",\"n\\\\>me\"]]\n    [\"abc\\\\<<$nme>>def\",null]\n    ]\n  patterns = ( copy_regex_non_global pattern for pattern in MKTS.MACROS.command_and_value_patterns )\n  for [ probe, matcher, ] in probes_and_matchers\n    result = list_from_match match_first patterns, probe\n    help JSON.stringify [ probe, result, ]\n    T.eq result, matcher\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.MACROS.illegal_patterns matches consecutive unescaped LPBs\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [\"helo world\",null]\n    [\"helo \\\\<< world\",null]\n    [\"helo <\\\\< world\",null]\n    [\"helo << world\",[\" \",\"<<\",\" world\"]]\n    ]\n  patterns = ( copy_regex_non_global pattern for pattern in MKTS.MACROS.illegal_patterns )\n  for [ probe, matcher, ] in probes_and_matchers\n    result = list_from_match match_first patterns, probe\n    help JSON.stringify [ probe, result, ]\n    T.eq result, matcher\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.MACROS.end_command_patterns matches end command macro\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [\"some text here <<!end>> and some there\",[\"some text here \"]]\n    [\"some text here <<!end>>\",[\"some text here \"]]\n    [\"<<!end>>\",[\"\"]]\n    [\"\",null]\n    [\"<<!end>> and some there\",[\"\"]]\n    [\"\\\\<<!end>> and some there\",null]\n    [\"some text here \\\\<<!end>> and some there\",null]\n    [\"some text here <<!end>\\\\> and some there\",null]\n    ]\n  patterns = MKTS.MACROS.end_command_patterns\n  for [ probe, matcher, ] in probes_and_matchers\n    result = list_from_match match_first patterns, probe\n    help JSON.stringify [ probe, result, ]\n    T.eq result, matcher\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.MACROS.escape.truncate_text_at_end_command_macro\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [\"some text here <<!end>> and some there\",[\"some text here \",23]]\n    [\"some text here <<!end>>\",[\"some text here \",8]]\n    [\"<<!end>>\",[\"\",8]]\n    [\"\",[\"\",0]]\n    [\"<<!end>> and some there\",[\"\",23]]\n    [\"\\\\<<!end>> and some there\",[\"\\\\<<!end>> and some there\",0]]\n    [\"some text here \\\\<<!end>> and some there\",[\"some text here \\\\<<!end>> and some there\",0]]\n    [\"some text here <<!end>\\\\> and some there\",[\"some text here <<!end>\\\\> and some there\",0]]\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    result = MKTS.MACROS.escape.truncate_text_at_end_command_macro null, probe\n    help JSON.stringify [ probe, result, ]\n    T.eq result, matcher\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.MACROS.escape.html_comments\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [\"some text here and some there\",\"some text here and some there\",[]]\n    [\"some text here<!-- omit this --> and some there\",\"some text here\\u0015comment0\\u0013 and some there\",[{\"key\":\"comment0\",\"markup\":null,\"raw\":\" omit this \",\"parsed\":\"omit this\"}]]\n    [\"some text here\\\\<!-- omit this --> and some there\",\"some text here\\\\<!-- omit this --> and some there\",[]]\n    [\"abcd<<<some raw content>>>efg\",\"abcd<<<some raw content>>>efg\",[]]\n    ]\n  for [ probe, text_matcher, registry_matcher, ] in probes_and_matchers\n    S = MKTS.MACROS.initialize_state {}\n    text_result = MKTS.MACROS.escape.html_comments S, probe\n    help JSON.stringify [ probe, text_result, S.MACROS[ 'registry' ], ]\n    T.eq text_result, text_matcher\n    T.eq S.MACROS[ 'registry' ], registry_matcher\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.MACROS.escape.bracketed_raw_macros\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [\"some text here<<!foo>>and some there\",\"some text here<<!foo>>and some there\",[]]\n    [\"abcd<<<some raw content>>>efg\",\"abcd\\u0015raw0\\u0013efg\",[{\"key\":\"raw0\",\"markup\":\"<\",\"raw\":\"some raw content\",\"parsed\":null}]]\n    [\"abcd\\\\<<<some raw content>>>efg\",\"abcd\\\\<<<some raw content>>>efg\",[]]\n    ]\n  for [ probe, text_matcher, registry_matcher, ] in probes_and_matchers\n    S = MKTS.MACROS.initialize_state {}\n    text_result = MKTS.MACROS.escape.bracketed_raw_macros S, probe\n    help JSON.stringify [ probe, text_result, S.MACROS[ 'registry' ], ]\n    T.eq text_result, text_matcher\n    T.eq S.MACROS[ 'registry' ], registry_matcher\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.MACROS.escape.region_macros\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [\"some text here <<(em>>and some there<<em)>>\",\"some text here \\u0015region0\\u0013and some there\\u0015region1\\u0013\",[{\"key\":\"region0\",\"markup\":\"(\",\"raw\":\"em\",\"parsed\":null},{\"key\":\"region1\",\"markup\":\")\",\"raw\":\"em\",\"parsed\":null}]]\n    [\"some text here \\\\<<(em>>and some there<<em)>>\",\"some text here \\\\<<(em>>and some there<<em)>>\",[]]\n    [\"some text here <<(em>>and some there\\\\<<em)>>\",\"some text here \\u0015region0\\u0013and some there\\\\\\u0015region1\\u0013\",[{\"key\":\"region0\",\"markup\":\"(\",\"raw\":\"em\",\"parsed\":null},{\"key\":\"region1\",\"markup\":\")\",\"raw\":\"em\",\"parsed\":null}]]\n    [\"some text here <<(em>>and some there<<)>>\",\"some text here \\u0015region0\\u0013and some there\\u0015region1\\u0013\",[{\"key\":\"region0\",\"markup\":\"(\",\"raw\":\"em\",\"parsed\":null},{\"key\":\"region1\",\"markup\":\")\",\"raw\":\"em\",\"parsed\":null}]]\n    [\"some text here \\\\<<(em>>and some there<<)>>\",\"some text here \\\\<<(em>>and some there<<)>>\",[]]\n    [\"some text here <<(em>>and some there\\\\<<)>>\",\"some text here \\u0015region0\\u0013and some there\\\\\\u0015region1\\u0013\",[{\"key\":\"region0\",\"markup\":\"(\",\"raw\":\"em\",\"parsed\":null},{\"key\":\"region1\",\"markup\":\")\",\"raw\":\"em\",\"parsed\":null}]]\n    [\"some text here <<(em>>and some there<<foo)>>\",\"some text here <<(em>>and some there<<foo)>>\",[]]\n    ]\n  for [ probe, text_matcher, registry_matcher, ] in probes_and_matchers\n    S = MKTS.MACROS.initialize_state {}\n    text_result = MKTS.MACROS.escape.region_macros S, probe\n    help JSON.stringify [ probe, text_result, S.MACROS[ 'registry' ], ]\n    T.eq text_result, text_matcher\n    T.eq S.MACROS[ 'registry' ], registry_matcher\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.MACROS.escape.action_macros\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [\"<<(.>><<)>>\",\"\\u0015action0\\u0013\",[{\"key\":\"action0\",\"markup\":[\"silent\",\"coffee\"],\"raw\":\"\",\"parsed\":null}]]\n    [\"<<(.>>xxx<<)>>\",\"\\u0015action0\\u0013\",[{\"key\":\"action0\",\"markup\":[\"silent\",\"coffee\"],\"raw\":\"xxx\",\"parsed\":null}]]\n    [\"<<(.>>some code<<)>>\",\"\\u0015action0\\u0013\",[{\"key\":\"action0\",\"markup\":[\"silent\",\"coffee\"],\"raw\":\"some code\",\"parsed\":null}]]\n    [\"abc<<(.>>4 + 3<<)>>def\",\"abc\\u0015action0\\u0013def\",[{\"key\":\"action0\",\"markup\":[\"silent\",\"coffee\"],\"raw\":\"4 + 3\",\"parsed\":null}]]\n    [\"<<(:>><<)>>\",\"\\u0015action0\\u0013\",[{\"key\":\"action0\",\"markup\":[\"vocal\",\"coffee\"],\"raw\":\"\",\"parsed\":null}]]\n    [\"<<(:>>xxx<<)>>\",\"\\u0015action0\\u0013\",[{\"key\":\"action0\",\"markup\":[\"vocal\",\"coffee\"],\"raw\":\"xxx\",\"parsed\":null}]]\n    [\"<<(:>>some code<<)>>\",\"\\u0015action0\\u0013\",[{\"key\":\"action0\",\"markup\":[\"vocal\",\"coffee\"],\"raw\":\"some code\",\"parsed\":null}]]\n    [\"abc<<(:>>4 + 3<<)>>def\",\"abc\\u0015action0\\u0013def\",[{\"key\":\"action0\",\"markup\":[\"vocal\",\"coffee\"],\"raw\":\"4 + 3\",\"parsed\":null}]]\n    [\"abc<<(:>>bitfield \\\\>> 1 <<)>>def\",\"abc\\u0015action0\\u0013def\",[{\"key\":\"action0\",\"markup\":[\"vocal\",\"coffee\"],\"raw\":\"bitfield \\\\>> 1 \",\"parsed\":null}]]\n    [\"abc<<(:>>bitfield >\\\\> 1 <<)>>def\",\"abc\\u0015action0\\u0013def\",[{\"key\":\"action0\",\"markup\":[\"vocal\",\"coffee\"],\"raw\":\"bitfield >\\\\> 1 \",\"parsed\":null}]]\n    [\"abc<<(:js>>4 + 3<<)>>def\",\"abc\\u0015action0\\u0013def\",[{\"key\":\"action0\",\"markup\":[\"vocal\",\"js\"],\"raw\":\"4 + 3\",\"parsed\":null}]]\n    [\"abc<<(.js>>4 + 3<<)>>def\",\"abc\\u0015action0\\u0013def\",[{\"key\":\"action0\",\"markup\":[\"silent\",\"js\"],\"raw\":\"4 + 3\",\"parsed\":null}]]\n    [\"abc<<(:js>>4 + 3<<:js)>>def\",\"abc\\u0015action0\\u0013def\",[{\"key\":\"action0\",\"markup\":[\"vocal\",\"js\"],\"raw\":\"4 + 3\",\"parsed\":null}]]\n    [\"abc<<(.js>>4 + 3<<.js)>>def\",\"abc\\u0015action0\\u0013def\",[{\"key\":\"action0\",\"markup\":[\"silent\",\"js\"],\"raw\":\"4 + 3\",\"parsed\":null}]]\n    [\"abc<<(:js>>4 + 3<<:)>>def\",\"abc<<(:js>>4 + 3<<:)>>def\",[]]\n    [\"abc<<(.js>>4 + 3<<.)>>def\",\"abc<<(.js>>4 + 3<<.)>>def\",[]]\n    ]\n  for [ probe, text_matcher, registry_matcher, ] in probes_and_matchers\n    S = MKTS.MACROS.initialize_state {}\n    text_result = MKTS.MACROS.escape.action_macros S, probe\n    help JSON.stringify [ probe, text_result, S.MACROS[ 'registry' ], ]\n    T.eq text_result, text_matcher\n    T.eq S.MACROS[ 'registry' ], registry_matcher\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.MACROS.escape.command_and_value_macros\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [\"some text here <<!foo>> and some there\",\"some text here \\u0015command0\\u0013 and some there\",[{\"key\":\"command0\",\"markup\":\"!\",\"raw\":\"foo\",\"parsed\":null}]]\n    [\"some text here <<$foo>> and some there\",\"some text here \\u0015value0\\u0013 and some there\",[{\"key\":\"value0\",\"markup\":\"$\",\"raw\":\"foo\",\"parsed\":null}]]\n    [\"some text here \\\\<<!foo>> and some there\",\"some text here \\\\<<!foo>> and some there\",[]]\n    [\"some text here \\\\<<$foo>> and some there\",\"some text here \\\\<<$foo>> and some there\",[]]\n    [\"some text here<!-- omit this --> and some there\",\"some text here<!-- omit this --> and some there\",[]]\n    [\"abcd<<<some raw content>>>efg\",\"abcd<<<some raw content>>>efg\",[]]\n    ]\n  for [ probe, text_matcher, registry_matcher, ] in probes_and_matchers\n    S = MKTS.MACROS.initialize_state {}\n    text_result = MKTS.MACROS.escape.command_and_value_macros S, probe\n    help JSON.stringify [ probe, text_result, S.MACROS[ 'registry' ], ]\n    T.eq text_result, text_matcher\n    T.eq S.MACROS[ 'registry' ], registry_matcher\n  done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.MACROS.escape 1\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [\"<<(multi-column 3>>\\nsome text here<!-- omit this --> and some there\\n<<)>>\\n<<(multi-column 2>>\\nThis text will appear in two-column<!-- omit this --> layout.\\n<!--some code-->\\n<<(:>>some code<<)>>\\n<<)>>\\n<<!end>>\\n<<!command>><<(:action>><<)>>\",\"\\u0015region4\\u0013\\nsome text here\\u0015comment0\\u0013 and some there\\n\\u0015region5\\u0013\\n\\u0015region6\\u0013\\nThis text will appear in two-column\\u0015comment1\\u0013 layout.\\n\\u0015comment2\\u0013\\n\\u0015action3\\u0013\\n\\u0015region7\\u0013\\n\",[{\"key\":\"comment0\",\"markup\":null,\"raw\":\" omit this \",\"parsed\":\"omit this\"},{\"key\":\"comment1\",\"markup\":null,\"raw\":\" omit this \",\"parsed\":\"omit this\"},{\"key\":\"comment2\",\"markup\":null,\"raw\":\"some code\",\"parsed\":\"some code\"},{\"key\":\"action3\",\"markup\":[\"vocal\",\"coffee\"],\"raw\":\"some code\",\"parsed\":null},{\"key\":\"region4\",\"markup\":\"multi-column 3\",\"raw\":\"<<(multi-column 3>>\",\"parsed\":null},{\"key\":\"region5\",\"markup\":\"multi-column 3\",\"raw\":\"<<)>>\",\"parsed\":null},{\"key\":\"region6\",\"markup\":\"multi-column 2\",\"raw\":\"<<(multi-column 2>>\",\"parsed\":null},{\"key\":\"region7\",\"markup\":\"multi-column 2\",\"raw\":\"<<)>>\",\"parsed\":null}]]\n#     ]\n#   for [ probe, text_matcher, registry_matcher, ] in probes_and_matchers\n#     S = MKTS.MACROS.initialize_state {}\n#     text_result = MKTS.MACROS.escape S, probe\n#     help JSON.stringify [ probe, text_result, S.MACROS[ 'registry' ], ]\n#     T.eq text_result, text_matcher\n#     T.eq S.MACROS[ 'registry' ], registry_matcher\n#   done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.MACROS.escape 2\" ] = ( T, done ) ->\n  probes_and_matchers = [[\n    \"\"\"<<(multi-column 3>>\n      some text here<!-- omit this --> and some there\n      <<)>>\n      <<(multi-column 2>>\n      This text will appear in two-column<!-- omit this --> layout.\n      <!--some code-->\n      <<(:>>some code<<)>>\n      <<)>>\n      <<!end>>\n      <<!command>><<(:action>><<)>>\n      \"\"\"\n    ,\n      \"\"\"\\x15region4\\x13\n      some text here\\x15comment0\\x13 and some there\n      \\x15region5\\x13\n      \\x15region6\\x13\n      This text will appear in two-column\\x15comment1\\x13 layout.\n      \\x15comment2\\x13\n      \\x15action3\\x13\n      \\x15region7\\x13\\n\n      \"\"\"\n    ,\n      [\n        {\"key\":\"comment0\",\"markup\":null,\"raw\":\" omit this \",\"parsed\":\"omit this\"}\n        {\"key\":\"comment1\",\"markup\":null,\"raw\":\" omit this \",\"parsed\":\"omit this\"}\n        {\"key\":\"comment2\",\"markup\":null,\"raw\":\"some code\",\"parsed\":\"some code\"}\n        {\"key\":\"action3\",\"markup\":[\"vocal\",\"coffee\"],\"raw\":\"some code\",\"parsed\":null}\n        {\"key\":\"region4\",\"markup\":\"(\",\"raw\":\"multi-column 3\",\"parsed\":null}\n        {\"key\":\"region5\",\"markup\":\")\",\"raw\":\"multi-column 3\",\"parsed\":null}\n        {\"key\":\"region6\",\"markup\":\"(\",\"raw\":\"multi-column 2\",\"parsed\":null}\n        {\"key\":\"region7\",\"markup\":\")\",\"raw\":\"multi-column 2\",\"parsed\":null}\n        ]\n      ]]\n  for [ probe, text_matcher, registry_matcher, ] in probes_and_matchers\n    S = MKTS.MACROS.initialize_state {}\n    text_result = MKTS.MACROS.escape S, probe\n    # help JSON.stringify entry for entry in S.MACROS[ 'registry' ]\n    # urge nice_text_rpr probe\n    # info nice_text_rpr text_result\n    T.eq text_result,             text_matcher\n    T.eq S.MACROS[ 'registry' ],  registry_matcher\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.MACROS.$expand_html_comments\" ] = ( T, done ) ->\n  probes_and_matchers = [[\n    \"\"\"<<(multi-column 3>>\n      some text here<!-- omit this 1 --> and some there\n      <<)>>\n      <<(multi-column 2>>\n      This text will appear in two-column<!-- omit this 2 --> layout.\n      <!--some code-->\n      <<(:>>some code<<)>>\n      <<)>>\n      <<!end>>\n      <<!command>><<(:action>><<)>>\n      \"\"\"\n    ,\n      [\n        [\".\",\"text\",\"\\u0015region4\\u0013\\nsome text here\",{}]\n        [\".\",\"comment\",\" omit this 1 \",{}]\n        [\".\",\"text\",\" and some there\\n\\u0015region5\\u0013\\n\\u0015region6\\u0013\\nThis text will appear in two-column\",{}]\n        [\".\",\"comment\",\" omit this 2 \",{}]\n        [\".\",\"text\",\" layout.\\n\",{}]\n        [\".\",\"comment\",\"some code\",{}]\n        [\".\",\"text\",\"\\n\\u0015action3\\u0013\\n\\u0015region7\\u0013\\n\",{}]\n      ]\n      ]]\n  for [ pre_probe, matcher, ] in probes_and_matchers\n    S       = MKTS.MACROS.initialize_state {}\n    probe   = MKTS.MACROS.escape S, pre_probe\n    input   = D.stream_from_text probe\n    stream  = input\n      .pipe $ ( text, send ) =>\n        send [ '.', 'text', text, {}, ]\n    D.call_transform stream, ( => MKTS.MACROS.$expand_html_comments S ), ( error, result ) =>\n      log CND.white JSON.stringify event for event in result\n      T.eq result, matcher\n      done()\n    input.resume()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.MACROS.$expand_action_macros\" ] = ( T, done ) ->\n  ### TAINT NB Here, `<<(multi-column 3>>` does *not* get parsed / escaped because it lacks a suitable\n  counterpart and the escape pattern catches the entire region (start macro tag, content, stop macro tag)\n  or else nothing. It could be argues that it'd be better to parse start and stop tags separately,\n  and do the appropriate matching only later down the stream. ###\n  probes_and_matchers = [[\n    \"\"\"<<(multi-column 3>>\n      some text with <<(:>>vocal action<<)>>.\n      <<(.js>>and( \"a silent action\" )<<.js)>>\n      \"\"\"\n  ,\n    [\n      [\".\",\"text\",\"<<(multi-column 3>>\\nsome text with \",{}]\n      [\".\",\"action\",\"vocal action\",{\"mode\":\"vocal\",\"language\":\"coffee\"}]\n      [\".\",\"text\",\".\\n\",{}]\n      [\".\",\"action\",\"and( \\\"a silent action\\\" )\",{\"mode\":\"silent\",\"language\":\"js\"}]\n      ]\n    ]]\n  for [ pre_probe, matcher, ] in probes_and_matchers\n    S       = MKTS.MACROS.initialize_state {}\n    probe   = MKTS.MACROS.escape S, pre_probe\n    input   = D.stream_from_text probe\n    stream  = input\n      .pipe $ ( text, send ) =>\n        send [ '.', 'text', text, {}, ]\n    D.call_transform stream, ( => MKTS.MACROS.$expand_action_macros S ), ( error, result ) =>\n      log CND.white JSON.stringify event for event in result\n      T.eq result, matcher\n      # T.fail \"not ready\"\n      done()\n    input.resume()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.MACROS.$expand_raw_macros\" ] = ( T, done ) ->\n  probes_and_matchers = [[\n    \"\"\"<<(multi-column 3>>\n      some text here<<<\\\\LaTeX{}>>> and some there\n      <<)>>\n      \"\"\"\n  ,\n    [\n      [\".\",\"text\",\"\\u0015region1\\u0013\\nsome text here\",{}]\n      [\".\",\"raw\",\"\\\\LaTeX{}\",{}]\n      [\".\",\"text\",\" and some there\\n\\u0015region2\\u0013\",{}]\n      ]\n    ]]\n  for [ pre_probe, matcher, ] in probes_and_matchers\n    S       = MKTS.MACROS.initialize_state {}\n    probe   = MKTS.MACROS.escape S, pre_probe\n    input   = D.stream_from_text probe\n    stream  = input\n      .pipe $ ( text, send ) =>\n        send [ '.', 'text', text, {}, ]\n    D.call_transform stream, ( => MKTS.MACROS.$expand_raw_macros S ), ( error, result ) =>\n      log CND.white JSON.stringify event for event in result\n      T.eq result, matcher\n      # T.fail \"not ready\"\n      done()\n    input.resume()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.MACROS.$expand_command_and_value_macros\" ] = ( T, done ) ->\n  probes_and_matchers = [[\n    \"\"\"<<(multi-column 3>>\n      a command <<!LATEX>> and a value <<$pagenr>>.\n      <<)>>\n      \"\"\"\n  ,\n    [\n      [\".\",\"text\",\"<<(multi-column 3>>\\na command \",{}]\n      [\".\",\"command\",\"LATEX\",{}]\n      [\".\",\"text\",\" and a value \",{}]\n      [\".\",\"value\",\"pagenr\",{}]\n      [\".\",\"text\",\".\\n<<)>>\",{}]\n      ]\n    ]]\n  for [ pre_probe, matcher, ] in probes_and_matchers\n    S       = MKTS.MACROS.initialize_state {}\n    probe   = MKTS.MACROS.escape S, pre_probe\n    debug '©ΖΡΤΣΓ', S\n    input   = D.stream_from_text probe\n    stream  = input\n      .pipe $ ( text, send ) =>\n        send [ '.', 'text', text, {}, ]\n    D.call_transform stream, ( => MKTS.MACROS.$expand_command_and_value_macros S ), ( error, result ) =>\n      log CND.white JSON.stringify event for event in result\n      T.eq result, matcher\n      # T.fail \"not ready\"\n      done()\n    input.resume()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.MACROS.$expand_region_macros\" ] = ( T, done ) ->\n  probes_and_matchers = [[\n    \"\"\"<<(multi-column 3>>\n      some text here<!-- omit this --> and some there\n      <<)>>\n      <<(multi-column 2>>\n      This text will appear in two-column<!-- omit this --> layout.\n      <!--some code-->\n      <<(:>>some code<<)>>\n      <<)>>\n      <<!end>>\n      <<!command>><<(:action>><<)>>\n      \"\"\"\n  ,\n    [\n      [\"(\",\"multi-column 3\",null,{}]\n      [\".\",\"text\",\"\\nsome text here\\u0015comment0\\u0013 and some there\\n\",{}]\n      [\")\",\"multi-column 3\",null,{}]\n      [\".\",\"text\",\"\\n\",{}]\n      [\"(\",\"multi-column 2\",null,{}]\n      [\".\",\"text\",\"\\nThis text will appear in two-column\\u0015comment1\\u0013 layout.\\n\\u0015comment2\\u0013\\n\\u0015action3\\u0013\\n\",{}]\n      [\")\",\"multi-column 2\",null,{}]\n      [\".\",\"text\",\"\\n\",{}]\n      ]\n    ]]\n  for [ pre_probe, matcher, ] in probes_and_matchers\n    S       = MKTS.MACROS.initialize_state {}\n    probe   = MKTS.MACROS.escape S, pre_probe\n    input   = D.stream_from_text probe\n    stream  = input\n      .pipe $ ( text, send ) =>\n        send [ '.', 'text', text, {}, ]\n    D.call_transform stream, ( => MKTS.MACROS.$expand_region_macros S ), ( error, result ) =>\n      log CND.white JSON.stringify event for event in result\n      T.eq result, matcher\n      # T.fail \"not ready\"\n      done()\n    input.resume()\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.FENCES.parse accepts dot patterns\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [ '.',     [ '.', null,   null, ], ]\n#     [ '.p',    [ '.', 'p',    null, ], ]\n#     [ '.text', [ '.', 'text', null, ], ]\n#     ]\n#   for [ probe, matcher, ] in probes_and_matchers\n#     # help ( rpr probe ), MKTS.FENCES.parse probe\n#     T.eq ( MKTS.FENCES.parse probe ), matcher\n#   done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.FENCES.parse accepts empty fenced patterns\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [ '<>', [ '<', null, '>', ], ]\n#     [ '{}', [ '{', null, '}', ], ]\n#     [ '[]', [ '[', null, ']', ], ]\n#     [ '()', [ '(', null, ')', ], ]\n#     ]\n#   for [ probe, matcher, ] in probes_and_matchers\n#     # help ( rpr probe ), MKTS.FENCES.parse probe\n#     T.eq ( MKTS.FENCES.parse probe ), matcher\n#   done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.FENCES.parse accepts unfenced named patterns\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [ 'document',       [ null, 'document',     null, ], ]\n#     [ 'singlecolumn',   [ null, 'singlecolumn', null, ], ]\n#     [ 'code',           [ null, 'code',         null, ], ]\n#     [ 'blockquote',     [ null, 'blockquote',   null, ], ]\n#     [ 'em',             [ null, 'em',           null, ], ]\n#     [ 'xxx',            [ null, 'xxx',          null, ], ]\n#     ]\n#   for [ probe, matcher, ] in probes_and_matchers\n#     # help ( rpr probe ), MKTS.FENCES.parse probe\n#     T.eq ( MKTS.FENCES.parse probe ), matcher\n#   done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.FENCES.parse accepts fenced named patterns\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [ '<document>',     [ '<', 'document',     '>', ], ]\n#     [ '{singlecolumn}', [ '{', 'singlecolumn', '}', ], ]\n#     [ '{code}',         [ '{', 'code',         '}', ], ]\n#     [ '[blockquote]',   [ '[', 'blockquote',   ']', ], ]\n#     [ '(em)',           [ '(', 'em',           ')', ], ]\n#     ]\n#   for [ probe, matcher, ] in probes_and_matchers\n#     # help ( rpr probe ), MKTS.FENCES.parse probe\n#     T.eq ( MKTS.FENCES.parse probe ), matcher\n#   done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.FENCES.parse rejects empty string\" ] = ( T, done ) ->\n#   T.throws \"pattern must be non-empty, got ''\", ( -> MKTS.FENCES.parse '' )\n#   done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.FENCES.parse rejects non-matching fences etc\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [ '(xxx}',  'fences don\\'t match in pattern \\'(xxx}\\'',          ]\n#     [ '.)',     'fence \\'.\\' can not have right fence, got \\'.)\\'',  ]\n#     [ '.p)',    'fence \\'.\\' can not have right fence, got \\'.p)\\'', ]\n#     [ '.[',     'fence \\'.\\' can not have right fence, got \\'.[\\'',  ]\n#     [ '<',      'unmatched fence in \\'<\\'',                          ]\n#     [ '{',      'unmatched fence in \\'{\\'',                          ]\n#     [ '[',      'unmatched fence in \\'[\\'',                          ]\n#     [ '(',      'unmatched fence in \\'(\\'',                          ]\n#     ]\n#   for [ probe, matcher, ] in probes_and_matchers\n#     T.throws matcher, ( -> MKTS.FENCES.parse probe )\n#   done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.FENCES.parse accepts non-matching fences when so configured\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [ '<document>',     [ '<', 'document',     '>', ], ]\n#     [ '{singlecolumn}', [ '{', 'singlecolumn', '}', ], ]\n#     [ '{code}',         [ '{', 'code',         '}', ], ]\n#     [ '[blockquote]',   [ '[', 'blockquote',   ']', ], ]\n#     [ '(em)',           [ '(', 'em',           ')', ], ]\n#     [ 'document>',      [ null, 'document',     '>', ], ]\n#     [ 'singlecolumn}',  [ null, 'singlecolumn', '}', ], ]\n#     [ 'code}',          [ null, 'code',         '}', ], ]\n#     [ 'blockquote]',    [ null, 'blockquote',   ']', ], ]\n#     [ 'em)',            [ null, 'em',           ')', ], ]\n#     [ '<document',      [ '<', 'document',     null, ], ]\n#     [ '{singlecolumn',  [ '{', 'singlecolumn', null, ], ]\n#     [ '{code',          [ '{', 'code',         null, ], ]\n#     [ '[blockquote',    [ '[', 'blockquote',   null, ], ]\n#     [ '(em',            [ '(', 'em',           null, ], ]\n#     ]\n#   for [ probe, matcher, ] in probes_and_matchers\n#     # help ( rpr probe ), MKTS.FENCES.parse probe\n#     T.eq ( MKTS.FENCES.parse probe, symmetric: no ), matcher\n#   done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.TRACKER.new_tracker (short comprehensive test)\" ] = ( T, done ) ->\n#   track = MKTS.TRACKER.new_tracker '(code)', '{multi-column}'\n#   probes_and_matchers = [\n#     [ [ '<', 'document',     ], [  no,  no, ], ]\n#     [ [ '{', 'multi-column', ], [  no, yes, ], ]\n#     [ [ '(', 'code',         ], [ yes, yes, ], ]\n#     [ [ '{', 'multi-column', ], [ yes, yes, ], ]\n#     [ [ '.', 'text',         ], [ yes, yes, ], ]\n#     [ [ '}', 'multi-column', ], [ yes, yes, ], ]\n#     [ [ ')', 'code',         ], [  no, yes, ], ]\n#     [ [ '}', 'multi-column', ], [  no,  no, ], ]\n#     [ [ '>', 'document',     ], [  no,  no, ], ]\n#     ]\n#   for [ probe, matcher, ] in probes_and_matchers\n#     track probe\n#     whisper probe\n#     help '(code):', ( track.within '(code)' ), '{multi-column}:', ( track.within '{multi-column}' )\n#     T.eq ( track.within '(code)'          ), matcher[ 0 ]\n#     T.eq ( track.within '{multi-column}'  ), matcher[ 1 ]\n#   done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.mkts_events_from_md (1)\" ] = ( T, done ) ->\n#   # settings  = bare: yes\n#   probe     = \"\"\"`<<($>>eval block<<$)>>`\"\"\"\n#   warn \"should merge texts\"\n#   matcher   = [\n#     [\"<\",\"document\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     [\"(\",\"code\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"text\",\"<<($>>\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"text\",\"eval block\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"text\",\"<<$)>>\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\")\",\"code\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"p\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     [\">\",\"document\",null,{}]\n#     ]\n#   step ( resume ) =>\n#     result = yield MKTS.mkts_events_from_md probe, resume\n#     show_events probe, result\n#     T.eq matcher, result\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.mkts_events_from_md (2)\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"`<<($>>eval block<<$)>>`\"\"\"\n#   warn \"should merge texts\"\n#   matcher   = [\n#     [\"(\",\"code\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"text\",\"<<($>>\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"text\",\"eval block\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"text\",\"<<$)>>\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\")\",\"code\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"p\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     ]\n#   step ( resume ) =>\n#     result = yield MKTS.mkts_events_from_md probe, settings, resume\n#     # show_events probe, result\n#     T.eq matcher, result\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.mkts_events_from_md (3)\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"`<<(\\\\$>>eval block<<\\\\$)>>`\"\"\"\n#   warn \"should merge texts\"\n#   matcher   = [\n#     [\"(\",\"code\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"text\",\"<<(\\\\$>>\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"text\",\"eval block\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"text\",\"<<\\\\$)>>\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\")\",\"code\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"`\"}]\n#     [\".\",\"p\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     ]\n#   step ( resume ) =>\n#     result = yield MKTS.mkts_events_from_md probe, settings, resume\n#     # show_events probe, result\n#     T.eq matcher, result\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.mkts_events_from_md (4)\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"<<!end>>\"\"\"\n#   warn \"match remark?\"\n#   matcher   = [\n#     [\"!\",\"end\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\",\"stamped\":true}]\n#     [\"#\",\"info\",\"encountered `<<!end>>` on line #1\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\",\"stamped\":true,\"badge\":\"$process_end_command\"}]\n#     ]\n#   step ( resume ) =>\n#     result = yield MKTS.mkts_events_from_md probe, settings, resume\n#     # show_events probe, result\n#     T.eq matcher, result\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.mkts_events_from_md (5)\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"<<!multi-column>>\"\"\"\n#   warn \"should not contain `.p`\"\n#   matcher   = [\n#     [\"!\",\"multi-column\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     [\".\",\"p\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     ]\n#   step ( resume ) =>\n#     result = yield MKTS.mkts_events_from_md probe, settings, resume\n#     # show_events probe, result\n#     T.eq matcher, result\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.mkts_events_from_md (6)\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"\n#     aaa\n#     <<(multi-column>>\n#     bbb\n#     <<multi-column)>>\n#     ccc\n#     \"\"\"\n#   warn \"missing `.p` inside `(multi-column)`\"\n#   matcher   = [\n#     [\".\",\"text\",\"aaa\\n\",{\"line_nr\":1,\"col_nr\":6,\"markup\":\"\"}]\n#     [\"(\",\"multi-column\",null,{\"line_nr\":1,\"col_nr\":6,\"markup\":\"\"}]\n#     [\".\",\"text\",\"\\nbbb\\n\",{\"line_nr\":1,\"col_nr\":6,\"markup\":\"\"}]\n#     [\")\",\"multi-column\",null,{\"line_nr\":1,\"col_nr\":6,\"markup\":\"\"}]\n#     [\".\",\"text\",\"\\nccc\",{\"line_nr\":1,\"col_nr\":6,\"markup\":\"\"}]\n#     [\".\",\"p\",null,{\"line_nr\":1,\"col_nr\":6,\"markup\":\"\"}]\n#     ]\n#   step ( resume ) =>\n#     result = yield MKTS.mkts_events_from_md probe, settings, resume\n#     # show_events probe, result\n#     T.eq matcher, result\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.mkts_events_from_md (7)\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"\n#     她說：「你好。」\n#     \"\"\"\n#   # warn \"missing `.p` inside `(multi-column)`\"\n#   matcher   = [\n#     [\".\",\"text\",\"她說：「你好。」\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     [\".\",\"p\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     ]\n#   step ( resume ) =>\n#     result = yield MKTS.mkts_events_from_md probe, settings, resume\n#     # show_events probe, result\n#     T.eq matcher, result\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.mkts_events_from_md (8)\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"\n#     A paragraph with *emphasis*.\n\n#     A paragraph with **bold text**.\n#     \"\"\"\n#   # warn \"missing `.p` inside `(multi-column)`\"\n#   matcher   = [\n#     [\".\",\"text\",\"A paragraph with \",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     [\"(\",\"em\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"*\"}]\n#     [\".\",\"text\",\"emphasis\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     [\")\",\"em\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"*\"}]\n#     [\".\",\"text\",\".\",{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     [\".\",\"p\",null,{\"line_nr\":1,\"col_nr\":2,\"markup\":\"\"}]\n#     [\".\",\"text\",\"A paragraph with \",{\"line_nr\":3,\"col_nr\":4,\"markup\":\"\"}]\n#     [\"(\",\"strong\",null,{\"line_nr\":3,\"col_nr\":4,\"markup\":\"**\"}]\n#     [\".\",\"text\",\"bold text\",{\"line_nr\":3,\"col_nr\":4,\"markup\":\"\"}]\n#     [\")\",\"strong\",null,{\"line_nr\":3,\"col_nr\":4,\"markup\":\"**\"}]\n#     [\".\",\"text\",\".\",{\"line_nr\":3,\"col_nr\":4,\"markup\":\"\"}]\n#     [\".\",\"p\",null,{\"line_nr\":3,\"col_nr\":4,\"markup\":\"\"}]\n#     ]\n#   step ( resume ) =>\n#     result = yield MKTS.mkts_events_from_md probe, settings, resume\n#     # show_events probe, result\n#     T.eq matcher, result\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.mkts_events_from_md: footnotes\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"\n#     Here is an inline footnote^[whose text appears at the point of insertion],\n#     followed by a referenced footnote[^1].\n\n#     [^1]: Referenced footnotes must use matching references.\n#     \"\"\"\n#   # warn \"missing `.p` inside `(multi-column)`\"\n#   matcher   = [\n#     [\".\",\"text\",\"Here is an inline footnote\",{\"line_nr\":1,\"col_nr\":3,\"markup\":\"\"}]\n#     [\"(\",\"footnote\",0,{\"line_nr\":1,\"col_nr\":3,\"markup\":\"\"}]\n#     [\".\",\"text\",\"whose text appears at the point of insertion\",{\"line_nr\":1,\"col_nr\":3,\"markup\":\"\"}]\n#     [\".\",\"p\",null,{\"line_nr\":1,\"col_nr\":3,\"markup\":\"\"}]\n#     [\")\",\"footnote\",0,{\"line_nr\":1,\"col_nr\":3,\"markup\":\"\"}]\n#     [\".\",\"text\",\",\\nfollowed by a referenced footnote\",{\"line_nr\":1,\"col_nr\":3,\"markup\":\"\"}]\n#     [\"(\",\"footnote\",1,{\"line_nr\":1,\"col_nr\":3,\"markup\":\"\"}]\n#     [\".\",\"text\",\"Referenced footnotes must use matching references.\",{\"line_nr\":4,\"col_nr\":5,\"markup\":\"\"}]\n#     [\".\",\"p\",null,{\"line_nr\":4,\"col_nr\":5,\"markup\":\"\"}]\n#     [\")\",\"footnote\",1,{\"line_nr\":1,\"col_nr\":3,\"markup\":\"\"}]\n#     [\".\",\"text\",\".\",{\"line_nr\":1,\"col_nr\":3,\"markup\":\"\"}]\n#     [\".\",\"p\",null,{\"line_nr\":1,\"col_nr\":3,\"markup\":\"\"}]\n#     ]\n#   step ( resume ) =>\n#     result = yield MKTS.mkts_events_from_md probe, settings, resume\n#     # show_events probe, result\n#     T.eq matcher, result\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS_XXX.tex_from_md (1)\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"\n#     A paragraph with *emphasis*.\n\n#     A paragraph with **bold text**.\n#     \"\"\"\n#   # warn \"missing `.p` inside `(multi-column)`\"\n#   matcher   = \"\"\"\n#     % begin of MD document\n#     A paragraph with {\\\\mktsStyleItalic{}emphasis\\\\/}.\\\\mktsShowpar\\\\par\n#     A paragraph with {\\\\mktsStyleBold{}bold text}.\\\\mktsShowpar\\\\par\n\n#     % end of MD document\n\n#     \"\"\"\n#   step ( resume ) =>\n#     result = yield MKTS_XXX.tex_from_md probe, settings, resume\n#     echo result\n#     T.eq matcher.trim(), result.trim()\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS_XXX.mktscript_from_md (1)\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"\n#     A paragraph with *emphasis*.\n\n#     A paragraph with **bold text**.\n\n#     Using <foo>HTML tags **inhibits** MD syntax</foo>.\n#     \"\"\"\n#   # warn \"missing `.p` inside `(multi-column)`\"\n#   matcher   = \"\"\"\n#     1 █ (document\n#     1 █ .text 'A paragraph with '\n#     1 █ (em\n#     1 █ .text 'emphasis'\n#     1 █ )em\n#     1 █ .text '.'\n#     1 █ .p\n#     3 █ .text 'A paragraph with '\n#     3 █ (strong\n#     3 █ .text 'bold text'\n#     3 █ )strong\n#     3 █ .text '.'\n#     3 █ .p\n#     5 █ .text 'Using '\n#     5 █ (foo\n#     5 █ .text 'HTML tags '\n#     5 █ (strong\n#     5 █ .text 'inhibits'\n#     5 █ )strong\n#     5 █ .text ' MD syntax'\n#     5 █ )foo\n#     5 █ .text '.'\n#     5 █ .p\n#     )document\n#     # EOF\n#     \"\"\"\n#   step ( resume ) =>\n#     result = yield MKTS.mktscript_from_md probe, settings, resume\n#     echo result\n#     T.eq matcher.trim(), result.trim()\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS_XXX.mktscript_from_md (2)\" ] = ( T, done ) ->\n#   settings  = bare: yes\n#   probe     = \"\"\"\n#     <<(multi-column>>\n\n#     <div>B</div>\n\n#     \"\"\"\n#   # warn \"missing `.p` inside `(multi-column)`\"\n#   matcher   = \"\"\"\n#     1 █ (document\n#     1 █ (multi-column\n#     1 █ .p\n#     1 █ (div\n#     1 █ .text 'B'\n#     1 █ )div\n#     1 █ .p\n#     #resend '`multi-column)`'\n#     1 █ )multi-column\n#     )document\n#     # EOF\n#     \"\"\"\n#   step ( resume ) =>\n#     result = yield MKTS.mktscript_from_md probe, settings, resume\n#     echo result\n#     T.eq matcher.trim(), result.trim()\n#     # T.fail \"not yet ready\"\n#     done()\n\n\n#===========================================================================================================\n# MAIN\n#-----------------------------------------------------------------------------------------------------------\n@_main = ( handler ) ->\n  test @, 'timeout': 2500\n\n\n############################################################################################################\nunless module.parent?\n  @_main()\n\n"]}